{4,
{49,0,0,0,0,1,0,1,00000000-0000-0000-0000-000000000000,1,
{1,0},1,0,1,1,1,0,1,0,
{5,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",52dbb775-1631-4fd5-8c55-1615b5881dac,"ПередЗакрытием",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",ca21cd18-35b2-4281-b5c8-016ecc8da8ac,"ПриЗакрытии",1,0,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,0,1,3ccc650e-f631-4cae-8e33-3eaac610b5f9,0,1,52dbb775-1631-4fd5-8c55-1615b5881dac,0,1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1,ca21cd18-35b2-4281-b5c8-016ecc8da8ac,0,1},
{0},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},10,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{63,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ПодменюЗагрузитьФичи",
{1,21,
{"ru","Загрузить"},
{"en","Load features"},
{"am","ተጨማሪ ገፅታዎች"},
{"az","Yüklə фичи"},
{"bg","Изтегли фичи"},
{"et","Alla laadida фичи"},
{"fr","Télécharger fonctionnalités"},
{"ka","ჩამოწერე თვისებები"},
{"de","Herunterladen Fichi"},
{"hu","Letöltés funkciók"},
{"it","Caricare caratteristiche"},
{"lv","Lejupielādēt фичи"},
{"lt","Atsisiųsti фичи"},
{"mn","Татаж онцлог"},
{"pl","Pobierz cechy"},
{"ro","Descărcați фичи"},
{"sl","Prenos funkcije"},
{"es","Descargar slave"},
{"sv","Ladda ner funktioner"},
{"tr","İndir özellikler"},
{"vi","Tải tính năng"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,1,
{0,785362cb-3756-48ed-87d2-292ded17054a},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1249,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"ГруппаКнопокЗагрузитьФичи",
{1,2,
{"ru","Кнопок загрузить фичи"},
{"en","Upload buttons features"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{64,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаЗагрузитьФичиИзКаталога",
{1,21,
{"ru","Загрузить файлы из каталога"},
{"en","Load features files from directory"},
{"am","ጋር ፋይሎች ከአንድ የማውጫ"},
{"az","Faylları yüklə kataloq"},
{"bg","Качване на файлове от директория"},
{"et","Lae failid kataloogist"},
{"fr","Télécharger des fichiers à partir du répertoire"},
{"ka","რომ გადმოწეროთ ფაილები დირექტორია"},
{"de","Laden Sie die Dateien aus dem Verzeichnis"},
{"hu","A fájlok letöltése a könyvtár"},
{"it","Scaricare i file dalla directory"},
{"lv","Lejupielādēt failus no kataloga"},
{"lt","Parsisiųsti failus iš katalogo"},
{"mn","Татаж авах файл сан"},
{"pl","Pobierz pliki z katalogu"},
{"ro","Descărca fișierele din directorul"},
{"sl","Če želite prenesti datoteke iz imenika"},
{"es","Descargar los archivos desde el directorio"},
{"sv","För att ladda ner filer från en katalog"},
{"tr","Upload dizinindeki dosyaları"},
{"vi","Tải tệp từ thư mục"}
},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1254,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗагрузитьФичиИзКаталогаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{65,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаЗагрузитьОднуФичу",
{1,21,
{"ru","Загрузить один файл"},
{"en","Load one feature file"},
{"am","ላይ አንድ ፋይል"},
{"az","Yüklemek üçün bir fayl"},
{"bg","Качване на един файл"},
{"et","Alla laadida ühe faili"},
{"fr","Télécharger un seul fichier"},
{"ka","ჩამოტვირთვა ერთი ფაილი"},
{"de","Herunterladen einer Datei"},
{"hu","Letöltés egyetlen fájl"},
{"it","Caricare un file"},
{"lv","Lejupielādēt failu"},
{"lt","Įkelti vieną failą"},
{"mn","Нэг файл татаж авах"},
{"pl","Pobierz jeden plik"},
{"ro","Încărcați un fișier"},
{"sl","Prenos eno datoteko"},
{"es","Subir un archivo"},
{"sv","Ladda ner enstaka fil"},
{"tr","Bir dosya yükleyin"},
{"vi","Tải một tệp"}
},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1255,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗагрузитьОднуФичуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1253,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокЗагрузитьФичиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1251,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"ГруппаКнопокНедавноЗагруженныеФичи",
{1,2,
{"ru","Кнопок недавно загруженные фичи"},
{"en","Buttons newly loaded features"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},0,1,0,1,
{11,
{1256,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокНедавноЗагруженныеФичиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1252,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПодменюЗагрузитьФичиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{60,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"Перезагрузить",
{1,21,
{"ru","Перезагрузить"},
{"en","Reload scenario"},
{"am","መገለጫዎ ይታያል"},
{"az","Yeniden ssenarilər"},
{"bg","Презареждане на сценарии"},
{"et","Uuesti skriptide"},
{"fr","Redémarrer le scénario"},
{"ka","გადატვირთვა სცენარი"},
{"de","Neustart des Skripts"},
{"hu","Indítsa újra forgatókönyvek"},
{"it","Riavviare scenari"},
{"lv","Restartēt scenāriji"},
{"lt","Iš naujo paleisti scenarijų"},
{"mn","Рестарт хувилбарууд"},
{"pl","Ponownie uruchomić skrypty"},
{"ro","Reporniți scenarii"},
{"sl","Znova zaženite scenarijev"},
{"es","Reiniciar el escenario"},
{"sv","Starta scenarier"},
{"tr","Yeniden senaryolar"},
{"vi","Khởi động lại kịch bản"}
},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1257,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПерезагрузитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{61,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ВыполнитьСценарии",
{1,21,
{"ru","Выполнить сценарии"},
{"en","Run scenario"},
{"am","ቅድሚያ የሚሰጡዋቸውን"},
{"az","İcra ssenarilər"},
{"bg","Изпълнение на скриптове"},
{"et","Käivita stsenaarium"},
{"fr","Exécuter les scripts"},
{"ka","აწარმოებს სკრიპტები"},
{"de","Ausführen von Skripts"},
{"hu","A scriptek futtatását"},
{"it","Eseguire gli script"},
{"lv","Izpildīt skriptus"},
{"lt","Vykdyti scenarijus"},
{"mn","Ажиллуулах скриптүүд"},
{"pl","Uruchom skrypty"},
{"ro","Executa script-uri"},
{"sl","Dovolite zaganjanje skriptov"},
{"es","Ejecutar secuencias de comandos"},
{"sv","Att köra skript"},
{"tr","Çalıştır komut"},
{"vi","Thực hiện kịch bản"}
},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1258,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыполнитьСценарииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2031,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ОстановитьСценарии",
{1,0},1,
{71,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2032,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОстановитьСценарииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{151,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаПерезагрузитьИВыполнить",
{1,21,
{"ru","Перезагрузить и выполнить"},
{"en","Reload and run"},
{"am","ጋር ይገናኛሉ እና ሆኗል"},
{"az","Yenidən başladın və yerinə yetirmək"},
{"bg","Рестартирате и изпълнение на"},
{"et","Restart ja käivita"},
{"fr","Redémarrer et exécuter"},
{"ka","გადატვირთეთ და შეასრულოს"},
{"de","Neu starten und ausführen"},
{"hu","Újraindul végre"},
{"it","Riavviare ed eseguire"},
{"lv","Pārlādēt un izpildīt"},
{"lt","Paleisti ir vykdyti"},
{"mn","Дахин ачаалах болон гүйцэтгэх"},
{"pl","Ponownie uruchomić i wykonać"},
{"ro","Pentru a reîncărca și de a efectua"},
{"sl","Za ponovni zagon in izvajanje"},
{"es","Reiniciar y ejecutar"},
{"sv","Att starta och köra"},
{"tr","Yeniden yükle ve çalıştır"},
{"vi","Khởi động lại và thực hiện"}
},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1259,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаПерезагрузитьИВыполнитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1586,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ГруппаВидимостьКолонок",
{1,21,
{"ru","Колонки"},
{"en","Columns"},
{"am","."},
{"az","Natiqlər"},
{"bg","Колона"},
{"et","Kõlarid"},
{"fr","La colonne"},
{"ka","მშობლიურ"},
{"de","Spalte"},
{"hu","Hangszórók"},
{"it","Colonna"},
{"lv","Skaļruņi"},
{"lt","Kolonėlės"},
{"mn","Чанга яригч"},
{"pl","Kolumny"},
{"ro","Coloana"},
{"sl","Zvočniki"},
{"es","La columna"},
{"sv","Högtalare"},
{"tr","Sütun"},
{"vi","Cột"}
},
{1,2,
{"ru","Показать/скрыть колонки"},
{"en","Show/hide columns"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,1,
{0,52b637e5-f95f-4c70-9a72-2a4b5a9df449},"",-1,-1,1,0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},6,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1594,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПоказатьСкрытьВсеКолонки",
{1,21,
{"ru","Все колонки"},
{"en","All columns"},
{"am","ሁሉንም ቀለሞች"},
{"az","Bütün natiqlər"},
{"bg","Всички колони"},
{"et","Kõik kõlarid"},
{"fr","Toutes les colonnes"},
{"ka","ყველა სვეტები"},
{"de","Alle Spalten"},
{"hu","Az összes oszlop"},
{"it","Tutti gli altoparlanti"},
{"lv","Visi skaļruņi"},
{"lt","Visi garsiakalbiai"},
{"mn","Бүх багана"},
{"pl","Wszystkie głośniki"},
{"ro","Toate coloanele"},
{"sl","Vse stolpce"},
{"es","Todos los altavoces"},
{"sv","Alla kolumner"},
{"tr","Tüm sütun"},
{"vi","Tất cả các cột"}
},1,
{58,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{-10},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1595,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСкрытьВсеКолонкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1584,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПоказатьСкрытьПутьКФайлу",
{1,21,
{"ru","Адрес в файле"},
{"en","Addres in feature"},
{"am","አድራሻ ነው ፋይል"},
{"az","Ünvan fayl"},
{"bg","Адрес на файла"},
{"et","Aadress failis"},
{"fr","Adresse dans le fichier"},
{"ka","მისამართი ფაილი"},
{"de","Adresse in der Datei"},
{"hu","Cím a fájl"},
{"it","L'indirizzo nel file"},
{"lv","Adrese failā"},
{"lt","Adresas faile"},
{"mn","Хаяг файл"},
{"pl","Adres w pliku"},
{"ro","Adresa într-un fișier"},
{"sl","Naslov v datoteko"},
{"es","La dirección en el archivo"},
{"sv","Adress i filen"},
{"tr","Adres dosyada"},
{"vi","Địa chỉ trong tệp"}
},1,
{54,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{-10},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1585,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСкрытьПутьКФайлуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1588,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПоказатьСкрытьСнипет",
{1,21,
{"ru","Снипет"},
{"en","Snippet"},
{"am","ስም snippet"},
{"az","Adı снипета"},
{"bg","Името на снипета"},
{"et","Nimi снипета"},
{"fr","Le nom de снипета"},
{"ka","სახელი snippet"},
{"de","Name Schnipsel"},
{"hu","A neve a kódrészletet"},
{"it","Nome снипета"},
{"lv","Nosaukums снипета"},
{"lt","Vardas снипета"},
{"mn","Нэр snippet"},
{"pl","Nazwa снипета"},
{"ro","Numele снипета"},
{"sl","Ime delček"},
{"es","El nombre de снипета"},
{"sv","Namn utdrag"},
{"tr","Adı снипета"},
{"vi","Tên đoạn trích"}
},1,
{55,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{-10},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1589,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСкрытьСнипетРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1590,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПоказатьСкрытьАдресСнипета",
{1,21,
{"ru","Обработка"},
{"en","DataProcessor"},
{"am","ጥሪ"},
{"az","Emal zəng etmək"},
{"bg","Обработка на повикване"},
{"et","Töötlemine kõne"},
{"fr","Le traitement de l'appel"},
{"ka","დარეკეთ"},
{"de","Die Verarbeitung des Anrufs"},
{"hu","A hívás"},
{"it","Trattamento di chiamata"},
{"lv","Apstrāde zvanu"},
{"lt","Apdorojimo skambinti"},
{"mn","Дуудлага"},
{"pl","Obsługa połączeń"},
{"ro","Prelucrarea de apel"},
{"sl","Klic"},
{"es","El tratamiento de la llamada"},
{"sv","Samtalet"},
{"tr","İşleme arama"},
{"vi","Bộ xử lý gọi ra"}
},1,
{56,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{-10},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1591,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСкрытьАдресСнипетаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1592,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПоказатьСкрытьСтрокаРеальнойПроцедуры",
{1,21,
{"ru","Имя процедуры"},
{"en","Procedure name"},
{"am","መስመር ግምገማ ይታያል"},
{"az","String real prosedurları"},
{"bg","Ред на реална процедура"},
{"et","Rida tegelik protseduuri"},
{"fr","La ligne réelle de la procédure"},
{"ka","ხაზი არის რეალური პროცედურა"},
{"de","Zeile realen Verfahren"},
{"hu","A sort egy igazi eljárás"},
{"it","Stringa reale procedura"},
{"lv","Virkne reālu procedūras"},
{"lt","Eilutė nekilnojamojo procedūros"},
{"mn","Мөр нь бодит журам"},
{"pl","Wiersz prawdziwym procedury"},
{"ro","Linie reală a procedurii de"},
{"sl","Linija je pravi postopek"},
{"es","La línea real de los procedimientos de"},
{"sv","Line är ett riktigt förfarande"},
{"tr","Satır gerçek prosedürleri"},
{"vi","Dòng thủ tục thực tế"}
},1,
{57,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{-10},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1593,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСкрытьСтрокаРеальнойПроцедурыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1614,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПоказатьСкрытьИДСтроки",
{1,21,
{"ru","№"},
{"en","Line number"},
{"am"," ቅድሚያ."},
{"az","№ satır"},
{"bg","№ ред"},
{"et"," nr rea"},
{"fr"," n ° de ligne"},
{"ka"," line არა."},
{"de","№ Zeile"},
{"hu"," a vonal Nem."},
{"it","№ riga"},
{"lv","№ rindas"},
{"lt"," nr. eilutės"},
{"mn"," мөр Үгүй."},
{"pl"," nr wiersza"},
{"ro"," nr. de comandă"},
{"sl"," linija Št."},
{"es"," número de línea de"},
{"sv"," linje Nr."},
{"tr"," no. satır"},
{"vi","Dòng số"}
},1,
{60,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{-10},"",-1,-1,1,0,""},0,
{"Pattern"},"",2,0,1,
{11,
{1615,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСкрытьИДСтрокиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1587,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаВидимостьКолонокРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1910,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПоказатьСкрытьТаблоПеременных",
{1,0},1,
{76,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,0,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1911,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСкрытьТаблоПеременныхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,1,1},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2035,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ФормаГруппаНастройки",
{1,2,
{"ru","Группа настройки"},
{"en","Group settings"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,1,
{0,894cf65b-4109-4533-a1d7-c87b1fcc80a3},"",-1,-1,1,0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2037,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаСохранитьНастройки",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2038,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаСохранитьНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2039,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаВыгрузитьНастройкиВФайл",
{1,0},1,
{78,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2040,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВыгрузитьНастройкиВФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2041,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаЗагрузитьНастройкиИзФайла",
{1,0},1,
{79,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2042,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗагрузитьНастройкиИзФайлаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{2036,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаГруппаНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2151,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаОткрытьОпределениеШага",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,0,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2152,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаОткрытьОпределениеШагаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,1,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1552,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаСправка",
{1,0},1,
{0,39bb0fe9-771d-4dd5-8a6e-2d16984523af},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1553,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаСправкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,0,0,3,3,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{302,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаФункциональности",
{1,2,
{"ru","Функциональности"},
{"en","Functionality"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{45,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ФункциональностьЗакладки",
{1,2,
{"ru","Функциональность закладки"},
{"en","The functionality of the bookmark"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,4,
{0,1,0},2,0},7,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{44,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаЗапускТестов",
{1,21,
{"ru","Запуск сценариев"},
{"en","Run scenarios"},
{"am","ቅድሚያ የሚሰጡዋቸውን"},
{"az","Start ssenarilərin"},
{"bg","Стартирането на скриптове"},
{"et","Skript"},
{"fr","Les scripts de démarrage"},
{"ka","Run სკრიპტები"},
{"de","Skripts ausführen"},
{"hu","Scriptek futtatását"},
{"it","L'esecuzione di script"},
{"lv","Palaist skriptu"},
{"lt","Pradėti scenarijus"},
{"mn","Ажиллуулах скриптүүд"},
{"pl","Uruchamianie skryptów"},
{"ro","Script-uri de pornire"},
{"sl","Zaganjanje skriptov"},
{"es","Ejecutar secuencias de comandos"},
{"sv","Köra skript"},
{"tr","Komut dosyası çalıştırma"},
{"vi","Khởi động kịch bản"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{54,
{66,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,0,"ДеревоТестов",0,0,1,
{1,2,
{"ru","Дерево тестов"},
{"en","Test tree"}
},
{1,0},
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,2,0,1,1,
{1,
{17,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAAJAAAAAQCAYAAAD59vZgAAAIFklEQVRoge2Za2wU
1xXHf2dZ43gNZncNfiwm4WEexjzC2lSmcYQSHiFVEsVhjRJRdZOtFFQpVYVS5KmE
IiqgjJOo+VLaYqUWJoWomOBWalXUuKKqQGyFvYIUitrwTCMeNviFH3jX3tsPM+td
G9s7hm0itfylq71z5px7z9z9zz3n3BEe4f8aSqmHsrd/3Q78r6FBxAFsBlYBS0zx
BeAEcLBCqd7R7I7tkmHXovgW4APSgCNK+F3i/Q3bH27dRSS5kgXYAbr/fVx1XviE
/v4z8Qmiitxlb+GY85rlmcrKylxA2zgqzcFgsHS8McRbVwW8Ccw1RZeBGhXyV1v1
A0DTNDtQDDiA87qud03E/kHQIOIFdhS53SvynU7XVIfDAXC3r2/xjfb2Zy+0tb3Y
ILKzQqnTSYZa8Fgme0qfYp7NhjSdZHlPNxeB8+MZibeuCSgBqlXIryXIK4HD5mWj
CvnXPfBDjoANoOOLP+BZvY056z5izvr9zFm/n9nrahjsPs2NE+99ZVuMSR6dOHkw
+7p5zxI0TVsJXAQagQPALU3Ttj20fwGxS0BWjHavQeSZvMnpH68qKChf6PEUZDkc
mQIiIFkZGZkLPZ6Cbz7+eHn+5PRfN4isH2k/SeLNBr6ipXgynWRmZOEoWorHBr5E
Hcs+e+tKgH3mZXMqyQMmgfpufomyp6FsrShpM5q9h/SCNQidnNv/vLpw8CX1+WGf
+vywT33xqaY6L36SjFibgsGgjGjj7j5AjCTNgFuF/GL2AarEW+dK9kCapk3CeNtO
AzN1XZ8PfBeo1jTt+8nsx4IExA5sZQkfSGA4ARpEsoAfL/Dk5+U6nWP6mJOV5Vow
05MPbG8QyRlDrShzKq/mzF6WjWsXuHYz/QmvO8tJJbBsQj576+ZirIULYx1TSh4w
CRTp64XBPqKR1mEN1UnuslUUv/IWi17cQuGGNyjc8AZZ+QVcO/fXlDpikiO2+M0q
5G83+zXmrwtje06GJ4AuYIeu62EAXdcPAVeAF8b1ISCzJCC2UeSTgbcp51W+wZOs
YrcE5OUElW8XZ2fPc0+ZkpXMOVdm5tTlM3IKMfKbOGxGU4JvwRLycfll89Z/sHnr
eXC9LvOLyVOCL6aXDOZ6foqxgzcD6xLWNGWwAwwMDKAGuoje+/I+hUjkLrGtJrZz
9kdv0tPyz5Q6okL+dvHWXcZ44DfFW9eOkfvUECdRUui6fhlYnijTNG0hUAB8NJad
BGQp8DZwWgLyC1WroqZ8MrCNp9nIChLDV54ExGbqlee7XE6rPuY6nS5aW9YAPx9x
qzhrGptmzCQbyUhwLoPsfNzTnLzS1clvgZCFaWLkASMnSjl5wCRQdDACAz2ovuuj
KonJIDXEoDtWxj5cVlY2UlYaDAabR1M2UU08XldhhK2YvEaF/JetTJwITdOKgD8D
h3Rd3zGajgRkObAVH2u4wRJOYpeA7MV416t4mgpWsAKFoolmTrFP1aoPE4aYk5me
niE7dsDGjeM7dOAAGe++mw54EsU2GyiFb/5i8hEEEjOEKAgyvxhP6BQ+kaQEGpkv
VgL1SWweCDYAFR2AwQEk3DtqI9IDkZ64bCD83/AFc7cp5f6HrQKazJhuGZqmuYHj
wB8x8qCxsIqnWIKHAkoooZzvAD8AfjREnkEGTPLsHUEegP6oUlEGByfi3kg8meWk
Mjsf91gK7lycThcvASstjNdOfOeuNCuxlMMOMEls2JiEij5mzUqlWdHaFAwGJ8x6
FfI3A5tgqPxci1HWuzCItGUCw70OhIEtuq5Hx9Gr4SQQRbGSUrx48ZDLZCbjZgYR
wpzhM07xgapVh0axv94XDvdP2bnTwc6dSZ26F46EgZuJMrHhKyyK7T6AJBzRxfqC
FC7GEwriwygSxsMmFfI3mlVYCcbapXwXskPsMDCDeA6bDPdS7UdiCQ9GwteoQv56
oF68dWsx4rmVJDoRncBvdF0fGE/JzGN+KQEx9FZSSh4zARLI856qVYfHGOLEzY6O
1YV5eQ4rTt3s6GjDCKscf18AVk5z8rI7N+EPuHeWg/vMd6Xr6JDYmYPL6eKF4+/L
UeBvz/xw1GK4WoX8jbE+RiVWIt66qomepyWDEcKUIood7DMsNbE5USk6yUxAY0J/
qGQ3d6FY6Bovf7oPuq7/Std1y+c/qlZ9yCn2cZomFIp79FkgD8DH527fvtTe03M3
2Rwdvb3dZ1tbLmIe7IkNRPDNK8IztPsATMrmnT1HeWfPUbBnDxtj3iI8IvjurxdH
eSbjJZzQUchEYANwTF9I161/0X7nrqXW3d3D1JyiVPoRC12xmL0WaBNvnSJ+gtqO
8TZZhqZpStO0M8k1E/wwSLSXJpr5O+c5xe4k5KFCqXZg17WWltbxSNTV29tzraWl
FfhJhVItptiVnsFzzukMr+LSZnHpaiuXrrZC2qxht6bNwOmYwnNAnsXHip1Ku4gX
KSmBHWCm93kun/0L3bcuWDLKzFnE3OXPAj9NpS+okH+LWconfsoAI3ZXP0gVBsye
sB+1ar8EJAx0qVr1eys2FUr9qUHke1evXNm+bPr0wvzsbHdGWlo6QF8k0n/jzp22
z27fvgLsrlDqWMxOhM5ImMHeLrod05g6NGDXEQ7+7DVAoGs4f3s76Q73MyCCpdLc
zIXqMaqxSjMlaExiZgkPHYcefUwdjgaRbIyPqWuJl+rXMf6wgxVKDTsDqa8SR24e
5RgHi16L05wBjig4tnrrg61/7GPqw/5/jwj0NaO+StIqq1Xkq543VQT6D7YND2BU
/HIJAAAAAElFTkSuQmCC}
},0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,2,19,
{"S",""},20,
{"B",0},
{5,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоТестовВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ДеревоТестовПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоТестовПередУдалением",8ad48496-8d0b-4f6c-ae48-99d95227884b,"ДеревоТестовПеретаскивание",ab930362-ff94-4dcb-ad16-188805d23e3c,"ДеревоТестовПередНачаломИзменения",1,0,1282f000-23b6-4887-87f4-9e8e79db3d32,0,1,2391e7b8-7235-45d7-ab7e-6ff3dc086396,0,1,2ccfdec5-583d-4eca-8319-e55de492665a,0,1,8ad48496-8d0b-4f6c-ae48-99d95227884b,0,1,ab930362-ff94-4dcb-ad16-188805d23e3c,0,1},
{0},1,
{22,
{67,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1014,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"Основная",
{1,2,
{"ru","Основная"},
{"en","Main"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},6,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1471,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюВыполнитьДанныйСценарийСТекущегоШага",
{1,21,
{"ru","Выполнить с текущего шага"},
{"en","Continue from this step"},
{"am","አንድ የአሁኑ እርምጃ"},
{"az","İcra ilə cari addım"},
{"bg","Изпълни с текущата стъпка"},
{"et","Teha valitud sammu"},
{"fr","Effectuer l'étape en cours"},
{"ka","შეასრულოს მიმდინარე ნაბიჯი"},
{"de","Ausführen des aktuellen Schritts"},
{"hu","Végre az aktuális lépés"},
{"it","Eseguire con il passaggio dell'"},
{"lv","Veikt ar pašreizējo soļi"},
{"lt","Vykdyti aktyvų žingsnio"},
{"mn","Гүйцэтгэх одоогийн алхам"},
{"pl","Uruchom z bieżącego kroku"},
{"ro","Executa curent cu pas"},
{"sl","Za opravljanje tekočih korak"},
{"es","Cumplir con el actual paso"},
{"sv","För att utföra den aktuella steg"},
{"tr","Gerçekleştirmek, cari adım"},
{"vi","Thực hiện từ bước hiện tại"}
},1,
{44,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1472,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюВыполнитьДанныйСценарийСТекущегоШагаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1473,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюВыполнитьДанныйСценарийСТекущегоШагаСПродолжением",
{1,21,
{"ru","Выполнить с текущего шага с продолжением"},
{"en","Continue from this step and run other scenarios"},
{"am","አንድ መገለጫዎ ጋር ይገናኛሉ አዳዲስ ግምገማዎች በይፋ"},
{"az","İcra ilə cari addım ilə davamı"},
{"bg","Изпълни с настоящите стъпки с продължение"},
{"et","Teha valitud sammu jätkamine"},
{"fr","Effectuer l'étape actuelle, avec la suite"},
{"ka","შეასრულოს მიმდინარე ნაბიჯი გაგრძელება"},
{"de","Ausführen mit dem aktuellen Schritt mit der Fortsetzung"},
{"hu","Végre az aktuális lépést folytatása"},
{"it","Eseguire con passo corrente con la continuazione"},
{"lv","Veikt ar pašreizējo soļi ar turpinājumu"},
{"lt","Vykdyti aktyvų žingsniai su tęsinys"},
{"mn","Гүйцэтгэх одоогийн алхам нь үргэлжлэл"},
{"pl","Uruchom z bieżącego kroku z kontynuacją"},
{"ro","Executa cu curent pas cu continuarea"},
{"sl","Za opravljanje tekočih korak s nadaljevanje"},
{"es","Cumplir con la del paso actual, con la continuación de la"},
{"sv","För att utföra det aktuella steget med en fortsättning"},
{"tr","Gerçekleştirmek, cari adım devam"},
{"vi","Thực hiện từ bước hiện tại với sự tiếp nối"}
},1,
{45,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1474,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюВыполнитьДанныйСценарийСТекущегоШагаСПродолжениемРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1016,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюПунктВыполнитьСценарий",
{1,21,
{"ru","Выполнить с начала"},
{"en","Run only selected scenario"},
{"am",".."},
{"az","İcra ilə başladı"},
{"bg","Изпълни от началото на"},
{"et","Run algusest"},
{"fr","Exécuter depuis le début"},
{"ka","დავიწყოთ ისევ თავიდან"},
{"de","Seit Anfang ausführen"},
{"hu","Kezdjük az elején"},
{"it","Eseguire con inizio"},
{"lv","Veikt no sākuma"},
{"lt","Atlikti nuo pradžios"},
{"mn","Эхлэх дахин эхнээс нь"},
{"pl","Wykonać od początku"},
{"ro","Executare de la începutul"},
{"sl","Začeti znova od začetka"},
{"es","Realizar desde el inicio de la"},
{"sv","Börja om från början igen"},
{"tr","Gerçekleştirmek başından"},
{"vi","Bắt đầu lại từ đầu"}
},1,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1264,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюПунктВыполнитьСценарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1562,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюПерезагрузитьИВыполнитьДанныйСценарий",
{1,21,
{"ru","Перезагрузить и выполнить этот сценарий"},
{"en","Reload and run this scenario"},
{"am","አሁን እና ቅድሚያ የሚሰጡዋቸውን ስክሪፕት"},
{"az","Yenidən başladın və yerinə yetirmək üçün bu ssenarini"},
{"bg","Рестартирате и да изпълнят този сценарий"},
{"et","Restart ja käivita see skript"},
{"fr","Redémarrer et d'exécuter ce script"},
{"ka","გადატვირთეთ და გაუშვით ეს სკრიპტი"},
{"de","Neu starten und dieses Skript ausführen"},
{"hu","Újraindítás, majd futtassa ezt a forgatókönyvet"},
{"it","Riavviare ed eseguire questo script"},
{"lv","Pārlādēt un izpildīt šo skriptu"},
{"lt","Paleisti ir vykdyti šį scenarijų"},
{"mn","Дахин ачаалж, ажиллуулж энэ скрипт"},
{"pl","Ponownie uruchomić i uruchomić ten skrypt"},
{"ro","Pentru a reîncărca și de a executa acest script"},
{"sl","Ponovno zagnal in poženite ta skript,"},
{"es","Reiniciar y ejecutar esta secuencia de comandos"},
{"sv","Att starta och köra detta skript"},
{"tr","Yeniden ve bu komut dosyasını çalıştırmak"},
{"vi","Khởi động lại và thực hiện kịch bản này"}
},1,
{51,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1563,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюПерезагрузитьИВыполнитьДанныйСценарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1247,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюПунктВыполнитьФичу",
{1,21,
{"ru","Выполнить сценарии этой фичи"},
{"en","Run scenarios of that feature"},
{"am","ቅድሚያ የሚሰጡዋቸውን ላይ ባህሪያት"},
{"az","İcra ssenarilər bu фичи"},
{"bg","Изпълняват скриптове от тази фичи"},
{"et","Käivita stsenaarium selle фичи"},
{"fr","Exécuter les scripts de fonctionnalités"},
{"ka","Run სკრიპტები თვისებები"},
{"de","Skripts ausführen dieser Funktionen"},
{"hu","Scriptek futtatását a jellemzők"},
{"it","Eseguire gli script di questa feature"},
{"lv","Izpildīt skriptus šo фичи"},
{"lt","Vykdyti scenarijų šiame фичи"},
{"mn","Ажиллуулах скрипт онцлог"},
{"pl","Uruchom skrypty tej cechy"},
{"ro","Executa script-uri de acest фичи"},
{"sl","Zaganjanje skriptov za funkcije"},
{"es","Ejecutar secuencias de comandos de esta slave"},
{"sv","Köra skript för funktioner"},
{"tr","Çalıştır komut bu."},
{"vi","Thực hiện kịch bản tính năng này"}
},1,
{33,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1265,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюПунктВыполнитьФичуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1484,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюВыполнитьОдинШаг",
{1,21,
{"ru","Выполнить шаг"},
{"en","Run one step"},
{"am","አንድ እርምጃ"},
{"az","İcra addım"},
{"bg","Изпълнява стъпка"},
{"et","Täita samm"},
{"fr","Effectuer l'étape"},
{"ka","შეასრულოს ნაბიჯი"},
{"de","Schritt"},
{"hu","Végre lépés"},
{"it","Eseguire il passaggio"},
{"lv","Veikt soli"},
{"lt","Atlikti žingsnis"},
{"mn","Гүйцэтгэх алхам"},
{"pl","Wykonać krok"},
{"ro","Executa pasul"},
{"sl","Za opravljanje korak"},
{"es","Realizar el paso"},
{"sv","För att utföra steg"},
{"tr","Gerçekleştirmek için adım"},
{"vi","Thực hiện bước"}
},1,
{48,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1485,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюВыполнитьОдинШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1263,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОсновнаяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1469,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"ОткрытьФичаФайлВРедакторе",
{1,2,
{"ru","Открыть фича файл в редакторе"},
{"en","Open a feature file in the editor"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1018,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюПунктОткрытьФичаФайл",
{1,21,
{"ru","Открыть .feature файл в редакторе"},
{"en","Open feature file in editor"},
{"am","ክፍት አዳዲስ ግምገማዎች ፋይል ውስጥ አራሚ"},
{"az","Açıq feature faylı redaktoru"},
{"bg","Отвори feature файл в редактора"},
{"et","Avada feature faili editor"},
{"fr","Ouvrir feature fichier dans l'éditeur"},
{"ka","ღია ფუნქცია, ფაილის რედაქტორი"},
{"de","Feature Datei öffnen im Editor"},
{"hu","Nyissa meg a funkció a fájlt a szerkesztő"},
{"it","Aprire feature file nell'editor"},
{"lv","Atvērt feature failu redaktors"},
{"lt","Atidaryti feature failą redaktorius"},
{"mn","Нээх боломж файлыг засварлагч"},
{"pl","Otworzyć feature plik w edytorze"},
{"ro","Deschide feature fișierul într-un editor"},
{"sl","Odprite funkcijo datoteko v urejevalniku"},
{"es","Abrir feature archivo en el editor de"},
{"sv","Öppna funktionen fil i editorn"},
{"tr","Aç feature dosyası düzenleyicisi'nde,"},
{"vi","Mở tệp tính năng trong bộ soạn"}
},1,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1266,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюПунктОткрытьФичаФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1550,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюОткрытьКаталогФичи",
{1,21,
{"ru","Открыть каталог .feature файлов"},
{"en","Open feature path"},
{"am","ክፍት ይገናኛሉ የሚሰጡዋቸውን"},
{"az","Open directory feature"},
{"bg","Отваряне на каталог feature"},
{"et","Ava kataloog feature"},
{"fr","Ouvrir le répertoire feature"},
{"ka","ღია კატალოგი ფუნქცია"},
{"de","Feature-Katalog öffnen"},
{"hu","Nyitva katalógus funkció"},
{"it","Aprire il catalogo feature"},
{"lv","Open directory feature"},
{"lt","Atidaryti katalogą feature"},
{"mn","Нээлттэй каталог онцлог"},
{"pl","Otworzyć katalog feature"},
{"ro","Deschideți directorul feature"},
{"sl","Odprite katalog funkcija"},
{"es","Abrir el directorio de feature"},
{"sv","Öppna katalog-funktion"},
{"tr","Açık dizin özelliği"},
{"vi","Mở thư mục tính năng"}
},1,
{50,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1551,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюОткрытьКаталогФичиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1470,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОткрытьФичаФайлВРедактореРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1020,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"ЧастичноеВыполнениеСценариев",
{1,2,
{"ru","Частичное выполнение сценариев"},
{"en","Partial script execution"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1022,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюВыполнятьСценарийСЭтогоШага",
{1,21,
{"ru","Выполнять сценарий с этого шага с сохранением контекстов"},
{"en","Run scenario from that step whith context save"},
{"am","ቅድሚያ ቅድሚያ የሚሰጡዋቸውን ቅድሚያ, የሚያድን contexts"},
{"az","Yerinə ssenari ilə bu addım saxlanılması ilə kontekstlərdə"},
{"bg","Изпълнява сценарий с тази стъпка, с опазването на контекст"},
{"et","Teha skripti seda sammu säilitades kontekstides"},
{"fr","Exécuter un script à partir de cette étape, avec le maintien des contextes"},
{"ka","To run script ეს ნაბიჯი, გადარჩენის კონტექსტში"},
{"de","Ein Skript mit diesem Schritt mit der Erhaltung der Kontexte"},
{"hu","Hogy fut egy forgatókönyvet, ez a lépés, a megtakarítás kontextusokban"},
{"it","Eseguire lo script con questo passo con la conservazione dei contesti"},
{"lv","Izpildīt skriptu ar šo soli, saglabājot kontekstus"},
{"lt","Atlikti scenarijų su šio žingsnio išlaikant situaciją"},
{"mn","Ажиллуулах скрипт нь энэ алхам, хадгалах нөхцөл"},
{"pl","Wykonać skrypt z tego kroku, z zachowaniem kontekstu"},
{"ro","Executa script-ul cu acest pas, cu menținerea contexte"},
{"sl","Če želite zagnati skript s tem korakom, varčevanje kontekstih"},
{"es","Ejecutar la secuencia de comandos con este paso con la conservación de los contextos de"},
{"sv","För att köra ett skript med detta steg, spara sammanhang"},
{"tr","Gerçekleştirmek için bir komut dosyası ile bu adımı koruyarak bağlamları"},
{"vi","Thực hiện kịch bản từ bước này có lưu ngữ cảnh"}
},1,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1268,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюВыполнятьСценарийСЭтогоШагаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1024,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала",
{1,21,
{"ru","Выполнять сценарии с начала"},
{"en","Run scenario from first step"},
{"am","ቅድሚያ የሚሰጡዋቸውን ከመጀመሪያ"},
{"az","Yerinə ssenari ilə başladı"},
{"bg","Изпълнява скриптове от началото на"},
{"et","Käivitada skripti algusest"},
{"fr","Exécuter des scripts depuis le début"},
{"ka","აწარმოებს სკრიპტები თავიდანვე"},
{"de","Seit Anfang des Skripts"},
{"hu","A scriptek futtatását a kezdetektől"},
{"it","Eseguire lo script con inizio"},
{"lv","Izpildīt skriptu no sākuma"},
{"lt","Atlikti scenarijų nuo pradžios"},
{"mn","Ажиллуулах скриптүүд эхнээс нь"},
{"pl","Wykonywanie skryptów z początku"},
{"ro","Executa script-uri de la începutul"},
{"sl","Dovolite zaganjanje skriptov od začetka"},
{"es","Ejecutar secuencias de comandos de inicio de la"},
{"sv","För att köra skript från början"},
{"tr","Komut ile başladı"},
{"vi","Thực hiện kịch bản từ đầu"}
},1,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1269,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначалаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1267,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЧастичноеВыполнениеСценариевРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1026,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"Свернуть",
{1,2,
{"ru","Свернуть"},
{"en","Collapse"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1028,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюСвернутьДоФич",
{1,21,
{"ru","Свернуть до фич"},
{"en","Switch to features"},
{"am","ማውጣት የሚሰጡዋቸውን"},
{"az","Gəzmək qədər фич"},
{"bg","Свиване до функции"},
{"et","Rulli enne фич"},
{"fr","Réduire en fich"},
{"ka","Roll up ფუნქცია"},
{"de","Rollen bis zu Fitch"},
{"hu","Roll-up funkció"},
{"it","Rotolare fino fich"},
{"lv","Sakļaut līdz pazīmes"},
{"lt","Sutraukti iki фич"},
{"mn","Roll up онцлог"},
{"pl","Zwinąć do funkcjonalności"},
{"ro","Se rostogolească până la caracteristici"},
{"sl","Roll up funkcija"},
{"es","Minimizar a fich"},
{"sv","Roll up funktionen"},
{"tr","Kadar rulo fitch"},
{"vi","Cuộn đến tính năng"}
},1,
{19,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1271,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюСвернутьДоФичРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1030,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюСвернутьДоСценариев",
{1,21,
{"ru","Свернуть до сценариев"},
{"en","Switch to scenarios"},
{"am","ሰብስብ ወደ ይታያል"},
{"az","Gəzmək qədər ssenariləri"},
{"bg","Свиване до скриптове"},
{"et","Rulli enne skriptide"},
{"fr","Réduire les scripts"},
{"ka","დაიშალოს, რომ სცენარი"},
{"de","Rollen-Szenarien"},
{"hu","Összeomlás forgatókönyvei"},
{"it","Rotolare fino script"},
{"lv","Sakļaut līdz skriptu"},
{"lt","Sutraukti iki scenarijus"},
{"mn","Уналт хийх хувилбарууд"},
{"pl","Zwinąć do skryptów"},
{"ro","Se rostogolească până la scripting"},
{"sl","Collapse, da scenarijev"},
{"es","Minimizar a los escenarios"},
{"sv","Kollaps för scenarier"},
{"tr","Rulo senaryolar"},
{"vi","Cuộn đến kịch bản"}
},1,
{20,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1272,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюСвернутьДоСценариевРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1875,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюСвернутьДоШагов",
{1,2,
{"ru","Свернуть до шагов первого уровня"},
{"en","Switch to first level steps"}
},1,
{75,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1876,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюСвернутьДоШаговРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1270,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СвернутьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2027,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"РаботаСОшибками",
{1,2,
{"ru","Работа с ошибками"},
{"en","Work with errors"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2033,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоПерейтиКСтрокеСОшибкой",
{1,0},1,
{72,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2034,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПерейтиКСтрокеСОшибкойРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{2028,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РаботаСОшибкамиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1478,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"Брейпоинты",
{1,2,
{"ru","Брейпоинты"},
{"en","Breakpoint"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1480,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюБрейкпоинт",
{1,21,
{"ru","Брейкпоинт"},
{"en","Breakpoint"},
{"am","ወደ breakpoint"},
{"az","Брейкпоинт"},
{"bg","Брейкпоинт"},
{"et","Брейкпоинт"},
{"fr","Брейкпоинт"},
{"ka","""Breakpoint"},
{"de","Haltepunkt"},
{"hu","A töréspont"},
{"it","Брейкпоинт"},
{"lv","Брейкпоинт"},
{"lt","Брейкпоинт"},
{"mn","Энэ breakpoint"},
{"pl","Брейкпоинт"},
{"ro","Брейкпоинт"},
{"sl","Prekinitvena točka"},
{"es","Брейкпоинт"},
{"sv","Brytpunkten"},
{"tr","Брейкпоинт"},
{"vi","Các điểm dừng"}
},1,
{46,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1481,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюБрейкпоинтРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1482,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДеревоТестовКонтекстноеМенюБрейпоинтУбратьВсе",
{1,21,
{"ru","Убрать все брейкпоинты"},
{"en","Remove all breakpoints"},
{"am","በይፋ breakpoints"},
{"az","Clear bütün брейкпоинты"},
{"bg","Изтрий всички брейкпоинты"},
{"et","Kustuta kõik брейкпоинты"},
{"fr","Supprimer tous les брейкпоинты"},
{"ka","ამოიღონ ყველა breakpoints"},
{"de","Entfernen Sie alle брейкпоинты"},
{"hu","Távolítsa el az összes töréspontok"},
{"it","Rimuovere tutti брейкпоинты"},
{"lv","Notīrīt visu брейкпоинты"},
{"lt","Ištrinti visas брейкпоинты"},
{"mn","Бүх устгах нь breakpoints"},
{"pl","Usunąć wszystkie брейкпоинты"},
{"ro","Pentru a elimina toate брейкпоинты"},
{"sl","Odstranite vse mejne vrednosti"},
{"es","Eliminar todos los брейкпоинты"},
{"sv","Ta bort alla brytpunkter"},
{"tr","Kaldırmak için брейкпоинты"},
{"vi","Loại bỏ tất cả các điểm ngắt"}
},1,
{47,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1483,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюБрейпоинтУбратьВсеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1479,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"БрейпоинтыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,0,0,3,3,0},1,
{22,
{68,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ДеревоТестовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3,0},8,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1475,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ДеревоТестовБрейкпоинт",1,0,
{1,0},
{1,0},
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{31,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,3,0,0,1,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADAElEQVQ4jV2Tz09c
VRzFP99735vODCOU2qaUmUqlTSkSokkNttsaTbREg+HpH0AMISxs3HTTnW7YudCF
uNEdcRKj0Vo2RmKILIwWjYLVCDGkA0Rkfr33Znhz370ukAQ9yUnO4pyzOTnC/xAE
QV8QBDOtKBrPdXWdjetVh5/Zzue7PimXyx+Wy+Wd4345pr2pqak3Z8b63u5/dNDv
vTiMV+gG5+iENfZ/W2f9j41k4/Tjt6anpz8ADIA+Cs/Ozr47MVS6PXbjJV0YHEKy
2cN6pVC5RyhcuMS54nm9df+7FwoDF3Orq6tLgNUAk5OTs8Gl/js3bo4L1kLShiQB
YyA1kBzg2jFKYPjKkNQerF2P8t0bm5ubP0oQBH3B1au/3hw93yO9ZxClQClEFEoE
tMJZh0tTbJoixpDW9rjz+Td7MQx7wHMjJ1o99qCFjkOc0ogIogSnPRBBAJemYDpY
Y7DtiPH+7tMfVxrPe3EYX+szIRL+G1YeaA1aI1qB0jgHWIPqJKRJAlGdkYyhWq0W
vXwhf04Zg/vrIRpwnofyPMTzEd/HiYC1YAwuOUC126S7FbLmAOg95dX3aw5dRDUa
IB6qq4D4PvgZ8DMIDpdaOGiD6eBq+6hmkzSXBVK8nlMnf962mVcGXAyNGnQ6uGwW
8XycVocjpykkCdKKoRWBtcRellZSGfSWlpZ+aj05gDmRIxOHYFJsHCIoRAQHOOfA
GUgtpIa0UODTX7bcyJXLn6mJiYl7cyvrUXS2hLMG1Y7QzTq6sY+q7aHrf+M19tFh
E9WOsc7SPFPih7bbnZub+1LNz8/HLl987aOvlq0aHSM1CRKHSLOGNKqHDBtIHJGm
Bv3UNd67u2R/39l9A6hpgLW173dW/tx9UK+HLz97/WlxtT2cKKTTAQc2m8VmPNzl
UW4t3LVbuZ63FhcX3wfsf84UBMGLwMLtZ57IlUpFTuayAOxFMdsPK7xz7+v2ZuJe
/3Z5eeHoTMcLjtCl/PyrpeJjM6IkA1DZ3vmi06reB1aAynHzP3kyaRowOEdcAAAA
AElFTkSuQmCC}
},0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0},1,0,0,1,0,0,100},
{0,1,0},1,
{22,
{1476,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовБрейкпоинтКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1477,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовБрейкпоинтРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{69,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовИмя",1,0,
{1,21,
{"ru","Наименование"},
{"en","Description"},
{"am","ስም"},
{"az","Adı"},
{"bg","Наименование"},
{"et","Nimetus"},
{"fr","Le nom de"},
{"ka","დასახელება"},
{"de","Bezeichnung"},
{"hu","Név"},
{"it","Nome"},
{"lv","Nosaukums"},
{"lt","Pavadinimas"},
{"mn","Нэр"},
{"pl","Nazwa"},
{"ro","Denumirea"},
{"sl","Ime"},
{"es","Nombre de la"},
{"sv","Namn"},
{"tr","İsim"},
{"vi","Tên gọi"}
},
{1,0},
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{1,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},5,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{70,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1283,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовИмяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{73,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовПолныйПуть",1,0,
{1,21,
{"ru","Адрес в файле"},
{"en","Path"},
{"am","አድራሻ ነው ፋይል"},
{"az","Ünvan fayl"},
{"bg","Адрес на файла"},
{"et","Aadress failis"},
{"fr","Adresse dans le fichier"},
{"ka","მისამართი ფაილი"},
{"de","Adresse in der Datei"},
{"hu","Cím a fájl"},
{"it","L'indirizzo nel file"},
{"lv","Adrese failā"},
{"lt","Adresas faile"},
{"mn","Хаяг файл"},
{"pl","Adres w pliku"},
{"ro","Adresa într-un fișier"},
{"sl","Naslov v datoteko"},
{"es","La dirección en el archivo"},
{"sv","Adress i filen"},
{"tr","Adres dosyada"},
{"vi","Địa chỉ trong tệp"}
},
{1,0},
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{2,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{74,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовПолныйПутьКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1284,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовПолныйПутьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{497,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовСтатус",1,0,
{1,21,
{"ru","Статус"},
{"en","Status"},
{"am","ሁኔታ"},
{"az","Statusu"},
{"bg","Статус"},
{"et","Staatus"},
{"fr","Le statut de"},
{"ka","სტატუსი"},
{"de","Status"},
{"hu","Állapot"},
{"it","Lo stato"},
{"lv","Statuss"},
{"lt","Statusas"},
{"mn","Байдал"},
{"pl","Status"},
{"ro","Statutul de"},
{"sl","Stanje"},
{"es","El estado de"},
{"sv","Status"},
{"tr","Durumu"},
{"vi","Trạng thái"}
},
{1,0},
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{18,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{498,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовСтатусКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1285,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовСтатусРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{75,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовСнипет",1,0,
{1,21,
{"ru","Снипет"},
{"en","Snippet"},
{"am","Snippet"},
{"az","Снипет"},
{"bg","Снипет"},
{"et","Снипет"},
{"fr","Extrait google"},
{"ka","Snippet"},
{"de","Снипет"},
{"hu","Részlet"},
{"it","Fare in modo che i"},
{"lv","Снипет"},
{"lt","Снипет"},
{"mn","Snippet"},
{"pl","Снипет"},
{"ro","Снипет"},
{"sl","Delček kode"},
{"es","Снипет"},
{"sv","Utdrag"},
{"tr","Снипет"},
{"vi","Đoạn trích"}
},
{1,0},
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{3,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{76,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовСнипетКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1286,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовСнипетРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{77,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовАдресСнипета",1,0,
{1,21,
{"ru","Обработка"},
{"en","Steps definition"},
{"am","ጥሪ"},
{"az","Emal zəng etmək"},
{"bg","Обработка на повикване"},
{"et","Töötlemine kõne"},
{"fr","Le traitement de l'appel"},
{"ka","დარეკეთ"},
{"de","Die Verarbeitung des Anrufs"},
{"hu","A hívás"},
{"it","Trattamento di chiamata"},
{"lv","Apstrāde zvanu"},
{"lt","Apdorojimo skambinti"},
{"mn","Дуудлага"},
{"pl","Obsługa połączeń"},
{"ro","Prelucrarea de apel"},
{"sl","Klic"},
{"es","El tratamiento de la llamada"},
{"sv","Samtalet"},
{"tr","İşleme arama"},
{"vi","Bộ xử lý gọi ra"}
},
{1,0},
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{4,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{78,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовАдресСнипетаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1287,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовАдресСнипетаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{79,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовСтрокаРеальнойПроцедуры",1,0,
{1,21,
{"ru","Имя процедуры"},
{"en","Step definition procedure"},
{"am","ሕብረቁምፊ ይታያል ቅድሚያ የሚሰጡዋቸውን"},
{"az","String prosedur zəng addım"},
{"bg","Ред процедури повикване стъпки"},
{"et","Rida protseduure kõne sammu"},
{"fr","La chaîne de la procédure d'appel d'étape"},
{"ka","String პროცედურა დარეკეთ ნაბიჯი"},
{"de","Zeile procedure Call Schritt"},
{"hu","String eljárás hívás lépés"},
{"it","La stringa di chiamata di routine passo"},
{"lv","Rinda procedūras zvanu soļi"},
{"lt","Eilutė procedūros skambinti žingsnio"},
{"mn","Мөр журам дуудлага алхам"},
{"pl","Wiersz procedury połączenia kroku"},
{"ro","Linia de apeluri de proceduri pas"},
{"sl","Niz procedure call korak"},
{"es","La cadena de llamada a procedimiento paso"},
{"sv","String procedure call steg"},
{"tr","Satır yordam çağrısı adım"},
{"vi","Dòng thủ tục gọi ra bước"}
},
{1,0},
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{5,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{80,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовСтрокаРеальнойПроцедурыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1288,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовСтрокаРеальнойПроцедурыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1611,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовИДСтроки",1,0,
{1,21,
{"ru","№"},
{"en","Line number"},
{"am"," ቅድሚያ."},
{"az","№ satır"},
{"bg","№ ред"},
{"et"," nr rea"},
{"fr"," n ° de ligne"},
{"ka"," line არა."},
{"de","№ Zeile"},
{"hu"," a vonal Nem."},
{"it","№ riga"},
{"lv","№ rindas"},
{"lt"," nr. eilutės"},
{"mn"," мөр Үгүй."},
{"pl"," nr wiersza"},
{"ro"," nr. de comandă"},
{"sl"," linija Št."},
{"es"," número de línea de"},
{"sv"," linje Nr."},
{"tr"," no. satır"},
{"vi","Dòng số"}
},
{1,0},
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{19,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},3,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1612,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовИДСтрокиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1613,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовИДСтрокиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{11,
{1273,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},1,1,1,1,
{5,
{1274,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{1275,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1276,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{66,0},0,3,3,0},1,
{5,
{1277,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоТестовСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{1278,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1279,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{66,1},0,3,3,0},1,
{5,
{1280,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{1281,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1282,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{66,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0},1,0,1,
{11,
{1262,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЗапускТестовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{46,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаГенерацияEPF",
{1,21,
{"ru","Генератор EPF"},
{"en","Snippet generation"},
{"am","ቅድሚያ አርትዕ"},
{"az","Generator EPF"},
{"bg","Генератор на EPF"},
{"et","Generaator EPF"},
{"fr","Le générateur de l'EPF"},
{"ka","გენერატორი ევრაზიის თანამშრომლობის ფონდი"},
{"de","Generator EPF"},
{"hu","Generátor EPF"},
{"it","Generatore di EPF"},
{"lv","Ģenerators EPF"},
{"lt","Generatorius EPF"},
{"mn","Генератор EPF"},
{"pl","Generator EPF"},
{"ro","Generator de EPF"},
{"sl","Generator EPF"},
{"es","El generador de la EPF"},
{"sv","Generator EPF"},
{"tr","Jeneratör EPF"},
{"vi","Bộ khởi tạo EPF"}
},
{1,2,
{"ru","Группа генерация"},
{"en","Group generation"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1620,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"Группа7",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,3,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{47,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"кнСоздатьШаблоныОбработок",
{1,21,
{"ru","Создать и обновить шаблоны обработок"},
{"en","Create and update step definitons"},
{"am","መፍጠር እና ማዘመን ይታያል ነው የሚሰጡዋቸውን"},
{"az","Yaratmaq və təkmilləşdirmək şablonlar müalicə"},
{"bg","Създаване и актуализиране на шаблони на лечение"},
{"et","Luua ja uuendada malle ravi"},
{"fr","Créer et mettre à jour les modèles de traitements"},
{"ka","შექმნა და განახლება თარგები მკურნალობა"},
{"de","Erstellen und aktualisieren von Vorlagen Behandlungen"},
{"hu","Létre frissítés sablonok kezelések"},
{"it","Creare e aggiornare i modelli di trattamenti"},
{"lv","Veidot un uzlabot ārstēšanas veidnes"},
{"lt","Sukurti ir atnaujinti šablonai обработок"},
{"mn","Бий болгох, шинэчлэх, templates of эмчилгээ"},
{"pl","Utworzyć i zaktualizować szablony traktowania"},
{"ro","Pentru a crea și actualiza modele de tratamente"},
{"sl","Ustvarjanje in posodabljanje predloge zdravljenja"},
{"es","Crear y actualizar las plantillas de los tratamientos"},
{"sv","Skapa och uppdatera mallar av behandlingar"},
{"tr","Oluşturmak ve güncellemek şablonları tedaviler"},
{"vi","Tạo và cập nhật khuôn mẫu bộ xử lý"}
},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1290,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"кнСоздатьШаблоныОбработокРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1616,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"КомандаСохранитьНастройки1",
{1,21,
{"ru","Сохранить настройки"},
{"en","Save settings"},
{"am","አዳዲስ ግምገማዎች."},
{"az","Parametrləri saxlamaq"},
{"bg","Запазване на настройките"},
{"et","Salvesta seaded"},
{"fr","Enregistrer les paramètres"},
{"ka","შენახვა პარამეტრები"},
{"de","Speichern Sie die Einstellungen"},
{"hu","A beállítások mentéséhez"},
{"it","Salvare le impostazioni"},
{"lv","Saglabāt iestatījumus"},
{"lt","Išsaugoti nustatymus"},
{"mn","Хадгалах тохиргоо"},
{"pl","Zapisz ustawienia"},
{"ro","Salvați setările"},
{"sl","Shranite nastavitve"},
{"es","Guardar la configuración"},
{"sv","Spara inställningar"},
{"tr","Ayarları kaydet"},
{"vi","Lưu cài đặt"}
},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1617,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаСохранитьНастройки1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},1,0,1,
{11,
{1621,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа7РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{50,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ГенерироватьУФ1",4,0,
{1,21,
{"ru","Генерировать управляемую форму"},
{"en","Generate managed form"},
{"am","ጋር አንድ ይታያል ቅጽ"},
{"az","Yaratmaq idarə forması"},
{"bg","Генерира управляема форма"},
{"et","Luua kontrollitav vormi"},
{"fr","Générer géré le formulaire"},
{"ka","გენერირება მართვადი ფორმა"},
{"de","Erzeugen überschaubare Form"},
{"hu","Hogy létrehoz egy kezelhető formában"},
{"it","Generare gestita modulo"},
{"lv","Radīt pārvalda formu"},
{"lt","Kurti valdoma formą"},
{"mn","Бий болгох нь зохицуулж хэлбэр"},
{"pl","Generowanie zarządzaniu formularz"},
{"ro","Genera gestionate de forma"},
{"sl","Za ustvarjanje obvladljivi obliki"},
{"es","Generar administrado por la forma de"},
{"sv","För att skapa en hanterbar form"},
{"tr","Oluşturmak için yönetilen formu"},
{"vi","Khởi tạo biểu mẫu được điều khiển"}
},
{1,0},
{2,
{1},
{0,4a613abb-7ca7-4311-a631-b5e3612d6162}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{51,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ГенерироватьУФ1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1291,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГенерироватьУФ1РасширеннаяПодсказка",
{1,2,
{"ru","Флаг определяет какую форму генерировать при создании epf. При работе с конфигруациями, написанных на управляемых формах флаг должен быть установлен."},
{"en","The checkbox defines, which form will be generated on epf creating. Turn this checkbox on when working with the managed application."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Флаг определяет какую форму генерировать при создании epf. При работе с конфигруациями, написанных на управляемых формах флаг должен быть установлен."},
{"en","The checkbox defines, which form will be generated on epf creating. Turn this checkbox on when working with the managed application."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{361,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СоздаватьОбластиПриГенерацииКода",4,0,
{1,21,
{"ru","Создавать области при генерации кода"},
{"en","Create regions with generated step code"},
{"am","ለመፍጠር ክልል ሆኗል መጠቀም ኮድ"},
{"az","Yaratmaq sahəsində zamanı yaradan kodu"},
{"bg","Създаване на областта при генериране на кода"},
{"et","Luua valdkonnas kui koodi"},
{"fr","Créer le domaine de la génération de code"},
{"ka","შექმნათ რეგიონში მომტანი კოდი"},
{"de","Sie können Bereiche bei der Codegenerierung"},
{"hu","Hozzon létre egy-egy régióban, amelynél a kódot"},
{"it","Creare area durante la generazione del codice"},
{"lv","Izveidot jomā ģenerējot kodu"},
{"lt","Kurti srityje, kai kodo generavimas"},
{"mn","Бий болгох, бүс нутаг бий болгох код"},
{"pl","Tworzenie obszarów podczas generowania kodu"},
{"ro","Pentru a crea zona de la generare de cod"},
{"sl","Če želite ustvariti regija za pridobivanje kodo"},
{"es","Crear el área de la generación de código"},
{"sv","Att skapa en region för att generera kod"},
{"tr","Alanları oluşturun oluştururken kod"},
{"vi","Tạo vùng khi khởi tạo mã"}
},
{1,0},
{2,
{1},
{0,8a283e0f-869c-4fcd-900f-3dd5d76d573b}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{362,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоздаватьОбластиПриГенерацииКодаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1292,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоздаватьОбластиПриГенерацииКодаРасширеннаяПодсказка",
{1,2,
{"ru","Флаг определяет, что в коде создаваемой epf будут созданы области"},
{"en","The checkbox defines if created epf will have regions"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Флаг определяет, что в коде создаваемой epf будут созданы области"},
{"en","The checkbox defines if created epf will have regions"}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{153,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур",4,0,
{1,21,
{"ru","Устарело. Создавать закомментированный код для переиспользуемых процедур"},
{"en","Add comments for reused procedure"},
{"am","ለመፍጠር ስለጀመሩ ቅድሚያ የሚሰጡዋቸውን ኮድ reusable አካሄዶች"},
{"az","Yaratmaq закомментированный üçün kodu переиспользуемых prosedurlarının"},
{"bg","Създаване на коментарите код за переиспользуемых процедури"},
{"et","Luua закомментированный kood переиспользуемых kord"},
{"fr","Créer commentée code pour переиспользуемых procédures"},
{"ka","შექმნათ კომენტარი out კოდი reusable პროცედურები"},
{"de","Erstellen закомментированный Code für переиспользуемых Verfahren"},
{"hu","Hozzon létre kommentálva kód újrahasználható eljárások"},
{"it","Creare il codice commentato per переиспользуемых procedure"},
{"lv","Izveidot komentēja kods, lai переиспользуемых procedūras"},
{"lt","Kurti закомментированный kodas переиспользуемых procedūras"},
{"mn","Бий болгох тайлбар гарч кодыг дахин ашиглах журам"},
{"pl","Tworzenie komentarz kod do переиспользуемых procedur"},
{"ro","Pentru a crea закомментированный cod pentru переиспользуемых proceduri"},
{"sl","Ustvariti je komentiral ven kodo za večkratno uporabo postopkov"},
{"es","Crear que comentarios código de procedimientos переиспользуемых"},
{"sv","För att skapa bortkommenterad kod för återanvändbara förfaranden"},
{"tr","Oluşturmak yorumlu kodu переиспользуемых prosedürleri"},
{"vi","Tạo mã bình luận để tái sử dụng thủ tục"}
},
{1,0},
{2,
{1},
{0,260d4c6d-de55-4638-b304-609476bac030}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,3,
{-22}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{154,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедурКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1293,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедурРасширеннаяПодсказка",
{1,2,
{"ru","Устаревшее. Флаг устанавливать не надо."},
{"en","Obsolete. No need to use this checkbox."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Устаревшее. Флаг устанавливать не надо."},
{"en","Obsolete. No need to use this checkbox."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{478,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ВыводитьТекстМодуляВместоПерегенерацииEPF",4,0,
{1,21,
{"ru","Выводить текст получаемого модуля, вместо перегенерации EPF"},
{"en","Put text module. instead regenerate and update step defintion"},
{"am","አሁን ከጽሑፉ ነው የሚሰጡዋቸውን ቅድሚያ የሚሰጡዋቸውን regeneration አርትዕ"},
{"az","Çıxış mətnini əldə modulu, əvəzinə перегенерации EPF"},
{"bg","Извежда текст на получените модул, вместо перегенерации EPF"},
{"et","Kuva tekst toodetud moodul, selle asemel, et перегенерации EPF"},
{"fr","Afficher le texte reçu du module, au lieu de перегенерации EPF"},
{"ka","ჩვენება ტექსტი შედეგად მოდული, ნაცვლად რეგენერაციას ევრაზიის თანამშრომლობის ფონდი"},
{"de","Stellt den Text des resultierenden Moduls, anstelle der EPF перегенерации"},
{"hu","A szöveg megjelenjen a kapott modul, ahelyett, hogy a regeneráció EPF"},
{"it","Visualizzare il testo ricevuto il modulo, invece перегенерации EPF"},
{"lv","Izvadīt tekstu, kas iegūti moduli, nevis перегенерации EPF"},
{"lt","Išvesti tekstą gavo modulio, vietoj перегенерации EPF"},
{"mn","Дэлгэц нь текст үр дүнд модуль, оронд нь нөхөн сэргээх EPF"},
{"pl","Wyświetlanie tekstu odbieranego modułu, zamiast перегенерации EPF"},
{"ro","Textul de ieșire generate de modul, în loc de re-generarea de EPF"},
{"sl","Prikaže besedilo, ki izhajajo modul, namesto regeneracijo EPF"},
{"es","Mostrar el texto resultante del módulo, en lugar de перегенерации EPF"},
{"sv","Visa texten i den resulterande modul, i stället för förnyelse EPF"},
{"tr","Çıkış metni elde edilen modül yerine перегенерации EPF"},
{"vi","Hiển thị nội dung của mô-đun đã nhận, thay thế việc khởi tạo lại EPF"}
},
{1,0},
{2,
{1},
{0,c41105ef-8c8d-4cfe-aa90-50c875ba808e}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{479,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыводитьТекстМодуляВместоПерегенерацииEPFКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1294,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыводитьТекстМодуляВместоПерегенерацииEPFРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то вместо пересоздания epf (если она уже была) сгенерированный код будет выведен пользователю на экран."},
{"en","If the checkbox is on, generated code will be displayed instead of re-creating the epf (if it existed)."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то вместо пересоздания epf (если она уже была) сгенерированный код будет выведен пользователю на экран."},
{"en","If the checkbox is on, generated code will be displayed instead of re-creating the epf (if it existed)."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1557,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"Группа1",
{1,2,
{"ru","Группа1"},
{"en","Group1"}
},
{1,0},0,1,0,28,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1559,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ВерсияПлатформыДляГенерацииEPF",1,0,
{1,21,
{"ru","Версия платформы для генерации EPF (8.3.10 или выше)"},
{"en","Platform version. 8.3.10 or greater."},
{"am","የሚሰጡዋቸውን የሚሰጡዋቸውን ሆኗል አርትዕ (8.3.10 ወይም ከዚያ በላይ)"},
{"az","Version platforma yaratmaq üçün EPF (8.3.10 və ya daha yüksək)"},
{"bg","Версия на платформа за генериране на EPF (8.3.10 или по-висока)"},
{"et","Platvormi versiooni, et luua EPF (8.3.10 või kõrgem)"},
{"fr","La version de la plate-forme pour générer des EPF (8.3.10 ou supérieur)"},
{"ka","ვერსია პლატფორმა მომტანი ევრაზიის თანამშრომლობის ფონდის (8.3.10 ან უფრო მაღალი)"},
{"de","Version der Plattform für die Erzeugung von EPF (8.3.10 oder höher)"},
{"hu","Verzió platform létrehozására EPF (8.3.10 vagy magasabb)"},
{"it","Versione della piattaforma per la generazione di EPF (8.3.10 o superiore)"},
{"lv","Versija platformu, lai radītu EPF (8.3.10 vai augstāk)"},
{"lt","Platformos versiją generuoti EPF (8.3.10 arba aukščiau)"},
{"mn","Хувилбар платформ бий болгох EPF (8.3.10 буюу түүнээс дээш)"},
{"pl","Wersja platformy do generowania EPF (8.3.10 lub wyżej)"},
{"ro","Versiune a platformei pentru a genera EPF (8.3.10 sau mai sus)"},
{"sl","Različica platforme za ustvarjanje EPF (8.3.10 ali višje)"},
{"es","La versión de la plataforma para la generación de EPF (8.3.10 o superior)"},
{"sv","Version av plattform för att generera EPF (8.3.10 eller högre)"},
{"tr","Versiyon platformu oluşturmak için, EPF (8.3.10 veya daha yüksek)"},
{"vi","Phiên bản nền tảng để khởi tạo (8.3.10 hoặc cao)"}
},
{1,21,
{"ru","Для генерации epf на ПК надо установить платформу 8.3.10 или выше. При этом разработку можно вести на ЛЮБОЙ версии платформы, указанной в справке."},
{"en","Platform version for epf generation."},
{"am","አንድ አርትዕ አሁን ግምገማዎች ላይ ያለው ስምዎ ስለጀመሩ ቅድሚያ የሚሰጡዋቸውን 8.3.10. ስለሆነም እድገት የሚቻል በማንኛውም የሚሰጡዋቸውን የሚሰጡዋቸውን ተጠቃሚ የምስክር ወረቀት."},
{"az","Yaratmaq üçün epf PC lazımdır yüklemek üçün platforma 8.3.10 və ya daha yüksək. Bu zaman inkişaf aparmaq olar, HƏR hansı bir versiyası platforma göstərilən yardım."},
{"bg","За генериране на epf на КОМПЮТЪРА трябва да инсталирате платформа 8.3.10 или по-висока. При това развитие може да се извършва на ВСЯКА версия на платформата, посочена в помощ."},
{"et","Luua epf ARVUTISSE tuleb paigaldada platvorm 8.3.10 või kõrgem. Seejuures arendada saab pidada IGA platvormi versiooni, mis on määratud spikrist."},
{"fr","Pour la génération des epf sur le PC, il faut installer la plate-forme 8.3.10 ou plus. Ce développement peut mener à une version de la plate-forme indiquée dans l'aide."},
{"ka","გენერირება ევრაზიის თანამშრომლობის ფონდის PC, თქვენ უნდა დააყენოთ პლატფორმა 8.3.10 ან უფრო მაღალი. ამგვარად განვითარების შესაძლებელია ნებისმიერი ვერსია პლატფორმა მითითებული მოწმობა."},
{"de","Für die Erzeugung der epf auf dem PC installieren muss Plattform 8.3.10 oder höher. Bei dieser Entwicklung kann man auf eine BELIEBIGE Version der Plattform, die in der Hilfe."},
{"hu","Generál az epf a SZÁMÍTÓGÉPEN telepíteni kell a platform 8.3.10 vagy magasabb. Így a fejlesztés lehetséges változata a platform meghatározott igazolás."},
{"it","Per la generazione di epf sul PC devi installare la piattaforma 8.3.10 o superiore. In questo sviluppo si può guidare su QUALSIASI versione della piattaforma indicata nella guida."},
{"lv","Lai radītu epf uz DATORA nepieciešams uzstādīt platformu 8.3.10 vai augstāka. Šajā izstrādi var veikt uz JEBKURU versiju platforma, kas ir norādīta palīdzībā."},
{"lt","Generuoti epf į KOMPIUTERĮ reikia įdiegti platforma 8.3.10 arba didesnis. Tokiu atveju kurti galima vesti BET kurios versijos platformos, nurodytą žinyne."},
{"mn","Бий болгох epf КОМПЬЮТЕР дээр та суулгах хэрэгтэй платформ 8.3.10 буюу түүнээс дээш. Тиймээс хөгжүүлэх боломжтой ЯМАР хувилбар платформ-д заасан гэрчилгээ."},
{"pl","Do generowania epf na PC trzeba zainstalować platformę 8.3.10 lub wyżej. Przy tym rozwój można prowadzić w DOWOLNEJ wersji platformy, określonej w pomocy."},
{"ro","Pentru a genera epf pe PC, trebuie să instalați platforma 8.3.10 sau mai mare. La această dezvoltare poate conduce pe ORICE versiune de platformă, specificate în ajutor."},
{"sl","Za ustvarjanje epf na RAČUNALNIK, morate namestiti platformo 8.3.10 ali višje. Tako razvoj je mogoče v kateri KOLI različici platforme navedeni v potrdilu."},
{"es","Para la generación de la epf en el pc es necesario instalar la plataforma de 8.3.10 o superior. Cuando este desarrollo se puede llevar en CUALQUIER versión de la plataforma especificada en la ayuda."},
{"sv","För att generera epf på en PC måste du installera plattformen 8.3.10 eller högre. Därmed utvecklingen är möjligt att i NÅGON version av den plattform som anges i certifikatet."},
{"tr","Oluşturmak için epf PC üzerinde yüklemek için gerekli bir platform 8.3.10 veya daha yüksek. Bu durumda, geliştirme, sürücü, HERHANGİ bir framework sürümü, belirtilen yardım."},
{"vi","Phiên bản nền tảng cho thế hệ epf."}
},
{2,
{1},
{0,88549973-9731-4050-9481-35934b3b28b3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ВерсияПлатформыДляГенерацииEPFНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1560,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВерсияПлатформыДляГенерацииEPFКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1561,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВерсияПлатформыДляГенерацииEPFРасширеннаяПодсказка",
{1,2,
{"ru","Т.к. для создания epf используется пакетный запуск конфигуратора, то
1. Должна быть установлен толстый клиент.
2. В поле нужно указать ту версию платформы, которая будет использоваться для создания и пересоздания epf."},
{"en","As batch start of Designer is used to create the epf, then
1. Thick client must be installed.
2. The field must contain platform version to be used for initial creating and re-creating of the epf."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Т.к. для создания epf используется пакетный запуск конфигуратора, то
1. Должна быть установлен толстый клиент.
2. В поле нужно указать ту версию платформы, которая будет использоваться для создания и пересоздания epf."},
{"en","As batch start of Designer is used to create the epf, then
1. Thick client must be installed.
2. The field must contain platform version to be used for initial creating and re-creating of the epf."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1558,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1289,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаГенерацияEPFРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{83,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаКаталогиБиблиотек",
{1,21,
{"ru","Библиотеки"},
{"en","Libraries"},
{"am","ላይብረሪ"},
{"az","Kitabxana"},
{"bg","Библиотека"},
{"et","Raamatukogu"},
{"fr","La bibliothèque"},
{"ka","ბიბლიოთეკა"},
{"de","Bibliothek"},
{"hu","Könyvtár"},
{"it","Libreria"},
{"lv","Bibliotēkas"},
{"lt","Bibliotekos"},
{"mn","Номын сан"},
{"pl","Biblioteki"},
{"ro","Biblioteca"},
{"sl","Knjižnica"},
{"es","La biblioteca"},
{"sv","Bibliotek"},
{"tr","Kitaplığı"},
{"vi","Thư viện"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{306,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"БиблиотекиПовторногоКода",
{1,2,
{"ru","Библиотеки повторного кода"},
{"en","Library re-code"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{54,
{84,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"КаталогиБиблиотек",0,0,1,
{1,2,
{"ru","Каталоги библиотек"},
{"en","Library catalogs"}
},
{1,0},
{2,
{1},
{0,8f038ea1-e2cb-4d4e-85e5-de99851c076e}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,2,2,0,0,0,0,0,1,2,0,0,1,1,
{1,
{3}
},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,0,
{1,de65638d-a806-4a76-bc10-f62bbc86e0e7,"КаталогиБиблиотекПослеУдаления",1,0,de65638d-a806-4a76-bc10-f62bbc86e0e7,0,1},
{0},1,
{22,
{85,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогиБиблиотекКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{22,
{86,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"КаталогиБиблиотекКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1689,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"КаталогиБиблиотекДобавить",
{1,21,
{"ru","Добавить"},
{"en","Add"},
{"am","ያክሉ"},
{"az","Əlavə etmək"},
{"bg","Добави"},
{"et","Lisa"},
{"fr","Ajouter"},
{"ka","დამატება"},
{"de","Hinzufügen"},
{"hu","Add"},
{"it","Aggiungere"},
{"lv","Pievienot"},
{"lt","Pridėti"},
{"mn","Нэмэх"},
{"pl","Dodać"},
{"ro","Adauga"},
{"sl","Dodaj"},
{"es","Agregar"},
{"sv","Lägg till"},
{"tr","Ekle"},
{"vi","Thêm"}
},1,
{64,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1690,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиБиблиотекДобавитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1618,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"КомандаСохранитьНастройки2",
{1,21,
{"ru","Сохранить настройки"},
{"en","Save settings"},
{"am","አዳዲስ ግምገማዎች."},
{"az","Parametrləri saxlamaq"},
{"bg","Запазване на настройките"},
{"et","Salvesta seaded"},
{"fr","Enregistrer les paramètres"},
{"ka","შენახვა პარამეტრები"},
{"de","Speichern Sie die Einstellungen"},
{"hu","A beállítások mentéséhez"},
{"it","Salvare le impostazioni"},
{"lv","Saglabāt iestatījumus"},
{"lt","Išsaugoti nustatymus"},
{"mn","Хадгалах тохиргоо"},
{"pl","Zapisz ustawienia"},
{"ro","Salvați setările"},
{"sl","Shranite nastavitve"},
{"es","Guardar la configuración"},
{"sv","Spara inställningar"},
{"tr","Ayarları kaydet"},
{"vi","Lưu cài đặt"}
},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1619,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаСохранитьНастройки2РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,0,0,3,3,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{87,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогиБиблиотекЗначение",1,0,
{1,0},
{1,2,
{"ru","Каталоги библиотек"},
{"en","Library catalogs"}
},
{3,
{1},
{0,8f038ea1-e2cb-4d4e-85e5-de99851c076e},
{0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогиБиблиотекЗначениеНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{88,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогиБиблиотекЗначениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1307,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиБиблиотекЗначениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{11,
{1297,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиБиблиотекРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},1,1,1,1,
{5,
{1298,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиБиблиотекСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{1299,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогиБиблиотекСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1300,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиБиблиотекСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{84,0},0,3,3,0},1,
{5,
{1301,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"КаталогиБиблиотекСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{1302,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогиБиблиотекСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1303,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиБиблиотекСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{84,1},0,3,3,0},1,
{5,
{1304,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогиБиблиотекУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{1305,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогиБиблиотекУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1306,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиБиблиотекУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{84,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0},1,0,1,
{11,
{1296,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"БиблиотекиПовторногоКодаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1295,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКаталогиБиблиотекРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{292,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаДополнительно",
{1,21,
{"ru","Работа с UI"},
{"en","Record UI behavior"},
{"am","አብረው."},
{"az","İş UI"},
{"bg","Работа с UI"},
{"et","Töö UI"},
{"fr","Le travail avec l'UI"},
{"ka","მუშაობა UI"},
{"de","Die Arbeit mit UI"},
{"hu","A munka az UI"},
{"it","Lavoro con UI"},
{"lv","Darbs ar UI"},
{"lt","Darbas su UI"},
{"mn","Хамтран ажиллах UI"},
{"pl","Praca z UI"},
{"ro","Lucrul cu UI"},
{"sl","Delo z UI"},
{"es","El trabajo con la interfaz de usuario"},
{"sv","Arbetet med UI"},
{"tr","İş ile UI"},
{"vi","Làm việc với các UI"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{333,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РаботасUI",
{1,2,
{"ru","Работас UI"},
{"en","Collaborations with UI"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0}
},7,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{298,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ОткрытьПодключитьTestClient",
{1,21,
{"ru","Подключить TestClient"},
{"en","Enable test client session"},
{"am","ጋር TestClient"},
{"az","Əlaqə TestClient"},
{"bg","Свържете TestClient"},
{"et","Ühendada TestClient"},
{"fr","Connecter TestClient"},
{"ka","დაკავშირება TestClient"},
{"de","Verbinden Von Testclient"},
{"hu","Csatlakoztassa TestClient"},
{"it","Collegare TestClient"},
{"lv","Pievienot TestClient"},
{"lt","Prijungti TestClient"},
{"mn","To Connect TestClient"},
{"pl","Podłączyć TestClient"},
{"ro","Conectați TestClient"},
{"sl","Za Povezavo TestClient"},
{"es","Conectar TestClient"},
{"sv","För Att Ansluta TestClient"},
{"tr","Bağlamak TestClient"},
{"vi","Kết Nối TestClient"}
},1,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABSUlEQVQ4ja3Tv0rb
URjG8Y/BgBKpS3VwzFIvwF6AS7KoS8BdF10Eu2qKWAt18c/gVvAGtBQUh+QahC4d
HNTBMTgErYiKxOH3Bo5pEAVf+PEcznmeL+f9nXN6oFQq6VK92MQdVvGv01Cv1/V2
CX4MXcYccnjAT1zjMjXnOsIVnOIG/bF+hxE0cRaeroAK9jBYq9Vuo4Ue9KGBW3wI
T6UTMITdCKyUy2WxixxaKMT4a3h2MZwCFoJ+hG8xl8djePIYwHcchndRbBOmQjeS
ltYj3MTvaAO2MIkJLLUBo6HHCeAC8/6vtudT2sJbqhV6nwJOQsdeAfgcep4CDkK/
vALQ9hylgB1cyX5O9YVwNTxX2E4BDczK+luTHdW47PwLMT6ItVZ4G3j2Fn5hWnZJ
JuLrrGvMhFe6g3bto4gf+Ct7RDf4I7tExTT8LvUEn59GoUD3IT0AAAAASUVORK5C
YII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1310,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОткрытьПодключитьTestClientРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{294,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"кнНачатьЗаписьДействийПользователя",
{1,21,
{"ru","Начать запись поведения"},
{"en","Record user behavior"},
{"am","አዳዲስ ግምገማዎች ቀረጻ ባህሪ"},
{"az","Yazmağa başlamaq davranış"},
{"bg","Започнете запис на поведение"},
{"et","Alustada käitumine rekord"},
{"fr","Commencer l'enregistrement de conduite"},
{"ka","ჩაწერის დაწყება ქცევა"},
{"de","Starten Sie die Aufnahme des Verhaltens"},
{"hu","Indítsa el a felvételt viselkedés"},
{"it","Avviare la registrazione del comportamento"},
{"lv","Sākt rīcību ierakstu"},
{"lt","Pradėti įrašymą, elgesio"},
{"mn","Бичиж эхлэх зан"},
{"pl","Rozpocząć nagrywanie zachowania"},
{"ro","Începe înregistrarea comportamentului"},
{"sl","Začetek snemanja vedenje"},
{"es","Iniciar la grabación de la conducta"},
{"sv","Starta inspelningen beteende"},
{"tr","Kaydı başlatmak davranış"},
{"vi","Bắt đầu ghi hành vi"}
},1,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAs0lEQVQ4ja2TQQrC
MBBFX7vprivtxeo1BM+g4IEEryGlblx5Bi0uShf9bpIapUlp6sCHQOa/DJMZ+Efo
WyvBUVALWqNKsDd3Q+4YoBQ8BPLoaXJGAaWgD5itegtxAWtDnzK7lRQAqWFsgXxG
23Jg51ZQzXjdqgZIDKAFshkVAHQJZOl0nh8Anx7cIgB3F3CKAJyHk6CI/UYLWDxI
VhtBEzA3oVH+XaaroBO8BBfBwbtMS+IN3uHa9Ykc1LsAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1311,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"кнНачатьЗаписьДействийПользователяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1579,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"кнПродолжитьЗаписьДействийПользователя",
{1,0},1,
{53,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAd0lEQVQ4ja3Suw2A
MAxF0QsCpqKDNdgFFmIBPgWBvShQUBRZkR14lZt7KsPHFe81DwswApcFKIO7B05g
AdocIIScFpIAE5QCYmiVIA3g10mQBYihDWhzAL8aaKqM0PH8yw5gAQ5g8qGfBhBD
DZAMU4AqlABT+NtuBBkbO+XacXEAAAAASUVORK5CYII=}
},0,""},0,
{"Pattern"},"",2,0,1,
{11,
{1580,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"кнПродолжитьЗаписьДействийПользователяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1577,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"кнПриостановитьЗаписьДействийПользователя",
{1,0},1,
{52,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAANElEQVQ4jWNgoBAw
wlnrYv+jy/0PXARhrI9jYGBgQJUPWszIwMDAwESpC0YNGDVg1AAqAQAJtQccGa+y
UwAAAABJRU5ErkJggg==}
},0,""},0,
{"Pattern"},"",2,0,1,
{11,
{1578,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"кнПриостановитьЗаписьДействийПользователяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{296,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"кнЗавершитьЗаписьДействийПользователя",
{1,21,
{"ru","Закончить запись поведения"},
{"en","Stop record of user behavior"},
{"am","ለመጨረስ ቀረጻ ነው ባህሪ"},
{"az","Son giriş davranış"},
{"bg","Пълен запис на поведение"},
{"et","Lõpetada käitumine rekord"},
{"fr","Terminer l'enregistrement de conduite"},
{"ka","დასრულება ჩაწერა ქცევა"},
{"de","Beenden Sie die Aufzeichnung des Verhaltens"},
{"hu","Befejezni a felvétel a viselkedés"},
{"it","Terminare la registrazione del comportamento"},
{"lv","Pabeigt rīcību ierakstu"},
{"lt","Baigti filmuoti elgesio"},
{"mn","Дуусгах бичлэг зан"},
{"pl","Zakończyć nagrywanie zachowania"},
{"ro","Pentru a termina înregistrarea comportamentului"},
{"sl","Če želite končati snemanje vedenja"},
{"es","Terminar la grabación de la conducta"},
{"sv","För att avsluta inspelningen av beteende"},
{"tr","Kaydı bitirmek davranış"},
{"vi","Dừng ghi hành vi người sử dụng"}
},1,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAKElEQVQ4jWNgoBAw
MjAwMKhU7f9PjuY7bY6MTJS6YNSAUQNGDaASAAADsAQcRzbfswAAAABJRU5ErkJg
gg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1312,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"кнЗавершитьЗаписьДействийПользователяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{347,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ГруппаКоманднаяПанель",
{1,21,
{"ru","Форма"},
{"en","Form"},
{"am","ቅጽ"},
{"az","Forması"},
{"bg","Форма"},
{"et","Vorm"},
{"fr","La forme"},
{"ka","ფორმა"},
{"de","Form"},
{"hu","Formában"},
{"it","La forma"},
{"lv","Forma"},
{"lt","Forma"},
{"mn","Маягт"},
{"pl","Kształt"},
{"ro","Forma"},
{"sl","Obrazec"},
{"es","La forma de"},
{"sv","Form"},
{"tr","Formu"},
{"vi","Biểu mẫu"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},5,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2256,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ЗадатьРазмерОкнаКлиентаТестирования",
{1,0},0,
{87,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2257,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗадатьРазмерОкнаКлиентаТестированияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{351,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"ГруппаПодменюСостояниеTestClient",
{1,21,
{"ru","Состояние формы"},
{"en","Form state"},
{"am","የግዛት ዘመን ቅጽ"},
{"az","Dövlət formaları"},
{"bg","Състоянието на форми"},
{"et","Seisukord vormi"},
{"fr","L'état de forme"},
{"ka","სახელმწიფოს ფორმა"},
{"de","Zustand Form"},
{"hu","Állam a forma"},
{"it","Lo stato di forma"},
{"lv","Valsts formas"},
{"lt","Valstybės formos"},
{"mn","Төрийн хэлбэр"},
{"pl","Stan formy"},
{"ro","Starea de forma"},
{"sl","Stanje obliki"},
{"es","El estado de forma de"},
{"sv","Staten i form"},
{"tr","Durumu form"},
{"vi","Trạng thái biểu mẫu"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{349,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ЗапомнитьСостояниеФормыTestClient",
{1,21,
{"ru","Запомнить состояние формы TestClient"},
{"en","Remember form state from test client"},
{"am","አስታውሱ የግዛት ዘመን ቅጽ TestClient"},
{"az","Yadda vəziyyəti formaları TestClient"},
{"bg","Запомни състояние на формата TestClient"},
{"et","Meeles olek vorm TestClient"},
{"fr","Mémoriser l'état de forme de TestClient"},
{"ka","მახსოვს, სახელმწიფოს ფორმა TestClient"},
{"de","Merken Sie sich den Zustand der Form von Testclient"},
{"hu","Ne feledje, hogy az állam a formában TestClient"},
{"it","Memorizzare lo stato di forma TestClient"},
{"lv","Atcerēties stāvoklis formas TestClient"},
{"lt","Prisiminti būseną formos TestClient"},
{"mn","Санаж төрийн хэлбэрээр TestClient"},
{"pl","Zapamiętaj kształt TestClient"},
{"ro","De retinut starea de formă TestClient"},
{"sl","Ne pozabite, stanje obliki TestClient"},
{"es","Recordar el estado de forma de TestClient"},
{"sv","Kom ihåg att staten i form TestClient"},
{"tr","Durumunu hatırla form TestClient"},
{"vi","Ghi nhớ trạng thái biểu mẫu TestClient"}
},1,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1315,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗапомнитьСостояниеФормыTestClientРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{353,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ЗабытьСостояниеФормыTestClient",
{1,21,
{"ru","Забыть состояние формы TestClient"},
{"en","Purge form state for test client"},
{"am","መርሳት የግዛት ዘመን ቅጽ TestClient"},
{"az","Unutmaq vəziyyəti formaları TestClient"},
{"bg","Забрави за състоянието на форми TestClient"},
{"et","Unustada olek vorm TestClient"},
{"fr","Oublier l'état de forme de TestClient"},
{"ka","დაგვავიწყდეს, სახელმწიფოს ფორმა TestClient"},
{"de","Vergessen Sie den Zustand der Form von Testclient"},
{"hu","Felejtsd el, hogy az állam a formában TestClient"},
{"it","Dimenticare lo stato di forma TestClient"},
{"lv","Aizmirst stāvoklis formas TestClient"},
{"lt","Užmiršti valstybės formos TestClient"},
{"mn","Мартаж төрийн хэлбэрээр TestClient"},
{"pl","Zapomnieć stan formy TestClient"},
{"ro","Uita starea forme TestClient"},
{"sl","Pozabite stanje obliki TestClient"},
{"es","Olvidar el estado de forma de TestClient"},
{"sv","Glöm staten i form TestClient"},
{"tr","Unutmak durum, form TestClient"},
{"vi","Quên tình trạng của các hình thức TestClient"}
},1,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1316,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗабытьСостояниеФормыTestClientРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1314,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаПодменюСостояниеTestClientРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1715,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"ГруппаИсследовательФормы",
{1,21,
{"ru","Исследователь формы"},
{"en","Form explorer123"},
{"am","ወደ researcher ነው ቅጽ"},
{"az","Tədqiqatçı formaları"},
{"bg","Изследовател форма"},
{"et","Teadlane vormi"},
{"fr","Le chercheur de la forme"},
{"ka","მკვლევარი არის ფორმა"},
{"de","Forscher Formen"},
{"hu","A kutató a forma"},
{"it","Ricercatore di forma"},
{"lv","Pētnieks formas"},
{"lt","Mokslininkė formos"},
{"mn","Тус судлаач нь хэлбэр"},
{"pl","Badacz formy"},
{"ro","Cercetător forme"},
{"sl","Raziskovalec je obrazca"},
{"es","El investigador del formulario"},
{"sv","Forskaren är den form"},
{"tr","Araştırmacı formu"},
{"vi","Các nhà nghiên cứu biểu mẫu"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1713,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ИсследовательФормы",
{1,0},1,
{65,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1714,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИсследовательФормыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1716,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаИсследовательФормыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{357,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПолучитьИзмененияФормыGherkin",
{1,21,
{"ru","Получить состояние всей формы"},
{"en","Get the state of the whole form"},
{"am","በቀዳሚ ግምገማዎች ላይ ያለው ስምዎ ስለጀመሩ ቅጽ"},
{"az","Almaq üçün dövlət bütün formaları"},
{"bg","Получаване на състоянието на цялата форма"},
{"et","Saada seisund kogu vormi"},
{"fr","Obtenir l'état de l'ensemble de la forme"},
{"ka","უნდა მიიღოთ მთელი ფორმა"},
{"de","Erhalten Sie den Zustand der gesamten Form"},
{"hu","A teljes űrlap"},
{"it","Ottenere lo stato di forma intera"},
{"lv","Saņemt stāvokli visā veidlapas"},
{"lt","Gauti būsena visos formos"},
{"mn","Авах бүх хэлбэр"},
{"pl","Zobacz stan całej formy"},
{"ro","Pentru a obține starea de întregul formular"},
{"sl","Da bi dobili celoten obrazec"},
{"es","Obtener el estado de todo el formulario"},
{"sv","För att få hela formen"},
{"tr","Bir devlet olsun tüm formu"},
{"vi","Nhận trạng thái tất cả biểu mẫu"}
},1,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1318,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПолучитьИзмененияФормыGherkinРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1764,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПолучитьСостояниеТекущегоЭлементаФормы",
{1,0},1,
{69,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1765,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПолучитьСостояниеТекущегоЭлементаФормыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1313,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКоманднаяПанельРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2066,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ОткрытьФормуГенератораСценариев",
{1,2,
{"ru","Дымовые тесты"},
{"en","Script generator"}
},1,
{81,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2067,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОткрытьФормуГенератораСценариевРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1309,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РаботасUIРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{308,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"АвтоматизированноеСозданиеСценариев",
{1,2,
{"ru","Автоматизированное создание сценариев"},
{"en","Automated scripting"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{310,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"РезультатГенерации",
{1,2,
{"ru","Результат генерации"},
{"en","The result of generation"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,1,
{0,1,0},2,0},5,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{312,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СценарийПоведения",
{1,21,
{"ru","Сценарий поведения"},
{"en","Feature template"},
{"am","ወደ ባህሪ"},
{"az","Ssenari davranış"},
{"bg","Сценарий на поведение"},
{"et","Stsenaarium käitumist"},
{"fr","Le script de comportement"},
{"ka","ქცევა"},
{"de","Szenario Verhalten"},
{"hu","A viselkedés"},
{"it","Lo scenario di comportamento"},
{"lv","Uzvedības scenāriju"},
{"lt","Scenarijus elgesio"},
{"mn","Зан"},
{"pl","Scenariusz postępowania"},
{"ro","Scenariu de comportament"},
{"sl","Vedenje"},
{"es","La secuencia de comandos de la conducta"},
{"sv","Beteendet"},
{"tr","Senaryo davranış"},
{"vi","Kịch bản hành vi"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1245,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"Группа4",
{1,0},
{1,0},0,1,0,0,0,0,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},4,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1241,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ПодготовитьСценарийКВыполнению",
{1,21,
{"ru","Подготовить сценарий к выполнению"},
{"en","Prepare scenario for run"},
{"am","ደረጃ ስክሪፕት በአፈጻጸም ደረጃ አልተሰጠውም"},
{"az","Hazırlamaq üçün script yerinə yetirilməsinə"},
{"bg","Подготви сценарий за изпълнение"},
{"et","Valmistada skripti täitmist"},
{"fr","Préparer un script à exécuter"},
{"ka","მომზადება სკრიპტის შესრულების"},
{"de","Bereiten Sie ein Skript zur Ausführung"},
{"hu","Készítsen szkript végrehajtása"},
{"it","Preparare uno script per l'esecuzione di"},
{"lv","Lai sagatavotu skriptu izpildei"},
{"lt","Parengti scenarijų įgyvendinti"},
{"mn","Бэлтгэх бичиг гүйцэтгэл"},
{"pl","Przygotować skrypt do wykonania"},
{"ro","Pentru a pregăti un scenariu la executarea"},
{"sl","Pripravimo skript za izvajanje"},
{"es","Preparar una secuencia de comandos a la aplicación de"},
{"sv","Förbereder manuset för utförande"},
{"tr","Hazırlamak için bir komut dosyası yürütme"},
{"vi","Chuẩn bị kịch bản chờ thực hiện"}
},1,
{32,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1324,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПодготовитьСценарийКВыполнениюРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1467,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ДобавитьИзвестныйШаг",
{1,21,
{"ru","Добавить известный шаг"},
{"en","Known steps"},
{"am","ያክሉ የታወቀ ደረጃ"},
{"az","Əlavə tanınan addım"},
{"bg","Добави известен стъпка"},
{"et","Lisa tuntud samm"},
{"fr","Ajouter le célèbre étape"},
{"ka","რჩეულებში ცნობილია ნაბიჯი"},
{"de","Hinzufügen der berühmte Schritt"},
{"hu","Adjunk hozzá egy ismert lépés"},
{"it","Aggiungere il famoso passo"},
{"lv","Pievienot zināms solis"},
{"lt","Pridėti žinomas žingsnis"},
{"mn","Нэмэх нь мэдэгдэж алхам"},
{"pl","Dodaj znany krok"},
{"ro","Adauga cunoscut pas"},
{"sl","Dodajanje znan korak"},
{"es","Agregar el famoso paso"},
{"sv","Lägg till en känd steg"},
{"tr","Eklemek ünlü adım"},
{"vi","Thêm một bước nhất định"}
},1,
{43,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1468,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДобавитьИзвестныйШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1766,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ПеревестиТекстНаДругойЯзык",
{1,0},1,
{70,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1767,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПеревестиТекстНаДругойЯзыкРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2228,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаДействияСКодом",
{1,2,
{"ru","Группа действия с кодом"},
{"en","Action group ID"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2224,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"КомментироватьСтрокиСценария",
{1,0},1,
{85,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAxklEQVQ4jWMYRGBD
OMP///8ZNhk4g2mGWUpeDLOUwOIwORQxKGBC9sFmQxcwzThb2YuBgWErshw2MQZk
A/77r8AaGiBxdDlkPiOMAXK6X9Z9rLZgAd4Mafe2MaB7gYGBYRuSod4g9v/Uu2CM
LAZVh+oCcMC8Og13JYocNrG0e8SFAVYgZgoXRfHC/9S7IMoLhQ9R7IWmBg4QTgLF
MbEBCAoDdC9gC0AkzIAtADG8QA6AG7BpmiLMfxAnooYBXAxJ3WAADAwMAABtTKEj
3CiKAAAAAElFTkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2225,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомментироватьСтрокиСценарияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},0,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2226,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ВыделитьСтрокиСценария",
{1,0},1,
{84,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAeUlEQVQ4jWMYcMAI
c4CPj48vlLmZgYEBzl7mv4UhaiOm3JYtW0BsBiY0H2zCwUaR+8fIuBHGRjeASAB3
OHkGMP3/BzcBnwF+BPh4DdgMxQy8Kf9R+MQaQDRgwaZw8+bNWPmf5zCCopS6Lhh8
BmCNKiyAWHW0BgwMDADW4Rxv31h4RAAAAABJRU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2227,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыделитьСтрокиСценарияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},1,0,1,
{11,
{2229,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаДействияСКодомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1323,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа4РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{314,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,7,"СгенерированныйСценарий",0,0,
{1,0},
{1,0},
{2,
{1},
{0,b81fdd5d-651e-4768-b17b-c7c88064a8e1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,50,10,1,1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,0,0,1,0,
{0,1,0}
},
{0,1,0},1,
{22,
{315,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СгенерированныйСценарийКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2232,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"СгенерированныйСценарийКонтекстноеМенюДействияСКодом",
{1,2,
{"ru","Сгенерированный сценарий контекстное меню действия с кодом"},
{"en","Generated script context menu action with ID"}
},
{1,2,
{"ru","Сгенерированный сценарий контекстное меню действия с кодом"},
{"en","Generated script context menu action with ID"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2236,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"СгенерированныйСценарийКонтекстноеМенюКомментироватьСтрокиСценария",
{1,0},1,
{85,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAxklEQVQ4jWMYRGBD
OMP///8ZNhk4g2mGWUpeDLOUwOIwORQxKGBC9sFmQxcwzThb2YuBgWErshw2MQZk
A/77r8AaGiBxdDlkPiOMAXK6X9Z9rLZgAd4Mafe2MaB7gYGBYRuSod4g9v/Uu2CM
LAZVh+oCcMC8Og13JYocNrG0e8SFAVYgZgoXRfHC/9S7IMoLhQ9R7IWmBg4QTgLF
MbEBCAoDdC9gC0AkzIAtADG8QA6AG7BpmiLMfxAnooYBXAxJ3WAADAwMAABtTKEj
3CiKAAAAAElFTkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2237,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйСценарийКонтекстноеМенюКомментироватьСтрокиСценарияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2238,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"СгенерированныйСценарийКонтекстноеМенюВыделитьСтрокиСценария",
{1,0},1,
{84,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAeUlEQVQ4jWMYcMAI
c4CPj48vlLmZgYEBzl7mv4UhaiOm3JYtW0BsBiY0H2zCwUaR+8fIuBHGRjeASAB3
OHkGMP3/BzcBnwF+BPh4DdgMxQy8Kf9R+MQaQDRgwaZw8+bNWPmf5zCCopS6Lhh8
BmCNKiyAWHW0BgwMDADW4Rxv31h4RAAAAABJRU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2239,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйСценарийКонтекстноеМенюВыделитьСтрокиСценарияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{2233,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйСценарийКонтекстноеМенюДействияСКодомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1603,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"СгенерированныйСценарийКонтекстноеМенюРедактироватьТаблицуТекст",
{1,2,
{"ru","Редактировать таблицу"},
{"en","Edit table"}
},1,
{59,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1604,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйСценарийКонтекстноеМенюРедактироватьТаблицуТекстРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1720,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"СгенерированныйСценарийКонтекстноеМенюПолучитьМакетПоТаблице",
{1,0},1,
{66,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1721,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйСценарийКонтекстноеМенюПолучитьМакетПоТаблицеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1745,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"СгенерированныйСценарийКонтекстноеМенюОчиститьСгенерированныйСценарий",
{1,0},1,
{68,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1746,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйСценарийКонтекстноеМенюОчиститьСгенерированныйСценарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1325,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйСценарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1322,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СценарийПоведенияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{852,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СценарийПоведенияКод",
{1,21,
{"ru","Сценарий поведения код"},
{"en","Feature template code"},
{"am","ወደ ኮድ ባህሪ"},
{"az","Ssenari davranış kodu"},
{"bg","Сценарий на поведението код"},
{"et","Stsenaarium käitumist kood"},
{"fr","Le script de code de conduite"},
{"ka","ქცევის კოდექსი"},
{"de","Script Code des Verhaltens"},
{"hu","A viselkedési kódex"},
{"it","Lo script di codice di comportamento"},
{"lv","Uzvedības scenāriju kods"},
{"lt","Scenarijus elgesio kodą"},
{"mn","Зан код"},
{"pl","Scenariusz postępowania kod"},
{"ro","Scenariul codul de conduită"},
{"sl","Vedenje kodo"},
{"es","La secuencia de comandos de código de conducta"},
{"sv","Beteendet kod"},
{"tr","Senaryo davranış kodu"},
{"vi","Kịch bản hành vi mã"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{854,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,7,"СгенерированныйСценарийКод",0,0,
{1,0},
{1,0},
{2,
{1},
{0,fdddfbe9-d7f2-4050-a2ec-63997bea4ad0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,50,10,1,1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,0,0,1,0,
{0,1,0}
},
{0,1,0},1,
{22,
{855,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СгенерированныйСценарийКодКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1327,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйСценарийКодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1326,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СценарийПоведенияКодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{317,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"КодПроверкиПоведения",
{1,21,
{"ru","Код проверки поведения"},
{"en","Generated code"},
{"am","አዳዲስ ግምገማዎች ቅስቀሳቸውን"},
{"az","Kodu yoxlamaq davranış"},
{"bg","Код за проверка на поведението на"},
{"et","Kood vaadata käitumine"},
{"fr","Le code de vérification de comportement"},
{"ka","შეამოწმეთ კოდი ჩატარება"},
{"de","Validierungscode Verhalten"},
{"hu","Ellenőrizze a magatartási kódex"},
{"it","Il codice di verifica del comportamento"},
{"lv","Kods pārbaudes uzvedību"},
{"lt","Patikrinimo kodą elgesio"},
{"mn","Шалгах ес зүйн дүрэм"},
{"pl","Kod sprawdzenia zachowania"},
{"ro","Codul de verificare a comportamentului"},
{"sl","Preverite kodeks ravnanja"},
{"es","Validación del código de conducta"},
{"sv","Kolla uppförandekod"},
{"tr","Doğrulama kodu bir davranış"},
{"vi","Mã kiểm tra hành vi"}
},
{1,21,
{"ru","Сценарий поведения"},
{"en","Feature template"},
{"am","ወደ ባህሪ"},
{"az","Ssenari davranış"},
{"bg","Сценарий на поведение"},
{"et","Stsenaarium käitumist"},
{"fr","Le script de comportement"},
{"ka","ქცევა"},
{"de","Szenario Verhalten"},
{"hu","A viselkedés"},
{"it","Lo scenario di comportamento"},
{"lv","Uzvedības scenāriju"},
{"lt","Scenarijus elgesio"},
{"mn","Зан"},
{"pl","Scenariusz postępowania"},
{"ro","Scenariu de comportament"},
{"sl","Vedenje"},
{"es","La secuencia de comandos de la conducta"},
{"sv","Beteendet"},
{"tr","Senaryo davranış"},
{"vi","Kịch bản hành vi"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{327,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,7,"СгенерированныйКод",0,0,
{1,0},
{1,0},
{2,
{1},
{0,b9d60bc5-61d1-479d-9260-cfe574728063}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,50,10,1,1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,0,0,1,0,
{0,1,0}
},
{0,1,0},1,
{22,
{328,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СгенерированныйКодКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1329,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйКодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1328,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КодПроверкиПоведенияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{322,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ИсходныйXMLПроверки",
{1,21,
{"ru","Исходный XML"},
{"en","XML file from UI record"},
{"am","ምንጩ ይታያል"},
{"az","Mənbə XML"},
{"bg","Изходния XML"},
{"et","Algne XML"},
{"fr","Source XML"},
{"ka","წყარო XML"},
{"de","Die XML-Quelle"},
{"hu","A forrás XML"},
{"it","Sorgente XML"},
{"lv","Oriģinālais XML"},
{"lt","Šaltinio XML"},
{"mn","Эх XML"},
{"pl","Oryginalny XML"},
{"ro","Sursă XML"},
{"sl","Vir XML"},
{"es","De origen XML"},
{"sv","Käll-XML -"},
{"tr","Kaynak XML"},
{"vi","Nguồn XML"}
},
{1,21,
{"ru","Сценарий поведения"},
{"en","Feature template"},
{"am","ወደ ባህሪ"},
{"az","Ssenari davranış"},
{"bg","Сценарий на поведение"},
{"et","Stsenaarium käitumist"},
{"fr","Le script de comportement"},
{"ka","ქცევა"},
{"de","Szenario Verhalten"},
{"hu","A viselkedés"},
{"it","Lo scenario di comportamento"},
{"lv","Uzvedības scenāriju"},
{"lt","Scenarijus elgesio"},
{"mn","Зан"},
{"pl","Scenariusz postępowania"},
{"ro","Scenariu de comportament"},
{"sl","Vedenje"},
{"es","La secuencia de comandos de la conducta"},
{"sv","Beteendet"},
{"tr","Senaryo davranış"},
{"vi","Kịch bản hành vi"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1239,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ПреобразоватьИсходныйXML",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1331,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПреобразоватьИсходныйXMLРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{330,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СгенерированныйXML",0,0,
{1,0},
{1,0},
{2,
{1},
{0,465ba1b5-af91-42ac-bb9d-275b4b1cafab}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,1,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{331,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СгенерированныйXMLКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1332,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СгенерированныйXMLРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1330,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИсходныйXMLПроверкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1697,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"НастройкиРаботыСUI",
{1,21,
{"ru","Настройки"},
{"en","Settings"},
{"am","ቅንብሮችን"},
{"az","Parametrlər"},
{"bg","Настройки"},
{"et","Seaded"},
{"fr","Les paramètres de"},
{"ka","პარამეტრები"},
{"de","Einstellungen"},
{"hu","Beállítások"},
{"it","Impostazioni"},
{"lv","Uzstādījumi"},
{"lt","Parametrai"},
{"mn","Тохиргоо"},
{"pl","Ustawienia"},
{"ro","Setări"},
{"sl","Nastavitve"},
{"es","Ajustes"},
{"sv","Inställningar"},
{"tr","Ayarlar"},
{"vi","Cài đặt"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1711,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ПараметрыЧтенияМакетов",
{1,21,
{"ru","Параметры чтения макетов"},
{"en","Spreadsheet settings"},
{"am","የንባብ ግቤቶች ይታያል"},
{"az","Parametrləri oxu planlarının"},
{"bg","Настройки за четене на схеми"},
{"et","Seaded lugeda skeeme"},
{"fr","Les paramètres de lecture des maquettes"},
{"ka","კითხვა პარამეტრების ფორმატისთვის"},
{"de","Leseoptionen Layouts"},
{"hu","Olvasási paramétereket elrendezés"},
{"it","Le opzioni di layout di lettura"},
{"lv","Parametri lasāmi izkārtojumu"},
{"lt","Parametrai maketų skaityti"},
{"mn","Унших параметрүүдийг байрлал"},
{"pl","Parametry odczytu układów"},
{"ro","Opțiuni de citire machete"},
{"sl","Za branje parametrov postavitve"},
{"es","Opciones de lectura de diseños"},
{"sv","Behandlingen parametrar layouter"},
{"tr","Ayarlar okuma düzenleri"},
{"vi","Tham số đọc khuôn in"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},4,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1708,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СчитываниеМакетаНачСтр",1,0,
{1,21,
{"ru","Начальная строка"},
{"en","First row"},
{"am","አሁን ሕብረቁምፊ"},
{"az","İlkin simli"},
{"bg","Първоначалната линия"},
{"et","Esialgne rida"},
{"fr","Ligne de départ"},
{"ka","საწყის string"},
{"de","Erste Zeile"},
{"hu","Az eredeti string"},
{"it","Riga iniziale"},
{"lv","Sākuma rinda"},
{"lt","Pirmoji eilutė"},
{"mn","Эхний мөр"},
{"pl","Początkowy wiersz"},
{"ro","Inițial șirul"},
{"sl","Začetni niz"},
{"es","Línea de inicio"},
{"sv","Den första strängen"},
{"tr","Başlangıç satırı"},
{"vi","Dòng đầu"}
},
{1,0},
{1,
{31}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1709,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СчитываниеМакетаНачСтрКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1710,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СчитываниеМакетаНачСтрРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1705,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СчитываниеМакетаНачКол",1,0,
{1,21,
{"ru","Начальная колонка"},
{"en","First column"},
{"am","አዳዲስ ግምገማዎች ስፋት"},
{"az","İlkin sütun"},
{"bg","Първоначалната колона"},
{"et","Esialgne veerg"},
{"fr","Initial de la colonne"},
{"ka","დაწყება სვეტი"},
{"de","Erste Spalte"},
{"hu","Start oszlop"},
{"it","Iniziale colonna"},
{"lv","Sākuma kolonna"},
{"lt","Pirmoji skiltis"},
{"mn","Эхлэх багана"},
{"pl","Kolumna początkowa"},
{"ro","Inițial coloana"},
{"sl","Start stolpec"},
{"es","Inicial de la columna"},
{"sv","Börja kolumn"},
{"tr","İlk sütun"},
{"vi","Cột đầu"}
},
{1,0},
{1,
{32}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1706,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СчитываниеМакетаНачКолКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1707,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СчитываниеМакетаНачКолРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1702,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СчитываниеМакетаКолСтр",1,0,
{1,21,
{"ru","Количество строк"},
{"en","Row count"},
{"am","ቁጥር የሚሰጡዋቸውን"},
{"az","Xətləri sayı"},
{"bg","Брой редове"},
{"et","Ridade arv"},
{"fr","Le nombre de lignes"},
{"ka","სტრიქონების რაოდენობა"},
{"de","Die Anzahl der Zeilen"},
{"hu","A sorok száma"},
{"it","Il numero di righe"},
{"lv","Rindu skaits"},
{"lt","Eilučių skaičius"},
{"mn","The number of rows"},
{"pl","Ilość wierszy"},
{"ro","Numărul de rânduri"},
{"sl","Število vrstic"},
{"es","El número de filas"},
{"sv","Antalet rader"},
{"tr","Satır sayısı"},
{"vi","Số hàng"}
},
{1,0},
{1,
{33}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1703,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СчитываниеМакетаКолСтрКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1704,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СчитываниеМакетаКолСтрРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1699,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СчитываниеМакетаКолКол",1,0,
{1,21,
{"ru","Количество колонок"},
{"en","Column count"},
{"am","ቁጥር ተደግፏል"},
{"az","Sayı, sütun"},
{"bg","Брой високоговорители"},
{"et","Tulpade"},
{"fr","Le nombre de colonnes"},
{"ka","სვეტების"},
{"de","Die Anzahl der Spalten"},
{"hu","Az oszlopok száma"},
{"it","Il numero di colonne"},
{"lv","Skaļruņu skaitu"},
{"lt","Garsiakalbių skaičius"},
{"mn","The number of columns"},
{"pl","Liczba kolumn"},
{"ro","Număr de difuzoare"},
{"sl","Število stolpcev"},
{"es","El número de columnas"},
{"sv","Antal kolumner"},
{"tr","Sütun sayısını"},
{"vi","Số cột"}
},
{1,0},
{1,
{34}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1700,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СчитываниеМакетаКолКолКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1701,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СчитываниеМакетаКолКолРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1712,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЧтенияМакетовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1698,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НастройкиРаботыСUIРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1321,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РезультатГенерацииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1320,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"АвтоматизированноеСозданиеСценариевРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1308,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаДополнительноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{957,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаНесколькоКлиентовТестирования",
{1,21,
{"ru","Клиенты тестирования"},
{"en","Test clients"},
{"am","ቅድሚያ የሚሰጡዋቸውን"},
{"az","Test clients"},
{"bg","Тест clients"},
{"et","Test clients"},
{"fr","Test clients"},
{"ka","ტესტი კლიენტებს"},
{"de","Test clients"},
{"hu","Teszt költségtérítést"},
{"it","Test clients"},
{"lv","Test klientiem"},
{"lt","Test clients"},
{"mn","Туршилтын үйлчлүүлэгч"},
{"pl","Test clients"},
{"ro","Test de clienti"},
{"sl","Test strank"},
{"es","Test clients"},
{"sv","Testa kunder"},
{"tr","Test clients"},
{"vi","Kiểm tra máy trạm"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{54,
{959,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДанныеКлиентовТестирования",0,0,1,
{1,2,
{"ru","Данные клиентов тестирования"},
{"en","TestClients data"}
},
{1,0},
{1,
{18}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,1,13,
{"U"},
{4,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,"ДанныеКлиентовТестированияПриОкончанииРедактирования",4d88756d-bad4-4fde-92e1-c1f1402ac6b2,"ДанныеКлиентовТестированияПередОкончаниемРедактирования",ab930362-ff94-4dcb-ad16-188805d23e3c,"ДанныеКлиентовТестированияПередНачаломИзменения",de65638d-a806-4a76-bc10-f62bbc86e0e7,"ДанныеКлиентовТестированияПослеУдаления",1,0,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,0,1,4d88756d-bad4-4fde-92e1-c1f1402ac6b2,0,1,ab930362-ff94-4dcb-ad16-188805d23e3c,0,1,de65638d-a806-4a76-bc10-f62bbc86e0e7,0,1},
{0},1,
{22,
{960,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1569,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"КонтМенюПодключитьВыбранного",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABSUlEQVQ4ja3Tv0rb
URjG8Y/BgBKpS3VwzFIvwF6AS7KoS8BdF10Eu2qKWAt18c/gVvAGtBQUh+QahC4d
HNTBMTgErYiKxOH3Bo5pEAVf+PEcznmeL+f9nXN6oFQq6VK92MQdVvGv01Cv1/V2
CX4MXcYccnjAT1zjMjXnOsIVnOIG/bF+hxE0cRaeroAK9jBYq9Vuo4Ue9KGBW3wI
T6UTMITdCKyUy2WxixxaKMT4a3h2MZwCFoJ+hG8xl8djePIYwHcchndRbBOmQjeS
ltYj3MTvaAO2MIkJLLUBo6HHCeAC8/6vtudT2sJbqhV6nwJOQsdeAfgcep4CDkK/
vALQ9hylgB1cyX5O9YVwNTxX2E4BDczK+luTHdW47PwLMT6ItVZ4G3j2Fn5hWnZJ
JuLrrGvMhFe6g3bto4gf+Ct7RDf4I7tExTT8LvUEn59GoUD3IT0AAAAASUVORK5C
YII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1570,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КонтМенюПодключитьВыбранногоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1571,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"КонтМенюНачатьЗапись",
{1,21,
{"ru","Начать запись поведения"},
{"en","Begin record"},
{"am","አዳዲስ ግምገማዎች ቀረጻ ባህሪ"},
{"az","Yazmağa başlamaq davranış"},
{"bg","Започнете запис на поведение"},
{"et","Alustada käitumine rekord"},
{"fr","Commencer l'enregistrement de conduite"},
{"ka","ჩაწერის დაწყება ქცევა"},
{"de","Starten Sie die Aufnahme des Verhaltens"},
{"hu","Indítsa el a felvételt viselkedés"},
{"it","Avviare la registrazione del comportamento"},
{"lv","Sākt rīcību ierakstu"},
{"lt","Pradėti įrašymą, elgesio"},
{"mn","Бичиж эхлэх зан"},
{"pl","Rozpocząć nagrywanie zachowania"},
{"ro","Începe înregistrarea comportamentului"},
{"sl","Začetek snemanja vedenje"},
{"es","Iniciar la grabación de la conducta"},
{"sv","Starta inspelningen beteende"},
{"tr","Kaydı başlatmak davranış"},
{"vi","Bắt đầu ghi hành vi"}
},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAs0lEQVQ4ja2TQQrC
MBBFX7vprivtxeo1BM+g4IEEryGlblx5Bi0uShf9bpIapUlp6sCHQOa/DJMZ+Efo
WyvBUVALWqNKsDd3Q+4YoBQ8BPLoaXJGAaWgD5itegtxAWtDnzK7lRQAqWFsgXxG
23Jg51ZQzXjdqgZIDKAFshkVAHQJZOl0nh8Anx7cIgB3F3CKAJyHk6CI/UYLWDxI
VhtBEzA3oVH+XaaroBO8BBfBwbtMS+IN3uHa9Ykc1LsAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1572,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КонтМенюНачатьЗаписьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1768,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"КонтМенюОтключить",
{1,0},1,
{27,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAA7DAAAO
wwHHb6hkAAADrklEQVRIiaWWu4sddRTHv+f8fr95XOdCWPEVSSGoJJrY2cRWjQEb
FRX8CyRgYRGjpBSFpPNViGmChUpsjK6wVjYKcX0gptBGgkUCEmTZ3JnJnfn9ztdi
7pq7m2x2N55mnnzOOd/zmJGquk1FRPD/TABw402S9CIizqnc4Pl2wQogAfAA7Joj
gRmhM1/gDvkkFBATkSmJBMgUgHGOCfx3AexEJBJOVboY45113X4ymdR/NU17muTt
ItLNshq443HlnNtRDVREuq6Lu+u6WQKw3zl3MaW02zn3a1WVT4rI3wCCGc3leaaq
WzoQEl4EGOD97rpulwDsL4r8WFWVzwFwfd+/QHIhy8JZAIGEbTMDMREYSQXgVlfr
b83sYFHkx8oyP0nSA4LV1ckFEVkZj0f7ZxlQbw6GAogppQfruj2dkj1kZnvN7GCe
Z++WZX7SjGNAYtO0r5rZvap6btb1CmBLB2u9lbquf4m0uwBZERHEGJ+v6/aUqlxp
mvZo1/UnVeV8UWTHObSkAcB2aqDeu8uq+qcIWu/9L30fX0zJ7gNkIca0t+v6N1Tl
fFWNDnnvLgHIAJCca6frpZEYY3psdbW+NJm07zvnvg8hfNP3/eEY0z7v/R9mdnff
x5dV9VxVjQ6puotmzNeiB4bpu14XQlUBEWGW+Q9DCJ+JSA2gJDEqinypLPOnUkr3
m/EO5/RnEe1JZiJI86zrJCLhRGRqZrvM7BFV/T0E/1PbTj8lOcmy8LVz+kVK9rCZ
jbIsnAPgSKjItchnrPUZzCZ02nX9nqa5ugjwAAlr2+mKmS1k2egdkq2ItDH2jwNS
k1gmIRsjn9P62vkAj3vqul0ieaAo8uMh+DNmtuCcrjjnfuj7+HRdt4vOueUs8x8B
dJvB5x2IiHR9H++Zjf++oshfL8vi7aLI38qycDYl29X38YkQ/FcppUeb5up7AAKG
Vt60C9ccOACIMR6bwY+WZX4iJRt7734DsDx7z1QFRVG8UlWjZ1V1gkHmTXfxWg0I
ACnZAyLCPM8+JgERuVLX7Wtd17+pqt957xbN6LMsnAEoJAOwvrCbSgQAIfgvSUrT
tKdIjmYTekJVlquqfEZVrwKQYfcMq+BmcGD9uhYAfdtOP5hOuyMi0pMMIvLjeDw6
rOouA8y2injezMiNc6Ah+EVVvSAiLgT/eVkWR5xz/5DMN/b5VkZu+OCQg1Qi0g9H
gKS/0RBtNwM/oIefApE1TZnPOUy3Ah9M4M3ItQ/0nMVbA66Hmxn+BSjC7GY4Sr0i
AAAAAElFTkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1769,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КонтМенюОтключитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,0,0,3,3,0},1,
{22,
{961,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ДанныеКлиентовТестированияКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{987,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ТестКлиентДобавить",
{1,21,
{"ru","Добавить"},
{"en","Add"},
{"am","ያክሉ"},
{"az","Əlavə etmək"},
{"bg","Добави"},
{"et","Lisa"},
{"fr","Ajouter"},
{"ka","დამატება"},
{"de","Hinzufügen"},
{"hu","Add"},
{"it","Aggiungere"},
{"lv","Pievienot"},
{"lt","Pridėti"},
{"mn","Нэмэх"},
{"pl","Dodać"},
{"ro","Adauga"},
{"sl","Dodaj"},
{"es","Agregar"},
{"sv","Lägg till"},
{"tr","Ekle"},
{"vi","Thêm"}
},1,
{959,b0016a68-ec64-4e6d-b905-c71fd62efc4c},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1334,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестКлиентДобавитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{989,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ТестКлиентСохранить",
{1,0},1,
{24,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1335,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестКлиентСохранитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{991,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,6,"ТестКлиентГруппа1",
{1,2,
{"ru","Тест клиент группа 1"},
{"en","Test client group 1"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{993,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ТестКлиентПодключить",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABSUlEQVQ4ja3Tv0rb
URjG8Y/BgBKpS3VwzFIvwF6AS7KoS8BdF10Eu2qKWAt18c/gVvAGtBQUh+QahC4d
HNTBMTgErYiKxOH3Bo5pEAVf+PEcznmeL+f9nXN6oFQq6VK92MQdVvGv01Cv1/V2
CX4MXcYccnjAT1zjMjXnOsIVnOIG/bF+hxE0cRaeroAK9jBYq9Vuo4Ue9KGBW3wI
T6UTMITdCKyUy2WxixxaKMT4a3h2MZwCFoJ+hG8xl8djePIYwHcchndRbBOmQjeS
ltYj3MTvaAO2MIkJLLUBo6HHCeAC8/6vtudT2sJbqhV6nwJOQsdeAfgcep4CDkK/
vALQ9hylgB1cyX5O9YVwNTxX2E4BDczK+luTHdW47PwLMT6ItVZ4G3j2Fn5hWnZJ
JuLrrGvMhFe6g3bto4gf+Ct7RDf4I7tExTT8LvUEn59GoUD3IT0AAAAASUVORK5C
YII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1337,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестКлиентПодключитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{995,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ТестКлиентНачатьЗапись",
{1,21,
{"ru","Начать запись поведения"},
{"en","Begin record"},
{"am","አዳዲስ ግምገማዎች ቀረጻ ባህሪ"},
{"az","Yazmağa başlamaq davranış"},
{"bg","Започнете запис на поведение"},
{"et","Alustada käitumine rekord"},
{"fr","Commencer l'enregistrement de conduite"},
{"ka","ჩაწერის დაწყება ქცევა"},
{"de","Starten Sie die Aufnahme des Verhaltens"},
{"hu","Indítsa el a felvételt viselkedés"},
{"it","Avviare la registrazione del comportamento"},
{"lv","Sākt rīcību ierakstu"},
{"lt","Pradėti įrašymą, elgesio"},
{"mn","Бичиж эхлэх зан"},
{"pl","Rozpocząć nagrywanie zachowania"},
{"ro","Începe înregistrarea comportamentului"},
{"sl","Začetek snemanja vedenje"},
{"es","Iniciar la grabación de la conducta"},
{"sv","Starta inspelningen beteende"},
{"tr","Kaydı başlatmak davranış"},
{"vi","Bắt đầu ghi hành vi"}
},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAs0lEQVQ4ja2TQQrC
MBBFX7vprivtxeo1BM+g4IEEryGlblx5Bi0uShf9bpIapUlp6sCHQOa/DJMZ+Efo
WyvBUVALWqNKsDd3Q+4YoBQ8BPLoaXJGAaWgD5itegtxAWtDnzK7lRQAqWFsgXxG
23Jg51ZQzXjdqgZIDKAFshkVAHQJZOl0nh8Anx7cIgB3F3CKAJyHk6CI/UYLWDxI
VhtBEzA3oVH+XaaroBO8BBfBwbtMS+IN3uHa9Ykc1LsAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1338,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестКлиентНачатьЗаписьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{997,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ТестКлиентОтключить",
{1,0},1,
{27,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAA7DAAAO
wwHHb6hkAAADrklEQVRIiaWWu4sddRTHv+f8fr95XOdCWPEVSSGoJJrY2cRWjQEb
FRX8CyRgYRGjpBSFpPNViGmChUpsjK6wVjYKcX0gptBGgkUCEmTZ3JnJnfn9ztdi
7pq7m2x2N55mnnzOOd/zmJGquk1FRPD/TABw402S9CIizqnc4Pl2wQogAfAA7Joj
gRmhM1/gDvkkFBATkSmJBMgUgHGOCfx3AexEJBJOVboY45113X4ymdR/NU17muTt
ItLNshq443HlnNtRDVREuq6Lu+u6WQKw3zl3MaW02zn3a1WVT4rI3wCCGc3leaaq
WzoQEl4EGOD97rpulwDsL4r8WFWVzwFwfd+/QHIhy8JZAIGEbTMDMREYSQXgVlfr
b83sYFHkx8oyP0nSA4LV1ckFEVkZj0f7ZxlQbw6GAogppQfruj2dkj1kZnvN7GCe
Z++WZX7SjGNAYtO0r5rZvap6btb1CmBLB2u9lbquf4m0uwBZERHEGJ+v6/aUqlxp
mvZo1/UnVeV8UWTHObSkAcB2aqDeu8uq+qcIWu/9L30fX0zJ7gNkIca0t+v6N1Tl
fFWNDnnvLgHIAJCca6frpZEYY3psdbW+NJm07zvnvg8hfNP3/eEY0z7v/R9mdnff
x5dV9VxVjQ6puotmzNeiB4bpu14XQlUBEWGW+Q9DCJ+JSA2gJDEqinypLPOnUkr3
m/EO5/RnEe1JZiJI86zrJCLhRGRqZrvM7BFV/T0E/1PbTj8lOcmy8LVz+kVK9rCZ
jbIsnAPgSKjItchnrPUZzCZ02nX9nqa5ugjwAAlr2+mKmS1k2egdkq2ItDH2jwNS
k1gmIRsjn9P62vkAj3vqul0ieaAo8uMh+DNmtuCcrjjnfuj7+HRdt4vOueUs8x8B
dJvB5x2IiHR9H++Zjf++oshfL8vi7aLI38qycDYl29X38YkQ/FcppUeb5up7AAKG
Vt60C9ccOACIMR6bwY+WZX4iJRt7734DsDx7z1QFRVG8UlWjZ1V1gkHmTXfxWg0I
ACnZAyLCPM8+JgERuVLX7Wtd17+pqt957xbN6LMsnAEoJAOwvrCbSgQAIfgvSUrT
tKdIjmYTekJVlquqfEZVrwKQYfcMq+BmcGD9uhYAfdtOP5hOuyMi0pMMIvLjeDw6
rOouA8y2injezMiNc6Ah+EVVvSAiLgT/eVkWR5xz/5DMN/b5VkZu+OCQg1Qi0g9H
gKS/0RBtNwM/oIefApE1TZnPOUy3Ah9M4M3ItQ/0nMVbA66Hmxn+BSjC7GY4Sr0i
AAAAAElFTkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1339,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестКлиентОтключитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,1,
{11,
{1336,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестКлиентГруппа1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,0,0,3,3,0},7,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2153,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ДанныеКлиентовТестированияЭтотКлиент",0,0,
{1,0},
{1,0},
{2,
{18},
{10}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,0,0,1,
{4,1,
{0,1001ae3e-9289-4303-9699-3c0c17e20e61},"",-1,-1,1,0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0},1,0,0,1,0,0,100},
{0,1,0},1,
{22,
{2154,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияЭтотКлиентКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2155,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияЭтотКлиентРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1725,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияГруппа4",
{1,2,
{"ru","Данные клиентов тестирования группа 4"},
{"en","Customer data testing group 4"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,1,1,0,3,
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{0},
{"Pattern"},"",
{1,0},0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{975,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияИмя",1,0,
{1,0},
{1,0},
{2,
{18},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{976,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1351,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияИмяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1722,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияСиноним",1,0,
{1,0},
{1,0},
{2,
{18},
{9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1723,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияСинонимКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1724,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияСинонимРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1726,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияГруппа4РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1566,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияТипКлиента",1,0,
{1,0},
{1,0},
{2,
{18},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,3,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Тонкий"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,21,
{"ru","Тонкий"},
{"en","Thin"},
{"am","ቀጥል"},
{"az","İncə"},
{"bg","Тънък"},
{"et","Õhuke"},
{"fr","Mince"},
{"ka","თხელი"},
{"de","Schlank"},
{"hu","Vékony"},
{"it","Sottile"},
{"lv","Slim"},
{"lt","Plonas"},
{"mn","Нимгэн"},
{"pl","Cienki"},
{"ro","Subțire"},
{"sl","Tanke"},
{"es","Delgado"},
{"sv","Tunn"},
{"tr","İnce"},
{"vi","Mỏng"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Толстый"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,21,
{"ru","Толстый"},
{"en","Thick"},
{"am","."},
{"az","Qalın"},
{"bg","Дебел"},
{"et","Paks"},
{"fr","Épais"},
{"ka","სქელი"},
{"de","Dick"},
{"hu","Vastag"},
{"it","Spessa"},
{"lv","Biezs"},
{"lt","Storas"},
{"mn","Зузаан"},
{"pl","Gruby"},
{"ro","Gros"},
{"sl","Debel"},
{"es","Gordo"},
{"sv","Tjock"},
{"tr","Kalın"},
{"vi","Dày"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Web"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,21,
{"ru","Web"},
{"en","Web"},
{"am","የድረ ገፅ"},
{"az","Web"},
{"bg","Web"},
{"et","Web"},
{"fr","Web"},
{"ka","ვებ"},
{"de","Web"},
{"hu","Web"},
{"it","Web"},
{"lv","Web"},
{"lt","Web"},
{"mn","Вэб"},
{"pl","Web"},
{"ro","Web"},
{"sl","Splet"},
{"es","Web"},
{"sv","Webb"},
{"tr","Web"},
{"vi","Web"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,0,2,1,2,2,2,2,2,2,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,1,0,0,14,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДанныеКлиентовТестированияТипКлиентаПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1567,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияТипКлиентаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1568,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияТипКлиентаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1001,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияГруппа2",
{1,2,
{"ru","Данные клиентов тестирования группа 2"},
{"en","Customer data testing group 2"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,1,1,0,3,
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{0},
{"Pattern"},"",
{1,0},0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{981,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияПутьКИнфобазе",1,0,
{1,0},
{1,0},
{2,
{18},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{982,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияПутьКИнфобазеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1355,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияПутьКИнфобазеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1011,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияДопПараметры",1,0,
{1,0},
{1,0},
{2,
{18},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,2,
{"ru","Дополнительные параметры командной строки подключения 1С"},
{"en","Additional command line options connection 1C"}
},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1012,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияДопПараметрыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1356,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияДопПараметрыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1352,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияГруппа2РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1675,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияГруппа3",
{1,2,
{"ru","Данные клиентов тестирования группа 3"},
{"en","Customer data testing group 3"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,1,1,0,3,
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{0},
{"Pattern"},"",
{1,0},0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1677,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияИмяКомпьютера",1,0,
{1,0},
{1,0},
{2,
{18},
{8}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДанныеКлиентовТестированияИмяКомпьютераПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1678,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияИмяКомпьютераКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1679,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияИмяКомпьютераРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{984,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияПорт",1,0,
{1,0},
{1,0},
{2,
{18},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{985,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияПортКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1357,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияПортРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1676,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияГруппа3РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1646,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияPID",1,0,
{1,0},
{1,0},
{2,
{18},
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1647,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияPIDКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1648,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияPIDРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2258,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияДескрипторОкна",1,0,
{1,0},
{1,0},
{2,
{18},
{11}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2259,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияДескрипторОкнаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2260,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияДескрипторОкнаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{11,
{1341,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},1,1,1,1,
{5,
{1342,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{1343,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1344,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{959,0},0,3,3,0},1,
{5,
{1345,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДанныеКлиентовТестированияСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{1346,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1347,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{959,1},0,3,3,0},1,
{5,
{1348,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеКлиентовТестированияУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{1349,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеКлиентовТестированияУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1350,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеКлиентовТестированияУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{959,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0},1,0,1,
{11,
{1333,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНесколькоКлиентовТестированияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{133,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаНастройки",
{1,21,
{"ru","Сервис"},
{"en","Service and Settings"},
{"am","አገልግሎት"},
{"az","Xidmət"},
{"bg","Услуги"},
{"et","Teenus"},
{"fr","Service"},
{"ka","სამსახური"},
{"de","Service"},
{"hu","Szolgáltatás"},
{"it","Servizio"},
{"lv","Serviss"},
{"lt","Paslauga"},
{"mn","Үйлчилгээ"},
{"pl","Obsługa"},
{"ro","Servicii"},
{"sl","Storitev"},
{"es","Servicio"},
{"sv","Service"},
{"tr","Hizmet"},
{"vi","Dịch vụ"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,1,0,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{650,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СтраницыСервис",
{1,2,
{"ru","Страницы сервис"},
{"en","Service pages"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,1,
{0,1,0},2,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{652,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаСервисОсновные",
{1,21,
{"ru","Основные"},
{"en","Main"},
{"am","ዋናው"},
{"az","Əsas"},
{"bg","Основни"},
{"et","Põhi"},
{"fr","Les principaux"},
{"ka","მთავარი"},
{"de","Die wichtigsten"},
{"hu","Fő"},
{"it","Di base"},
{"lv","Pamata"},
{"lt","Pagrindiniai"},
{"mn","Гол"},
{"pl","Podstawowe"},
{"ro","De bază"},
{"sl","Glavni"},
{"es","Básicos"},
{"sv","Viktigaste"},
{"tr","Temel"},
{"vi","Chính"}
},
{1,0},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},20,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{304,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"РаботаСТэгами",
{1,2,
{"ru","Тэги"},
{"en","Tags"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,3,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{221,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СписокТеговИсключение1",1,0,
{1,21,
{"ru","Список исключаемых тэгов"},
{"en","Not run tags"},
{"am","አዳዲስ ሆኖ ይታያል"},
{"az","Siyahısı tags исключаемых"},
{"bg","Списък на изключване на тагове"},
{"et","Nimekiri исключаемых-i"},
{"fr","La liste des exclus des balises"},
{"ka","სია გამორიცხული საკვანძო სიტყვები"},
{"de","Liste der ausgeschlossenen Tags"},
{"hu","A lista kizárt kategória"},
{"it","Elenco esclusi tag"},
{"lv","Saraksts atbrīvoto tagiem"},
{"lt","Sąrašas žymių исключаемых"},
{"mn","Жагсаалтаас хассан tags"},
{"pl","Lista blokowanych elementów"},
{"ro","Lista excluse tag-uri"},
{"sl","Seznam izključenih oznake"},
{"es","La lista de exclusión de las etiquetas"},
{"sv","Listan över undantagna taggar"},
{"tr","İstisna listesi etiketleri"},
{"vi","Danh sách các tag bị loại trừ"}
},
{1,0},
{2,
{1},
{0,c62ae8e3-c76b-402d-8ac4-7220e83d541c}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{222,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокТеговИсключение1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1363,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокТеговИсключение1РасширеннаяПодсказка",
{1,2,
{"ru","В поле указываются теги. Если тег будет найден в фиче, то вся фича не будет загружена. Если тег будет найден у сценария, то не будет загружен только этот сценарий."},
{"en","Input tags in the field. If the tag is detected in the feature, the whole feature will not be uploaded. If the tags will be found in scenario, only this scenario will be excluded from loading."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","В поле указываются теги. Если тег будет найден в фиче, то вся фича не будет загружена. Если тег будет найден у сценария, то не будет загружен только этот сценарий."},
{"en","Input tags in the field. If the tag is detected in the feature, the whole feature will not be uploaded. If the tags will be found in scenario, only this scenario will be excluded from loading."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{224,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СписокТеговОтбор1",1,0,
{1,21,
{"ru","Тэги для запуска"},
{"en","Run only tags"},
{"am","በቀዳሚ ግምገማዎች ጋር"},
{"az","Tags başlamaq üçün"},
{"bg","Тагове за стартиране"},
{"et","Tags joosta"},
{"fr","Étiquettes pour démarrer"},
{"ka","Tags უნდა დაიწყოს"},
{"de","Tags zu starten"},
{"hu","Kategória indításához"},
{"it","Tag per eseguire"},
{"lv","Tags, lai palaistu"},
{"lt","Žymos paleisti"},
{"mn","Сэдвийн эхлэх"},
{"pl","Tagi do uruchomienia"},
{"ro","Tag-uri pentru a rula"},
{"sl","Oznake za začetek"},
{"es","Etiquetas para iniciar"},
{"sv","Taggar för att starta"},
{"tr","Etiketler başlatmak için"},
{"vi","Tag để khởi động"}
},
{1,0},
{2,
{1},
{0,67164642-7fbb-446d-b627-4bbec5c301c3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{225,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СписокТеговОтбор1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1364,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СписокТеговОтбор1РасширеннаяПодсказка",
{1,2,
{"ru","В поле указываются теги. Если тег НЕ будет найден в фиче, то вся фича не будет загружена. Также возможно загрузить из фичи только те сценарии, у которых указаны нужные теги из списка."},
{"en","Input tags in the field. If the tag is NOT detected in the feature, the whole feature will not be uploaded. If the tags will be found in scenario, only this scenario(s) will be included to loading"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","В поле указываются теги. Если тег НЕ будет найден в фиче, то вся фича не будет загружена. Также возможно загрузить из фичи только те сценарии, у которых указаны нужные теги из списка."},
{"en","Input tags in the field. If the tag is NOT detected in the feature, the whole feature will not be uploaded. If the tags will be found in scenario, only this scenario(s) will be included to loading"}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1362,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РаботаСТэгамиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1694,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЯзыкГенератораGherkin",1,0,
{1,2,
{"ru","Язык генератора Gherkin"},
{"en","Language generator Gherkin"}
},
{1,0},
{2,
{1},
{0,d56bcfbb-9446-4aa4-9591-f7d13f90c923}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,9,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ru"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,3,
{"ru","Русский"},
{"en","Russian"},
{"am","ራሽኛ"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","en"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,3,
{"ru","English"},
{"en","English"},
{"am","አማርኛ"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","uk"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Украинский"},
{"en","Ukrainian"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ro"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Romanian"},
{"en","Romanian"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","de"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Deutsch"},
{"en","Deutsch"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","lv"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Latvian"},
{"en","Latvian"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","it"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Italian"},
{"en","Italian"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","pl"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Polish"},
{"en","Polish"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","vi"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Vietnamese"},
{"en","Vietnamese"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЯзыкГенератораGherkinПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1695,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЯзыкГенератораGherkinКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1696,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЯзыкГенератораGherkinРасширеннаяПодсказка",
{1,2,
{"ru","Поле задаёт язык, на котором будет генерироваться текст сценария при накликивании. Также, если выбран язык отличный от русского, то при выборе шага из базы ""известных шагов"" также появятся дополнительные колонки, которые отображают текст и описание шага на выбранном языке."},
{"en","The field defines scenatio generating language. If any but not Russain is selected, Known steps will contain additional columns with the step along with its description in selected language."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Поле задаёт язык, на котором будет генерироваться текст сценария при накликивании. Также, если выбран язык отличный от русского, то при выборе шага из базы ""известных шагов"" также появятся дополнительные колонки, которые отображают текст и описание шага на выбранном языке."},
{"en","The field defines scenatio generating language. If any but not Russain is selected, Known steps will contain additional columns with the step along with its description in selected language."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{910,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ФлажкиНастроек",
{1,2,
{"ru","Флажки настроек"},
{"en","The check boxes for the settings"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{912,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ЛеваяЧастьФлажковНастроек",
{1,2,
{"ru","Левая часть флажков настроек"},
{"en","Setting checkboxes Left"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{341,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ПодключитьВнешниеОбработкиДляОтладки",4,0,
{1,21,
{"ru","Подключить обработки реализации шагов для отладки"},
{"en","Enable debug for steps defitions"},
{"am","ቅድሚያ ቅድሚያ የሚሰጡዋቸውን ደረጃዎች ላይ መጠቀም"},
{"az","Подлючать emalı həyata keçirilməsi üçün addımlar debug"},
{"bg","Подлючать обработка на изпълнението стъпки за отстраняване на грешки"},
{"et","Подлючать töötlemise rakendamise samme, et silumine"},
{"fr","Подлючать traitement étapes de mise en œuvre pour le débogage"},
{"ka","დაკავშირება, დამუშავება განხორციელების ნაბიჯები გამართვის"},
{"de","Подлючать Behandlung Umsetzungsschritte für das Debuggen"},
{"hu","Csatlakoztassa a feldolgozás végrehajtási lépések a hibakeresés"},
{"it","Подлючать trattamento di realizzazione di passaggi per eseguire il debug"},
{"lv","Подлючать apstrādes īstenošanas pasākumus, lai atkļūdošanas"},
{"lt","Подлючать perdirbimo įgyvendinimo priemonių derinimo"},
{"mn","To connect боловсруулах, хэрэгжүүлэх алхмуудыг дибаг хийх"},
{"pl","Подлючать przetwarzania realizacji kroków do debugowania"},
{"ro","Подлючать de prelucrare realizarea de pași pentru a depana"},
{"sl","Za povezavo obdelave izvajanje korake za odpravljanje napak"},
{"es","Подлючать de procesamiento de la implementación de medidas para la depuración"},
{"sv","För att ansluta bearbetning genomförandet av åtgärder för felsökning"},
{"tr","Подлючать işleme uygulamak için adım hata ayıklama"},
{"vi","Kết nối bộ xử lý thực hiện các bước để gỡ rối"}
},
{1,0},
{2,
{1},
{0,c09d1e67-5742-415e-b9ce-4f315bb7f8e8}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{342,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПодключитьВнешниеОбработкиДляОтладкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1372,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПодключитьВнешниеОбработкиДляОтладкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{344,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СохранятьКонтекстыПередВыполнениемШагов",4,0,
{1,21,
{"ru","Сохранять контексты перед выполнением шагов"},
{"en","Save contexts before step invoke"},
{"am","አዳዲስ ግምገማዎች contexts ፊት መጠቀም ስለጀመሩ ቅድሚያ የሚሰጡዋቸውን"},
{"az","Saxlaya kontekstlərdə etmədən əvvəl addımlar"},
{"bg","Запишете контекст, преди да изпълните стъпки"},
{"et","Salvestada kontekstides enne sammud"},
{"fr","Enregistrer les contextes avant de suivre les étapes"},
{"ka","შენახვა კონტექსტში ადრე ასრულებენ ნაბიჯები"},
{"de","Speichern Kontexte vor der Ausführung der Schritte"},
{"hu","A mentés kontextusokban végrehajtása előtt a lépcsőn"},
{"it","Salvare i contesti prima di eseguire i passaggi"},
{"lv","Saglabāt situācijās, pirms soļi"},
{"lt","Išsaugoti контексты prieš atlikdami veiksmus"},
{"mn","Хадгалах нөхцөл хийхийн өмнө арга хэмжээ"},
{"pl","Zapisywać konteksty przed wykonaniem kroków"},
{"ro","Salva contexte înainte de a efectua pași"},
{"sl","Shrani kontekstih pred izvedbo korakov"},
{"es","Guardar los contextos antes de realizar los pasos"},
{"sv","Spara sammanhang innan du utför stegen"},
{"tr","Kaydetmek bağlamları adımları gerçekleştirmeden önce,"},
{"vi","Tạo ngữ cảnh trước khi thực hiện các bước"}
},
{1,0},
{2,
{1},
{0,edbf9d14-eabd-4f3d-8c3e-e43bd46ad329}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{345,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СохранятьКонтекстыПередВыполнениемШаговКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1373,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СохранятьКонтекстыПередВыполнениемШаговРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1371,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЛеваяЧастьФлажковНастроекРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{914,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ПраваяЧастьФлажковНастроек",
{1,2,
{"ru","Правая часть флажков настроек"},
{"en","Setting checkboxes Right"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{289,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"DebugLog2",4,0,
{1,21,
{"ru","Включить отладочные сообщения"},
{"en","Output verbose log and debug log"},
{"am","አሁን.."},
{"az","Daxil debug mesajları"},
{"bg","Включва изтриване на съобщения"},
{"et","Luba silumine sõnumeid"},
{"fr","Activer les messages de débogage"},
{"ka","ჩართვა გამართვის შეტყობინებები"},
{"de","Debug-Meldungen aktivieren"},
{"hu","Hogy enable debug üzenetek"},
{"it","Includere i messaggi di debug"},
{"lv","Ieslēgt atkļūdošanas ziņojumus"},
{"lt","Įtraukti derinimo pranešimai"},
{"mn","Идэвхжүүлэхийн тулд debug messages"},
{"pl","Włączyć komunikaty diagnostyczne"},
{"ro","Activați mesajele de depanare"},
{"sl","Če želite omogočiti sporočila debug"},
{"es","Incluir mensajes de depuración"},
{"sv","För att aktivera debug-meddelanden"},
{"tr","Etkinleştirmek için hata ayıklama iletileri"},
{"vi","Bật thông báo gỡ rối"}
},
{1,0},
{2,
{1},
{0,05bfb715-9288-4b87-adbb-dc394cfe21ad}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{290,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"DebugLog2КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1377,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"DebugLog2РасширеннаяПодсказка",
{1,2,
{"ru","Управляет выводом сообщений. Если флаг установлен, то в окно сообщений пользователя будет выводится дополнительная информация о ходе выполнения сценария, такая как:
1. Информация о том, что шаг начал выполнятся.
2. Информация о подключении клиентов тестирования.
3. Прочая информация."},
{"en","Messages output management. If the checkbox is on, user message will contain additional information about the scenario progress, such as:
1. Step beginning notification.
2. Test clients connection notification.
3. Other information."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Управляет выводом сообщений. Если флаг установлен, то в окно сообщений пользователя будет выводится дополнительная информация о ходе выполнения сценария, такая как:
1. Информация о том, что шаг начал выполнятся.
2. Информация о подключении клиентов тестирования.
3. Прочая информация."},
{"en","Messages output management. If the checkbox is on, user message will contain additional information about the scenario progress, such as:
1. Step beginning notification.
2. Test clients connection notification.
3. Other information."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{481,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ПроверкаРаботыVanessaAutomationВРежимеTestClient",4,0,
{1,2,
{"ru","Проверка работы Vanessa-Automation в режиме test client"},
{"en","Check Vanessa-Automation on 1C test client session"}
},
{1,0},
{2,
{1},
{0,7bd6467b-8fd5-4ec5-82b5-7470ba5f322c}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ПроверкаРаботыVanessaAutomationВРежимеTestClientПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{482,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПроверкаРаботыVanessaAutomationВРежимеTestClientКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1379,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПроверкаРаботыVanessaAutomationВРежимеTestClientРасширеннаяПодсказка",
{1,2,
{"ru","Служебная настройка. Используется в режиме, когда Vanessa Automation тестирует другой экземпляр Vanessa Automation."},
{"en","Service setting. It is used in the mode when Vanessa Automation tests another session of Vanessa Automation."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Служебная настройка. Используется в режиме, когда Vanessa Automation тестирует другой экземпляр Vanessa Automation."},
{"en","Service setting. It is used in the mode when Vanessa Automation tests another session of Vanessa Automation."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1376,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПраваяЧастьФлажковНастроекРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1370,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФлажкиНастроекРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{338,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьЛогВыполненияСценариевВЖР",4,0,
{1,21,
{"ru","Записывать события выполнения в журнал регистрации"},
{"en","Output log to 1C registration journal"},
{"am","አዳዲስ ግምገማዎች በአፈጻጸም ላይ ስለጀመሩ ቅድሚያ የሚሰጡዋቸውን"},
{"az","Qeyd günlük yerinə yetirilməsi qeydiyyatı jurnalı"},
{"bg","Записва лог изпълнение в списание регистрация"},
{"et","Kirjutada logifaili error log registreerimine"},
{"fr","Enregistrer le journal d'exécution dans le journal de l'enregistrement"},
{"ka","ჩანაწერი აღსრულების შესვლა შესვლა"},
{"de","Aufzeichnen der log-Ausführung in Protokolldatei"},
{"hu","Rekord a végrehajtási napló a napló"},
{"it","Registrare un log di esecuzione nel registro"},
{"lv","Ierakstīt log veiktu reģistrācijas žurnāls"},
{"lt","Įrašyti failą, atlikti registracijos žurnalas"},
{"mn","Бичлэг гүйцэтгэх нэвтрэх бүртгэлийн"},
{"pl","Zapisywać log z wykonania w dzienniku"},
{"ro","Scrie jurnal de execuție în jurnalul de înregistrare a"},
{"sl","Snemanje izvedbo dnevnik v dnevniku"},
{"es","Grabar un log de ejecución en el registro de horas"},
{"sv","Registrera utförande i logg"},
{"tr","Kaydetmek için bir günlük çalışma günlüğü"},
{"vi","Ghi nhật ký thực hiện vào nhật ký đăng ký 1C"}
},
{1,0},
{2,
{1},
{0,0289709e-d09d-4ae3-8e91-cb039e008662}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{339,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьЛогВыполненияСценариевВЖРКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1378,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьЛогВыполненияСценариевВЖРРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то в журнал регистрации будут записываться события о начале выполнения сценария и о начале выполнения шагов."},
{"en","If the checkbox is on, scenario and steps beginning events will be written to the event log."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то в журнал регистрации будут записываться события о начале выполнения сценария и о начале выполнения шагов."},
{"en","If the checkbox is on, scenario and steps beginning events will be written to the event log."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{922,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"Группа6",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{897,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПортЗапускаТестКлиента",1,0,
{1,0},
{1,0},
{0},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{898,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПортЗапускаТестКлиентаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1381,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПортЗапускаТестКлиентаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1380,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа6РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1912,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДобавлятьПриНакликиванииМетаИнформацию",4,0,
{1,2,
{"ru","Добавлять при накликивании мета информацию"},
{"en","Add meta information when clicking"}
},
{1,0},
{2,
{1},
{0,664fc728-7c84-4e28-8999-8bd8528e1bdd}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1913,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДобавлятьПриНакликиванииМетаИнформациюContextMenu",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1914,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДобавлятьПриНакликиванииМетаИнформациюExtendedTooltip",
{1,2,
{"ru","Если флаг установлен, то при генерации текста сценария после накликивания будет добавляться информация, необходимая для перевода сценария на другой язык в будущем."},
{"en","If the checkbox is on, data for translation into another language will be added when clicking the scenario step by step."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то при генерации текста сценария после накликивания будет добавляться информация, необходимая для перевода сценария на другой язык в будущем."},
{"en","If the checkbox is on, data for translation into another language will be added when clicking the scenario step by step."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1824,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ИскатьЭлементыФормыПоИмени",4,0,
{1,0},
{1,0},
{2,
{1},
{0,89e83dae-c43d-46fe-9b42-89e480273b8f}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1825,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИскатьЭлементыФормыПоИмениКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1826,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИскатьЭлементыФормыПоИмениРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то при генерации текста сценария после накликивания, шаги в сценарии будут искать элементы формы по внутреннему имени.
Если флаг снят, то при генерации текста сценария после накликивания, шаги в сценарии будут искать элементы формы по заголовку, если это возможно.
Это возможно в том случае, если в данной форме есть только один элемент с данным заголовком."},
{"en","If the checkbox is on, scenario steps will define form elements by internal name when generating scenario text.
If the checkbox is off, scenario steps will define form elements by header, if possible.
This is available only if the form contains only one element with the specified header."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то при генерации текста сценария после накликивания, шаги в сценарии будут искать элементы формы <b>по внутреннему имени</>.
Если флаг снят, то при генерации текста сценария после накликивания, шаги в сценарии будут искать элементы формы <b>по заголовку</>, <b>если это возможно</>.
Это возможно в том случае, если в данной форме есть только один элемент с данным заголовком."},
{"en","If the checkbox is on, scenario steps will define form elements <b>by internal name</> when generating scenario text.
If the checkbox is off, scenario steps will define form elements <b>by header</>, <b>if possible</>.
This is available only if the form contains only one element with the specified header."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1860,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ТегTreeВключенПоУмолчанию",4,0,
{1,0},
{1,0},
{2,
{1},
{0,6aac55e7-907d-41ee-893d-85360c6c5b64}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1861,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТегTreeВключенПоУмолчаниюКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1862,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТегTreeВключенПоУмолчаниюРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то считается, что в фича файл написан так, как будто в нём указан тег @tree, даже если его там нет. Т.е. считается, что любой загружаемый фича файл использует иерархию шагов."},
{"en","If the checkbox is on, feature file is considered as if it has @tree tag, even if it is absent. In other words, any uploaded feature file is considered as hierarchical."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то считается, что в фича файл написан так, как будто в нём указан тег @tree, даже если его там нет. Т.е. считается, что любой загружаемый фича файл использует иерархию шагов."},
{"en","If the checkbox is on, feature file is considered as if it has @tree tag, even if it is absent. In other words, any uploaded feature file is considered as hierarchical."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1836,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаОбновлятьДерево",
{1,2,
{"ru","Обновлять дерево"},
{"en","Update tree"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},0,1,0,1,
{11,
{1837,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаОбновлятьДеревоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{380,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогИнструментов",1,0,
{1,3,
{"ru","Каталог инструментов"},
{"en","Tools catalog"},
{"vi","Thư mục công cụ"}
},
{1,0},
{2,
{1},
{0,13046aca-b33c-4435-b736-44bd900e8d98}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогИнструментовНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{381,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогИнструментовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1382,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогИнструментовРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, где находится обработка Vanessa Automation. При работе со стандартной поставкой поле должно быть заполнено.
При работе с Vanessa Automation Single допускается оставлять поле пустым."},
{"en","The catalog of Vanessa Automation data processor. This field must be filled on the standard installation.
When working with Vanessa Automation Single it is allowed to leave the field blank."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, где находится обработка Vanessa Automation. При работе со стандартной поставкой поле должно быть заполнено.
При работе с Vanessa Automation Single допускается оставлять поле пустым."},
{"en","The catalog of Vanessa Automation data processor. This field must be filled on the standard installation.
When working with Vanessa Automation Single it is allowed to leave the field blank."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{364,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"VanessaStackCommons",1,0,
{1,21,
{"ru","Расширенные инструменты Vanessa Stack Commons"},
{"en","path for extended Vanessa Satck Commons"},
{"am","የላቀ መሣሪያዎች ግምገማ ቅድሚያ Commons"},
{"az","İnkişaf etmiş alətləri Vanessa Stack Commons"},
{"bg","Разширени инструменти Ванеса Stack Commons"},
{"et","Täiustatud tööriistad Vanessa Stack Commonsi"},
{"fr","Outils de Vanessa Stack Commons"},
{"ka","გაფართოებული ინსტრუმენტები Vanessa დასტის Commons"},
{"de","Erweiterte Werkzeuge Vanessa Stack Commons"},
{"hu","A speciális eszközök Vanessa Stack Commons"},
{"it","Strumenti avanzati Vanessa Stack Commons"},
{"lv","Uzlabotas instrumenti Vanessa Commons Stack"},
{"lt","Papildomi įrankiai Vanessa Stack Commons"},
{"mn","Дэвшилтэт хэрэгсэл Ванесса Үд Commons"},
{"pl","Zaawansowane narzędzia Vanessa Stack Commons"},
{"ro","Instrumente extinse de Vanessa Stack Commons"},
{"sl","Napredna orodja, Vanessa Kup Commons"},
{"es","Herramientas avanzadas de Vanessa Stack Commons"},
{"sv","Avancerade verktyg Vanessa Stack Commons"},
{"tr","Gelişmiş araçlar Vanessa Stack Commons"},
{"vi","Công cụ mở rộng Vanessa Stack Commons"}
},
{1,0},
{0},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{365,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"VanessaStackCommonsКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1383,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"VanessaStackCommonsРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{717,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогПроекта",1,0,
{1,21,
{"ru","Каталог проекта"},
{"en","Project path"},
{"am","ፕሮጀክቱ የማውጫ"},
{"az","Kataloq layihəsi"},
{"bg","Каталог на проекта"},
{"et","Projekti kataloogi"},
{"fr","Le répertoire du projet"},
{"ka","პროექტის დირექტორია"},
{"de","Katalog des Projekts"},
{"hu","A projekt könyvtár"},
{"it","La directory del progetto"},
{"lv","Projektu katalogs"},
{"lt","Projekto katalogą"},
{"mn","Төслийн сан"},
{"pl","Katalog projektu"},
{"ro","Directorul de proiect"},
{"sl","Projekt imenik"},
{"es","El directorio del proyecto"},
{"sv","Projektkatalogen"},
{"tr","Dizin projesi"},
{"vi","Thư mục dự án"}
},
{1,0},
{2,
{1},
{0,9fc46fa6-3d72-407c-9604-0c94d4618802}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогПроектаНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"КаталогПроектаПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{718,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогПроектаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1384,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогПроектаРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, где находятся файлы тестируемого проекта, необходимые для выполнения тестов."},
{"en","The catalog with the tested project files, which are necessary for test execution."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, где находятся файлы тестируемого проекта, необходимые для выполнения тестов."},
{"en","The catalog with the tested project files, which are necessary for test execution."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1032,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗагрузкаФичПриОткрытии",1,0,
{1,21,
{"ru","Загрузка фичи при открытии VA"},
{"en","Load features on form open"},
{"am","ማውረድ ቅድሚያ የሚሰጡዋቸውን የመክፈቻ ስሪቶች"},
{"az","Yükləmə фичи açarkən VB"},
{"bg","Изтегляне на фичи при отваряне на VB"},
{"et","Allalaadimine фичи avamisel VB"},
{"fr","Le téléchargement de fonctions lors de l'ouverture de VB"},
{"ka","ჩამოწერე თვისებები გახსნისას VB"},
{"de","Download Features beim öffnen VB"},
{"hu","Letöltés funkció megnyitásakor VB"},
{"it","Il caricamento di caratteristiche quando si apre VB"},
{"lv","Lejupielāde фичи atverot VB"},
{"lt","Parsisiųsti фичи atidarius VB"},
{"mn","Татаж авах боломжуудыг нээх үед VB"},
{"pl","Pobieranie cechy po otwarciu VB"},
{"ro","Descărcarea фичи la deschiderea VB"},
{"sl","Prenos funkcij pri odpiranju VB"},
{"es","Descarga slave al abrir VB"},
{"sv","Ladda ner funktioner när du öppnar VB"},
{"tr","Yükleme özellikleri açtığınızda, VB"},
{"vi","Tải tính năng khi mở biểu mẫu"}
},
{1,0},
{2,
{1},
{0,0eafed33-a134-4f55-b472-3eb73684c100}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,0,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,4,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Загружать"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,21,
{"ru","Загружать"},
{"en","Load"},
{"am","አውርድ"},
{"az","Yüklə"},
{"bg","Качвате"},
{"et","Alla laadida"},
{"fr","Télécharger"},
{"ka","უფასო"},
{"de","Laden"},
{"hu","Letöltés"},
{"it","Caricare"},
{"lv","Lejupielādēt"},
{"lt","Atsisiųsti"},
{"mn","Татаж авах"},
{"pl","Pobieranie"},
{"ro","Descărca"},
{"sl","Download"},
{"es","Cargar"},
{"sv","Ladda ner"},
{"tr","İndirmek için"},
{"vi","Tải về"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Загружать и выполнять"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,21,
{"ru","Загружать и выполнять"},
{"en","Load and run"},
{"am","ማውረድ እና ሆኗል"},
{"az","Yükləmək üçün və yerinə yetirmək"},
{"bg","Да изтеглите и стартирате"},
{"et","Alla laadida ja täita"},
{"fr","Télécharger et exécuter un"},
{"ka","უფასო და შეასრულოს"},
{"de","Herunterladen und ausführen"},
{"hu","Töltse le, majd végre"},
{"it","Scaricare ed eseguire"},
{"lv","Lejupielādēt un izpildīt"},
{"lt","Įkelti ir atlikti"},
{"mn","Татаж авах, гүйцэтгэх"},
{"pl","Pobierać i wykonywać"},
{"ro","Descărca și de a efectua"},
{"sl","Prenos in izvajanje"},
{"es","Descargar y ejecutar"},
{"sv","Ladda ner och köra"},
{"tr","Yüklemek ve gerçekleştirmek"},
{"vi","Tải và thực hiện"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Задавать вопрос"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,21,
{"ru","Задавать вопрос"},
{"en","Make question"},
{"am","ጥያቄ መጠየቅ"},
{"az","Sual vermək"},
{"bg","Да си зададем въпроса"},
{"et","Küsi"},
{"fr","Poser une question"},
{"ka","დასვით შეკითხვა"},
{"de","Stellen Sie eine Frage"},
{"hu","Kérdezd"},
{"it","Porre la domanda"},
{"lv","Uzdot jautājumu"},
{"lt","Užduoti klausimą"},
{"mn","Асуух асуулт"},
{"pl","Zadaj pytanie"},
{"ro","Pune o întrebare"},
{"sl","Vprašajte vprašanje"},
{"es","Preguntar"},
{"sv","Ställ fråga"},
{"tr","Soru sor"},
{"vi","Đặt câu hỏi"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Не загружать"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,21,
{"ru","Не загружать"},
{"en","Do not load"},
{"am","."},
{"az","Download"},
{"bg","Не се изтеглят"},
{"et","Ei lae"},
{"fr","Ne pas télécharger"},
{"ka","არ ჩამოტვირთვა"},
{"de","Nicht herunterladen"},
{"hu","Ne letöltés"},
{"it","Non caricare"},
{"lv","Nevar lejupielādēt"},
{"lt","Nereikia atsisiųsti"},
{"mn","Татаж авч хэрэггүй"},
{"pl","Nie pobierać"},
{"ro","Nu pentru a descărca"},
{"sl","Ne prenesete"},
{"es","No descargar"},
{"sv","Ladda inte ner"},
{"tr","İndirmek için değil"},
{"vi","Không thể tải"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1033,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗагрузкаФичПриОткрытииКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1386,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗагрузкаФичПриОткрытииРасширеннаяПодсказка",
{1,2,
{"ru","Позволяет управлять поведением Vanessa Automation при открытии: нужно ли загружать фича файл, с которым велась работа в предыдущей, сесии или нет."},
{"en","Allows you to control the behavior of Vanessa Automation when opening: do you need to upload a feature file with which the work was carried out in the previous session or not."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Позволяет управлять поведением Vanessa Automation при открытии: нужно ли загружать фича файл, с которым велась работа в предыдущей, сесии или нет."},
{"en","Allows you to control the behavior of Vanessa Automation when opening: do you need to upload a feature file with which the work was carried out in the previous session or not."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1791,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗапрашиватьПодтверждениеПриЗакрытии",1,0,
{1,0},
{1,0},
{1,
{40}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,2,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Да"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Да"},
{"en","Yes"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Нет"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Нет"},
{"en","No"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1792,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗапрашиватьПодтверждениеПриЗакрытииКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1793,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗапрашиватьПодтверждениеПриЗакрытииРасширеннаяПодсказка",
{1,2,
{"ru","Позволяет управлять поведением Vanessa Automation при закрытии: нужно ли показывать диалог, подтверждающий закрытие основной формы."},
{"en","Allows Vanessa Automation behavior management on shoutdown: is it necessary to show the dialog of main form closure confirmation."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Позволяет управлять поведением Vanessa Automation при закрытии: нужно ли показывать диалог, подтверждающий закрытие основной формы."},
{"en","Allows Vanessa Automation behavior management on shoutdown: is it necessary to show the dialog of main form closure confirmation."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{500,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КомандаСделатьСкриншот",1,0,
{1,21,
{"ru","Команда создания скриншотов"},
{"en","Console command on screenshots create"},
{"am","መሥሪያ ትዕዛዝ ለመፍጠር ቅጽበታዊ ገጽ እይታዎች"},
{"az","Консольная komanda yaratmaq ekran"},
{"bg","Конзолната команда създаване на скрийншоти"},
{"et","Konsooli käsk luua ekraanikuvasid"},
{"fr","La commande de création de captures d'écran"},
{"ka","Console command შექმნათ პროფესიონალური"},
{"de","Konsolenbefehl erstellen von screenshots"},
{"hu","Konzol parancs, hogy hozzon létre screenshotok"},
{"it","Riga di comando per la creazione di screenshot"},
{"lv","Konsole komanda radītu ekrānšāviņi"},
{"lt","Konsolės komanda sukurti vaizdus"},
{"mn","Консол тушаал бий болгох дэлгэцийн"},
{"pl","Konsola drużyna tworzenia zrzutów ekranu"},
{"ro","Consola de comanda a crea capturi de ecran"},
{"sl","Konzola ukaz, da ustvarite screenshots"},
{"es","Comando de consola crear capturas de pantalla"},
{"sv","Console för att skapa skärmdumpar"},
{"tr","Konsol komutu oluşturmak ekran görüntüleri"},
{"vi","Lệnh điều khiển tạo ảnh chụp màn hình"}
},
{1,0},
{2,
{1},
{0,20371760-fed8-4ccc-8549-d8fa5bdc3842}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{501,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КомандаСделатьСкриншотКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1402,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаСделатьСкриншотРасширеннаяПодсказка",
{1,2,
{"ru","В поле указывается консольная команда, которая будет использоваться при снятии скриншотов.
Например:
1. ""C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=
2. nircmd savescreenshot"},
{"en","Specify the command line used to create the screenshots.
E.g.:
1. ""C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=
2. nircmd savescreenshot"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","В поле указывается консольная команда, которая будет использоваться при снятии скриншотов.
Например:
1. <b>""C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=</>
2. <b>nircmd savescreenshot</>"},
{"en","Specify the command line used to create the screenshots.
E.g.:
1. <b>""C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=</>
2. <b>nircmd savescreenshot</>"}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2246,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаВнешняяКомпонента",
{1,1,
{"ru","Группа внешняя компонента"}
},
{1,1,
{"ru","Группа внешняя компонента"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2,
{3,4,
{0}
},0,2,0,2},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2248,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ИспользоватьВнешнююКомпонентуДляСкриншотов",4,0,
{1,0},
{1,0},
{2,
{1},
{0,2842a0f9-dcbc-4d74-8fd6-ef1ea2e68704}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{2249,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИспользоватьВнешнююКомпонентуДляСкриншотовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2250,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИспользоватьВнешнююКомпонентуДляСкриншотовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2253,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СпособСнятияСкриншотовВнешнейКомпонентой",0,0,
{1,0},
{1,0},
{2,
{1},
{0,2c5d6dbb-1c08-4fc0-9674-a6859da7ed1e}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,3,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"N",0},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Весь экран"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"N",1},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Область активного окна"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"N",2},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Только активное окно"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2254,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СпособСнятияСкриншотовВнешнейКомпонентойКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2255,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СпособСнятияСкриншотовВнешнейКомпонентойРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2251,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"УстановитьВнешнююКомпонентуДляСкриншотов",
{1,1,
{"ru","Установить компоненту"}
},1,
{86,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2252,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УстановитьВнешнююКомпонентуДляСкриншотовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},1,0,1,
{11,
{2247,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаВнешняяКомпонентаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1776,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КомандаОткрытияФичиВТекстовомРедакторе",1,0,
{1,0},
{1,0},
{2,
{1},
{0,b8bf823c-f1b1-49f0-92be-cbe0b213df5a}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1777,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КомандаОткрытияФичиВТекстовомРедактореКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1778,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаОткрытияФичиВТекстовомРедактореРасширеннаяПодсказка",
{1,2,
{"ru","В поле указывается текстовый редактор, в котором будет открыт фича файл и спозиционирован на текущей строке, при выполнении команды ""Открыть .feature файл в редакторе""."},
{"en","This field contains text editor, used for feature file editing and line positioning on execution of ""Open .feature файл in the editor"" command."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","В поле указывается текстовый редактор, в котором будет открыт фича файл и спозиционирован на текущей строке, при выполнении команды ""Открыть .feature файл в редакторе""."},
{"en","This field contains text editor, used for feature file editing and line positioning on execution of ""Open .feature файл in the editor"" command."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2228,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПоставщикПользовательскихНастроек",1,0,
{1,2,
{"ru","Поставщик пользовательских настроек"},
{"en","Custom setting provider"}
},
{1,0},
{2,
{1},
{0,a3048a2b-322b-43dc-86be-c9eedba28f19}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,2,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","CONSUL"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","CONSUL"},
{"en","CONSUL"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","FILE"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","FILE"},
{"en","FILE"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2229,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПоставщикПользовательскихНастроекКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2230,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоставщикПользовательскихНастроекРасширеннаяПодсказка",
{1,2,
{"ru","Добавить описание"},
{"en","Add description"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Добавить описание"},
{"en","Add description"}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2231,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"АдресПользовательскихНастроек",1,0,
{1,2,
{"ru","Адрес пользовательских настроек"},
{"en","Address of custom settings"}
},
{1,0},
{2,
{1},
{0,45c40a97-c09b-484f-a6d6-192c3323fbea}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2232,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"АдресПользовательскихНастроекКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2233,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"АдресПользовательскихНастроекРасширеннаяПодсказка",
{1,2,
{"ru","файловый путь или url по которому находятся настройки. По умолчанию каталог проекта (имя файлы по умолчанию user_settings.json)  или localhost"},
{"en","file path or url for settings. By default, project directory (name of default file user_settings.json) or localhost"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","файловый путь или url по которому находятся настройки. По умолчанию каталог проекта (имя файлы по умолчанию user_settings.json)  или localhost"},
{"en","file path or url for settings. By default, project directory (name of default file user_settings.json) or localhost"}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1532,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"СброситьКешИзвестныхStepDefinition",
{1,0},1,
{49,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,3,1,
{11,
{1533,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СброситьКешИзвестныхStepDefinitionРасширеннаяПодсказка",
{1,2,
{"ru","Сбрасбывает кеш известных шагов. После выполнения команды нужно закрыть Vanessa Automation и открыть заново. "},
{"en","Clears known steps cash. After command execution close Vanessa Automation and reopen it. "}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Сбрасбывает кеш известных шагов. После выполнения команды нужно закрыть Vanessa Automation и открыть заново. "},
{"en","Clears known steps cash. After command execution close Vanessa Automation and reopen it. "}
},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},1,0,1,
{11,
{1361,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаСервисОсновныеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1838,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаКлиентыТестирования",
{1,2,
{"ru","Настройки клиентов тестирования"},
{"en","Test clients"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},4,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1842,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗапускатьКлиентТестированияСМаксимизированнымОкном",4,0,
{1,0},
{1,0},
{2,
{1},
{0,062fac23-0ee7-4427-84f5-6987c0a84b0a}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1843,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗапускатьКлиентТестированияСМаксимизированнымОкномКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1844,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗапускатьКлиентТестированияСМаксимизированнымОкномРасширеннаяПодсказка",
{1,2,
{"ru","Если опция включена клиент тестирования будет запущен развёрнутым на весь экран."},
{"en","If the option is on, TestClient will launch in full-screen mode."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если опция включена клиент тестирования будет запущен развёрнутым на весь экран."},
{"en","If the option is on, TestClient will launch in full-screen mode."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1672,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаймаутЗапуска1С",1,0,
{1,0},
{1,0},
{2,
{1},
{0,444c19dc-031b-4574-9456-46d0bbab779c}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1673,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаймаутЗапуска1СКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1674,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаймаутЗапуска1СРасширеннаяПодсказка",
{1,2,
{"ru","Устанавливает макимальное время, в течение которого Vanessa Automation будет ждать запуска клиента тестирования. По истечении времени будет вызвано исключение."},
{"en","Specifies timeout of Vanessa Automation awaiting for TestClient launch. After timeout the exception will be risen."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Устанавливает макимальное время, в течение которого Vanessa Automation будет ждать запуска клиента тестирования. По истечении времени будет вызвано исключение."},
{"en","Specifies timeout of Vanessa Automation awaiting for TestClient launch. After timeout the exception will be risen."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1683,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДиапазонПортовTestclient",1,0,
{1,0},
{1,0},
{2,
{1},
{0,17188653-ed0c-4672-bd1f-4f01f3898d39}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1684,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДиапазонПортовTestclientКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1685,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДиапазонПортовTestclientРасширеннаяПодсказка",
{1,2,
{"ru","Устанавливает диапазон портов, в котором будет производиться поиск свободного порта в системе для запуска клиента тестирования."},
{"en","Specifies ports range to search for free port to run TestClient."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Устанавливает диапазон портов, в котором будет производиться поиск свободного порта в системе для запуска клиента тестирования."},
{"en","Specifies ports range to search for free port to run TestClient."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{859,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаОтладкаКлиентаТестирования",
{1,21,
{"ru","Отладка TestClient"},
{"en","TestClient debug"},
{"am","አንድ TestClient"},
{"az","Ayıklama TestClient"},
{"bg","Отстраняване На Грешки TestClient"},
{"et","Silumine TestClient"},
{"fr","Débogage TestClient"},
{"ka","გამართვის TestClient"},
{"de","Debuggen Von Testclient"},
{"hu","Debug TestClient"},
{"it","Debug TestClient"},
{"lv","Atkļūdošana TestClient"},
{"lt","Derinimas TestClient"},
{"mn","Дибаг TestClient"},
{"pl","Debugowanie TestClient"},
{"ro","Depanare TestClient"},
{"sl","Debug TestClient"},
{"es","La Depuración De TestClient"},
{"sv","Felsöka TestClient"},
{"tr","Hata Ayıklama TestClient"},
{"vi","Gỡ rối TestClient"}
},
{1,2,
{"ru","Группа отладка клиента тестирования"},
{"en","Group debug client test"}
},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{867,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗапускатьТестКлиентВРежимеОтладки",4,0,
{1,2,
{"ru","Запускать клиент тестирования в режиме отладки"},
{"en","Run test client in debug mode"}
},
{1,0},
{2,
{1},
{0,40b1a642-6565-46d5-9eda-554b325627a0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗапускатьТестКлиентВРежимеОтладкиПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{868,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗапускатьТестКлиентВРежимеОтладкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1366,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗапускатьТестКлиентВРежимеОтладкиРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то при запуске клиента тестирования уму будут переданы дополнительные ключи запуска /debug и /debuggerURL"},
{"en","If the check box is on, TestClient will be launched with parameters /debug and /debuggerURL"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то при запуске клиента тестирования уму будут переданы дополнительные ключи запуска /debug и /debuggerURL"},
{"en","If the check box is on, TestClient will be launched with parameters /debug and /debuggerURL"}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{924,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаНастройкиОтладчика",
{1,2,
{"ru","Настройки отладчика"},
{"en","Debugger congfig"}
},
{1,2,
{"ru","Группа настройки отладчика"},
{"en","Group debugger settings"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{864,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"АдресОтладчика",1,0,
{1,0},
{1,2,
{"ru","http://localhost:1560"},
{"en","http://localhost:1560"}
},
{2,
{1},
{0,533a26ed-ea27-4523-a57d-023be95a6d58}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{865,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"АдресОтладчикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1369,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"АдресОтладчикаРасширеннаяПодсказка",
{1,2,
{"ru","Адрес отладчика, который будет передан клиенту тестирования."},
{"en","Address of debugger to be passed to TestClient."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Адрес отладчика, который будет передан клиенту тестирования."},
{"en","Address of debugger to be passed to TestClient."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{861,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КлючиОтладки",1,0,
{1,0},
{1,2,
{"ru","-http -attach"},
{"en","-http -attach"}
},
{2,
{1},
{0,840a1222-1134-4e9c-8b6b-3e6b43832313}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{862,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КлючиОтладкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1368,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КлючиОтладкиРасширеннаяПодсказка",
{1,2,
{"ru","Ключи отладки, которые будут переданы клиенту тестирования при запуске."},
{"en","Launch parameters to be passed to TestClient."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Ключи отладки, которые будут переданы клиенту тестирования при запуске."},
{"en","Launch parameters to be passed to TestClient."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1367,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНастройкиОтладчикаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1365,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаОтладкаКлиентаТестированияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1839,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаКлиентыТестированияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1840,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаВыполнениеСценариев",
{1,2,
{"ru","Выполнение сценариев"},
{"en","Running scenarios"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},12,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{335,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ВыполнятьШагиАссинхронно",4,0,
{1,21,
{"ru","Обновлять состояние дерева при выполнении шагов"},
{"en","Invoke steps as async procedure"},
{"am","አዳዲስ ግምገማዎች በይፋ ዛፍ አሁን stepping"},
{"az","Yeniləmə vəziyyəti ağac yerinə yetirərkən addımlar"},
{"bg","Актуализира състоянието на дърво при извършване на стъпки"},
{"et","Värskenda olek puu, kui teed sammu"},
{"fr","Mettre à jour l'état de l'arborescence lors de l'étape"},
{"ka","განაახლოს სტატუსი ხე, როცა stepping"},
{"de","Aktualisieren Sie den Zustand des Baumes bei der Ausführung der Schritte"},
{"hu","Az állapot frissítéséhez a fát, amikor lépek"},
{"it","Aggiornare lo stato di un albero per i passaggi"},
{"lv","Atjaunināt statusu koka veicot pasākumus"},
{"lt","Atnaujinti būseną medžio atliekant veiksmus"},
{"mn","Шинэчлэх байдал модны үед орохдоо"},
{"pl","Aktualizować stan drzewa w krokach"},
{"ro","Pentru a actualiza starea de copac când efectuați pași"},
{"sl","Posodobitev stanja drevesa, ko stopam"},
{"es","Actualizar el estado de la madera, al seguir los pasos"},
{"sv","Uppdatera status träd när man går"},
{"tr","Güncelleme durumunu ahşap adımda"},
{"vi","Cập nhật trạng thái cây khi thực hiện các bước"}
},
{1,21,
{"ru","Если флаг выставлен - то это замедляет выполнение шагов, но позоволяет обновлять состояние дерева при выполнении каждого шага."},
{"en","If the flag is set, it slows down the execution of the steps, but it allows you to update the state of the tree at each step."},
{"am","በቀዳሚ ግምገማዎች ላይ ጠቋሚ ነው አንድ አንድ ለማየት ቅድሚያ የሚሰጡዋቸውን በአፈጻጸም ነው. ነገር ግን አሁን የሚከተሉትን እንዲያደርጉ ያስችልዎታል. የግዛት ዛፍ በያንዳንዱ."},
{"az","Əgər bayrağı kəsilib - bu, aşağı yavaşlatır yerinə addımlar, amma позоволяет yeniləmə vəziyyəti ağac yerinə yetirilərkən hər bir addım."},
{"bg","Ако флаг забелязан това забавя изпълнението на стъпки, но позоволяет актуализира състоянието на дърво при изпълнение на всяка стъпка."},
{"et","Kui lipp on pandud - siis see aeglustab rakendamise samme, kuid позоволяет uuendada riik puust, täites iga sammu."},
{"fr","Si l'indicateur est exposé, c'ralentit l'exécution des étapes, mais permet de mettre à jour l'état de l'arborescence lors de l'exécution de chaque étape."},
{"ka","თუ დროშა არის მითითებული, მაშინ ეს ანელებს აღსრულების ნაბიჯები, მაგრამ ჩვენების საშუალებას გაძლევთ განაახლოთ ქალაქი ხე ყოველი ნაბიჯი."},
{"de","Wenn die Option aktiviert ist - dann ist es verlangsamt die Ausführung der Schritte, sondern ermöglicht Aktualisierung des Baumes bei der Ausführung der einzelnen Schritte."},
{"hu","Ha a flag be van állítva, akkor ez lassítja a végrehajtás a lépéseket, de a kijelző lehetővé teszi, hogy a frissítés az állam, a fa minden egyes lépésnél."},
{"it","Se il flag esposto questo rallenta le operazioni, ma позоволяет aggiornare lo stato di un albero per ogni fase."},
{"lv","Ja karogs ir iestādīts - tas palēnina izpildes pasākumus, bet позоволяет atjaunināt savu statusu, koka veicot katra soļa."},
{"lt","Jei vėliava pateikta - tai lėtina atlikti veiksmus, bet позоволяет atnaujinti būseną medžio atliekant kiekvieną žingsnį."},
{"mn","Хэрэв туг нь тогтоож, дараа нь энэ нь удаашруулдаг хэрэгжүүлэх арга хэмжээ, гэхдээ харуулах боломжийг олгодог шинэчлэх төрийн модны бүр алхам."},
{"pl","Jeśli flaga jest wystawiony to spowalnia wykonanie kroków, ale позоволяет aktualizować stan drzewa podczas wykonywania każdego kroku."},
{"ro","În cazul în care pavilion expus - atunci acesta încetinește performanța de pași, dar позоволяет actualiza starea lemn când efectuați fiecare pas."},
{"sl","Če zastavo nastavljena, potem je to upočasni izvajanje navodila, vendar zaslona vam omogoča, da posodobite stanje drevesa na vsakem koraku."},
{"es","Si habilitada esto ralentiza la ejecución de pasos, pero pozovolyaet actualizar el estado de la madera cuando la ejecución de cada paso."},
{"sv","Om flaggan är satt, så det saktar ner för genomförandet av åtgärder, men displayen låter dig uppdatera staten av trädet vid varje steg."},
{"tr","Bir bayrak koymak bu yavaşlar adımları, ama bağlantısı uzaktan güncelleme durumunu ahşap çalıştırdığınızda, her bir adımda."},
{"vi","Nếu thiết lập hộp kiểm thì điều này làm chậm việc thực hiện các bước, nhưng cho phép cập nhật tình trạng cây khi thực hiện mỗi bước."}
},
{2,
{1},
{0,d3e90876-ed13-418b-8adf-61b9879875ae}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ВыполнятьШагиАссинхронноПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{336,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыполнятьШагиАссинхронноКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1374,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыполнятьШагиАссинхронноРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то каждый шаг сценария будет выполняться асинхронно с указанным интервалом.
Если флаг снят, то шаги будут выполняться синхронно. Дерево шагов при этом будет обновлять своё состояние каждый сотый шаг.
При снятом флаге сценарий будет выполняються в несколько раз быстрее."},
{"en","If the checkbox is on, each step will be executed asynchronously with the specified delay.
If the checkbox is off, the steps will be executed synchronously. Steps tree will be updated on each 100th step.
Scenario runs several times faster when the flag is off."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то каждый шаг сценария будет выполняться асинхронно с указанным интервалом.
Если флаг снят, то шаги будут выполняться синхронно. Дерево шагов при этом будет обновлять своё состояние каждый сотый шаг.
При снятом флаге сценарий будет выполняються в несколько раз быстрее."},
{"en","If the checkbox is on, each step will be executed asynchronously with the specified delay.
If the checkbox is off, the steps will be executed synchronously. Steps tree will be updated on each 100th step.
Scenario runs several times faster when the flag is off."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2001,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ИнтервалВыполненияШагаЗаданныйПользователем",1,0,
{1,21,
{"ru","Интервал выполнения шага"},
{"en","Step invoke sleep interval"},
{"am","በ ደረጃ"},
{"az","İnterval yerinə yetirilməsi addım"},
{"bg","Интервалът на извършване на стъпки"},
{"et","Intervall teha samm"},
{"fr","L'intervalle d'exécution de l'étape"},
{"ka","ინტერვალი ნაბიჯი"},
{"de","Intervall Schritt"},
{"hu","Intervallum lépés"},
{"it","L'intervallo di passaggio"},
{"lv","Intervāls veiktu soli"},
{"lt","Intervalas atlikti žingsnis"},
{"mn","Интервал алхам"},
{"pl","Interwał wykonywania kroku"},
{"ro","Intervalul pasul"},
{"sl","Interval korak"},
{"es","El intervalo de paso"},
{"sv","Intervall steg"},
{"tr","Aralık adım"},
{"vi","Khoảng thực hiện của bước"}
},
{1,0},
{2,
{1},
{0,b2ac6d56-9033-42b5-b64a-c9af0dc62ce3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},7,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2002,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИнтервалВыполненияШагаЗаданныйПользователемКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2003,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИнтервалВыполненияШагаЗаданныйПользователемРасширеннаяПодсказка",
{1,2,
{"ru","Задаёт интервал выполнение между шагами сценария при асинхронном режиме выполнения шагов."},
{"en","Specifies delay between steps in asynchronous mode."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт интервал выполнение между шагами сценария при асинхронном режиме выполнения шагов."},
{"en","Specifies delay between steps in asynchronous mode."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1880,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ОбновлятьСтатистикуВДереве",4,0,
{1,0},
{1,0},
{2,
{1},
{0,d2cf275b-ddd4-4ef3-8ac1-8aaf9d5346b2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1881,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ОбновлятьСтатистикуВДеревеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1882,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОбновлятьСтатистикуВДеревеРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то во время выполнения сценария происходит обновление статистики: сколько шагов сценария прошло, сколько сценариев упало и подобное.
"},
{"en","If the checkbox is on, scenario statistic will be collected: number of steps passed, number of scenarios failes etc.
"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то во время выполнения сценария происходит обновление статистики: сколько шагов сценария прошло, сколько сценариев упало и подобное.
"},
{"en","If the checkbox is on, scenario statistic will be collected: number of steps passed, number of scenarios failes etc.
"}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1957,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ОбновлятьДеревоПриНачалеВыполненияСценария",4,0,
{1,0},
{1,0},
{2,
{1},
{0,102de872-db26-49d0-8831-3afb2b24394c}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1958,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ОбновлятьДеревоПриНачалеВыполненияСценарияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1959,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОбновлятьДеревоПриНачалеВыполненияСценарияРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то при обновлении дерева шагов будет активизироваться текущая строка дерева. Допускатеся снимать флаг при выполнении сценариев на CI сервере для ускорения."},
{"en","If the checkbox is on, current row of the tree will be active on step execution. It is allowed to turn the checkbox off on CI server to fasten up."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то при обновлении дерева шагов будет активизироваться текущая строка дерева. Допускатеся снимать флаг при выполнении сценариев на CI сервере для ускорения."},
{"en","If the checkbox is on, current row of the tree will be active on step execution. It is allowed to turn the checkbox off on CI server to fasten up."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{954,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ОстановкаПриВозникновенииОшибки",4,0,
{1,21,
{"ru","Остановка при возникновении ошибки"},
{"en","Stop on error"},
{"am","ቅድሚያ የሚሰጡዋቸውን ስህተት ይኖራል"},
{"az","Stop yarandıqda səhvlər"},
{"bg","Спирка при възникване на грешка"},
{"et","Stop vea ilmnemisel"},
{"fr","Arrêt en cas d'erreur"},
{"ka","შეწყდეს, როდესაც შეცდომა ხდება"},
{"de","Stop wenn ein Fehler Auftritt"},
{"hu","Állj meg, amikor hiba fordul elő"},
{"it","Stop in caso di errore"},
{"lv","Apstāšanās, ja rodas kļūda"},
{"lt","Stotelė kai įvyksta klaida"},
{"mn","Зогсоох үед алдаа гардаг"},
{"pl","Przystanek w przypadku wystąpienia błędu"},
{"ro","Oprire atunci când apare o eroare"},
{"sl","Ustavi, ko pride do napake"},
{"es","La parada cuando se produce un error"},
{"sv","Sluta när fel uppstår"},
{"tr","Durdurma bir hata oluştuğunda"},
{"vi","Dừng khi xảy ra lỗi"}
},
{1,0},
{2,
{1},
{0,82396c19-d212-45d0-a6c9-6721b573e40e}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{955,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ОстановкаПриВозникновенииОшибкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1375,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОстановкаПриВозникновенииОшибкиРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то сценарии будут выполняться до первой ошибки.
Все последующие сценарии выполняться не будут."},
{"en","If the checkbox is on, scenario will be executed until the first error occurs.
All the following scenarios will be skipped."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то сценарии будут выполняться до первой ошибки.
Все последующие сценарии выполняться не будут."},
{"en","If the checkbox is on, scenario will be executed until the first error occurs.
All the following scenarios will be skipped."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1750,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки",4,0,
{1,0},
{1,0},
{2,
{1},
{0,677c400c-bbcc-4a89-a0bf-eb564f73eac5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1751,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПоказыватьНомерСтрокиДереваПриВозникновенииОшибкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1752,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказыватьНомерСтрокиДереваПриВозникновенииОшибкиРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то при возникновении ошибки в дереве шагов будет показана колонка с номером строки в дереве, если эта колонка была скрыта."},
{"en","If flag is set, when an error occurs in tree steps will be shown column with the row number in the tree, if this column was hidden."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то при возникновении ошибки в дереве шагов будет показана колонка с номером строки в дереве, если эта колонка была скрыта."},
{"en","If flag is set, when an error occurs in tree steps will be shown column with the row number in the tree, if this column was hidden."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2055,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ПриравниватьPendingКFailed",4,0,
{1,0},
{1,0},
{2,
{1},
{0,bf68bd90-89f1-4b85-bd57-81dd95821eb0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{2056,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПриравниватьPendingКFailedКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2057,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПриравниватьPendingКFailedРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то при выполнении сценариев на CI сервере, если будут найдены нереализованные шаги (""pending"") статус сборки всё равно будет ""failed"".
Флаг рекомендуется устанавливать."},
{"en","If the checkbox is on, pending steps will set assembly status to failed on the execution on CI server.
It is recommended to set this checkbox on."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то при выполнении сценариев на CI сервере, если будут найдены нереализованные шаги (""pending"") статус сборки всё равно будет ""failed"".
Флаг рекомендуется устанавливать."},
{"en","If the checkbox is on, pending steps will set assembly status to failed on the execution on CI server.
It is recommended to set this checkbox on."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1773,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаймаутДляАсинхронныхШагов",1,0,
{1,0},
{1,0},
{2,
{1},
{0,78135e9c-0557-4652-b62e-f06a9749505d}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},5,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1774,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаймаутДляАсинхронныхШаговКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1775,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаймаутДляАсинхронныхШаговРасширеннаяПодсказка",
{1,2,
{"ru","Указывает максимальное время ожидания для асинхронного шага.
Например, если задано значение параметра равное 20 секунд и используется шаг
И я жду, что поле с именем ""ИмяПоля"" перестанет быть пустым в течение 10 секунд
тогда в рельности максимальное время работы шага будет 20 секунд, а не 10."},
{"en","Specifies maximum timeout for async step.
E.g., is the parameter is set to 20 seconds and the step 
And I wait for the field named ""FieldName"" to be filled in 10 seconds is called
then the real time of this step execution will be 20 seconds but not 10."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Указывает максимальное время ожидания для асинхронного шага.
Например, если задано значение параметра равное 20 секунд и используется шаг
<i>И я жду, что поле с именем ""ИмяПоля"" перестанет быть пустым в течение 10 секунд</>
тогда в рельности максимальное время работы шага будет 20 секунд, а не 10."},
{"en","Specifies maximum timeout for async step.
E.g., is the parameter is set to 20 seconds and the step 
<i>And I wait for the field named ""FieldName"" to be filled in 10 seconds</> is called
then the real time of this step execution will be 20 seconds but not 10."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1747,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КоличествоСекундПоискаОкна",1,0,
{1,0},
{1,0},
{2,
{1},
{0,e7f711ca-d445-4ea6-a9b9-e32db1875229}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1748,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КоличествоСекундПоискаОкнаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1749,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КоличествоСекундПоискаОкнаРасширеннаяПодсказка",
{1,2,
{"ru","Максимальное время для поиска окна в шаге
И тогда открылось окно ""ИмяОкна"""},
{"en","Maximum timeout for window search in the step
And then ""WindowName"" window is opened"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Максимальное время для поиска окна в шаге
<i>И тогда открылось окно ""ИмяОкна""</>"},
{"en","Maximum timeout for window search in the step
<i>And then ""WindowName"" window is opened</>"}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1819,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КоличествоПопытокВыполненияДействия",1,0,
{1,0},
{1,0},
{2,
{1},
{0,255ffedf-4c1d-4ef0-a2aa-8ff7ca467324}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},5,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1820,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КоличествоПопытокВыполненияДействияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1821,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КоличествоПопытокВыполненияДействияРасширеннаяПодсказка",
{1,2,
{"ru","Устанавливает количество попыток выполнения действий для многих шагов.
Увеличение значения параметра может повысить стабильность выполннения сценариев на медленном железе."},
{"en","Sets maximum tries number for multiple steps.
Increasing this parameter may make scenarios execution more stable on the weak hardware."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Устанавливает количество попыток выполнения действий для многих шагов.
Увеличение значения параметра может повысить стабильность выполннения сценариев на медленном железе."},
{"en","Sets maximum tries number for multiple steps.
Increasing this parameter may make scenarios execution more stable on the weak hardware."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1784,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"БезопасноеВыполнениеШагов",4,0,
{1,0},
{1,0},
{2,
{1},
{0,8ed321d6-bf3c-446f-90e9-76770532f6f9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"БезопасноеВыполнениеШаговПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1785,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"БезопасноеВыполнениеШаговКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1786,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"БезопасноеВыполнениеШаговРасширеннаяПодсказка",
{1,2,
{"ru","Добавляет паузу при выполнении многих действий, которые потенциально могут приводить к не стабильному выполнению сценариев, например: переход к строке, проверка значения поля и т.д.
Данная опция существенно замедляет выполнение сценариев."},
{"en","Adds delay for multiple actions, which may cause unstable scenario execution, e.g.: move to line, field value check etc.
This option slow the execution down ."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Добавляет паузу при выполнении многих действий, которые потенциально могут приводить к не стабильному выполнению сценариев, например: переход к строке, проверка значения поля и т.д.
Данная опция существенно замедляет выполнение сценариев."},
{"en","Adds delay for multiple actions, which may cause unstable scenario execution, e.g.: move to line, field value check etc.
This option slow the execution down ."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1883,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПаузаПриОткрытииОкна",1,0,
{1,0},
{1,0},
{2,
{1},
{0,361929be-ad16-4566-b923-43272cb79a61}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},5,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1884,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПаузаПриОткрытииОкнаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1885,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПаузаПриОткрытииОкнаРасширеннаяПодсказка",
{1,2,
{"ru","Значение дополнительной паузы, которая будет всегда применяться в шаге
И тогда открылось окно ""ИмяОкна"""},
{"en","The value of the additional delay to be applied in the step
And then the window ""WindowName"" is opened"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Значение дополнительной паузы, которая будет всегда применяться в шаге
<i>И тогда открылось окно ""ИмяОкна""</>"},
{"en","The value of the additional delay to be applied in the step
<i>And then the window ""WindowName"" is opened</>"}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1841,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаВыполнениеСценариевРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{654,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаОтчетыОЗапуске",
{1,21,
{"ru","Отчет о запуске сценариев"},
{"en","Reports"},
{"am","ሪፖርት ይታያል"},
{"az","Hesabat başlamaq haqqında ssenarilər"},
{"bg","Доклад за стартиране на скриптове"},
{"et","Aruande käivitada skripte"},
{"fr","Le rapport sur l'exécution de scripts"},
{"ka","ანგარიში სკრიფტები"},
{"de","Bericht über die Ausführung von Skripts"},
{"hu","Jelentés scripting"},
{"it","Il rapporto sull'esecuzione degli script"},
{"lv","Pārskats par starta skriptu"},
{"lt","Ataskaitą apie paleidimo scenarijus"},
{"mn","Тайлан скрипт"},
{"pl","Raport na temat uruchamiania skryptów"},
{"ro","Raportul cu privire la lansarea de scripting"},
{"sl","Poročilo skriptni"},
{"es","Informe acerca de la ejecución de secuencias de comandos"},
{"sv","Rapport scripting"},
{"tr","Raporu çalıştırdığınızda, komut dosyası"},
{"vi","Báo cáo về khởi động các kịch bản"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},7,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1996,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаУсловияВыгрузки",
{1,2,
{"ru","Условия выгрузки"},
{"en","Conditions of discharge"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2,
{3,4,
{0}
},0,2,0,2},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1993,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДобавлятьКИмениСценарияУсловияВыгрузки",4,0,
{1,2,
{"ru","Добавлять к имени сценария условия выгрузки "},
{"en","Add upload conditions to the script name"}
},
{1,0},
{2,
{1},
{0,a489e1c3-cc1e-4433-b2a3-01a3fb90ade2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДобавлятьКИмениСценарияУсловияВыгрузкиПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1994,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДобавлятьКИмениСценарияУсловияВыгрузкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1995,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДобавлятьКИмениСценарияУсловияВыгрузкиРасширеннаяПодсказка",
{1,2,
{"ru","Данная опция используется, когда для нескольких похожих сборок (например запуск одних и техже тестов) формируется один отчет (например Allure). Тогда, чтобы избежать неуникальности имен сценариев к имени сценария будет добавляться значение поля ""Имя текущей сборки""."},
{"en","This option is used when one report (e.g. Allure) is generated for several similar assemblies (e.g., the same tests). In this case ""Current assembly name"" field value will be added to the scenario name to avoid non-unique names. "}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Данная опция используется, когда для нескольких похожих сборок (например запуск одних и техже тестов) формируется один отчет (например Allure). Тогда, чтобы избежать неуникальности имен сценариев к имени сценария будет добавляться значение поля ""Имя текущей сборки""."},
{"en","This option is used when one report (e.g. Allure) is generated for several similar assemblies (e.g., the same tests). In this case ""Current assembly name"" field value will be added to the scenario name to avoid non-unique names. "}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1997,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаУсловияВыгрузкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1998,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ИмяТекущейСборки",1,0,
{1,2,
{"ru","Имя текущей сборки"},
{"en","Current build name"}
},
{1,0},
{2,
{1},
{0,013d421d-1a05-494b-a20b-39042a28fcfd}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1999,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИмяТекущейСборкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2000,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИмяТекущейСборкиРасширеннаяПодсказка",
{1,2,
{"ru","Уникальное имя сборки, которое используется совместно с параметром ""Добавлять у имени сценария условия выгрузки""."},
{"en","Unique assembly name used along with the parameter ""Add uploading conditions to scenario name""."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Уникальное имя сборки, которое используется совместно с параметром ""Добавлять у имени сценария условия выгрузки""."},
{"en","Unique assembly name used along with the parameter ""Add uploading conditions to scenario name""."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1534,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаСкриншоты",
{1,2,
{"ru","Скриншоты"},
{"en","Screenshots"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,1,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},1,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{507,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьСкриншотПриВозникновенииОшибки",4,0,
{1,21,
{"ru","Формировать скриншот при ошибке"},
{"en","Create screnshoots on exception"},
{"am","አንድ ግምገማ ቅድሚያ ከሌሎች ስህተት"},
{"az","Formalaşdırmaq ekran zamanı səhv"},
{"bg","Формиране на екрана при грешка"},
{"et","Kujundada screenshot kui viga"},
{"fr","Former une capture d'écran en cas d'erreur"},
{"ka","გენერირება screenshot შეცდომა"},
{"de","Formung, wenn eine Fehlermeldung Screenshot"},
{"hu","Hogy létrehoz egy screenshot a hiba"},
{"it","Formazione screenshot in caso di errore"},
{"lv","Formēt screenshot, kad kļūda"},
{"lt","Formuoti screenshot, kai klaida"},
{"mn","Бий болгох нь дэлгэцийн алдаа"},
{"pl","Kształtować zrzut ekranu w błędzie"},
{"ro","Pentru a forma o captură de ecran în caz de eroare"},
{"sl","Za ustvarjanje screenshot z napako"},
{"es","Formar una captura de pantalla en caso de error"},
{"sv","För att skapa en skärmdump med felet"},
{"tr","Şekillendirme ekran hatası"},
{"vi","Tạo ảnh chụp màn hình khi lỗi"}
},
{1,0},
{2,
{1},
{0,a0413348-0fed-41ea-8cf3-7827976027f3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДелатьСкриншотПриВозникновенииОшибкиПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{508,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьСкриншотПриВозникновенииОшибкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1391,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьСкриншотПриВозникновенииОшибкиРасширеннаяПодсказка",
{1,2,
{"ru","Включает снятие скриншотов при возникновении ошибки.
Для работы опции необходимо, чтобы было заполнено поле ""Команда создания скриншотов""."},
{"en","Switches on snapshot creating on error.
The field ""Snapshot creation command"" must be filled for this option."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает снятие скриншотов при возникновении ошибки.
Для работы опции необходимо, чтобы было заполнено поле ""Команда создания скриншотов""."},
{"en","Switches on snapshot creating on error.
The field ""Snapshot creation command"" must be filled for this option."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2045,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаСкриншотыНастройки",
{1,2,
{"ru","Скриншоты настройки"},
{"en","Screenshots of the settings"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1581,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СниматьСкриншотКаждогоОкна1С",4,0,
{1,21,
{"ru","Снимать скриншот каждого окна 1С"},
{"en","Take every window screenshot"},
{"am","ማስጠንቀቂያ ቅድሚያ የሚሰጡዋቸውን መስኮት 1C"},
{"az","Şəkil çəkmək üçün ekran və hər bir windows, 1C"},
{"bg","Снима екрана на всеки прозорец 1C"},
{"et","Tulistada screenshot iga akna 1S"},
{"fr","Retirer la capture d'écran de chaque fenêtre 1S"},
{"ka","მიიღოს სკრინშოტი თითოეული ფანჯარა 1C"},
{"de","Schießen Screenshot jedes Fenster 1S"},
{"hu","Egy screenshot minden ablak 1C"},
{"it","Scattare uno screenshot di ogni finestra 1S"},
{"lv","Uzņemt screenshot no katra loga 1C"},
{"lt","Šaudyti screenshot kiekvieno lango 1"},
{"mn","Онцлог нь дэлгэцийн авах, тус бүрийн цонх 1C"},
{"pl","Zrob zrzut ekranu z każdego okna 1C"},
{"ro","Pentru a trage un screenshot de la fiecare fereastră 1C"},
{"sl","Posnetek zaslona vsako okno 1C"},
{"es","Retirar la captura de pantalla de cada una de las ventanas 1S"},
{"sv","Ta en skärmdump av varje fönster 1C"},
{"tr","Ateş ekran görüntüsü her pencere 1C"},
{"vi","Lấy ra ảnh chụp màn hình mỗi cửa sổ 1C"}
},
{1,0},
{2,
{1},
{0,b7cefb3f-7a51-4328-8c1c-26ddf8ae2903}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1582,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СниматьСкриншотКаждогоОкна1СКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1583,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СниматьСкриншотКаждогоОкна1СРасширеннаяПодсказка",
{1,2,
{"ru","Включает снятие скриншотов с каждого окна 1С.
Для работы опции используется SikuliX."},
{"en","Switches on snapshot creation for each 1C window.
SikuliX is used for this option."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает снятие скриншотов с каждого окна 1С.
Для работы опции используется SikuliX."},
{"en","Switches on snapshot creation for each 1C window.
SikuliX is used for this option."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{510,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиСкриншотов",1,0,
{1,21,
{"ru","Временный каталог скриншотов"},
{"en","Temp directory for screenshoots"},
{"am","ጊዜያዊ ማውጫ ጋር ቅጽበታዊ ገጽ እይታዎች"},
{"az","Müvəqqəti kataloq ekran saxlamaq"},
{"bg","Временната директория за запазване на скрийншотове"},
{"et","Temp kataloogi salvestada pildid"},
{"fr","Un répertoire temporaire enregistrer des captures d'écran"},
{"ka","დროებითი დირექტორია გადარჩენა ეკრანის"},
{"de","Temporäres Verzeichnis speichern screenshots"},
{"hu","Ideiglenes könyvtárba menteni screenshotok"},
{"it","Una directory temporanea salvare gli screenshot"},
{"lv","Pagaidu direktoriju saglabātu ekrānšāviņi"},
{"lt","Laikiną katalogą išsaugoti vaizdus"},
{"mn","Түр зуурын сан аврахын тулд дэлгэцийн"},
{"pl","Tymczasowy katalog zapisywania zrzutów ekranu"},
{"ro","Directorul temporar a salva capturi de ecran"},
{"sl","Začasno mapo za shranjevanje posnetkov zaslona"},
{"es","Un directorio temporal para guardar capturas de pantalla"},
{"sv","Temporär katalog för att spara skärmdumparna"},
{"tr","Geçici bir dizine ekran görüntülerini kaydetmek"},
{"vi","Thư mục tạm thời lưu ảnh chụp màn hình"}
},
{1,0},
{2,
{1},
{0,cd4c849d-16de-4574-8d35-dc45da3b4bb9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогOutputСкриншотыНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{511,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиСкриншотовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1395,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиСкриншотовРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, в который будут складываться скриншоты."},
{"en","Snapshots directory."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, в который будут складываться скриншоты."},
{"en","Snapshots directory."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2046,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСкриншотыНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1535,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСкриншотыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1542,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаЛогТекст",
{1,2,
{"ru","Логирование"},
{"en","Logs"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,3,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,1,1,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},1,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1544,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьЛогВыполненияСценариевВТекстовыйФайл",4,0,
{1,0},
{1,0},
{2,
{1},
{0,8251dbcf-7681-47f7-9207-c9c2fbac9b97}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДелатьЛогВыполненияСценариевВТекстовыйФайлПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1545,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьЛогВыполненияСценариевВТекстовыйФайлКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1546,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьЛогВыполненияСценариевВТекстовыйФайлРасширеннаяПодсказка",
{1,2,
{"ru","Включает вывод лога выполнения сценариев.
В лог записываются события:
1. Начало выполнения сценария
2. Событие возникновения ошибки"},
{"en","Switches on scenario execution log.
Log events:
1. Scenario execution begin
2. Error event"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает вывод лога выполнения сценариев.
В лог записываются события:
1. Начало выполнения сценария
2. Событие возникновения ошибки"},
{"en","Switches on scenario execution log.
Log events:
1. Scenario execution begin
2. Error event"}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2051,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаЛогТекстНастройки",
{1,2,
{"ru","Лог текст настройки"},
{"en","Log text settings"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1770,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ВыводитьВЛогВыполнениеШагов",4,0,
{1,0},
{1,0},
{2,
{1},
{0,497c62b3-6a58-42ef-ad40-dfe46bb17edf}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1771,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыводитьВЛогВыполнениеШаговКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1772,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыводитьВЛогВыполнениеШаговРасширеннаяПодсказка",
{1,2,
{"ru","Выводит в лог событие: начало выполнения шага."},
{"en","Writes step beginning event to the log."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Выводит в лог событие: начало выполнения шага."},
{"en","Writes step beginning event to the log."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1547,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ИмяФайлаЛогВыполненияСценариев",1,0,
{1,0},
{1,0},
{2,
{1},
{0,28873b45-db16-4213-89d0-2f9ed5c6f5bb}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогOutputВнутреннийФорматНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1548,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИмяФайлаЛогВыполненияСценариевКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1549,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИмяФайлаЛогВыполненияСценариевРасширеннаяПодсказка",
{1,2,
{"ru","Имя файла, куда будет выводиться лог Vanessa Automation."},
{"en","Vanessa Automation log file name."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Имя файла, куда будет выводиться лог Vanessa Automation."},
{"en","Vanessa Automation log file name."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2052,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЛогТекстНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1543,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЛогТекстРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1753,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаЛогОшибокТекст",
{1,2,
{"ru","Лог ошибок текст"},
{"en","Error log text"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,3,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},4,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1755,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьЛогОшибокВТекстовыйФайл",4,0,
{1,0},
{1,0},
{2,
{1},
{0,d3c3bdd3-4e31-4ccc-9c4d-42808b5ef96e}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДелатьЛогОшибокВТекстовыйФайлПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1756,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьЛогОшибокВТекстовыйФайлКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1757,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьЛогОшибокВТекстовыйФайлРасширеннаяПодсказка",
{1,2,
{"ru","Формировать json файл для каждой ошибки, в котором будет подробная информация об ошибке."},
{"en","Create json file with the detailed information for each error."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Формировать json файл для каждой ошибки, в котором будет подробная информация об ошибке."},
{"en","Create json file with the detailed information for each error."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2060,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СобиратьДанныеОСостоянииАктивнойФормыПриОшибке",4,0,
{1,0},
{1,0},
{2,
{1},
{0,ad87a9d5-bb7e-4eac-8fad-b6694aa2cf71}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{2061,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СобиратьДанныеОСостоянииАктивнойФормыПриОшибкеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2062,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СобиратьДанныеОСостоянииАктивнойФормыПриОшибкеРасширеннаяПодсказка",
{1,2,
{"ru","Если опция включена, то при возникновении ошибки будут собраны данные о состоянии элементов активной формы в формате mxl."},
{"en","If the option is on, the status of the elements of the active form will be collected in mxl format."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если опция включена, то при возникновении ошибки будут собраны данные о состоянии элементов активной формы в формате mxl."},
{"en","If the option is on, the status of the elements of the active form will be collected in mxl format."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2063,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СобиратьДанныеОСостоянииВсехФормПриОшибке",4,0,
{1,0},
{1,0},
{2,
{1},
{0,2a993ca6-bdbc-4e38-b2b6-adce7320e276}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{2064,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СобиратьДанныеОСостоянииВсехФормПриОшибкеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2065,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СобиратьДанныеОСостоянииВсехФормПриОшибкеРасширеннаяПодсказка",
{1,2,
{"ru","Если опция включена, то при возникновении ошибки будут собраны данные о состоянии элементов всех форм открытых в клиенте тестирования в формате mxl."},
{"en","If the option is on, the status of the elements of all forms opened in TestClient will be collected in mxl format."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если опция включена, то при возникновении ошибки будут собраны данные о состоянии элементов всех форм открытых в клиенте тестирования в формате mxl."},
{"en","If the option is on, the status of the elements of all forms opened in TestClient will be collected in mxl format."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1758,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ИмяКаталогаЛогОшибок",1,0,
{1,0},
{1,0},
{2,
{1},
{0,66e73b59-4e52-4a5c-95e9-af015dc641a1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ИмяКаталогаЛогОшибокНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1759,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИмяКаталогаЛогОшибокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1760,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИмяКаталогаЛогОшибокРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, для формирования файлов с данными об ошибках и состоянии элементов форм."},
{"en","The directory for errors data and form elements status information."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, для формирования файлов с данными об ошибках и состоянии элементов форм."},
{"en","The directory for errors data and form elements status information."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1754,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЛогОшибокТекстРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{918,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"Группа3",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{375,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьОтчетВоВнутреннемФормате",4,0,
{1,21,
{"ru","Формировать отчет о запуске во внутреннем формате"},
{"en","Create report in internal format"},
{"am","አንድ ሪፖርት ስለ ስለጀመሩ ውስጥ ቅድሚያ የሚሰጡዋቸውን"},
{"az","Formalaşdırmaq haqqında hesabat başlamaq daxili formatında"},
{"bg","Оформят доклад за старта във вътрешния формат"},
{"et","Kujundada aruande käivitamisel sisemises formaadis"},
{"fr","Créer un rapport sur l'exécution dans un format interne"},
{"ka","მოხსენება იმის შესახებ, დაიწყოს შიდა ფორმატში"},
{"de","Formung Bericht über den Start in einem internen Format"},
{"hu","Létrehoz egy jelentést arról, hogy a dob, a belső formátum"},
{"it","Formazione il rapporto sull'avvio nel formato interno"},
{"lv","Veidot atskaites, startējot iekšējā formātā"},
{"lt","Formuoti ataskaitą apie paleidžiate į vidinį formatu"},
{"mn","Бий тайланг тухай эхэлснээс дотоод хэлбэр"},
{"pl","Tworzyć raport o uruchomieniu w wewnętrznym formacie"},
{"ro","Pentru a forma un raport cu privire la lansarea în format intern"},
{"sl","Ustvari poročilo o začetek v notranjem format"},
{"es","Genera un informe acerca de la ejecución en el formato interno de"},
{"sv","Generera en rapport om lanseringen i den interna format"},
{"tr","Şekillendirme raporu çalıştırdığınızda, iç formatında"},
{"vi","Tạo báo cáo về khởi động trong định dạng nội bộ"}
},
{1,0},
{2,
{1},
{0,7d63373f-6a4a-4900-89d6-0cd45ef22cad}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{376,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьОтчетВоВнутреннемФорматеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1399,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьОтчетВоВнутреннемФорматеРасширеннаяПодсказка",
{1,2,
{"ru","Включаеи вывод отчет о запуске сценариев во внутреннем формате."},
{"en","Switches on scenarios execution report in the internal format."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включаеи вывод отчет о запуске сценариев во внутреннем формате."},
{"en","Switches on scenarios execution report in the internal format."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1398,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа3РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2090,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаОтчеты",
{1,2,
{"ru","Отчеты"},
{"en","Reports"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,1,1,1,
{1,0},0,0,3,3,2,0,1,2,
{3,4,
{0}
},1,2,0,2},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2092,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СтраницыОтчеты",
{1,2,
{"ru","Страницы отчеты"},
{"en","The reports page"}
},
{1,0},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,1,
{0,1,0},2,0},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1536,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаAllure",
{1,2,
{"ru","Allure"},
{"en","Allure"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{138,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьОтчетВФорматеАллюр",4,0,
{1,21,
{"ru","Формирование данных для отчета Allure"},
{"en","Create data for Allure QA Report"},
{"am","አንድ ውሂብ ሪፖርቱ Allure"},
{"az","Formalaşdırmaq üçün məlumat hesabatının Məlumat"},
{"bg","Формиране на данни за доклад на Allure"},
{"et","Kujundada aruande andmed Allure"},
{"fr","Former les données pour le rapport de l'Allure"},
{"ka","გენერირება მონაცემები ანგარიშში Allure"},
{"de","Die formung der Daten für den Bericht Allure"},
{"hu","Generál adatokat a jelentés Varázsa"},
{"it","Modellare i dati per il report Allure"},
{"lv","Veidot atskaites dati Vilinājums"},
{"lt","Formuoti duomenis ataskaitai Allure"},
{"mn","Бий болгох мэдээллийг тайлан Зүйлсээр"},
{"pl","Kształtować dane do raportu Allure"},
{"ro","Forma de date pentru raportul Allure"},
{"sl","Za generiranje podatkov za poročilo Vabiti"},
{"es","Construcción de la información para el informe de Allure"},
{"sv","För att generera data för rapporten Locka"},
{"tr","Şekil verileri için rapor Allure"},
{"vi","Tạo dữ liệu cho báo cáo Allure"}
},
{1,0},
{2,
{1},
{0,60ba8002-c996-4811-bb24-8b8857299dee}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДелатьОтчетВФорматеАллюрПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{139,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьОтчетВФорматеАллюрКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,7,1,
{11,
{1392,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьОтчетВФорматеАллюрРасширеннаяПодсказка",
{1,2,
{"ru","Формировать отчет в формате Allure по результатам выполнения сценариев."},
{"en","Create scenario execution report in Allure format."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Формировать отчет в формате Allure по результатам выполнения сценариев."},
{"en","Create scenario execution report in Allure format."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2043,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаAllureНастройки",
{1,2,
{"ru","Allure настройки"},
{"en","Allure settings"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},8,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{141,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиAllure",1,0,
{1,21,
{"ru","Каталог отчета  Allure"},
{"en","Temp dir for Allure test suite files"},
{"am","ወደ ጊዜያዊ ፋይሎች ቅድሚያ የሚሰጡዋቸውን Allure"},
{"az","Müvəqqəti kataloq və faylları nəticələr Məlumat"},
{"bg","Временна директория файлове резултати Allure"},
{"et","Temp kataloogi failid tulemusi Allure"},
{"fr","Répertoire des fichiers temporaires de résultats Allure"},
{"ka","დროებითი ფაილები დირექტორია შედეგები Allure"},
{"de","Verzeichnis für temporäre Dateien der Ergebnisse Allure"},
{"hu","Az ideiglenes fájlok könyvtárát eredmények Varázsa"},
{"it","Directory file temporanei risultati Allure"},
{"lv","Pagaidu direktoriju failu rezultātu Vilinājums"},
{"lt","Laikinų failų katalogą rezultatų Allure"},
{"mn","Түр зуурын файлуудыг сан үр дүн Зүйлсээр"},
{"pl","Katalog plików tymczasowych wyników Allure"},
{"ro","Directorul temporar fișierele rezultate Allure"},
{"sl","Začasne datoteke imenik rezultati Vabiti"},
{"es","Directorio de archivos temporales de los resultados de Allure"},
{"sv","Tillfälliga filer i katalogen resultat Locka"},
{"tr","Geçici bir dizine dosyaları sonuç Allure"},
{"vi","Thư mục tạm thời của các tệp kết quả Allure"}
},
{1,2,
{"ru","Временный каталог файлов результатов Allure"},
{"en","Temporary directory fot Allure results"}
},
{2,
{1},
{0,460da161-c609-4913-a9d5-b774468cd6cb}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогOutputAllureНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{142,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиAllureКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1396,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиAllureРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, в котором формируются данные отчета в формате Allure."},
{"en","Allure reports directory."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, в котором формируются данные отчета в формате Allure."},
{"en","Allure reports directory."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2243,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиAllureБазовый",1,0,
{1,2,
{"ru","Каталог отчета Allure (несколько сборок)"},
{"en","Temp dir for Allure test suite files for many runs"}
},
{1,0},
{2,
{1},
{0,d3501955-04da-4140-9209-0898c282427a}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2244,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиAllureБазовыйКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2245,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиAllureБазовыйРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, в котором формируются данные отчета в формате Allure, при этом для каждой сборки будет создаваться подкаталоги. Данный параметр имеет приоритет и значение параметра ""Каталог отчета Allure"" будет проигнорировано."},
{"en","The directory in which report data is generated in Allure format, and subdirectories will be created for each assembly. This parameter takes precedence and the value of the ""Allure Report Catalog"" parameter will be ignored."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, в котором формируются данные отчета в формате Allure, при этом для каждой сборки будет создаваться подкаталоги. Данный параметр имеет приоритет и значение параметра ""Каталог отчета Allure"" будет проигнорировано."},
{"en","The directory in which report data is generated in Allure format, and subdirectories will be created for each assembly. This parameter takes precedence and the value of the ""Allure Report Catalog"" parameter will be ignored."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1863,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"УровеньОтчета1",1,0,
{1,0},
{1,0},
{2,
{1},
{0,33d55b48-171f-4731-a835-642fcaabcf11}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1864,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"УровеньОтчета1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1865,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УровеньОтчета1РасширеннаяПодсказка",
{1,2,
{"ru","Задаёт первый уровень группировки в отчете Allure на закладке Behaviors. Подробности описаны в справке."},
{"en","Sets first level of grouping in Allure report on the Behaviors tab. See Help info for details."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт первый уровень группировки в отчете Allure на закладке Behaviors. Подробности описаны в справке."},
{"en","Sets first level of grouping in Allure report on the Behaviors tab. See Help info for details."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1866,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"УровеньОтчета2",1,0,
{1,0},
{1,0},
{2,
{1},
{0,7811f0ec-f571-42c3-8f7a-9c3fa131a0f0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1867,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"УровеньОтчета2КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1868,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УровеньОтчета2РасширеннаяПодсказка",
{1,2,
{"ru","Задаёт второй уровень группировки в отчете Allure на закладке Behaviors. Подробности описаны в справке."},
{"en","Sets second level of grouping in Allure report on the Behaviors tab. See Help info for details."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт второй уровень группировки в отчете Allure на закладке Behaviors. Подробности описаны в справке."},
{"en","Sets second level of grouping in Allure report on the Behaviors tab. See Help info for details."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1869,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"УровеньОтчета3",1,0,
{1,0},
{1,0},
{2,
{1},
{0,95487883-f187-40d6-a398-b4cb4907bc73}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1870,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"УровеньОтчета3КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1871,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УровеньОтчета3РасширеннаяПодсказка",
{1,2,
{"ru","Задаёт третий уровень группировки в отчете Allure на закладке Behaviors. Подробности описаны в справке."},
{"en","Sets third level of grouping in Allure report on the Behaviors tab. See Help info for details."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт третий уровень группировки в отчете Allure на закладке Behaviors. Подробности описаны в справке."},
{"en","Sets third level of grouping in Allure report on the Behaviors tab. See Help info for details."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1872,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогОтносительноКоторогоНадоСтроитьИерархию",1,0,
{1,2,
{"ru","Каталог иерархии"},
{"en","Directory hierarchy"}
},
{1,2,
{"ru","Каталог, относительно которого нужно строить иерархию"},
{"en","Directory relative to which you need to build hierarchy"}
},
{2,
{1},
{0,e47f137e-431d-4b4a-a21e-a80430127c1c}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогОтносительноКоторогоНадоСтроитьИерархию1НачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1873,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогОтносительноКоторогоНадоСтроитьИерархиюКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1874,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогОтносительноКоторогоНадоСтроитьИерархиюРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, относительно которого рассчитывается иерархия фич. Подробности описаны в справке."},
{"en","The directory for features hierarchy calculation. See Help info for details."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, относительно которого рассчитывается иерархия фич. Подробности описаны в справке."},
{"en","The directory for features hierarchy calculation. See Help info for details."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2148,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ГруппировкаTestSuites",1,0,
{1,0},
{1,0},
{2,
{1},
{0,898e0d3c-f588-4396-b5cb-ecbbbeb29acc}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2149,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ГруппировкаTestSuitesКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2150,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппировкаTestSuitesРасширеннаяПодсказка",
{1,2,
{"ru","Задаёт значение группировки в отчете Allure на закладке Suites. Подробности описаны в справке."},
{"en","Sets grouping value for Allure report on the Suites tab. See Help info for details."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт значение группировки в отчете Allure на закладке Suites. Подробности описаны в справке."},
{"en","Sets grouping value for Allure report on the Suites tab. See Help info for details."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},143c00f7-a42d-4cd7-9189-88e4467dc768,
{54,
{1985,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ДанныеАллюрМеток",0,0,1,
{1,2,
{"ru","Данные аллюр меток"},
{"en","Allure labels data"}
},
{1,0},
{1,
{44}
},0,1,0,0,0,1,1,0,4,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,0,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,1,13,
{"U"},
{0,1,0},
{0},1,
{22,
{1986,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеАллюрМетокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{22,
{1987,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ДанныеАллюрМетокКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3,0},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1892,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеАллюрМетокРегулярноеВыражение",1,0,
{1,0},
{1,0},
{2,
{44},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1893,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеАллюрМетокРегулярноеВыражениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1894,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеАллюрМетокРегулярноеВыражениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1895,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеАллюрМетокИмяМетки",1,0,
{1,0},
{1,0},
{2,
{44},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1896,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеАллюрМетокИмяМеткиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1897,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеАллюрМетокИмяМеткиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1898,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеАллюрМетокЗначение",1,0,
{1,0},
{1,0},
{2,
{44},
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1899,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеАллюрМетокЗначениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1900,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеАллюрМетокЗначениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,3,1,
{11,
{1988,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеАллюрМетокРасширеннаяПодсказка",
{1,2,
{"ru","В таблице указываются метки Allure."},
{"en","Table indicates Allure label's."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","В таблице указываются метки Allure."},
{"en","Table indicates Allure label's."}
},0},0,0,1,0,0,1,0,3,3,0},0,0,0,1,
{5,
{1989,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеАллюрМетокСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{1888,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеАллюрМетокСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1889,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеАллюрМетокСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1985,0},0,3,3,0},1,
{5,
{1890,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДанныеАллюрМетокСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{1891,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеАллюрМетокСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1904,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеАллюрМетокСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1985,1},0,3,3,0},1,
{5,
{1990,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДанныеАллюрМетокУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{1991,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДанныеАллюрМетокУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1992,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДанныеАллюрМетокУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1985,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0},1,0,1,
{11,
{2044,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаAllureНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1537,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаAllureРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1540,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаCucumber",
{1,2,
{"ru","Cucumber"},
{"en","Cucumber"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1461,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьОтчетВФорматеCucumberJson",4,0,
{1,21,
{"ru","Создать отчет в формате Cucumber "},
{"en","Create report in Cucumber format "},
{"am","አንድ ሪፖርት ውስጥ የሚሰጡዋቸውን ነፃ"},
{"az","Formalaşdırmaq hesabatı formatında Cucumber"},
{"bg","Образуването на записа във формат Cucumber"},
{"et","Kujundada aruanne formaadis Cucumber"},
{"fr","Génère un rapport au format Cucumber"},
{"ka","მოხსენება ფორმატში კიტრი"},
{"de","Die formung der Bericht im Format Bewertungen"},
{"hu","Hozzon létre jelentést a formátum Uborka"},
{"it","Formare un report in formato Cucumber"},
{"lv","Veidot atskaites formātā Cucumber"},
{"lt","Formuoti ataskaitą formatu Cucumber"},
{"mn","Бий тайлан хэлбэрээр өргөст хэмх"},
{"pl","Tworzyć raport w formacie Ogórek"},
{"ro","Forma de rapoarte în format Cucumber"},
{"sl","Ustvari poročilo v obliki Kumare"},
{"es","Genera un informe en formato Cucumber"},
{"sv","Generera en rapport i formatet Gurka"},
{"tr","Şekillendirme formatında bir rapor Cucumber"},
{"vi","Tạo báo cáo theo định dạng Cucumber"}
},
{1,0},
{2,
{1},
{0,a5258f3c-c615-480e-89b3-942210833a6b}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДелатьОтчетВФорматеCucumberJsonПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1462,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьОтчетВФорматеCucumberJsonКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,7,1,
{11,
{1463,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьОтчетВФорматеCucumberJsonРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2049,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаCucumberНастройки",
{1,2,
{"ru","Cucumber настройки"},
{"en","Cucumber settings"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,0,
{3,4,
{0}
},0,2,0,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1464,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиCucumberJson",1,0,
{1,21,
{"ru","Каталог отчета Cucumber"},
{"en","Temp dir for JUnit xml files"},
{"am","ጊዜያዊ ማውጫ ላይ ፋይሎች ነፃ"},
{"az","Müvəqqəti faylları üçün kataloq Cucumber"},
{"bg","Временен каталог за файлове Cucumber"},
{"et","Temp kataloogi failide Cucumber"},
{"fr","Un répertoire temporaire pour les fichiers Cucumber"},
{"ka","დროებითი დირექტორია ფაილი კიტრი"},
{"de","Das temporäre Verzeichnis für Dateien Bewertungen"},
{"hu","Ideiglenes könyvtárba a fájlokat, Uborka"},
{"it","La directory temporanea per i file Cucumber"},
{"lv","Pagaidu direktoriju failu Cucumber"},
{"lt","Laikiną katalogą failų Cucumber"},
{"mn","Түр зуурын сангийн файлууд өргөст хэмх"},
{"pl","Tymczasowy katalog dla plików Ogórek"},
{"ro","Directorul temporar pentru fișiere Cucumber"},
{"sl","Začasni imenik za datoteke, Kumare"},
{"es","La ubicación temporal para los archivos de Cucumber"},
{"sv","Temporär katalog för filer Gurka"},
{"tr","Geçici dizin dosyaları için Cucumber"},
{"vi","Thư mục tạm thời dành cho các tệp tin Cucumber"}
},
{1,2,
{"ru","Временный каталог для файлов Cucumber"},
{"en","Temporary directory for Cucumber files"}
},
{2,
{1},
{0,1f79a2b1-a7fd-4b0e-ab13-cb997703d943}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогOutputCucumberJsonНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1465,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиCucumberJsonКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1466,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиCucumberJsonРасширеннаяПодсказка",
{1,2,
{"ru","Каталог для формирования отчета."},
{"en","Report directory."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог для формирования отчета."},
{"en","Report directory."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2050,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаCucumberНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1541,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаCucumberРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1538,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаjUnit",
{1,2,
{"ru","JUnit"},
{"en","JUnit"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{367,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьОтчетВФорматеjUnit",4,0,
{1,21,
{"ru","Создать отчет в формате jUnit"},
{"en","Create report in jUnit format"},
{"am","አንድ ሪፖርት ውስጥ jUnit የሚሰጡዋቸውን"},
{"az","Formalaşdırmaq hesabatı formatında jUnit"},
{"bg","Образуването на записа във формат jUnit"},
{"et","Kujundada aruanne formaadis rongid"},
{"fr","Génère un rapport au format jUnit"},
{"ka","გენერირება ანგარიში jUnit ფორმატში"},
{"de","Formung Report im jUnit-Format"},
{"hu","Hozzon létre jelentést a jUnit formátum"},
{"it","Formare un report in formato jUnit"},
{"lv","Veidot atskaites formātā jUnit"},
{"lt","Formuoti ataskaitą formatu jUnit"},
{"mn","Бий тайлан jUnit формат"},
{"pl","Tworzyć raport w formacie jUnit"},
{"ro","Forma de rapoarte în format jUnit"},
{"sl","Ustvari poročilo v jUnit format"},
{"es","Genera un informe en formato de jUnit"},
{"sv","Generera en rapport i jUnit-format"},
{"tr","Şekillendirme formatında bir rapor jUnit"},
{"vi","Tạo báo cáo theo định dạng jUnit"}
},
{1,0},
{2,
{1},
{0,5bea373e-650c-458b-8cc3-0b84e7f55063}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДелатьОтчетВФорматеxUnitПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{368,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьОтчетВФорматеjUnitКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,7,1,
{11,
{1393,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьОтчетВФорматеjUnitРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2047,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаjUnitНастройки",
{1,2,
{"ru","J unit настройки"},
{"en","J unit settings"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,2,
{3,4,
{0}
},0,2,0,2},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{370,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиJUnit",1,0,
{1,21,
{"ru","Каталог отчета JUnit"},
{"en","Temp dir for JUnit xml files"},
{"am","ጊዜያዊ ማውጫ ደረጃ ፋይሎችን JUnit"},
{"az","Müvəqqəti faylları üçün kataloq JUnit"},
{"bg","Временен каталог за файлове JUnit"},
{"et","Temp kataloogi failide Rongid"},
{"fr","Un répertoire temporaire pour les fichiers JUnit"},
{"ka","დროებითი დირექტორია ფაილი, JUnit"},
{"de","Das temporäre Verzeichnis für Dateien JUnit"},
{"hu","Ideiglenes könyvtárba a fájlokat, JUnit"},
{"it","La directory temporanea per i file di JUnit"},
{"lv","Pagaidu direktoriju failu JUnit"},
{"lt","Laikiną katalogą failų JUnit"},
{"mn","Түр зуурын сангийн файлууд, JUnit"},
{"pl","Tymczasowy katalog dla plików JUnit"},
{"ro","Directorul temporar pentru fișiere JUnit"},
{"sl","Začasni imenik za datoteke, JUnit"},
{"es","La ubicación temporal para los archivos de JUnit"},
{"sv","Temporär katalog för filer, JUnit"},
{"tr","Geçici dizin dosyaları için JUnit"},
{"vi","Thư mục tạm thời dành cho các tệp tin JUnit"}
},
{1,2,
{"ru","Временный каталог для файлов JUnit"},
{"en","Temporary directory for JUnit files"}
},
{2,
{1},
{0,c75f2681-524c-4f0a-ab16-22c1f58dd0ff}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогВыгрузкиJUnitНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{371,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиJUnitКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1397,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиJUnitРасширеннаяПодсказка",
{1,2,
{"ru","Каталог для формирования отчета."},
{"en","Report directory."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог для формирования отчета."},
{"en","Report directory."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2048,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаjUnitНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1539,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаjUnitРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2094,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаСППР",
{1,2,
{"ru","СППР"},
{"en","ASDS"}
},
{1,2,
{"ru","Система проектирования прикладных решений"},
{"en","Applied Solution Design System (СППР)"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2096,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДелатьОтчетВФорматеСППР",4,0,
{1,0},
{1,0},
{2,
{1},
{0,8d9c572b-0707-4d40-b897-d568e7bec14b}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДелатьОтчетВФорматеСППРПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{2097,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДелатьОтчетВФорматеСППРКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,7,1,
{11,
{2098,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДелатьОтчетВФорматеСППРРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2102,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаСППРНастройки",
{1,2,
{"ru","Группа СППРНастройки"},
{"en","Group SPPR Settings"}
},
{1,2,
{"ru","Группа СППРНастройки"},
{"en","Group SPPR Settings"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2,
{3,4,
{0}
},0,2,0,2},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2099,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиСППР",1,0,
{1,0},
{1,0},
{2,
{1},
{0,0d82c63e-1d12-4a50-9d62-235c8d56cb0f}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогВыгрузкиСППРНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2100,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиСППРКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2101,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиСППРРасширеннаяПодсказка",
{1,2,
{"ru","Каталог для формирования отчета."},
{"en","Report directory."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог для формирования отчета."},
{"en","Report directory."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2103,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСППРНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2095,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСППРРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2093,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницыОтчетыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2091,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаОтчетыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1387,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаОтчетыОЗапускеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{656,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаАвтоИнструкции",
{1,21,
{"ru","Автоинструкции"},
{"en","Auto instructions"},
{"am","Avtoinstruktory"},
{"az","Автоинструкции"},
{"bg","Автоинструкции"},
{"et","Автоинструкции"},
{"fr","Автоинструкции"},
{"ka","Avtoinstruktory"},
{"de","Автоинструкции"},
{"hu","Avtoinstruktory"},
{"it","Автоинструкции"},
{"lv","Автоинструкции"},
{"lt","Автоинструкции"},
{"mn","Avtoinstruktory"},
{"pl","Автоинструкции"},
{"ro","Автоинструкции"},
{"sl","Avtoinstruktory"},
{"es","Автоинструкции"},
{"sv","Avtoinstruktory"},
{"tr","Автоинструкции"},
{"vi","Hướng dẫn tự động"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},3,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2130,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаSikuliXServer",
{1,2,
{"ru","SikuliX server"},
{"en","SikuliX server"}
},
{1,2,
{"ru","Подсказка"},
{"en","Tip"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,1,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},1,2,0,0},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2132,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ИспользоватьSikuliXСервер",4,0,
{1,0},
{1,2,
{"ru","Использовать SikuliX Сервер"},
{"en","Use SikuliX Server"}
},
{2,
{1},
{0,a1d08ef5-876b-41a0-b409-84a7b0036ba1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ИспользоватьSikuliXСерверПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{2133,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИспользоватьSikuliXСерверКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2134,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИспользоватьSikuliXСерверРасширеннаяПодсказка",
{1,2,
{"ru","SikuliX это Java приложение, которое позволяет управлять перемещением и нажатиями мыши на экране, а также эмулировать нажатие кнопок клавиатуры.

SikuliX Server - это специальная программная оптимизация работы с SikuliX. Если опция включена VA собирает один большой скрипт из множества скриптов SikuliX, который можно запустить один раз и быстро выполнять необходимые команды, которые раньше приходилось запускать по одной.  Это позволяет существенно сэкономить время на выполнение одного скрипта SikuliX, т.к. не тратится время на запуск SikuliX и его выгрузку из памяти.

Описание установки и настройки SikuliX и SikuliX Server приведено в разделе справки 20.1

Открыть справку"},
{"en","SikuliX is Java application for mouse pointer moving and clicking management, and keyboard buttons press emulation.

SikuliX Server is software for SikuliX optimization. If the option is on, VA composes one script from multiple SikuliX scripts to launch it once and execute commands instead on launching each command one by one. It helps to save time on SikuliX script execution, because there is no need to repeat scripts start and unloading.

See SikuliX и SikuliX Server Installation and Settings Guide in Help, section 20.1

Help Info"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{1,d710ea07-5c96-4c43-ab6e-e138d3653780,"ИспользоватьSikuliXСерверРасширеннаяПодсказкаОбработкаНавигационнойСсылки",1,0,d710ea07-5c96-4c43-ab6e-e138d3653780,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","SikuliX это Java приложение, которое позволяет управлять перемещением и нажатиями мыши на экране, а также эмулировать нажатие кнопок клавиатуры.

SikuliX Server - это специальная программная оптимизация работы с SikuliX. Если опция включена VA собирает один большой скрипт из множества скриптов SikuliX, который можно запустить один раз и быстро выполнять необходимые команды, которые раньше приходилось запускать по одной.  Это позволяет существенно сэкономить время на выполнение одного скрипта SikuliX, т.к. не тратится время на запуск SikuliX и его выгрузку из памяти.

Описание установки и настройки SikuliX и SikuliX Server приведено в разделе справки 20.1

<link #>Открыть справку</>"},
{"en","SikuliX is Java application for mouse pointer moving and clicking management, and keyboard buttons press emulation.

SikuliX Server is software for SikuliX optimization. If the option is on, VA composes one script from multiple SikuliX scripts to launch it once and execute commands instead on launching each command one by one. It helps to save time on SikuliX script execution, because there is no need to repeat scripts start and unloading.

See SikuliX и SikuliX Server Installation and Settings Guide in Help, section 20.1

<link #>Help Info</>"}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2193,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоЭмулироватьДвиженияМышки",4,0,
{1,0},
{1,0},
{2,
{1},
{0,90cd46b0-1d0a-4e65-92fa-18cd7748d3d3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоЭмулироватьДвиженияМышкиПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{2194,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоЭмулироватьДвиженияМышкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2195,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоЭмулироватьДвиженияМышкиРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то при выполнении шагов будет выполняться попытка найти элмент формы или элемент управления на экране и переместить курсор мышки к нему.
Для поиска картинки и передвижения мышки используется SikuliX. Картинка для поиска будет сгенерирована по тексту, полученному из элемента формы.
Чтобы отключить движение мышки у конкретного шага надо использовать директиву #[DoNotMoveMouse]."},
{"en","If the checkbox is on, then the search of form element or control will be performed on steps execution. Mouse pointer will be moved to the detected element. 
SikuliX is used for picture search and mouse movement. Picture will be generated by the text from the form element.
To disable mouse movement at a specific step, you should use the #[DoNotMoveMouse] directive."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то при выполнении шагов будет выполняться попытка найти элмент формы или элемент управления на экране и переместить курсор мышки к нему.
Для поиска картинки и передвижения мышки используется SikuliX. Картинка для поиска будет сгенерирована по тексту, полученному из элемента формы.
Чтобы отключить движение мышки у конкретного шага надо использовать директиву #[DoNotMoveMouse]."},
{"en","If the checkbox is on, then the search of form element or control will be performed on steps execution. Mouse pointer will be moved to the detected element. 
SikuliX is used for picture search and mouse movement. Picture will be generated by the text from the form element.
To disable mouse movement at a specific step, you should use the #[DoNotMoveMouse] directive."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2135,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаSikuliXServerПодробно",
{1,2,
{"ru","Sikuli x server подробно"},
{"en","Sikuli x server detail"}
},
{1,2,
{"ru","Группа sikuli x server подробно"},
{"en","Group sikuli x server detail"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,0,
{3,4,
{0}
},0,2,0,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2146,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"УстановитьСервисныеУтилиты",
{1,2,
{"ru","Установить сервисные утилиты"},
{"en","Install service programs"}
},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,3,1,
{11,
{2147,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УстановитьСервисныеУтилитыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2137,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ПутьККаталогуСкриптовSikuliX",
{1,2,
{"ru","Путь к каталогу скриптов sikuli x"},
{"en","The path to the scripts folder sikuli x"}
},
{1,2,
{"ru","Путь к каталогу скриптов sikuli X"},
{"en","The path to the scripts folder sikuli X"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2139,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогиСкриптовSikuliX",1,0,
{1,0},
{1,2,
{"ru","Каталог в котором расположены скрипты SikuliX"},
{"en","SikuliX scripts directory"}
},
{2,
{1},
{0,43c06820-8239-4ab3-93d7-717e82585256}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогиСкриптовSikuliXНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2140,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогиСкриптовSikuliXКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2141,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиСкриптовSikuliXРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2142,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"КаталогиСкриптовSikuliXПоУмолчанию",
{1,0},1,
{82,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,4,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2143,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогиСкриптовSikuliXПоУмолчаниюРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2144,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"СброситьПодключениеSikuliXСервера",
{1,0},1,
{74,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2145,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СброситьПодключениеSikuliXСервераРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},1,0,1,
{11,
{2138,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПутьККаталогуСкриптовSikuliXРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2136,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаSikuliXServerПодробноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2190,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогДляГенерацииКартинок",1,0,
{1,0},
{1,0},
{2,
{1},
{0,a844a161-5fcb-4166-b29f-d25adfd50d88}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогДляГенерацииКартинокНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2191,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогДляГенерацииКартинокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2192,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогДляГенерацииКартинокРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, в котором будут программно создаваться картинки для поиска их на экране."},
{"en","The directory in which pictures will be programmatically created to search for them on the screen."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, в котором будут программно создаваться картинки для поиска их на экране."},
{"en","The directory in which pictures will be programmatically created to search for them on the screen."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2158,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаПрофилиЦветов",
{1,2,
{"ru","Группа профили цветов"},
{"en","Group color profiles"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{54,
{2160,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПрофилиПоискаКартинокСТекстом",0,0,1,
{1,0},
{1,0},
{1,
{5}
},0,1,0,0,0,1,1,0,4,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,0,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,1,13,
{"U"},
{0,1,0},
{0},1,
{22,
{2161,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиПоискаКартинокСТекстомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{22,
{2162,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ПрофилиПоискаКартинокСТекстомКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2185,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ПрофилиЦветовЗаполнитьТиповыеПрофилиЦветов",
{1,0},1,
{83,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2186,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиЦветовЗаполнитьТиповыеПрофилиЦветовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,0,0,3,3,0},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2187,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПрофилиЦветовИмя",1,0,
{1,0},
{1,0},
{2,
{5},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2188,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиЦветовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2189,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиЦветовИмяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2173,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПрофилиЦветовШрифт",1,0,
{1,0},
{1,0},
{2,
{5},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2174,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиЦветовШрифтКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2175,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиЦветовШрифтРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2176,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПрофилиЦветовЦветФона",1,0,
{1,0},
{1,0},
{2,
{5},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2177,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиЦветовЦветФонаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2178,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиЦветовЦветФонаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2179,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПрофилиЦветовЦветШрифта",1,0,
{1,0},
{1,0},
{2,
{5},
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2180,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиЦветовЦветШрифтаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2181,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиЦветовЦветШрифтаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2182,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПрофилиЦветовРазмер",1,0,
{1,0},
{1,0},
{2,
{5},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2183,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиЦветовРазмерКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2184,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиЦветовРазмерРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{11,
{2163,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиПоискаКартинокСТекстомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,0,0,1,
{5,
{2164,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиПоискаКартинокСТекстомСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{2165,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиПоискаКартинокСТекстомСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{2166,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиПоискаКартинокСТекстомСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{2160,0},0,3,3,0},1,
{5,
{2167,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ПрофилиПоискаКартинокСТекстомСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{2168,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиПоискаКартинокСТекстомСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{2169,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиПоискаКартинокСТекстомСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{2160,1},0,3,3,0},1,
{5,
{2170,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПрофилиПоискаКартинокСТекстомУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{2171,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПрофилиПоискаКартинокСТекстомУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{2172,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПрофилиПоискаКартинокСТекстомУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{2160,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0},1,0,1,
{11,
{2159,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаПрофилиЦветовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2131,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаSikuliXServerРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{658,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"HTMLИMarkdown",
{1,2,
{"ru","HTML и Markdown"},
{"en","HTML и Markdown"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,1,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},1,2,0,0},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{513,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаHTML",
{1,2,
{"ru","HTML"},
{"en","HTML"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{135,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СоздаватьИнструкциюHTML",4,0,
{1,21,
{"ru","Создавать HTML инструкцию"},
{"en","Create HTML documentaion"},
{"am","መፍጠር ቅድሚያ ማኑዋል"},
{"az","Yaratmaq HTML təlimat"},
{"bg","Да създавате HTML инструкции"},
{"et","Luua HTML õpetus"},
{"fr","Créer une instruction"},
{"ka","შექმნათ HTML მექანიკური"},
{"de","Erstellen der HTML-Anweisung"},
{"hu","Létrehozása HTML-manuális"},
{"it","Creare HTML istruzione"},
{"lv","Izveidot HTML instrukciju"},
{"lt","Kurti HTML sakinį"},
{"mn","Бий болгох HTML гарын авлага"},
{"pl","Tworzenie HTML instrukcję"},
{"ro","Pentru a crea HTML instrucțiunea"},
{"sl","Ustvari HTML priročnik"},
{"es","Crear HTML instrucción"},
{"sv","Skapa HTML-manuell"},
{"tr","Oluşturmak için HTML deyim"},
{"vi","Tạo bản hướng dẫn HTML"}
},
{1,0},
{2,
{1},
{0,9eb13fb7-f8be-4967-8ce0-4884df5a4979}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"СоздаватьИнструкциюHTMLПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{136,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоздаватьИнструкциюHTMLКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1405,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоздаватьИнструкциюHTMLРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то во время выполнения сценария будет создаваться скринкаст в формате HTML.
В поле ""Команда создания скриншотов"" должна быть указана консольная команда для снятия скриншотов.
Также в тексте сценария возможно использовать специальные директивы, которые описаны в справке."},
{"en","If the checkbox is on, HTML screencast will be created during scenario execution.
Specify console command for snapshots generation in  ""Snapshot creating command"" field.
Also use special instructions in the script, see Help info."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то во время выполнения сценария будет создаваться скринкаст в формате HTML.
В поле ""Команда создания скриншотов"" должна быть указана консольная команда для снятия скриншотов.
Также в тексте сценария возможно использовать специальные директивы, которые описаны в справке."},
{"en","If the checkbox is on, HTML screencast will be created during scenario execution.
Specify console command for snapshots generation in  ""Snapshot creating command"" field.
Also use special instructions in the script, see Help info."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{148,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиИнструкцийHTML",1,0,
{1,21,
{"ru","Каталог инструкций HTML"},
{"en","HTML documentation files dir"},
{"am","ወደ ማውጫ ለማመንጨት ቅድሚያ የሚሰጡዋቸውን"},
{"az","Kataloq yaratmaq üçün təlimat HTML"},
{"bg","Каталог за формиране на инструкции HTML"},
{"et","Kataloogi moodustamine juhiseid HTML"},
{"fr","Catalogue de la formation des instructions HTML"},
{"ka","დირექტორია გენერირება HTML ინსტრუქცია"},
{"de","Katalog für die Bildung von HTML-Anweisungen"},
{"hu","A könyvtár generálni HTML utasítások"},
{"it","Catalogo per la formazione di istruzioni HTML"},
{"lv","Katalogs, lai veidotu instrukcijas HTML"},
{"lt","Katalogas forma instrukcijų HTML"},
{"mn","Сан бий болгох HTML заавар"},
{"pl","Katalog do tworzenia instrukcji HTML"},
{"ro","Directorul pentru formarea de instrucțiuni HTML"},
{"sl","Imenik za ustvarjanje HTML navodila"},
{"es","El directorio para la formación de instrucciones HTML"},
{"sv","Katalogen för att generera HTML-instruktioner"},
{"tr","Katalog oluşturmak için talimatlar HTML"},
{"vi","Thư mục để tạo bản hướng dẫn HTML"}
},
{1,0},
{2,
{1},
{0,fc118c0e-9ac9-480a-ae97-95d8cca81e47}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогOutputИнструкцияHTMLНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{149,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиИнструкцийHTMLКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1406,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиИнструкцийHTMLРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1404,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаHTMLРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{642,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаMarkdown",
{1,2,
{"ru","Markdown"},
{"en","Markdown"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{644,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СоздаватьИнструкциюMarkdown",4,0,
{1,21,
{"ru","Создавать Markdown инструкцию"},
{"en","Make Markdown instruction"},
{"am","ለመፍጠር Markdown."},
{"az","Yaratmaq Markdown təlimat"},
{"bg","Създаване на Markdown инструкции"},
{"et","Luua Markdown õpetus"},
{"fr","Créer Markdown l'instruction"},
{"ka","შექმნათ Markdown მექანიკური"},
{"de","Erstellen Markdown-Anweisung"},
{"hu","Hozzon létre egy Árleszállítás kézi"},
{"it","Creare Markdown istruzione"},
{"lv","Izveidot Markdown instrukciju"},
{"lt","Kurti Markdown sakinį"},
{"mn","Бий болгох Markdown гарын авлага"},
{"pl","Tworzenie Markdown instrukcję"},
{"ro","Pentru a crea Continua instrucțiunea"},
{"sl","Če želite ustvariti Markdown priročnik"},
{"es","Crear Markdown la instrucción"},
{"sv","För att skapa en Wiki manuell"},
{"tr","Oluşturmak için Markdown deyim"},
{"vi","Tạo bản hướng dẫn Markdown"}
},
{1,0},
{2,
{1},
{0,7eff7d4a-86fe-4164-b21c-414ae25803e4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"СоздаватьИнструкциюMarkdownПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{645,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоздаватьИнструкциюMarkdownКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1408,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоздаватьИнструкциюMarkdownРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен, то во время выполнения сценария будет создаваться скринкаст в формате MarkDown.
В поле ""Команда создания скриншотов"" должна быть указана консольная команда для снятия скриншотов.
Также в тексте сценария возможно использовать специальные директивы, которые описаны в справке."},
{"en","If the checkbox is on, MarkDown screencast will be created during scenario execution.
Specify console command for snapshots generation in  ""Snapshot creating command"" field.
Also use special instructions in the script, see Help info."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен, то во время выполнения сценария будет создаваться скринкаст в формате MarkDown.
В поле ""Команда создания скриншотов"" должна быть указана консольная команда для снятия скриншотов.
Также в тексте сценария возможно использовать специальные директивы, которые описаны в справке."},
{"en","If the checkbox is on, MarkDown screencast will be created during scenario execution.
Specify console command for snapshots generation in  ""Snapshot creating command"" field.
Also use special instructions in the script, see Help info."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{647,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиИнструкцийMarkdown",1,0,
{1,21,
{"ru","Каталог инструкций Markdown"},
{"en","Markdown documentation files dir"},
{"am","ወደ ማውጫ አንድ Markdown ይከተሉ"},
{"az","Kataloq yaratmaq üçün təlimat Markdown"},
{"bg","Каталог за формиране на инструкции Markdown"},
{"et","Kataloogi moodustamine juhiseid Markdown"},
{"fr","Catalogue de la formation des instructions Markdown"},
{"ka","დირექტორია გენერირება Markdown ინსტრუქცია"},
{"de","Katalog für die Bildung von Markdown Anweisungen"},
{"hu","A könyvtárba hozza létre a Árleszállítás utasítások"},
{"it","Catalogo per la formazione di istruzioni Markdown"},
{"lv","Katalogs, lai veidotu instrukcijas Markdown"},
{"lt","Katalogas forma instrukcijų Markdown"},
{"mn","Сан бий болгох Markdown заавар"},
{"pl","Katalog do tworzenia instrukcji Markdown"},
{"ro","Directorul pentru formarea de instrucțiuni Continua"},
{"sl","Imenik za ustvarjanje Markdown navodila"},
{"es","El directorio para la formación de instrucciones Markdown"},
{"sv","Katalog för att skapa Wiki-instruktioner"},
{"tr","Katalog oluşturmak için talimatlar Markdown"},
{"vi","Thư mục để tạo bản hướng dẫn Markdown"}
},
{1,0},
{2,
{1},
{0,3c587afc-6eab-47bc-a583-afb26533b2e5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогOutputИнструкцияMarkdownНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{648,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиИнструкцийMarkdownКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1409,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиИнструкцийMarkdownРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1407,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаMarkdownРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1403,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"HTMLИMarkdownРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{660,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаРаботаСВидео",
{1,2,
{"ru","Видеоинструкция"},
{"en","Video instructions"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,1,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},1,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{517,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СоздаватьИнструкциюВидео",4,0,
{1,21,
{"ru","Создавать видеоинструкцию"},
{"en","Create live video documentation"},
{"am","ለመፍጠር በጣም"},
{"az","Yaratmaq видеоинструкцию"},
{"bg","Създаване на видеоинструкцию"},
{"et","Luua видеоинструкцию"},
{"fr","Créer pour visualiser un didacticiel vidéo"},
{"ka","შექმნათ ვიდეო"},
{"de","Erstellen Video"},
{"hu","Létre a videót"},
{"it","Creare video di istruzioni"},
{"lv","Izveidot видеоинструкцию"},
{"lt","Kurti видеоинструкцию"},
{"mn","Бий болгох видео"},
{"pl","Tworzenie samouczek wideo"},
{"ro","Pentru a crea видеоинструкцию"},
{"sl","Če želite ustvariti video"},
{"es","Crear видеоинструкцию"},
{"sv","För att skapa video"},
{"tr","Oluşturmak видеоинструкцию"},
{"vi","Tạo bản hướng dẫn video"}
},
{1,0},
{2,
{1},
{0,52cd35c4-2333-4036-8074-7d10fdd4d65c}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"СоздаватьИнструкциюВидеоПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{518,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоздаватьИнструкциюВидеоКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1412,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоздаватьИнструкциюВидеоРасширеннаяПодсказка",
{1,2,
{"ru","Позволяет создавать видео инструкции.
Видео по описанию настроек находится в этом плей листе."},
{"en","Video manuals creation.
See playlist  for settings manual."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Позволяет создавать видео инструкции.
Видео по описанию настроек находится в этом <link https://www.youtube.com/watch?v=QSDvDQDLyLk&list=PLalsS95_a3a_m9ieRJgD3XPWCP9goa9GC>плей листе</>."},
{"en","Video manuals creation.
See <link https://www.youtube.com/watch?v=QSDvDQDLyLk&list=PLalsS95_a3a_m9ieRJgD3XPWCP9goa9GC>playlist </> for settings manual."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2053,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаВидеоНастройки",
{1,2,
{"ru","Видео настройки"},
{"en","Video settings"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,0,0,1,0,
{3,4,
{0}
},0,2,0,0},4,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{520,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиИнструкцийВидео",1,0,
{1,21,
{"ru","Каталог видео инструкций"},
{"en","Video documentation files dir"},
{"am","ወደ ማውጫ ለማመንጨት ይከተሉ ቪድዮ"},
{"az","Kataloq yaratmaq üçün təlimat Video"},
{"bg","Каталог за формиране на инструкции Видеоклипове"},
{"et","Kataloogi moodustamine juhiseid Video"},
{"fr","Catalogue pour la formation des instructions de la Vidéo"},
{"ka","დირექტორია გენერირება ინსტრუქციები ვიდეო"},
{"de","Katalog für die Bildung von Anweisungen Video"},
{"hu","A könyvtár létrehozásához utasításokat Videó"},
{"it","Catalogo per la formazione di istruzioni Video"},
{"lv","Katalogs, lai veidotu instrukcijas Video"},
{"lt","Katalogas forma instrukcijų Vaizdo įrašus"},
{"mn","Сан үүсгэх заавар Видео"},
{"pl","Katalog do tworzenia instrukcji Wideo"},
{"ro","Directorul pentru formarea de instrucțiuni Video de"},
{"sl","Imenik za ustvarjanje Video navodila"},
{"es","El directorio para la formación de instrucciones Vídeos"},
{"sv","Katalog för att skapa Video-instruktioner"},
{"tr","Katalog oluşturmak için talimatlar Video"},
{"vi","Thư mục để tạo bản hướng dẫn Video"}
},
{1,0},
{2,
{1},
{0,232037f4-6935-4cbb-b458-145de2c1fd0f}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогOutputИнструкцияВидеоНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{521,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиИнструкцийВидеоКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1413,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиИнструкцийВидеоРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, в которой будут помещен результат сборки видео или анимированного скринкаста."},
{"en","Directory where will be placed result of assembly videos or animated screencast."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, в которой будут помещен результат сборки видео или анимированного скринкаста."},
{"en","Directory where will be placed result of assembly videos or animated screencast."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2081,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогПроекта1",1,0,
{1,2,
{"ru","Каталог проекта "},
{"en","Project directory"}
},
{1,0},
{2,
{1},
{0,9fc46fa6-3d72-407c-9604-0c94d4618802}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогПроектаНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2082,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогПроекта1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2083,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогПроекта1РасширеннаяПодсказка",
{1,2,
{"ru","Каталог, где находятся файлы тестируемого проекта, необходимые для выполнения тестов."},
{"en","Test project files directory."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, где находятся файлы тестируемого проекта, необходимые для выполнения тестов."},
{"en","Test project files directory."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2016,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаТипВидеоИнструкций",
{1,2,
{"ru","Тип видео инструкций"},
{"en","Type video instructions"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2018,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоФормироватьИнструкциюТипВидео",4,0,
{1,0},
{1,0},
{2,
{1},
{0,5fce4446-138d-4ff7-a171-52a901fc38f4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоФормироватьИнструкциюТипВидеоПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{2019,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоФормироватьИнструкциюТипВидеоКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,2,1,
{11,
{2020,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоФормироватьИнструкциюТипВидеоРасширеннаяПодсказка",
{1,2,
{"ru","Создавать видео инструкцию."},
{"en","Create video guide."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Создавать видео инструкцию."},
{"en","Create video guide."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2021,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоФормироватьИнструкциюТипHTML",4,0,
{1,0},
{1,0},
{2,
{1},
{0,7a6c55b6-a628-4b8a-a3c9-2949c21578f7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоФормироватьИнструкциюТипHTMLПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{2022,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоФормироватьИнструкциюТипHTMLКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2023,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоФормироватьИнструкциюТипHTMLРасширеннаяПодсказка",
{1,2,
{"ru","Создавать анимированный скринкаст в формате HTML."},
{"en","Create animated HTML screencast."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Создавать анимированный скринкаст в формате HTML."},
{"en","Create animated HTML screencast."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2024,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоФормироватьИнструкциюТипMarkdown",4,0,
{1,0},
{1,0},
{2,
{1},
{0,ab548980-e681-4795-923e-c32924cc528e}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоФормироватьИнструкциюТипMarkdownПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{2025,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоФормироватьИнструкциюТипMarkdownКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2026,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоФормироватьИнструкциюТипMarkdownРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2017,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаТипВидеоИнструкцийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{904,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"НастройкиВидеоИнструкций",
{1,2,
{"ru","Настройки видео инструкций"},
{"en","Video setup instructions"}
},
{1,0},0,1,0,0,0,1,1,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,1,
{0,1,0},2,0},3,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{906,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаВидео",
{1,21,
{"ru","Настройки видео"},
{"en","Video settings"},
{"am","ቅንብሮችን ቪድዮ"},
{"az","Настроки video"},
{"bg","Настроки видео"},
{"et","Настроки video"},
{"fr","Configuration de la vidéo"},
{"ka","ვიდეო პარამეტრები"},
{"de","Hauptparameter Video"},
{"hu","Beállítások videó"},
{"it","Impostazioni video"},
{"lv","Настроки video"},
{"lt","Настроки video"},
{"mn","Тохиргоог видео"},
{"pl","Te ustawienia wideo"},
{"ro","Configura video"},
{"sl","Nastavitve video"},
{"es","Configuración de vídeo"},
{"sv","Inställningar för video"},
{"tr","Hesap video"},
{"vi","Cài đặt video"}
},
{1,3,
{"ru","Страница видео"},
{"en","Videos"},
{"vi","Cài đặt video"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},8,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{902,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"КнопкиВидео",
{1,2,
{"ru","Кнопки видео"},
{"en","Video buttons"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{715,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ПроверитьЧтоЗаписьВидеоБудетРаботать",
{1,0},1,
{21,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1417,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПроверитьЧтоЗаписьВидеоБудетРаботатьРасширеннаяПодсказка",
{1,2,
{"ru","Выполняет проверку основных команд по созданию видео и озвучки видео."},
{"en","Checks basic commands on video composing and sound."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Выполняет проверку основных команд по созданию видео и озвучки видео."},
{"en","Checks basic commands on video composing and sound."}
},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{857,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ЗагрузитьНастройкиПоУмолчанию",
{1,0},1,
{23,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1418,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗагрузитьНастройкиПоУмолчаниюРасширеннаяПодсказка",
{1,2,
{"ru","Загружает настройки из json, который находится в поставке Vanessa Automation. После загрузки, возможно, настройки нужно уточнить."},
{"en","Uploads the settings from Vanessa Automation installation json file. After uploading, it might be required to adjust the settings."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Загружает настройки из json, который находится в поставке Vanessa Automation. После загрузки, возможно, настройки нужно уточнить."},
{"en","Uploads the settings from Vanessa Automation installation json file. After uploading, it might be required to adjust the settings."}
},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},1,0,1,
{11,
{1416,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КнопкиВидеоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{900,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ПараметрыЭкрана",
{1,2,
{"ru","Параметры экрана"},
{"en","Screen parameters"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{706,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоКоличествоКадров",1,0,
{1,21,
{"ru","Количество кадров в секунду"},
{"en","Number of frames"},
{"am","ቁጥር ፍራመስ ተጠቃሚ"},
{"az","Sayı kadr saniyə"},
{"bg","Брой на кадрите в секунда"},
{"et","Kaadrite arv sekundis"},
{"fr","Le nombre d'images par seconde"},
{"ka","რაოდენობის ფარგლებში წამში"},
{"de","Die Anzahl der Frames pro Sekunde"},
{"hu","A szám a kép másodpercenként"},
{"it","Il numero di fotogrammi al secondo"},
{"lv","Kadru skaits sekundē"},
{"lt","Kadrų skaičius per sekundę"},
{"mn","The number of frames per second"},
{"pl","Ilość klatek na sekundę"},
{"ro","Numărul de cadre pe secundă"},
{"sl","Število sličic na sekundo"},
{"es","El número de fotogramas por segundo"},
{"sv","Antalet bilder per sekund"},
{"tr","Saniyedeki kare sayısı"},
{"vi","Số khuôn hình trong một giây"}
},
{1,0},
{2,
{1},
{0,627ed60b-0020-4827-8428-521e11a1abbb}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},3,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{707,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКоличествоКадровКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1420,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКоличествоКадровРасширеннаяПодсказка",
{1,2,
{"ru","Задаёт количество кадров в секунду, снимаемых с экрана во время записи видео."},
{"en","Sets shots per second number for the recording."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт количество кадров в секунду, снимаемых с экрана во время записи видео."},
{"en","Sets shots per second number for the recording."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{700,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоЭкранШирина",1,0,
{1,21,
{"ru","Экран ширина"},
{"en","Width"},
{"am","የሚሰጡዋቸውን ይታያል"},
{"az","Ekran eni"},
{"bg","На екрана широчина -"},
{"et","Ekraani laius"},
{"fr","La largeur de l'écran"},
{"ka","ეკრანის სიგანე"},
{"de","Bildschirm Breite"},
{"hu","Képernyő szélessége"},
{"it","Schermo di larghezza"},
{"lv","Ekrāna platums"},
{"lt","Ekranas plotis"},
{"mn","Өргөн дэлгэц"},
{"pl","Ekran szerokość"},
{"ro","Ecranul lățime"},
{"sl","Širine zaslona"},
{"es","El ancho de la pantalla"},
{"sv","Skärmens bredd"},
{"tr","Ekran genişliği"},
{"vi","Màn hình rộng"}
},
{1,0},
{2,
{1},
{0,34044de3-d41d-474f-8bfd-2fdf21d0aaec}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},4,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{701,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоЭкранШиринаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1421,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоЭкранШиринаРасширеннаяПодсказка",
{1,2,
{"ru","Задаёт ширину экрана для записи видео. Значение не может быть больше чем ширина в текущем разрешении экрана. Если указать значение меньше, то в видео будет записываться часть экрана, начиная с верхнего левого угла."},
{"en","Sets screen width for the recording. Maximum value is screen width for the current resolution. If the specified value is less than screen width, screen area beginning from upper left corner will be recorded."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт ширину экрана для записи видео. Значение не может быть больше чем ширина в текущем разрешении экрана. Если указать значение меньше, то в видео будет записываться часть экрана, начиная с верхнего левого угла."},
{"en","Sets screen width for the recording. Maximum value is screen width for the current resolution. If the specified value is less than screen width, screen area beginning from upper left corner will be recorded."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{703,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоЭкранВысота",1,0,
{1,21,
{"ru","высота"},
{"en","Height"},
{"am","የሚሰጡዋቸውን እርዝማኔ"},
{"az","Ekran hündürlüyü"},
{"bg","Височина на екрана"},
{"et","Ekraani kõrgus"},
{"fr","La hauteur de l'écran"},
{"ka","ეკრანზე სიმაღლე"},
{"de","Bildschirm Höhe"},
{"hu","Képernyő magassága"},
{"it","Schermo di altezza"},
{"lv","Ekrāna augstums"},
{"lt","Ekranas aukštis"},
{"mn","Дэлгэц өндөр"},
{"pl","Ekran wysokość"},
{"ro","Ecran înălțime"},
{"sl","Višino zaslona"},
{"es","La altura de la pantalla"},
{"sv","Skärmens höjd"},
{"tr","Ekran yüksekliği"},
{"vi","Chiều cao màn hình"}
},
{1,0},
{2,
{1},
{0,a853027a-4bf7-4379-aa68-125c412e7576}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},4,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{704,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоЭкранВысотаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1422,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоЭкранВысотаРасширеннаяПодсказка",
{1,2,
{"ru","Задаёт высоту экрана для записи видео. Значение не может быть больше чем высота в текущем разрешении экрана. Если указать значение меньше, то в видео будет записываться часть экрана, начиная с верхнего левого угла."},
{"en","Sets screen height for the recording. Maximum value is screen height for the current resolution. If the specified value is less than screen height, screen area beginning from upper left corner will be recorded."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт высоту экрана для записи видео. Значение не может быть больше чем высота в текущем разрешении экрана. Если указать значение меньше, то в видео будет записываться часть экрана, начиная с верхнего левого угла."},
{"en","Sets screen height for the recording. Maximum value is screen height for the current resolution. If the specified value is less than screen height, screen area beginning from upper left corner will be recorded."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1419,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЭкранаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{662,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоКомандаНачатьЗаписьВидео",2,0,
{1,21,
{"ru","Команда начать запись видео"},
{"en","Comand to start record"},
{"am","የሚለውን ትዕዛዝ ጋር ቀረጻ ቪድዮ"},
{"az","Komanda başlamaq video"},
{"bg","Екипът започнете да записвате видео"},
{"et","Meeskond alustada video salvestamist"},
{"fr","L'équipe de commencer l'enregistrement de la vidéo"},
{"ka","ბრძანება დაიწყოს ჩაწერა ვიდეო"},
{"de","Das Team mit der Videoaufzeichnung zu beginnen"},
{"hu","A parancs a videofelvétel"},
{"it","La squadra di avviare la registrazione video"},
{"lv","Komanda sāktu ierakstīšanu video"},
{"lt","Komanda pradėti įrašinėti video"},
{"mn","Тушаал эхлэх бичлэг видео"},
{"pl","Zespół rozpocząć nagrywanie wideo"},
{"ro","Echipa începe înregistrarea video"},
{"sl","Ukaz za začetek snemanja video"},
{"es","El equipo de iniciar la grabación de vídeo"},
{"sv","Kommandot för att starta inspelning av video"},
{"tr","Komutu başlatmak için video kayıt"},
{"vi","Lệnh bắt đầu ghi video"}
},
{1,0},
{2,
{1},
{0,5dc7f2ff-a66a-419c-a41a-29254157b8c4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,2,2,0,1,2,1,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{663,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКомандаНачатьЗаписьВидеоКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1423,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКомандаНачатьЗаписьВидеоРасширеннаяПодсказка",
{1,2,
{"ru","Команда, которая будет запускать VLC для начала записи экрана. В команде возможно редактирование битрейта и других настроек."},
{"en","Command to start VLC for screen recording. You can specify bitrate and other parameters."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Команда, которая будет запускать VLC для начала записи экрана. В команде возможно редактирование битрейта и других настроек."},
{"en","Command to start VLC for screen recording. You can specify bitrate and other parameters."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{671,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоКаталогДляВременныхФайлов",1,0,
{1,21,
{"ru","Каталог временных файлов"},
{"en","Template path"},
{"am","ማውጫ ላይ ጊዜያዊ ፋይሎችን"},
{"az","Kataloq üçün müvəqqəti faylları"},
{"bg","Каталог за временни файлове"},
{"et","Kataloog ajutiste failide jaoks"},
{"fr","Répertoire pour les fichiers temporaires"},
{"ka","დირექტორია დროებითი ფაილები"},
{"de","Verzeichnis für temporäre Dateien"},
{"hu","A könyvtár az ideiglenes fájlok számára"},
{"it","La directory per i file temporanei"},
{"lv","Katalogs pagaidu failus"},
{"lt","Katalogas laikinų failų"},
{"mn","Сан түр зуурын файлууд"},
{"pl","Katalog dla plików tymczasowych"},
{"ro","Directorul pentru fișiere temporare"},
{"sl","Imenik za začasne datoteke"},
{"es","Directorio de los archivos temporales"},
{"sv","Katalog för temporära filer"},
{"tr","Geçici dosyaları için dizini"},
{"vi","Thư mục dành cho tệp tạm thời"}
},
{1,2,
{"ru","Каталог в которой будут сохранены файлы на время формирования видеоинструкций."},
{"en","Directory where files will be saved at the time of compile video instructions."}
},
{2,
{1},
{0,2cacccc6-7a16-4ee2-a542-031a658f4ca8}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоКаталогДляВременныхФайловНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{672,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКаталогДляВременныхФайловКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1424,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКаталогДляВременныхФайловРасширеннаяПодсказка",
{1,2,
{"ru","Рабочий каталог, в котором создаются промежуточные файлы во время записи и сборки видео. Каталог очищается перед каждой сборкой видео!"},
{"en","The directory for temporary files created on video recording and composing. The directory is cleared before each recording!"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Рабочий каталог, в котором создаются промежуточные файлы во время записи и сборки видео. Каталог очищается перед каждой сборкой видео!"},
{"en","The directory for temporary files created on video recording and composing. The directory is cleared before each recording!"}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{677,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоКомандаFfmpeg",1,0,
{1,21,
{"ru","Команда FFmpeg"},
{"en","ffmpeg command"},
{"am","የሚለውን ትዕዛዝ ffmpeg"},
{"az","Komanda ffmpeg"},
{"bg","Екипът на ffmpeg"},
{"et","Meeskond ffmpeg"},
{"fr","La commande ffmpeg"},
{"ka","ბრძანება ffmpeg"},
{"de","Der Befehl ffmpeg"},
{"hu","A parancs az ffmpeg"},
{"it","Il comando ffmpeg"},
{"lv","Komandu ffmpeg"},
{"lt","Komanda ffmpeg"},
{"mn","Тушаал ffmpeg"},
{"pl","Zespół ffmpeg"},
{"ro","Echipa de ffmpeg"},
{"sl","Ukaz grep"},
{"es","El comando ffmpeg"},
{"sv","Kommandot grep"},
{"tr","Takım ffmpeg"},
{"vi","Lệnh ffmpeg"}
},
{1,0},
{2,
{1},
{0,9f4d8881-2be6-4071-b900-8d5e60a31f70}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{678,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКомандаFfmpegКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1425,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКомандаFfmpegРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{680,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоКомандаConvert",1,0,
{1,21,
{"ru","Команда Convert"},
{"en","Convert command"},
{"am","አቶ ትዕዛዝ ይታያል"},
{"az","Komanda Convert"},
{"bg","Командата Convert"},
{"et","Käsu Convert"},
{"fr","La Commande Convert"},
{"ka","Convert ბრძანება"},
{"de","Verwenden Sie Den Befehl Convert"},
{"hu","A Convert Parancs"},
{"it","Il Comando Convert"},
{"lv","Convert"},
{"lt","Komanda Convert"},
{"mn","Уг Хөрвүүлэх Тушаал"},
{"pl","Polecenie Convert"},
{"ro","Comanda Convert"},
{"sl","Pretvarjanje Ukazne"},
{"es","El Comando Convert"},
{"sv","Konverteringskommandot"},
{"tr","Convert Komutunu"},
{"vi","Lệnh Chuyển đổi"}
},
{1,0},
{2,
{1},
{0,b1a9ac5e-423c-409c-a779-4251bb7f5af5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоКомандаConvertНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{681,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКомандаConvertКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1426,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКомандаConvertРасширеннаяПодсказка",
{1,2,
{"ru","Путь к исполняемому файлу convert.exe в каталоге с программой ImageMagick.

Пример:
""C:\Program Files\ImageMagick-Х.Х.Х-Q16\convert.exe""

Скачать: ссылка
В процессе установки обязательным к установке является пункт: Install legacy utilities (e. g. convert)"},
{"en","Path to executed file convert.exe in ImageMagick directory.

Example:
""C:\Program Files\ImageMagick-Х.Х.Х-Q16\convert.exe""

Download: link
This item must be installed: Install legacy utilities (e. g. convert)"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Путь к исполняемому файлу convert.exe в каталоге с программой ImageMagick.

Пример:
""C:\Program Files\ImageMagick-Х.Х.Х-Q16\convert.exe""

Скачать: <link https://imagemagick.org/script/download.php>ссылка</>
В процессе установки обязательным к установке является пункт: I<b>nstall legacy utilities (e. g. convert)</>"},
{"en","Path to executed file convert.exe in ImageMagick directory.

Example:
""C:\Program Files\ImageMagick-Х.Х.Х-Q16\convert.exe""

Download: <link https://imagemagick.org/script/download.php>link</>
This item must be installed: I<b>nstall legacy utilities (e. g. convert)</>"}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1951,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоКэшироватьВидеоВставки",4,0,
{1,0},
{1,0},
{2,
{1},
{0,a0684bca-4bab-4cd7-bb9f-4df3da3da4a0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоКэшироватьВидеоВставкиПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1952,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКэшироватьВидеоВставкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1953,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКэшироватьВидеоВставкиРасширеннаяПодсказка",
{1,2,
{"ru","Если флаг установлен то при работе шага
И видеовставка ""ТекстВставки""
будет происходить проверка, есть ли в кеш уже такой видеофрагмент.
Если в кеш фрагмента нет - он будет туда добавлен.
Если фрагмент есть - то он будет взят из кеш.
Установка флага ускоряет сборку видео."},
{"en","If the checkbox is on, then during the execution of step
And videoinsertion ""InsertionText""
will be checked if this video snippet has been cashed already.
If this snippet is not cached, it will be added to the cash.
Otherwise the snippet will be retrieved from the cashed data.
Selecting of this checkbox makes the video assembly process faster."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Если флаг установлен то при работе шага
<i>И видеовставка ""ТекстВставки""</>
будет происходить проверка, есть ли в кеш уже такой видеофрагмент.
Если в кеш фрагмента нет - он будет туда добавлен.
Если фрагмент есть - то он будет взят из кеш.
Установка флага ускоряет сборку видео."},
{"en","If the checkbox is on, then during the execution of step
<i>And videoinsertion ""InsertionText""</>
will be checked if this video snippet has been cashed already.
If this snippet is not cached, it will be added to the cash.
Otherwise the snippet will be retrieved from the cashed data.
Selecting of this checkbox makes the video assembly process faster."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1954,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоКэшВидеоВставок",1,0,
{1,0},
{1,0},
{2,
{1},
{0,601ab86c-492c-4e85-829e-133ad3da9864}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоКэшВидеоВставокНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1955,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКэшВидеоВставокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1956,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКэшВидеоВставокРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, в котором хранятся фрагменты видеовстаок."},
{"en","Video snippets directory."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, в котором хранятся фрагменты видеовстаок."},
{"en","Video snippets directory."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1415,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаВидеоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{908,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаАудио",
{1,21,
{"ru","Страница аудио"},
{"en","Audio settings"},
{"am","ለማስለቀቅ"},
{"az","Parametrlər audio"},
{"bg","Настройка на звука"},
{"et","Audio seaded"},
{"fr","Paramètres audio"},
{"ka","აუდიო პარამეტრები"},
{"de","Audio-Einstellungen"},
{"hu","Audio beállítások"},
{"it","Impostazioni audio"},
{"lv","Audio uzstādījumi"},
{"lt","Garso parametrai"},
{"mn","Аудио тохиргоо"},
{"pl","Ustawienia audio"},
{"ro","Setări audio"},
{"sl","Zvočne nastavitve"},
{"es","La configuración de audio"},
{"sv","Ljud-inställningar"},
{"tr","Ses ayarları"},
{"vi","Cài đặt âm thanh"}
},
{1,21,
{"ru","Страница аудио"},
{"en","Audio settings"},
{"am","ለማስለቀቅ"},
{"az","Parametrlər audio"},
{"bg","Настройка на звука"},
{"et","Audio seaded"},
{"fr","Paramètres audio"},
{"ka","აუდიო პარამეტრები"},
{"de","Audio-Einstellungen"},
{"hu","Audio beállítások"},
{"it","Impostazioni audio"},
{"lv","Audio uzstādījumi"},
{"lt","Garso parametrai"},
{"mn","Аудио тохиргоо"},
{"pl","Ustawienia audio"},
{"ro","Setări audio"},
{"sl","Zvočne nastavitve"},
{"es","La configuración de audio"},
{"sv","Ljud-inställningar"},
{"tr","Ses ayarları"},
{"vi","Cài đặt âm thanh"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2007,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаМузыка",
{1,2,
{"ru","Музыка"},
{"en","Music"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{683,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоКаталогМузыки",1,0,
{1,21,
{"ru","Каталог музыки"},
{"en","Music path"},
{"am","ቅድሚያ የታዘዘ"},
{"az","Musiqi kataloq"},
{"bg","Каталог музика"},
{"et","Kataloog muusika"},
{"fr","Catalogue de musique"},
{"ka","მუსიკა კატალოგი"},
{"de","Musik-Katalog"},
{"hu","Zene katalógus"},
{"it","Catalogo di musica"},
{"lv","Katalogs mūziku"},
{"lt","Muzikos katalogas"},
{"mn","Хөгжим каталог"},
{"pl","Katalog muzyki"},
{"ro","Catalog de muzică"},
{"sl","Glasba katalog"},
{"es","Catálogo de música"},
{"sv","Musik katalog"},
{"tr","Müzik kataloğu"},
{"vi","Thư mục âm nhạc"}
},
{1,0},
{2,
{1},
{0,b2654bc3-2820-48c6-97d6-8f4e023137f3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоКаталогМузыкиНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{684,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКаталогМузыкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1428,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКаталогМузыкиРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, в котором находятся файлы в формате mp3.
Если поле заполнено, то из каталога будет случайным образом взят mp3 файл, который будет использован для музыкальной подложки.
Если длина mp3 файла меньше, чем длина результируещего видео, то аудио трек будет зациклен нужное количество раз, чтобы соответствовать длине видео файла."},
{"en","mp3 files directory.
If this field is filled, random mp3 file will be retrieved from this catalog as a soundtrack.
If mp3 file duration is less than the video's, it will be repeated."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, в котором находятся файлы в формате mp3.
Если поле заполнено, то из каталога будет случайным образом взят mp3 файл, который будет использован для музыкальной подложки.
Если длина mp3 файла меньше, чем длина результируещего видео, то аудио трек будет зациклен нужное количество раз, чтобы соответствовать длине видео файла."},
{"en","mp3 files directory.
If this field is filled, random mp3 file will be retrieved from this catalog as a soundtrack.
If mp3 file duration is less than the video's, it will be repeated."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1833,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоГромкостьАудиоТрека",1,0,
{1,0},
{1,0},
{2,
{1},
{0,e043b8d2-dbcc-4fb5-b564-ee7193aa903d}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1834,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоГромкостьАудиоТрекаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1835,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоГромкостьАудиоТрекаРасширеннаяПодсказка",
{1,2,
{"ru","Возможно указывать значение от 0 до 1.
Если значение поля 0, тогда громкость музыки изменяться не будет.
Если указано значение отличное от нуля (например 0.06), тогда данное значение будет влиять на громкость музыкальной подложки.
Чем больше значение - тем громче будет звучать музыкальная подложка.
Рекомендуется указывать значение 0.1 или меньше."},
{"en","Value range is from 0 to 1.
If the specified value is 0, it will not affect music volume.
If value is greater than zero (e.g., 0.06), it will affect the volume of the soundtrack.
Recommended value is 0.1 or less."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Возможно указывать значение от 0 до 1.
Если значение поля 0, тогда громкость музыки изменяться не будет.
Если указано значение отличное от нуля (например 0.06), тогда данное значение будет влиять на громкость музыкальной подложки.
Чем больше значение - тем громче будет звучать музыкальная подложка.
Рекомендуется указывать значение 0.1 или меньше."},
{"en","Value range is from 0 to 1.
If the specified value is 0, it will not affect music volume.
If value is greater than zero (e.g., 0.06), it will affect the volume of the soundtrack.
Recommended value is 0.1 or less."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2008,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаМузыкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{698,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ОзвучкаГолосом",
{1,21,
{"ru","Озвучивание голосом"},
{"en","Make voice"},
{"am","ድምፅ ድምፅ"},
{"az","Səs səs"},
{"bg","Постпродукция глас"},
{"et","Hääl hääl"},
{"fr","Le doublage de la voix"},
{"ka","ხმა, ხმა"},
{"de","Stimme Stimme"},
{"hu","Hang"},
{"it","Voce voce"},
{"lv","Balss, balss"},
{"lt","Озвучка balsu"},
{"mn","Дуу дуу"},
{"pl","Głos głosem"},
{"ro","Vocea vocea"},
{"sl","Glasovne oznake"},
{"es","Doblaje de voz"},
{"sv","Röst-voice"},
{"tr","Ses ses"},
{"vi","Tạo giọng nói"}
},
{1,21,
{"ru","Озвучивание голосом"},
{"en","Make voice"},
{"am","ድምፅ ድምፅ"},
{"az","Səs səs"},
{"bg","Постпродукция глас"},
{"et","Hääl hääl"},
{"fr","Le doublage de la voix"},
{"ka","ხმა, ხმა"},
{"de","Stimme Stimme"},
{"hu","Hang"},
{"it","Voce voce"},
{"lv","Balss, balss"},
{"lt","Озвучка balsu"},
{"mn","Дуу дуу"},
{"pl","Głos głosem"},
{"ro","Vocea vocea"},
{"sl","Glasovne oznake"},
{"es","Doblaje de voz"},
{"sv","Röst-voice"},
{"tr","Ses ses"},
{"vi","Tạo giọng nói"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{686,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоДелатьНаложениеTTS",4,0,
{1,21,
{"ru","Делать озвучку TTS"},
{"en","Make TTS"},
{"am","ማድረግ ድምፅ ይታያል"},
{"az","Bunu voiceovers TTS"},
{"bg","Направи voiceovers TTS"},
{"et","Teha озвучку TTS"},
{"fr","Faire les voix TTS"},
{"ka","ამის ხმა TTS"},
{"de","Tun TTS Sprachausgabe"},
{"hu","Hogy TTS hang"},
{"it","Fare doppiaggi TTS"},
{"lv","Darīt voiceovers TTS"},
{"lt","Daryti озвучку TTS"},
{"mn","Хийх дуу TTS"},
{"pl","Robić lektorów TTS"},
{"ro","Face voce care acționează TTS"},
{"sl","Za glasovni TTS"},
{"es","Hacer doblajes TTS"},
{"sv","Att göra röst TTS"},
{"tr","Yapmak TTS seslendirme"},
{"vi","Làm tiếng nói TTS"}
},
{1,0},
{2,
{1},
{0,1b05e4dc-d3f3-4db6-9ed6-17e948af1655}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоДелатьНаложениеTTSПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{687,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоДелатьНаложениеTTSКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1430,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоДелатьНаложениеTTSРасширеннаяПодсказка",
{1,2,
{"ru","Включает озвучку видео диктором."},
{"en","Switches on the voicing of the video."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает озвучку видео диктором."},
{"en","Switches on the voicing of the video."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2156,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"Группа5",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2077,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаОзвучкаГолосомВнутренняя",
{1,2,
{"ru","Озвучка голосом внутренняя"},
{"en","Internal voicing"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1960,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ЗаписьВидеоТипОзвучкиTTS",1,0,
{1,0},
{1,0},
{2,
{1},
{0,9447e65d-519f-4dec-9155-698d36e2a3e0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{8,
{3,3,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"N",0},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Microsoft TTS"},
{"en","Microsoft TTS"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"N",1},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Yandex SpeechKit"},
{"en","Yandex speechkit"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"N",2},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Amazon Polly"},
{"en","Amazon Polly"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},3,
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},0,0,
{3,4,
{0}
},0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоТипОзвучкиTTSПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1961,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоТипОзвучкиTTSКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1962,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоТипОзвучкиTTSРасширеннаяПодсказка",
{1,2,
{"ru","Указывает какой голос нужно использовать для озвучки видео диктором."},
{"en","Specifies narrator's voice."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Указывает какой голос нужно использовать для озвучки видео диктором."},
{"en","Specifies narrator's voice."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2079,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"СтраницыНастроектОзвучания",
{1,2,
{"ru","Страницы настроект озвучания"},
{"en","Page settings dubbing"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,0,
{0,1,0},2,0},3,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1963,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаMicrosoftTTS",
{1,2,
{"ru","Microsoft TTS"},
{"en","Microsoft TTS"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{689,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоПутьКДвижкуTTS",1,0,
{1,2,
{"ru","Команда TTS"},
{"en","TTS comand"}
},
{1,0},
{2,
{1},
{0,89667bd5-e182-490a-ba14-6425b0a785f9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоПутьКДвижкуTTSНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{690,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоПутьКДвижкуTTSКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1431,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоПутьКДвижкуTTSРасширеннаяПодсказка",
{1,2,
{"ru","Консольная команда, которая будет использована при конвертации текста в речь.
Используется программа balabolka_console."},
{"en","Console command for converting text to voice.
Used software balabolka_console."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Консольная команда, которая будет использована при конвертации текста в речь.
Используется программа <link http://www.cross-plus-a.ru/bconsole.html>balabolka_console</>."},
{"en","Console command for converting text to voice.
Used software <link http://www.cross-plus-a.ru/bconsole.html>balabolka_console</>."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{692,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоИмяTTS",1,0,
{1,21,
{"ru","Имя голоса TTS"},
{"en","TTS Voice"},
{"am","ስም ቅድሚያ"},
{"az","Adı səs TTS"},
{"bg","Име на глас TTS"},
{"et","Nimi häält TTS"},
{"fr","Le nom de la voix TTS"},
{"ka","სახელი TTS ხმა"},
{"de","Name TTS Stimme"},
{"hu","A név a TTS hang"},
{"it","Il nome di una voce TTS"},
{"lv","Vārds balss TTS"},
{"lt","Vardas balso TTS"},
{"mn","Нэр TTS дуу хоолой"},
{"pl","Nazwa głosy TTS"},
{"ro","Numele de voce TTS"},
{"sl","Ime TTS glas"},
{"es","El nombre de la voz del TTS"},
{"sv","Namnet på TTS-rösten"},
{"tr","Adı ses TTS"},
{"vi","Tên giọng nói TTS"}
},
{1,0},
{2,
{1},
{0,70266db4-16e8-4988-b997-152f5cdce0ff}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{693,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоИмяTTSКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1432,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоИмяTTSРасширеннаяПодсказка",
{1,2,
{"ru","Указвает какой голос будет использован для озвучки. Допускается указывать не полное название голоса в системе, а только часть, например ""Elena""."},
{"en","Specifies narrator's voice. You can specify a part of the voice name, e.g., ""Elena""."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Указвает какой голос будет использован для озвучки. Допускается указывать не полное название голоса в системе, а только часть, например ""Elena""."},
{"en","Specifies narrator's voice. You can specify a part of the voice name, e.g., ""Elena""."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1877,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоСкоростьПроизношения",1,0,
{1,0},
{1,0},
{2,
{1},
{0,2eb1e763-980e-4ebc-a700-e291fb4475fc}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},5,0,2,2,1,2,2,2,2,2,2,2,1,2,
{"N",-10},
{"N",10},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1878,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоСкоростьПроизношенияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1879,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСкоростьПроизношенияРасширеннаяПодсказка",
{1,2,
{"ru","Скорость произношения текста диктором.
Значения могут быть от -10 до 10."},
{"en","Narrator's speach speed.
Value range is from -10 to 10."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Скорость произношения текста диктором.
Значения могут быть от -10 до 10."},
{"en","Narrator's speach speed.
Value range is from -10 to 10."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1964,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаMicrosoftTTSРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1965,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаYandexTTS",
{1,2,
{"ru","Yandex TTS"},
{"en","Yandex TTS"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},6,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1967,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоYandexTTSЯзык",1,0,
{1,0},
{1,0},
{2,
{1},
{0,d60919ce-b8f1-40e5-b031-f1d8c2005cdb}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,3,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ru-RU"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Руский (ru-RU)"},
{"en","Rusko (ru-EN)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","en-US"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Английский (en-US)"},
{"en","English (en-US)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","tr-TR"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Турецкий (tr-TR)"},
{"en","Turkish (tr-TR)"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1968,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоYandexTTSЯзыкКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1969,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоYandexTTSЯзыкРасширеннаяПодсказка",
{1,2,
{"ru","Задаёт язык, на котором будет говорить диктор. Подробности здесь."},
{"en","Specifies narrator's language. See details here."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт язык, на котором будет говорить диктор. Подробности <link https://cloud.yandex.ru/docs/speechkit/tts/request>здесь</>."},
{"en","Specifies narrator's language. See details <link https://cloud.yandex.ru/docs/speechkit/tts/request>here</>."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1970,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоYandexTTSГолос",1,0,
{1,0},
{1,0},
{2,
{1},
{0,898704f7-579d-4a6c-824a-2df08a3f5f8f}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,8,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","alyss"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Элис (alyss)"},
{"en","Alice (alyss)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","jane"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Джейн (jane)"},
{"en","Jane (jane)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","oksana"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Оксана (oksana)"},
{"en","Oxana (oksana)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","omazh"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Омаж (omazh)"},
{"en","Omazh (omazh)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","zahar"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Захар (zahar)"},
{"en","Zahar (zahar)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ermil"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Ермил (ermil)"},
{"en","Ermil (ermil)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","alena"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Алена (alena)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","filipp"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Филипп (filipp)"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1971,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоYandexTTSГолосКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1972,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоYandexTTSГолосРасширеннаяПодсказка",
{1,2,
{"ru","Задаёт голос, которым будет говорить диктор. Подробности здесь."},
{"en","Specifies narrator's voice. See details here."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт голос, которым будет говорить диктор. Подробности <link https://cloud.yandex.ru/docs/speechkit/tts/request>здесь</>."},
{"en","Specifies narrator's voice. See details <link https://cloud.yandex.ru/docs/speechkit/tts/request>here</>."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1973,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоYandexTTSЭмоция",1,0,
{1,0},
{1,0},
{2,
{1},
{0,aae17974-900c-4617-90ad-9e4f1fb5eab0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,3,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","good"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Радостный (good)"},
{"en","Joyful (good)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","evil"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Раздраженный (evil)"},
{"en","Annoyed (evil)"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","neutral"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,2,
{"ru","Нейтральный (neutral)"},
{"en","Neutral (neutral)"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1974,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоYandexTTSЭмоцияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1975,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоYandexTTSЭмоцияРасширеннаяПодсказка",
{1,2,
{"ru","Задаёт эмоцию, с которой будет говорить диктор. Подробности здесь."},
{"en","Specifies narrator's emotion. See details here."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Задаёт эмоцию, с которой будет говорить диктор. Подробности <link https://cloud.yandex.ru/docs/speechkit/tts/request>здесь</>."},
{"en","Specifies narrator's emotion. See details <link https://cloud.yandex.ru/docs/speechkit/tts/request>here</>."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1976,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоYandexTTSСкорость",1,0,
{1,0},
{1,0},
{2,
{1},
{0,f2ea2f37-b86d-40e0-b7bb-399b1f7ebfcb}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},5,0,2,2,1,2,2,2,2,2,0,2,1,2,
{"N",0.1},
{"N",3},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,70636369-514c-4662-977e-1c3976c9756c,"ЗаписьВидеоYandexTTSСкоростьРегулирование",1,0,70636369-514c-4662-977e-1c3976c9756c,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1977,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоYandexTTSСкоростьКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1978,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоYandexTTSСкоростьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1979,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоYandexTTSИдентификаторКаталога",1,0,
{1,0},
{1,0},
{2,
{1},
{0,6b4d6d3c-4b03-4e60-8b4a-e35fb78186e6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1980,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоYandexTTSИдентификаторКаталогаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1981,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоYandexTTSИдентификаторКаталогаРасширеннаяПодсказка",
{1,2,
{"ru","Последняя часть пути строки адреса в интернет браузере. https://console.cloud.yandex.ru/folders/ИдентификаторКаталога

Требуется:
1. В главном окне Яндекс.Облако нажать на ссылку ""Перейти в текущий каталог"".
2. Скопировать последнюю часть путь из строки адреса

Пример: 
https://console.cloud.yandex.ru/folders/b1gheo81t4a6eаafe5vd
(Идентификатор каталога - b1gheo81t4a6eаafe5vd)

Получение идентификатора каталога "},
{"en","The last part of the path in the address bar in the Internet browser. https://console.cloud.yandex.ru/folders/ИдентификаторКаталога

Required:
1. In the main window of Yandex.Cloud click link ""Go to the current directory"".
2. Copy the last part of the path from address bar

Example: 
https://console.cloud.yandex.ru/folders/b1gheo81t4a6eаafe5vd
(The ID of the catalog b1gheo81t4a6eаafe5vd)

getting a directory identifier "}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Последняя часть пути строки адреса в интернет браузере. <colorstyle -14>https://console.cloud.yandex.ru/folders/ИдентификаторКаталога</>

Требуется:
1. В главном окне Яндекс.Облако нажать на <colorstyle -3>ссылку ""</><colorstyle -3>Перейти в текущий каталог</><colorstyle -3>"".</>
2. Скопировать последнюю часть путь из строки адреса

Пример: 
<colorstyle -14>https://console.cloud.yandex.ru/folders/b1gheo81t4a6eаafe5vd</>
(Идентификатор каталога - b1gheo81t4a6eаafe5vd)

<link https://cloud.yandex.ru/docs/resource-manager/operations/folder/get-id>Получение идентификатора каталога </>"},
{"en","The last part of the path in the address bar in the Internet browser. <colorstyle -14>https://console.cloud.yandex.ru/folders/ИдентификаторКаталога</>

Required:
1. In the main window of Yandex.Cloud click <colorstyle -3>link ""</><colorstyle -3>Go to the current directory</><colorstyle -3>"".</>
2. Copy the last part of the path from address bar

Example: 
<colorstyle -14>https://console.cloud.yandex.ru/folders/b1gheo81t4a6eаafe5vd</>
(The ID of the catalog b1gheo81t4a6eаafe5vd)

<link https://cloud.yandex.ru/docs/resource-manager/operations/folder/get-id>getting a directory identifier </>"}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1982,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоYandexTTSOauthToken",1,0,
{1,0},
{1,0},
{2,
{1},
{0,1e06e2ac-44d7-4577-a9f5-e334509a53a6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоYandexTTSOauthTokenНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1983,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоYandexTTSOauthTokenКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1984,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоYandexTTSOauthTokenРасширеннаяПодсказка",
{1,2,
{"ru","OAuth-токен используется в процедуре аутентификации в Яндекс.Облаке

Для получения OAuth-токена требуется:
1. Перейсти по ссылке https://cloud.yandex.ru/docs/iam/concepts/authorization/oauth-token;
2. Сгенерировать токен;
3. Сохранить его в текстовый файл;
4. Указать путь к текстоговому файлу с токеном.
"},
{"en","OAuth-token is used in Yandex.Cloud authentication

To get the OAuth-token:
1. Go to https://cloud.yandex.ru/docs/iam/concepts/authorization/oauth-token;
2. generate the token;
3. Save it to the text file;
4. Specify text file full path.
"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","OAuth-токен используется в процедуре аутентификации в Яндекс.Облаке

Для получения OAuth-токена требуется:
1. Перейсти по ссылке <link https://cloud.yandex.ru/docs/iam/concepts/authorization/oauth-token>https://cloud.yandex.ru/docs/iam/concepts/authorization/oauth-token</>;
2. Сгенерировать токен;
3. Сохранить его в текстовый файл;
4. Указать путь к текстоговому файлу с токеном.
"},
{"en","OAuth-token is used in Yandex.Cloud authentication

To get the OAuth-token:
1. Go to <link https://cloud.yandex.ru/docs/iam/concepts/authorization/oauth-token>https://cloud.yandex.ru/docs/iam/concepts/authorization/oauth-token</>;
2. generate the token;
3. Save it to the text file;
4. Specify text file full path.
"}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1966,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаYandexTTSРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2104,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаAmazonTTS",
{1,2,
{"ru","Группа amazon TTS"},
{"en","Group amazon TTS"}
},
{1,2,
{"ru","Группа amazon TTS"},
{"en","Group amazon TTS"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2112,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоAmazonЯзык",1,0,
{1,0},
{1,0},
{2,
{1},
{0,8164d014-ff65-4cef-a104-b7e122e6cbb0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,29,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","arb"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","cmn-CN"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","cy-GB"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","da-DK"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","de-DE"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","en-AU"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","en-GB"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","en-GB-WLS"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","en-IN"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","en-US"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","es-ES"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","es-MX"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","es-US"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","fr-CA"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","fr-FR"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","is-IS"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","it-IT"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ja-JP"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","hi-IN"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ko-KR"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","nb-NO"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","nl-NL"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","pl-PL"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","pt-BR"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","pt-PT"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ro-RO"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ru-RU"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","sv-SE"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","tr-TR"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2113,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоAmazonЯзыкКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2114,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоAmazonЯзыкРасширеннаяПодсказка",
{1,2,
{"ru","Соответствие языка и голоса смотрите здесь."},
{"en","See voice and language mapping here."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Соответствие языка и голоса смотрите <link https://docs.aws.amazon.com/en_us/polly/latest/dg/voicelist.html>здесь</>."},
{"en","See voice and language mapping <link https://docs.aws.amazon.com/en_us/polly/latest/dg/voicelist.html>here</>."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2106,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоAmazonГолос",1,0,
{1,0},
{1,0},
{2,
{1},
{0,d6783b19-bb4b-4fb7-9273-440632167c68}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,58,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Aditi"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Amy"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Astrid"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Bianca"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Brian"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Carla"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Carmen"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Celine"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Chantal"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Conchita"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Cristiano"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Dora"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Emma"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Enrique"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Ewa"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Filiz"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Geraint"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Giorgio"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Gwyneth"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Hans"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Ines"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Ivy"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Jacek"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Jan"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Joanna"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Joey"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Justin"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Karl"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Kendra"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Kimberly"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Lea"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Liv"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Lotte"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Lucia"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Mads"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Maja"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Marlene"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Mathieu"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Matthew"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Maxim"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Mia"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Miguel"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Mizuki"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Naja"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Nicole"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Penelope"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Raveena"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Ricardo"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Ruben"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Russell"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Salli"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Seoyeon"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Takumi"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Tatyana"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Vicki"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Vitoria"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Zeina"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Zhiyu"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2107,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоAmazonГолосКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2108,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоAmazonГолосРасширеннаяПодсказка",
{1,2,
{"ru","Соответствие языка и голоса смотрите здесь."},
{"en","See voice and language mapping here."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Соответствие языка и голоса смотрите <link https://docs.aws.amazon.com/en_us/polly/latest/dg/voicelist.html>здесь</>."},
{"en","See voice and language mapping <link https://docs.aws.amazon.com/en_us/polly/latest/dg/voicelist.html>here</>."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2109,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоAmazonДвижок",1,0,
{1,0},
{1,0},
{2,
{1},
{0,384c1c81-4c09-4963-8c94-c96a61069186}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,2,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","standard"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","neural"},00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,
{1,0}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2110,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоAmazonДвижокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2111,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоAmazonДвижокРасширеннаяПодсказка",
{1,2,
{"ru","Варианты значения для поля ""Движок"" смотрите здесь."},
{"en","""Driver"" field available values see here."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Варианты значения для поля ""Движок"" смотрите <link https://docs.aws.amazon.com/en_us/polly/latest/dg/voicelist.html>здесь</>."},
{"en","""Driver"" field available values see <link https://docs.aws.amazon.com/en_us/polly/latest/dg/voicelist.html>here</>."}
},1},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2115,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоAmazonКлючДоступа",1,0,
{1,0},
{1,0},
{2,
{1},
{0,67ac1fad-7ad5-4015-a4f0-c9a4e727ac2a}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2116,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоAmazonКлючДоступаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2117,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоAmazonКлючДоступаРасширеннаяПодсказка",
{1,2,
{"ru","Ключ доступа к облаку Amazon."},
{"en","Amazon cloud access key."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Ключ доступа к облаку Amazon."},
{"en","Amazon cloud access key."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2118,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоAmazonСекретныйКлюч",1,0,
{1,0},
{1,0},
{2,
{1},
{0,3d034dc5-32bd-4da0-aa36-ad936aa770dc}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоAmazonСекретныйКлючНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2119,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоAmazonСекретныйКлючКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2120,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоAmazonСекретныйКлючРасширеннаяПодсказка",
{1,2,
{"ru","Файл, в котором хранится секретный ключ для доступа к облаку Amazon."},
{"en","The file where Amazon cloud private key is stored."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Файл, в котором хранится секретный ключ для доступа к облаку Amazon."},
{"en","The file where Amazon cloud private key is stored."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2105,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаAmazonTTSРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2080,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницыНастроектОзвучанияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2078,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаОзвучкаГолосомВнутренняяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2121,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаТестГолоса",
{1,2,
{"ru","Тест голоса"},
{"en","Voice test"}
},
{1,2,
{"ru","Группа тест голоса"},
{"en","Group test voice"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2123,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТекстДляТестаГолоса",0,0,
{1,0},
{1,0},
{1,
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,1,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,2,
{"ru","Привет, Я Ванесса!"},
{"en","Hi, I'm Vanessa!"}
},2,0,2,0,0,48,0,1,3,2,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2124,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТекстДляТестаГолосаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2125,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТекстДляТестаГолосаРасширеннаяПодсказка",
{1,2,
{"ru","Текст, который необходимо произнести."},
{"en","Text to sound up."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Текст, который необходимо произнести."},
{"en","Text to sound up."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2126,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ТестГолоса",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2127,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестГолосаРасширеннаяПодсказка",
{1,2,
{"ru","Генерирует mp3 файл с данным текстом и отправлет его на воспроизведение плееру по умолчанию."},
{"en","Generates mp3 file with the specified text and runs it in the default player."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Генерирует mp3 файл с данным текстом и отправлет его на воспроизведение плееру по умолчанию."},
{"en","Generates mp3 file with the specified text and runs it in the default player."}
},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},1,0,1,
{11,
{2122,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаТестГолосаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2157,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа5РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1429,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОзвучкаГолосомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2009,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"КешАудио",
{1,2,
{"ru","Кеш аудио"},
{"en","Audio cache"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1945,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоКэшироватьФайлыTTS",4,0,
{1,0},
{1,0},
{2,
{1},
{0,133d1c27-2e3a-41b5-8b4f-c8a0ae75fbd0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоКэшироватьФайлыTTSПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1946,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКэшироватьФайлыTTSКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1947,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКэшироватьФайлыTTSРасширеннаяПодсказка",
{1,2,
{"ru","Включает кеширование файлов озвучки.
Ускоряет сборку видео.
Позволяет сократить обращение к внешним сервисам для генерации речи.
Позволяет сократить затраты на генерацию речи при использовании платных тарифов у сервисов генерации речи."},
{"en","Switchs on voice file cashing.
Makes video assembly process faster.
Reduces external voice generation servises usage.
Reduces voice generation costs."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает кеширование файлов озвучки.
Ускоряет сборку видео.
Позволяет сократить обращение к внешним сервисам для генерации речи.
Позволяет сократить затраты на генерацию речи при использовании платных тарифов у сервисов генерации речи."},
{"en","Switchs on voice file cashing.
Makes video assembly process faster.
Reduces external voice generation servises usage.
Reduces voice generation costs."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1948,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоКэшФайловTTS",1,0,
{1,0},
{1,0},
{2,
{1},
{0,e35793d7-c9ba-42ae-931d-d3745445ea8b}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоКэшФайловTTSНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1949,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоКэшФайловTTSКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1950,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоКэшФайловTTSРасширеннаяПодсказка",
{1,2,
{"ru","Каталог, в котором хранится кеш файлов озвучки."},
{"en","Voice cache files directory."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Каталог, в котором хранится кеш файлов озвучки."},
{"en","Voice cache files directory."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2010,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КешАудиоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2011,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаСловариЗамен",
{1,21,
{"ru","Словари замен"},
{"en","Substitution dictionaries"},
{"am","መዝገበ ቃላት replacements"},
{"az","Lüğətlərin."},
{"bg","Речници заместители"},
{"et","Sõnastikud asendused"},
{"fr","Dictionnaires de remplacement"},
{"ka","ლექსიკონები გადაჯგუფების"},
{"de","Wörterbücher Ersatz"},
{"hu","Szótárak csere"},
{"it","Dizionari sostituzioni"},
{"lv","Vārdnīcas protēzes"},
{"lt","Žodynai pavadavimų"},
{"mn","Толь бичиг орлогч"},
{"pl","Słowniki zamienników"},
{"ro","Dicționare înlocuiri"},
{"sl","Slovarji zamenjave"},
{"es","Los diccionarios de reemplazo"},
{"sv","Ordböcker ersättare"},
{"tr","Sözlükler yedek"},
{"vi","Từ điển thay thế"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2,
{3,4,
{0}
},0,2,0,2},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{54,
{1727,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ЗаписьВидеоСловарьЗамен",0,0,1,
{1,21,
{"ru","Словари замен"},
{"en","Dictionaries replacement"},
{"am","መዝገበ ቃላት replacements"},
{"az","Lüğətlərin."},
{"bg","Речници заместители"},
{"et","Sõnastikud asendused"},
{"fr","Dictionnaires de remplacement"},
{"ka","ლექსიკონები გადაჯგუფების"},
{"de","Wörterbücher Ersatz"},
{"hu","Szótárak csere"},
{"it","Dizionari sostituzioni"},
{"lv","Vārdnīcas protēzes"},
{"lt","Žodynai pavadavimų"},
{"mn","Толь бичиг орлогч"},
{"pl","Słowniki zamienników"},
{"ro","Dicționare înlocuiri"},
{"sl","Slovarji zamenjave"},
{"es","Los diccionarios de reemplazo"},
{"sv","Ordböcker ersättare"},
{"tr","Sözlükler yedek"},
{"vi","Từ điển thay thế"}
},
{1,0},
{2,
{1},
{0,cb540838-5ba3-4b52-9f05-c27db709ebf9}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,2,2,0,0,0,0,0,1,2,0,0,1,1,
{1,
{3}
},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,0,
{0,1,0},
{0},1,
{22,
{1728,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоСловарьЗаменКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{22,
{1729,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ЗаписьВидеоСловарьЗаменКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1743,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ЗаписьВидеоСловарьЗаменДобавитьСтрокуВСписокСловарейЗамен",
{1,0},1,
{67,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1744,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСловарьЗаменДобавитьСтрокуВСписокСловарейЗаменРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,0,0,3,3,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1740,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоСловарьЗаменЗначение",3,0,
{1,0},
{1,0},
{3,
{1},
{0,cb540838-5ba3-4b52-9f05-c27db709ebf9},
{0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоСловарьЗаменЗначениеНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1741,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоСловарьЗаменЗначениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1742,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСловарьЗаменЗначениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{11,
{1730,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСловарьЗаменРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,0,0,1,
{5,
{1731,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСловарьЗаменСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{1732,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоСловарьЗаменСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1733,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСловарьЗаменСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1727,0},0,3,3,0},1,
{5,
{1734,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ЗаписьВидеоСловарьЗаменСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{1735,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоСловарьЗаменСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1736,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСловарьЗаменСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1727,1},0,3,3,0},1,
{5,
{1737,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоСловарьЗаменУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{1738,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоСловарьЗаменУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1739,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСловарьЗаменУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1727,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0},1,0,1,
{11,
{2012,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСловариЗаменРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1427,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаАудиоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{926,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаВидеоДополнительные",
{1,21,
{"ru","Дополнительно"},
{"en","More"},
{"am","በቀዳሚ"},
{"az","Əlavə"},
{"bg","Допълнително"},
{"et","Täpsemalt"},
{"fr","Facultatif"},
{"ka","დამატებით"},
{"de","Zusätzlich"},
{"hu","Továbbá"},
{"it","Extra"},
{"lv","Papildus"},
{"lt","Daugiau"},
{"mn","Нэмж хэлэхэд"},
{"pl","Dodatkowo"},
{"ro","Suplimentar"},
{"sl","Poleg tega"},
{"es","Extras"},
{"sv","Dessutom"},
{"tr","Ek"},
{"vi","Hơn nữa"}
},
{1,2,
{"ru","Страница видео дополнительные"},
{"en","The video page for more"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{665,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоФайлКурсораМышки",1,0,
{1,21,
{"ru","Курсор мышки"},
{"en","Mouse pict"},
{"am","ፋይል ስለጀመሩ ቅድሚያ cursor"},
{"az","Fayl siçan"},
{"bg","Файл на курсора на мишката"},
{"et","Faili hiir"},
{"fr","Fichier le curseur de la souris"},
{"ka","ფაილი მაუსის კურსორი"},
{"de","Die Datei Maus"},
{"hu","A fájl az egér kurzor"},
{"it","Il file il cursore del mouse"},
{"lv","Failu peles kursoru"},
{"lt","Failo pelės žymeklį"},
{"mn","Файл хулганы заагч"},
{"pl","Plik kursor myszy"},
{"ro","Fișierul cursorul mouse-ului"},
{"sl","Datoteka miškin kazalec"},
{"es","Archivo el cursor del ratón"},
{"sv","Fil muspekaren"},
{"tr","Dosya fare imleci"},
{"vi","Tệp con trỏ chuột"}
},
{1,0},
{2,
{1},
{0,01d682d1-3c53-4058-9a75-16b782221776}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоФайлКурсораМышкиНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{666,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоФайлКурсораМышкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1435,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоФайлКурсораМышкиРасширеннаяПодсказка",
{1,2,
{"ru","Путь к картинке, которая используется для отрисовки курсора мышки."},
{"en","The path to the image used for mouse cursor appearance."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Путь к картинке, которая используется для отрисовки курсора мышки."},
{"en","The path to the image used for mouse cursor appearance."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{674,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоФайлВодянойЗнак",1,0,
{1,21,
{"ru","Водяной знак"},
{"en","Watermark"},
{"am","ፋይል ነፃ"},
{"az","Fayl su nişanı"},
{"bg","Файл за воден знак"},
{"et","Faili vesimärk"},
{"fr","Le fichier filigrane"},
{"ka","ფაილი watermark"},
{"de","Datei Wasserzeichen"},
{"hu","Fájl vízjel"},
{"it","Il file filigrana"},
{"lv","Failu ūdenszīme"},
{"lt","Failo vandens ženklas"},
{"mn","Файл watermark"},
{"pl","Plik znak wodny"},
{"ro","Fișierul filigran"},
{"sl","Datoteka vodni žig"},
{"es","El archivo de marca de agua"},
{"sv","Fil vattenstämpel"},
{"tr","Dosya filigran"},
{"vi","Tệp hình mờ"}
},
{1,0},
{2,
{1},
{0,a3380669-dd3e-4f03-ae33-1ee5d43239f5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоФайлВодянойЗнакНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{675,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоФайлВодянойЗнакКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1436,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоФайлВодянойЗнакРасширеннаяПодсказка",
{1,2,
{"ru","Картинка в формате png, которая будет использована для наложения водяного знака.
Водяной знак будет расположен в правом нижнем углу видео."},
{"en","Png image used as a watermark.
Watermark will be placed in the lower right corner of the video."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Картинка в формате png, которая будет использована для наложения водяного знака.
Водяной знак будет расположен в правом нижнем углу видео."},
{"en","Png image used as a watermark.
Watermark will be placed in the lower right corner of the video."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2013,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоПроцентУскорения",1,0,
{1,0},
{1,0},
{2,
{1},
{0,aebb8a97-160f-4d69-9979-ca6fca633049}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,1,2,
{"U"},
{"N",100},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2014,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоПроцентУскоренияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2015,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоПроцентУскоренияРасширеннаяПодсказка",
{1,2,
{"ru","Максимальный процент ускорения, который возможен для фрагмента видео (одного шага видео).
Механизм сборки видео может ускорить фрагмент видео, например, если длительность аудио трека для фрагамента была 5 секунд, а сам видео фрагмент получился 10 секунд.
Если указано значение 0 - то ограничения на ускорение нет.
Рекомендуется значение - 30%.
Тогда в приведенном примере видео ускорится (5 * 1.3) с 5 секунд до 6.5 секунд."},
{"en","Maximum speeding percentage available for video snippet (for a single step).
Video assembly mechanism can speed up video snippet, for example, if soundtrack for video is 5 seconds long, and video snippet is 10 seconds long.
Is the specified value is 0, than there is no limit on the speeding up.
Recommended value is 30%.
Then in the example above the video will speed up (10 * (1-0.3)) from 10 to 7 seconds."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Максимальный процент ускорения, который возможен для фрагмента видео (одного шага видео).
Механизм сборки видео может ускорить фрагмент видео, например, если длительность аудио трека для фрагамента была 5 секунд, а сам видео фрагмент получился 10 секунд.
Если указано значение 0 - то ограничения на ускорение нет.
Рекомендуется значение - 30%.
Тогда в приведенном примере видео ускорится (5 * 1.3) с 5 секунд до 6.5 секунд."},
{"en","Maximum speeding percentage available for video snippet (for a single step).
Video assembly mechanism can speed up video snippet, for example, if soundtrack for video is 5 seconds long, and video snippet is 10 seconds long.
Is the specified value is 0, than there is no limit on the speeding up.
Recommended value is 30%.
Then in the example above the video will speed up (10 * (1-0.3)) from 10 to 7 seconds."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2075,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"Группа2",
{1,0},
{1,0},0,1,0,0,0,2,0,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2071,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"НастройкиВидеоДополнительныеЛевая",
{1,2,
{"ru","Настройки видео дополнительные левая"},
{"en","Video settings additional left"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2,
{3,4,
{0}
},0,2,0,2},6,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2004,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоДобавлятьСубтитры",4,0,
{1,0},
{1,0},
{2,
{1},
{0,7675fd58-17c3-45fd-b6e1-8989a7a81424}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{2005,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоДобавлятьСубтитрыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2006,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоДобавлятьСубтитрыРасширеннаяПодсказка",
{1,2,
{"ru","Включает дообавление субтитров встроенных в видео."},
{"en","Switches on adding video subtitles."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает дообавление субтитров встроенных в видео."},
{"en","Switches on adding video subtitles."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1827,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоГруппаШаговКакШаг",4,0,
{1,0},
{1,0},
{2,
{1},
{0,595f587b-cb7f-4e00-a9cd-f0d80b0ab64d}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1828,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоГруппаШаговКакШагКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1829,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоГруппаШаговКакШагРасширеннаяПодсказка",
{1,2,
{"ru","Включает режим, когда по умолчанию каждая группа шагов первого уровня в сценарии будет конвертироваться в один шаг в автоинструкции."},
{"en","Switches on the mode, when each first level group of scenario steps will be converter to one step in automanual."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает режим, когда по умолчанию каждая группа шагов первого уровня в сценарии будет конвертироваться в один шаг в автоинструкции."},
{"en","Switches on the mode, when each first level group of scenario steps will be converter to one step in automanual."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1845,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоПодсвечиватьНажатияМышки",4,0,
{1,0},
{1,0},
{2,
{1},
{0,ca146604-9738-4798-bea9-9f876c02403e}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1846,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоПодсвечиватьНажатияМышкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1847,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоПодсвечиватьНажатияМышкиРасширеннаяПодсказка",
{1,2,
{"ru","Включает подсветку кликов мышки. Используется утилита из проекта UIToolsFor1C.
Эмуляция кликов мышки осуществляется с помощью SikuliX."},
{"en","Switches on mouse clicks highlighting. Project utility UIToolsFor1C is used.
SikuliX emulates mouse clicks."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает подсветку кликов мышки. Используется утилита из проекта UIToolsFor1C.
Эмуляция кликов мышки осуществляется с помощью SikuliX."},
{"en","Switches on mouse clicks highlighting. Project utility UIToolsFor1C is used.
SikuliX emulates mouse clicks."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1854,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоЭмулироватьВводСКлавиатуры",4,0,
{1,0},
{1,0},
{2,
{1},
{0,bed4f74e-c1c3-4154-8139-9798f5341cea}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1855,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоЭмулироватьВводСКлавиатурыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1856,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоЭмулироватьВводСКлавиатурыРасширеннаяПодсказка",
{1,2,
{"ru","Включает ввод эмуляцию ввода текста с клавиаутуры с помощью утилиты из проекта UIToolsFor1C.
Допускается ввод текста только на русском и английском языках.
Переключение раскладки клавиатуры осуществляется с помощью эмуляции нажатия Ctrl+Shift."},
{"en"," Switches on text input emulation. Project utility UIToolsFor1C is used.
Only Russian and English are available.
Keyboard layout shwitches by pressing Ctrl+Shift emulation."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Включает ввод эмуляцию ввода текста с клавиаутуры с помощью утилиты из проекта UIToolsFor1C.
Допускается ввод текста только на русском и английском языках.
Переключение раскладки клавиатуры осуществляется с помощью эмуляции нажатия Ctrl+Shift."},
{"en"," Switches on text input emulation. Project utility UIToolsFor1C is used.
Only Russian and English are available.
Keyboard layout shwitches by pressing Ctrl+Shift emulation."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1857,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоСкрытьСлужебныеОкна",4,0,
{1,0},
{1,0},
{2,
{1},
{0,ad889273-a04c-49c1-b10b-5ece0bfd77e7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1858,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоСкрытьСлужебныеОкнаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1859,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоСкрытьСлужебныеОкнаРасширеннаяПодсказка",
{1,2,
{"ru","Скрывает служебные консольные окна, которые используются для сборки видео.
Ускоряет сборку видео. Рекомендуется."},
{"en","Hides service console windows used for video assembly.
Speeds up video assembly. This mode is recommended."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Скрывает служебные консольные окна, которые используются для сборки видео.
Ускоряет сборку видео. Рекомендуется."},
{"en","Hides service console windows used for video assembly.
Speeds up video assembly. This mode is recommended."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1830,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени",4,0,
{1,0},
{1,0},
{2,
{1},
{0,e118a624-29f9-4024-a68b-30b4fed9fc45}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1831,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоОтключитьМасштабированиеШаговПоВремениКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1832,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоОтключитьМасштабированиеШаговПоВремениРасширеннаяПодсказка",
{1,2,
{"ru","Отключает масштабирование видео фрагментов по времени."},
{"en","Switches of video snippets scaling by time."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Отключает масштабирование видео фрагментов по времени."},
{"en","Switches of video snippets scaling by time."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2072,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НастройкиВидеоДополнительныеЛеваяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2073,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"НастройкиВидеоДополнительныеПравая",
{1,2,
{"ru","Настройки видео дополнительные правая"},
{"en","Video settings extra right"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2,
{3,4,
{0}
},0,2,0,2},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1848,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи",4,0,
{1,0},
{1,0},
{2,
{1},
{0,3098d5f6-42e9-438c-8bda-f05f5c0b7610}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1849,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоОтключитьСлайдСЗаголовкомФичиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1850,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоОтключитьСлайдСЗаголовкомФичиРасширеннаяПодсказка",
{1,2,
{"ru","Отключает создание в видео начального слайда, в котором указывается название фича файла."},
{"en","Switches off creating of video initial slide with feature file header."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Отключает создание в видео начального слайда, в котором указывается название фича файла."},
{"en","Switches off creating of video initial slide with feature file header."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1851,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоОтключитьСлайдСценария",4,0,
{1,0},
{1,0},
{2,
{1},
{0,f793c177-78d7-42e9-b239-9954edc5e203}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1852,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоОтключитьСлайдСценарияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{1853,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоОтключитьСлайдСценарияРасширеннаяПодсказка",
{1,2,
{"ru","Отключает создание в видео слайда, в котором выводится название сценария."},
{"en","Switches off creating of video initial slide with scenario header."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Отключает создание в видео слайда, в котором выводится название сценария."},
{"en","Switches off creating of video initial slide with scenario header."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2068,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоОтключитьСлайдФинал",4,0,
{1,0},
{1,0},
{2,
{1},
{0,3e625eac-f6bc-41de-b12c-1e408e075a7a}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{2069,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоОтключитьСлайдФиналКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2070,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоОтключитьСлайдФиналРасширеннаяПодсказка",
{1,2,
{"ru","Отключает создание в видео финальнго слайда, в котором выводится итоговая информация по видео."},
{"en","Switches off creating of video final slide with video total information."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Отключает создание в видео финальнго слайда, в котором выводится итоговая информация по видео."},
{"en","Switches off creating of video final slide with video total information."}
},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{712,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы",4,0,
{1,21,
{"ru","Устарело. Перемещать курсор мышки к активному элементу формы"},
{"en","Move mouse to active control"},
{"am","አዳዲስ ቅድሚያ ነጥብ ጋር ንቁ ቅጽ እንዳሏቸውም"},
{"az","Hərəkət kursor siçan fəal element formaları"},
{"bg","Преместване на курсора на мишката до активен елемент на формуляра"},
{"et","Liiguta hiirega sellele üksusele vormi"},
{"fr","Déplacer le curseur de la souris à l'élément actif de la forme"},
{"ka","გადატანა მაუსის მაჩვენებელი აქტიური ფორმის ელემენტი"},
{"de","Bewegen Sie den Mauszeiger auf das aktive Element der Form"},
{"hu","Vigye az egérmutatót a aktív formában elem"},
{"it","Spostare il cursore del mouse verso un elemento attivo di forma"},
{"lv","Pārvietot kursoru uz aktīvo elementu formas"},
{"lt","Perkelti pelės žymeklį į aktyvų elementą formos"},
{"mn","Хулганы заагчийг шилжүүлэх идэвхтэй хэлбэр элемент"},
{"pl","Przesunąć kursor myszy do aktywnego elementu formularza"},
{"ro","Muta cursorul mouse-ului la activ element de formular"},
{"sl","Premaknite kazalec miške na aktivno obliko element"},
{"es","Mover el cursor del ratón a la ventana activa un elemento de formulario"},
{"sv","Flytta muspekaren till den aktiva formen element"},
{"tr","Taşımak için fare imleci etkin öğeye formu"},
{"vi","Di chuyển con trỏ chuột đến phần tử biểu mẫu hiện hoạt"}
},
{1,0},
{2,
{1},
{0,5bc0f8c3-6c92-4884-9e98-94dc1de82d50}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,3,
{-22}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{713,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1438,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{709,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм",4,0,
{1,21,
{"ru","Устарело. Подсвечивать активные элементы форм"},
{"en","Show active form controls"},
{"am","መገለጫዎ ንቁ ቅጽ ይታያል"},
{"az","Подсвечивать aktiv maddələr formaları"},
{"bg","Осветяване на активни елементи форми"},
{"et","Rõhutada aktiivsete üksuste vormid"},
{"fr","Mettre en évidence les éléments actifs des formes"},
{"ka","მონიშნეთ აქტიური ფორმის ელემენტები"},
{"de","Aktive Elemente hervorheben Formen"},
{"hu","Jelölje ki a aktív formában elemek"},
{"it","Evidenziare gli elementi attivi di forme"},
{"lv","Izcelt aktīvie elementi formu"},
{"lt","Paryškinti aktyvūs elementai formų"},
{"mn","Тодруулах идэвхтэй хэлбэр элемент"},
{"pl","Podświetl elementy aktywne formy"},
{"ro","Pentru a evidenția elementele active forme de"},
{"sl","Označite aktivno obliko elementov"},
{"es","Resaltar los elementos activos de las formas de"},
{"sv","Markera aktiv form element"},
{"tr","Parlat aktif öğeleri şekil"},
{"vi","Hiển thị phần tử biểu mẫu hiện hoạt"}
},
{1,0},
{2,
{1},
{0,9b037573-0482-46b4-ae39-d6f5088b6bbb}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,3,
{-22}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{710,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоПодсвечиватьАктивныеЭлементыФормКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1437,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоПодсвечиватьАктивныеЭлементыФормРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2074,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НастройкиВидеоДополнительныеПраваяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2076,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа2РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2196,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаНастройкиСлайдов",
{1,2,
{"ru","Группа настройки слайдов"},
{"en","Group slides settings"}
},
{1,2,
{"ru","Группа настройки слайдов"},
{"en","Group slides settings"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2198,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаНастройкиIntroФайла",
{1,2,
{"ru","Настройки  слайда с заголовком фичи"},
{"en","Customize the title slide features"}
},
{1,2,
{"ru","Группа настройки intro файла"},
{"en","Group intro file settings"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},1,2,0,0},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2200,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоЗаменитьСлайдЗаголовок",4,0,
{1,0},
{1,0},
{2,
{1},
{0,a0ebc49a-8081-4dfa-bbd8-1007641029e5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоЗаменитьIntroФайлПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{2201,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоЗаменитьСлайдЗаголовокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2202,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоЗаменитьСлайдЗаголовокРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2203,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок",4,0,
{1,0},
{1,0},
{2,
{1},
{0,9acfc5e2-a8bf-43e5-aefb-4d32347a5f86}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{2204,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2205,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовокРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2206,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоПутьКСлайдуЗаголовок",3,0,
{1,0},
{1,0},
{2,
{1},
{0,1dc7e8e5-2ca5-4d9f-8f1d-1147e57df589}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоПутьКСлайдуЗаголовокНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2207,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоПутьКСлайдуЗаголовокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2208,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоПутьКСлайдуЗаголовокРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2199,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНастройкиIntroФайлаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{2209,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаНастройкиOutroФайла",
{1,2,
{"ru","Настройки финального слайда"},
{"en","Final slide settings "}
},
{1,2,
{"ru","Группа настройки outro файла"},
{"en","Group settings file outro"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},1,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},1,2,0,0},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2211,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоЗаменитьСлайдФинал",4,0,
{1,0},
{1,0},
{2,
{1},
{0,14a249eb-8460-489b-b9ef-453ee1c2edb8}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЗаписьВидеоЗаменитьOutroФайлПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{2212,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоЗаменитьСлайдФиналКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2213,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоЗаменитьСлайдФиналРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2214,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗаписьВидеоДобавитьМузыкуКСлайдуФинал",4,0,
{1,0},
{1,0},
{2,
{1},
{0,545b7b35-c1c1-47b2-bb2c-4fa1e275a71a}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{2215,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоДобавитьМузыкуКСлайдуФиналКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2216,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоДобавитьМузыкуКСлайдуФиналРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2217,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ЗаписьВидеоПутьКСлайдуФинал",3,0,
{1,0},
{1,0},
{2,
{1},
{0,43da71b2-c9f7-4630-8bc3-38d3f03178a1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ЗаписьВидеоЗаписьВидеоПутьКСлайдуФиналНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2218,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗаписьВидеоПутьКСлайдуФиналКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,3,1,
{11,
{2219,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗаписьВидеоПутьКСлайдуФиналРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{2210,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНастройкиOutroФайлаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2197,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНастройкиСлайдовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1434,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаВидеоДополнительныеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1414,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НастройкиВидеоИнструкцийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{2054,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаВидеоНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1410,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаРаботаСВидеоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1400,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаАвтоИнструкцииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1658,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаPID",
{1,21,
{"ru","PID"},
{"en","PID"},
{"am","ነፃ"},
{"az","PID"},
{"bg","Тазова възпалителна болест"},
{"et","PID"},
{"fr","PID"},
{"ka","PID"},
{"de","PID"},
{"hu","PID"},
{"it","PID"},
{"lv","PID"},
{"lt","PID"},
{"mn","PID"},
{"pl","PID"},
{"ro","PID"},
{"sl","PID"},
{"es","PID"},
{"sv","PID"},
{"tr","PID"},
{"vi","PID"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1662,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ВычислитьPIDЭтогоСеанса1",
{1,2,
{"ru","Вычислить PID"},
{"en","Calculate PID"}
},1,
{62,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,2,1,
{11,
{1663,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВычислитьPIDЭтогоСеанса1РасширеннаяПодсказка",
{1,2,
{"ru","Вычисляет PID данного сеанса 1С, в котором запущена Vanessa Automation."},
{"en","Calculates PID of the current 1С session where Vanessa Automation is started."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,2,
{"ru","Вычисляет PID данного сеанса 1С, в котором запущена Vanessa Automation."},
{"en","Calculates PID of the current 1С session where Vanessa Automation is started."}
},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1664,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"PIDЭтогоСеанса",1,0,
{1,21,
{"ru","PID этого сеанса"},
{"en","PID"},
{"am","ሰዎች ይህ ስብሰባ"},
{"az","PID, bu sessiya"},
{"bg","Тазова възпалителна болест, за тази сесия"},
{"et","PID selle seansi"},
{"fr","PID de cette session"},
{"ka","PID ამ სხდომაზე"},
{"de","PID dieser Sitzung"},
{"hu","PID ezen az ülésen"},
{"it","PID questa sessione"},
{"lv","PID šī seansa"},
{"lt","PID šio seanso"},
{"mn","PID энэ хуралдаан"},
{"pl","PID tej sesji"},
{"ro","PID această sesiune"},
{"sl","PID to sejo"},
{"es","PID esta sesión"},
{"sv","PID denna session"},
{"tr","PID bu oturum"},
{"vi","PID của phiên này"}
},
{1,0},
{1,
{24}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1665,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"PIDЭтогоСеансаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1666,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"PIDЭтогоСеансаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1659,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаPIDРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1360,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницыСервисРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1358,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНастройкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{484,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаСлужебная",
{1,21,
{"ru","Служебная"},
{"en","Extended"},
{"am","አገልግሎት"},
{"az","Dövlət qulluqçusunun xidməti"},
{"bg","Служебна"},
{"et","Saavutused"},
{"fr","Programme d'aide"},
{"ka","სამსახური"},
{"de","Dienstliche"},
{"hu","Szolgáltatás"},
{"it","L'utilità di"},
{"lv","Dienesta"},
{"lt","Tarnybinis"},
{"mn","Үйлчилгээ"},
{"pl","Służbowy"},
{"ro","Utilitarul"},
{"sl","Storitev"},
{"es","La utilidad de"},
{"sv","Service"},
{"tr","Hizmet"},
{"vi","Mở rộng"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1635,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ГруппаСтраницыСлужебные",
{1,2,
{"ru","Страницы служебные"},
{"en","Page service"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,1,
{0,1,0},2,0},3,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1637,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"СтраницаСлужебноеОсновное",
{1,2,
{"ru","Служебное основное"},
{"en","Service main"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},14,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{492,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ДляВызоваКонфигуратора",
{1,21,
{"ru","Вызов конфигуратора"},
{"en","Invoke designer"},
{"am","ጥሪ Configurator"},
{"az","Zəng конфигуратора"},
{"bg","Предизвикателство конфигуратора"},
{"et","Kõne конфигуратора"},
{"fr","L'appel du configurateur"},
{"ka","დარეკეთ კბილის პასტა"},
{"de","Herausforderung Konfigurator"},
{"hu","A Hívás Configurator"},
{"it","La sfida configuratore"},
{"lv","Zvanu конфигуратора"},
{"lt","Skambinti конфигуратора"},
{"mn","Дуудлага Configurator"},
{"pl","Wyzwanie konfiguratora"},
{"ro","Apel configuratorului"},
{"sl","Klic Configurator"},
{"es","La llamada configurador"},
{"sv","Samtal Konfiguratorn"},
{"tr","Arama yapılandırıcı"},
{"vi","Gọi ra Bộ thiết kế"}
},1,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1442,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДляВызоваКонфигуратораРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1809,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"РазвернутьВсеСтрокиДереваСлужебный",
{1,0},1,
{73,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1810,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РазвернутьВсеСтрокиДереваСлужебныйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{494,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогИнструментовСлужебный",1,0,
{1,21,
{"ru","Каталог инструментов (служебный)"},
{"en","Instruments directory (service)"},
{"am","ዶሴ ነው መሣሪያዎች (ኦፊሴላዊ)"},
{"az","Kataloq alətləri (xidməti)"},
{"bg","Каталог за инструменти (служебен)"},
{"et","Vahendid kataloogi (kasuliku)"},
{"fr","Répertoire d'outils (de service)"},
{"ka","დირექტორია ინსტრუმენტები (ოფიციალური)"},
{"de","Werkzeugkatalog (dienstliche)"},
{"hu","Könyvtár eszközök (hivatalos)"},
{"it","Catalogo degli strumenti (call of duty)"},
{"lv","Katalogs instrumentu (dienesta)"},
{"lt","Katalogas priemonės (paslaugos)"},
{"mn","Сан хэрэгсэл (албан есны)"},
{"pl","Katalog narzędzi (służbowy)"},
{"ro","Catalog de instrumente (de la serviciu)"},
{"sl","Imenik orodja (uradni)"},
{"es","Directorio de herramientas (negocios)"},
{"sv","Katalog av verktyg (officiella)"},
{"tr","Katalog, araç (iş)"},
{"vi","Thư mục công cụ (hệ thống)"}
},
{1,0},
{2,
{1},
{0,13046aca-b33c-4435-b736-44bd900e8d98}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"КаталогИнструментовСлужебныйПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{495,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогИнструментовСлужебныйКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1441,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогИнструментовСлужебныйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{489,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогФичСлужебный",1,0,
{1,21,
{"ru","Каталог фич (служебный)"},
{"en","Features directory (service)"},
{"am","ወደ ማውጫ ባህሪያት (ኦፊሴላዊ)"},
{"az","Kataloq фич (xidməti)"},
{"bg","Каталог функции (служебен)"},
{"et","Kataloog фич (kasuliku)"},
{"fr","Catalogue fich (de service)"},
{"ka","დირექტორია თვისებები (ოფიციალური)"},
{"de","Katalog Fitch (dienstliche)"},
{"hu","A könyvtár funkciók (hivatalos)"},
{"it","Catalogo fitch (call of duty)"},
{"lv","Katalogs pazīmes (dienesta)"},
{"lt","Katalogas фич (paslaugos)"},
{"mn","Сан онцлог (албан есны)"},
{"pl","Katalog fitch (służbowy)"},
{"ro","Catalog de caracteristici (de la serviciu)"},
{"sl","Imenik funkcije (uradni)"},
{"es","El catálogo de funciones (negocios)"},
{"sv","Katalogen har (officiella)"},
{"tr","Katalog fitch (iş)"},
{"vi","Thư mục tính năng (hệ thống)"}
},
{1,0},
{2,
{1},
{0,1248d1d6-f91e-4a5f-97b6-46e4d48aa426}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{490,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогФичСлужебныйКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1440,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогФичСлужебныйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1680,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ФйлФлагВыполненияСценариев",1,0,
{1,0},
{1,0},
{1,
{28}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1681,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ФйлФлагВыполненияСценариевКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1682,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФйлФлагВыполненияСценариевРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1686,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ИДПотока",1,0,
{1,2,
{"ru","ИД раннера"},
{"en","ID runner"}
},
{1,0},
{2,
{1},
{0,327eb0c1-f007-482d-af04-57d5e3d05329}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1687,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИДПотокаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1688,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИДПотокаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1781,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ВерсияПоставки",1,0,
{1,0},
{1,0},
{2,
{1},
{0,43cd1bf2-24ca-478e-8cef-c393fcabb42c}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1782,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВерсияПоставкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1783,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВерсияПоставкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1797,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогОтносительноКоторогоНадоСтроитьИерархию1",1,0,
{1,0},
{1,0},
{2,
{1},
{0,e47f137e-431d-4b4a-a21e-a80430127c1c}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1798,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогОтносительноКоторогоНадоСтроитьИерархию1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1799,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогОтносительноКоторогоНадоСтроитьИерархию1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1800,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"УровеньОтчета1Служебный",1,0,
{1,0},
{1,0},
{2,
{1},
{0,33d55b48-171f-4731-a835-642fcaabcf11}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1801,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"УровеньОтчета1СлужебныйКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1802,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УровеньОтчета1СлужебныйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1803,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"УровеньОтчета2Служебный",1,0,
{1,0},
{1,0},
{2,
{1},
{0,7811f0ec-f571-42c3-8f7a-9c3fa131a0f0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1804,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"УровеньОтчета2СлужебныйКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1805,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УровеньОтчета2СлужебныйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1806,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"УровеньОтчета3Служебный",1,0,
{1,0},
{1,0},
{2,
{1},
{0,95487883-f187-40d6-a398-b4cb4907bc73}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1807,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"УровеньОтчета3СлужебныйКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1808,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УровеньОтчета3СлужебныйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{2240,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ИмяФайлаВнешнихКомандФреймворка",1,0,
{1,0},
{1,0},
{2,
{1},
{0,1bd68a7f-c40e-4fbc-b652-1cd8c18e4486}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2241,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИмяФайлаВнешнихКомандФреймворкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{2242,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИмяФайлаВнешнихКомандФреймворкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1667,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"РежимСамотестирования",1,0,
{1,0},
{1,0},
{2,
{1},
{0,f0571e8b-752f-4337-90ce-9bffc5a992e0}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"РежимСамотестированияПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1668,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"РежимСамотестированияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1669,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РежимСамотестированияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1670,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"СохранитьНастройкиКлиент",
{1,0},1,
{63,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1671,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СохранитьНастройкиКлиентРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},1,0,1,
{11,
{1638,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаСлужебноеОсновноеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1639,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ГруппаСлужебноеВыполнитьКод",
{1,2,
{"ru","Выполнить код"},
{"en","Execute"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1644,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,"ВыполнитьПроизвольныйКод",
{1,0},1,
{61,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1645,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыполнитьПроизвольныйКодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1641,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"РеквизитПроизвольныйКод",1,0,
{1,2,
{"ru","Произвольный код"},
{"en","Arbitrary code"}
},
{1,0},
{1,
{23}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,1,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1642,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"РеквизитПроизвольныйКодКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1643,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РеквизитПроизвольныйКодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1640,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСлужебноеВыполнитьКодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1649,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,4,"ТаблицаStepDefinition",
{1,2,
{"ru","Таблица step definition"},
{"en","Table step definition"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{54,
{1486,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ТаблицаИзвестныхStepDefinition",0,0,1,
{1,2,
{"ru","Таблица известных step definition"},
{"en","The known definition table step"}
},
{1,0},
{1,
{9}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,1,13,
{"U"},
{0,1,0},
{0},1,
{22,
{1487,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{22,
{1488,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ТаблицаИзвестныхStepDefinitionКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3,0},11,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1499,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionИмяФайла",1,0,
{1,0},
{1,0},
{2,
{9},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1500,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionИмяФайлаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1501,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionИмяФайлаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1502,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionId",1,0,
{1,0},
{1,0},
{2,
{9},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1503,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionIdКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1504,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionIdРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1505,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionСтрокаРеальнойПроцедуры",1,0,
{1,0},
{1,0},
{2,
{9},
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1506,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionСтрокаРеальнойПроцедурыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1507,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionСтрокаРеальнойПроцедурыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1508,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionПараметры",1,0,
{1,0},
{1,0},
{2,
{9},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1509,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionПараметрыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1510,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionПараметрыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1511,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionСтрокаДляПоиска",1,0,
{1,0},
{1,0},
{2,
{9},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1512,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionСтрокаДляПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1513,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionСтрокаДляПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1514,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionПредставлениеТеста",1,0,
{1,0},
{1,0},
{2,
{9},
{6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1515,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionПредставлениеТестаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1516,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionПредставлениеТестаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1517,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionТранзакция",1,0,
{1,0},
{1,0},
{2,
{9},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1518,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionТранзакцияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1519,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionТранзакцияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1520,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionОписаниеШага",1,0,
{1,0},
{1,0},
{2,
{9},
{8}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1521,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionОписаниеШагаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1522,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionОписаниеШагаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1523,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionТипШага",1,0,
{1,0},
{1,0},
{2,
{9},
{9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1524,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionТипШагаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1525,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionТипШагаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1526,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionВерсияФайла",1,0,
{1,0},
{1,0},
{2,
{9},
{10}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1527,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionВерсияФайлаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1528,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionВерсияФайлаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1529,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ТаблицаИзвестныхStepDefinitionСтрокаОбрабатывалась",1,0,
{1,0},
{1,0},
{2,
{9},
{11}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1530,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionСтрокаОбрабатываласьКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1531,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionСтрокаОбрабатываласьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{11,
{1489,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,0,0,1,
{5,
{1490,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{1491,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1492,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1486,0},0,3,3,0},1,
{5,
{1493,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ТаблицаИзвестныхStepDefinitionСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{1494,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1495,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1486,1},0,3,3,0},1,
{5,
{1496,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблицаИзвестныхStepDefinitionУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{1497,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблицаИзвестныхStepDefinitionУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1498,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаИзвестныхStepDefinitionУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1486,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0},1,0,1,
{11,
{1650,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблицаStepDefinitionРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1636,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСтраницыСлужебныеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},0,0,1,
{11,
{1439,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСлужебнаяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1261,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФункциональностьЗакладкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1717,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СтрокаСтатуса",0,0,
{1,0},
{1,0},
{1,
{38}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1718,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СтрокаСтатусаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1719,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтрокаСтатусаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1886,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаПросмотрПеременных",
{1,2,
{"ru","Просмотр переменных"},
{"en","Variable view"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,2,
{3,4,
{0}
},0,2,0,2},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{54,
{1915,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,0,"ТаблоПеременных",0,0,1,
{1,2,
{"ru","Табло переменных"},
{"en","Scoreboard variables"}
},
{1,0},
{1,
{42}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,2,19,
{"S",""},20,
{"B",0},
{3,2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ТаблоПеременныхПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ТаблоПеременныхПередУдалением",ab930362-ff94-4dcb-ad16-188805d23e3c,"ТаблоПеременныхПередНачаломИзменения",1,0,2391e7b8-7235-45d7-ab7e-6ff3dc086396,0,1,2ccfdec5-583d-4eca-8319-e55de492665a,0,1,ab930362-ff94-4dcb-ad16-188805d23e3c,0,1},
{0},1,
{22,
{1916,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{22,
{1917,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ТаблоПеременныхКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{1943,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ТаблоПеременныхОбновитьТаблоПеременных",
{1,0},1,
{77,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{0,fc4f29e0-d168-4fe0-8e64-e982fabf2595},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{1944,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхОбновитьТаблоПеременныхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{30,
{2058,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ТаблоПеременныхЗакрытьТаблоПеременных",
{1,0},1,
{80,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{2059,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхЗакрытьТаблоПеременныхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1},1,0,0,0,3,3,0},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1928,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблоПеременныхИмя",1,0,
{1,0},
{1,0},
{2,
{42},
{1}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1929,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1930,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхИмяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1931,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблоПеременныхЗначение",1,0,
{1,0},
{1,0},
{2,
{42},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ТаблоПеременныхЗначениеПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{1932,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхЗначениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1933,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхЗначениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1934,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблоПеременныхТип",1,0,
{1,0},
{1,0},
{2,
{42},
{3}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1935,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхТипКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1936,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхТипРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1937,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблоПеременныхИсточникДанных",1,0,
{1,0},
{1,0},
{2,
{42},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{1938,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхИсточникДанныхКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1939,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхИсточникДанныхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1940,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ТаблоПеременныхСлужебнаяСтрока",1,0,
{1,0},
{1,0},
{2,
{42},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1941,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхСлужебнаяСтрокаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1942,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхСлужебнаяСтрокаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{11,
{1918,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,0,0,1,
{5,
{1919,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{1920,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1921,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1915,0},0,3,3,0},1,
{5,
{1922,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ТаблоПеременныхСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{1923,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1924,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1915,1},0,3,3,0},1,
{5,
{1925,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ТаблоПеременныхУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{1926,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТаблоПеременныхУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{11,
{1927,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТаблоПеременныхУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},2,
{1915,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0},0,0,1,
{11,
{1887,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаПросмотрПеременныхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1596,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаИнформация",
{1,2,
{"ru","Информация"},
{"en","Information"}
},
{1,0},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{81,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"КаталогФич",1,0,
{1,21,
{"ru","Текущий каталог файлов функциональности"},
{"en","Current features files directory"},
{"am","ቅድሚያ የታዘዘ ፋይሎችን."},
{"az","Cari kataloq və faylları funksionallığı"},
{"bg","Текущата директория файл функционалност"},
{"et","Praegune failide kataloogi funktsionaalsus"},
{"fr","Le répertoire courant les fichiers de la fonctionnalité"},
{"ka","მიმდინარე დირექტორიაში ფაილების ფუნქციონალური"},
{"de","Aktuelle Dateiverzeichnis Funktionalität"},
{"hu","Aktuális könyvtárban lévő fájlok funkció"},
{"it","Risultati directory dei file di funzionalità"},
{"lv","Pašreizējā direktorijā failus funkcionalitāti"},
{"lt","Dabartinis failų katalogą funkcionalumą"},
{"mn","Одоогийн сан файлуудыг ажиллагаа"},
{"pl","Aktualny katalog plików funkcjonalności"},
{"ro","Directorul curent de fișiere de funcționalitate"},
{"sl","Trenutni imenik datotek funkcionalnost"},
{"es","El actual directorio de archivos de la funcionalidad de"},
{"sv","Aktuella katalogen filer funktionalitet"},
{"tr","Geçerli dosya dizin işlevselliği"},
{"vi","Thư mục hiện tại tệp chức năng"}
},
{1,0},
{2,
{1},
{0,1248d1d6-f91e-4a5f-97b6-46e4d48aa426}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,50,0,2,2,2,
{1,0},1,
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},2,
{1,eba5f295-c611-4dd9-84b5-22911ad60c53,"КаталогФичНажатие",1,0,eba5f295-c611-4dd9-84b5-22911ad60c53,0,1},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},1,0,0,1,0},
{0,1,0},1,
{22,
{82,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогФичКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1460,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогФичРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1601,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаСтатистика",
{1,2,
{"ru","Статистика"},
{"en","Statistics"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{11,
{1598,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Статистика",
{1,2,
{"ru","Статистика"},
{"en","Statistics"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,2,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},1,
{22,
{1599,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СтатистикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,2,
{1,
{1,2,
{"ru","Статистика"},
{"en","Statistics"}
},1},0,1,
{11,
{1600,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтатистикаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},1,0,0,1,0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{1622,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаСлужебныеФлаги",
{1,2,
{"ru","Служебные флаги"},
{"en","Service flags"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1624,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ФлагСценарииЗагружены",1,0,
{1,0},
{1,0},
{1,
{21}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1625,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ФлагСценарииЗагруженыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1626,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФлагСценарииЗагруженыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1627,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ФлагСценарииВыполнены",1,0,
{1,0},
{1,0},
{1,
{22}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{1628,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ФлагСценарииВыполненыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{1629,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФлагСценарииВыполненыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},1,0,1,
{11,
{1623,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСлужебныеФлагиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1602,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСтатистикаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1597,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаИнформацияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,0,1,
{11,
{1260,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаФункциональностиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},"","",0,1,"",2,0,0,0,0,0,3,3,0,1,2,100,1,1,0,0,1,
{49,0}
},"#Область ОписаниеПеременных

#Область ЭкспортируемыеПеременныеФормы

// Необходима для работы автотестирования VA
&НаКлиенте
Перем СлужебнаяПеременная Экспорт;

// Необходима для работы автотестирования VA
&НаКлиенте
Перем ХостСистема Экспорт;

&НаКлиенте
Перем ЭтоLinux Экспорт;

&НаКлиенте
Перем ЭтоЗапускВРежимеКоманднойСтроки Экспорт;

&НаКлиенте
Перем ЭтоТонкийКлиент Экспорт;

&НаКлиенте
Перем КешДанныеПеревода Экспорт;

&НаКлиенте
Перем Версия836ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8310ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8311ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8312ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8313ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8315ИлиВыше Экспорт;

// Служебная переменная. Получает значение Истина, когда отработали все обработчики открытия формы.
&НаКлиенте
Перем ФормаVanessaAutomationОткрылась Экспорт;

#КонецОбласти

#Область ГлобальныеПеременныеФормы

&НаКлиенте
Перем ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен;

&НаКлиенте
Перем МодульПарсерФич;

&НаКлиенте
Перем ДанныеВозможнаОптимизацияЗагрузкиФичи;

&НаКлиенте
Перем СтрокаПробелов;

&НаКлиенте
Перем КешЗагрузкиФич;

&НаКлиенте
Перем КешПараметрыВСтроке;

&НаКлиенте
Перем КешОпределенияТипа;

&НаКлиенте
Перем КешПоискаКлючевыхСлов;

&НаКлиенте
Перем КешСнипетов;

&НаКлиенте
Перем КэшФормПлагинов;

&НаКлиенте
Перем мСинхронныйРежимРазрешен;

&НаКлиенте
Перем ОбъектКонтекст Экспорт;

&НаКлиенте
Перем ОбъектКонтекстСохраняемый Экспорт;

&НаКлиенте
Перем МассивСостоянияКонтекстовДоВыполненияШага;

&НаКлиенте
Перем ТаблицаУжеСуществующихСценариев;

&НаКлиенте
Перем МассивВерсийFeatureИмяФайла;
&НаКлиенте
Перем МассивВерсийFeatureВерсия;

&НаКлиенте
Перем МассивВерсийEPFИмяФайла;
&НаКлиенте
Перем МассивВерсийEPFВерсия;

&НаКлиенте
Перем ИдетОпросЭлементовФормTestClient;
&НаКлиенте
Перем МассивСостояниеФормTestClient;

&НаКлиенте
Перем ОбработкаСвязаннаяСИсполняемойФичей;

&НаКлиенте
Перем ТаблицаКонтекстовОбработок;

&НаКлиенте
Перем МассивИменКонтекстовОбработок;

&НаКлиенте
Перем ВыполнятьСценарииАсинхронно;

&НаКлиенте
Перем МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы;

&НаКлиенте
Перем ТекИД_СценарияВМассиве;

&НаКлиенте
Перем ТекИД_ШагаВМассиве;

&НаКлиенте
Перем ТекИД_ВыполненногоШагаВМассиве;

&НаКлиенте
Перем СохраненноеСостояниеФормыTestClient;

&НаКлиенте
Перем ВсёЕщёИдётВыполнениеШагов;

&НаКлиенте
Перем МассивИДСтрокиДерева;

&НаКлиенте
Перем МассивРезультатПрохожденияТестовСценария;

&НаКлиенте
Перем ЦветУспешно;

&НаКлиенте
Перем ЦветОжидает;

&НаКлиенте
Перем ЦветНеУспешно;

&НаКлиенте
Перем ЦветЧужойСнипет;

&НаКлиенте
Перем ШагСтрокДляМодуля;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииHTML, ТекущаяФичаИнструкцииHTML;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииMarkdown, ТекущаяФичаИнструкцииMarkdown;

&НаКлиенте
Перем СтатусЗапускаСценариев Экспорт;

&НаКлиенте
Перем ТаблицаОбработокДляОтладки;

&НаКлиенте
Перем СтрокаШагаСКоторогоНадоВыполнятьСценарий;

&НаКлиенте
Перем ПредставлениеВертЧертыВТабДок;

&НаКлиенте
Перем ТекущийИсполняемыйФичаФайл;

&НаКлиенте
Перем ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий;

&НаКлиенте
Перем ПрекратитьВыполнениеВсехСценариев;

&НаКлиенте
Перем ПрекратитьВыполнениеДанногоСценария;

&НаКлиенте
Перем МассивPIDОкон1С, ЗначениеПараметровДляСнятияСкриншотов, ТекProcessID, МассивКоординатОкон1С;

&НаКлиенте
Перем ИмяФайлаСубтитров, ИнтервалВыполненияШагаПриЗаписиВидео, БылаОшибкаСкриптовСборкиВидео;

&НаКлиенте
Перем СкриншотСделанВСценарии;

&НаКлиенте
Перем WshShell;

&НаКлиенте
Перем МассивСнипетовВидеовставкаИзТекста;

&НаКлиенте
Перем ЭтоЗапускВРежимеБезЗагрузкиНастроек;

&НаКлиенте
Перем МассивTTS;

&НаКлиенте
Перем МодульРаботыСВидео;

&НаКлиенте
Перем МодульСообщенийПользователю;

&НаКлиенте
Перем МодульПереводШагов;

&НаКлиенте
Перем МодульSikuliXСевер;

&НаКлиенте
Перем ИмяУправляющиегоФайлаSikuliXСервер;

&НаКлиенте
Перем ИмяФайлаОтветаSikuliXСевер;

&НаКлиенте
Перем НедавноЗагруженныеФичи;

&НаКлиенте
Перем Брейкпоинты;

&НаКлиенте
Перем ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки;

&НаКлиенте
Перем СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример;

&НаКлиенте
Перем ОбработанноеИдОповещения;

&НаКлиенте
Перем СтруктураПоискаСтрокДерева;

&НаКлиенте
Перем КешВерсияОбработки;

&НаКлиенте
Перем КешРежимСовместимости;

&НаКлиенте
Перем СчетчикШаговБезТаймера, МаксСчетчикШаговБезТаймера;

&НаКлиенте
Перем Регулярка;

&НаКлиенте
Перем НадоПерейтиКСтрокеДерева;

&НаКлиенте
Перем ВозниклаОшибкаПодключенияTestClient;

&НаКлиенте
Перем ВозниклаОшибкаОшибкаСетевогоВзаимодействия;

&НаКлиенте
Перем КоличествоЗапущенныхКлиентовТестирования;

&НаКлиенте
Перем ВозниклаОшибкаВШагеКонтекста;

&НаКлиенте
Перем ГлобальныеЗначенияТаблиц;

&НаКлиенте
Перем ЗафиксированнаяФормаTestClient;

&НаКлиенте
Перем КешДанныхПереводовШагов;

&НаКлиенте
Перем SikuliXСеверЗапущен;

&НаКлиенте
Перем ИмяФайлаВыводаКонсолиSikuliXСервер;

&НаКлиенте
Перем ПроверятьВидимостьЭлементаСУчетомРодителя;

&НаКлиенте
Перем ПроверятьДоступностьЭлементаСУчетомРодителя;

&НаКлиенте
Перем ПроверятьТолькоПросмотрСУчетомРодителя;

&НаКлиенте
Перем ЕстьКонстантаВКонфигурацииПутьКVA;

&НаКлиенте
Перем ПрефиксИнструментаДляСохраненияНастроек;

&НаКлиенте
Перем ИДДляОбщегоСохраненияНастроек;

&НаКлиенте
Перем ВозможнаОптимизацияРаботыСФайлами;

&НаКлиенте
Перем БиблиотекаДляПодключения;

&НаКлиенте
Перем глСтруктураПараметров;

&НаКлиенте
Перем СохранитьКлиентовТестированияПослеОткрытияФормы;

&НаКлиенте
Перем ЭтоWindowsXP;

&НаКлиенте
Перем ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient;

&НаКлиенте
Перем ТекстВстроенныхСценариевСервер;

&НаКлиенте
Перем СлужебныеПеременныеКонтекста;

&НаКлиенте
Перем глПараметрыПеретаскивания;

&НаКлиенте
Перем ОшибкаAssert;

&НаКлиенте
Перем ЗначениеExpected;

&НаКлиенте
Перем ЗначениеActual;

&НаКлиенте
Перем ОшибкиАссертов;

&НаКлиенте
Перем ОграничениеНаКоличествоПопытокДействий;

&НаКлиенте
Перем ОшибкиСценарияПереданныеИзвне;

&НаКлиенте
Перем ВнешняяКомпонентаДляСкриншотов;

&НаКлиенте
Перем ДескрипторОкнаКлиентаТестирования;

#КонецОбласти

#КонецОбласти

#Область ОбработкаСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектНаСервере = ЭтотОбъектНаСервере();
	VAОткрытаКакВнешняяОбработка = VAОткрытаКакВнешняяОбработка(ОбъектНаСервере);
	Если VAОткрытаКакВнешняяОбработка Тогда
		ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	КонецЕсли;
	
	ЕстьПоддержкаНемодальныхФорм    = ЕстьПоддержкаНемодальныхФорм();
	ЕстьПоддержкаАсинхронныхВызовов = ЕстьПоддержкаАсинхронныхВызовов();
	ЕстьЗащитаОтОпасныхДействий     = ЕстьЗащитаОтОпасныхДействий();
	
	Если Параметры.Свойство(""КаталогИнструментов"") Тогда
		Объект.КаталогИнструментов = Параметры.КаталогИнструментов;
	КонецЕсли;	
	
	Если Параметры.Свойство(""КаталогПроекта"") Тогда
		Объект.КаталогПроекта = Параметры.КаталогПроекта;
	КонецЕсли;	
	
	// Служебная строка. Не удалять. Определение режима поставки.
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияПоставки) Тогда
		Объект.ВерсияПоставки = ""standart"";
	КонецЕсли;	 
	
	Объект.КоличествоСекундПоискаОкна = 5;
	Объект.КоличествоПопытокВыполненияДействия = 3;
	Объект.ОбновлятьСтатистикуВДереве = Истина;
	Объект.ОбновлятьДеревоПриНачалеВыполненияСценария = Истина;
	Объект.ТегTreeВключенПоУмолчанию = Истина;
	Объект.ГенерироватьУФ = Истина;
	
	МакетШаблонПеревода = ОбъектНаСервере.ПолучитьМакет(""ШаблонПеревода"");
	
	СтатусыРезультатаТестирования = ОбъектНаСервере.СтатусыРезультатаТестирования;
	
	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ПутьКОбработке = ПолучитьПутьКОбработкеСервер();
		Если ЗначениеЗаполнено(ПутьКОбработке) Тогда
			Объект.КаталогИнструментов = КаталогИзИмениФайла(ПутьКОбработке);
			Если ЕстьКонстантаВКонфигурацииСервер(""ПутьКVanessaAutomation"") Тогда
				УстановитьЗначениеКонстантыСервер(""ПутьКVanessaAutomation"",ПутьКОбработке);
			КонецЕсли;
		КонецЕсли;	 
	КонецЕсли;
	
	МакетВнешнейКомпонентыСкриншотов = ОбъектНаСервере.ПолучитьМакет(""WindowCaptureComponent"");
	МестоположениеВнешнейКомпонентыДляСкриншотов = ПоместитьВоВременноеХранилище(МакетВнешнейКомпонентыСкриншотов, УникальныйИдентификатор);
	
	РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции = РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции();
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ДанныеТекстВстроенныхСценариевСервер = ОбъектНаСервере.ПолучитьМакет(""ЭкспортныеСценарии"").ПолучитьТекст(); 
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализацияПеременныхМодуляФормы();
	АсинхронноеПодключениеМодулей();
	
	КомандыЗапускаТекстовогоРедактораПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы = Истина Тогда //для совместимости с 8.2
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждениеПриЗакрытии = ""Да"" И НЕ ЗакрытьФормуVA
		И НЕ Объект.РежимСамотестирования И НЕ Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
		
		Отказ = Истина;
		ТекстВопроса = Локализовать(""Вы уверены?"");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, Локализовать(""Закрыть форму""));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ОписаниеОповещения = Новый ОписаниеОповещения(""ПередЗакрытиемЗавершение"", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОтключитьОбработчикОжидания(""ОпросЭлементовФормTestClient"");
	ОтключитьОбработчикОжидания(""ПроверкаВнешнихКоманд"");
	
	Если НЕ ЭтоЗапускВРежимеБезЗагрузкиНастроек Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если Не ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.8.0"") Тогда
			СохранитьНастройки();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый <> Неопределено
		И ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.РазорватьСоединение();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ОстановитьSikuliXСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ""ВыборИзвестногоШага"" Тогда
		Объект.СгенерированныйСценарий = Объект.СгенерированныйСценарий + Символы.ПС + Символы.Таб + Параметр;
	ИначеЕсли ИмяСобытия = ""РедактированиеТаблицыGherkin"" Тогда
		ЗаменитьТаблицуGherkinПослеРедактирования(Параметр);
	ИначеЕсли Найти(ИмяСобытия, ""ВыполнитьСценарий"") > 0 ИЛИ Найти(ИмяСобытия, ""ЗагрузитьСценарий"") Тогда
		
		Если НЕ ЭтаФорма.Открыта() Тогда
			Возврат;
		КонецЕсли;
		
		НадоПерейтиКСтрокеДерева = -1;
		
		ИдОповещения = Параметр.ИдОповещения;
		Если ИдОповещения = ОбработанноеИдОповещения Тогда
			Возврат;
		КонецЕсли;	 
		
		ОбработанноеИдОповещения = ИдОповещения; 
		
		Объект.КаталогПроекта = Параметр.КаталогПроекта;
		Объект.КаталогФич     = Параметр.ПутьКСценариям;
		
		Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
		
		Если Параметр.Свойство(""ОстановкаПриВозникновенииОшибки"") Тогда
			Объект.ОстановкаПриВозникновенииОшибки = Параметр.ОстановкаПриВозникновенииОшибки;
		КонецЕсли;	 
		
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
		
		Если Параметр.Свойство(""СТекущегоШага"") Тогда
			Если Параметр.СТекущегоШага Тогда
				НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
				НомерСтрокиСценарияПереданныйИзвне           = Параметр.НомерСтрокиДляЗапускаСТекущегоШагаСценария;
				Если ФормаVanessaAutomationОткрылась Тогда
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить(""ЗапуститьСценарийСоСтрокиПрисланнойИзвне"",Истина);
					ЗагрузитьФичи(ДопПараметры);
				КонецЕсли;	 
				Возврат;
			КонецЕсли;	 
		КонецЕсли;
		
		Объект.ВыполнениеСценарияИзОбработкиОповещения = Истина;
		
		Если Найти(ИмяСобытия, ""ВыполнитьСценарий"") > 0 Тогда
			Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
			Если ФормаVanessaAutomationОткрылась Тогда
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить(""ПерезагрузитьИВыполнить"",Истина);
				ЗагрузитьФичи(ДопПараметры);
			КонецЕсли;	 
		ИначеЕсли Найти(ИмяСобытия, ""ЗагрузитьСценарий"") > 0 Тогда
			ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
			Если ТекущиеДанныеДерева <> Неопределено Тогда
				НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
				Если ФормаVanessaAutomationОткрылась Тогда
					ЗагрузитьФичи();
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли ИмяСобытия = ""ЗагрузитьФичи"" Тогда
		ЗагрузитьФичи(Параметр);
		ПоказатьОповещениеПользователя(,,Локализовать(""Сценарии загружены в дерево запуска сценариев""));	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ТестГолоса(Команда)
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	Если ПустаяСтрока(ТекстДляТестаГолоса) Тогда
		ПараметрыВидео.Вставить(""ТекстДляТестаГолоса"",""Привет! Я Ванесса!"");
	Иначе	
		ПараметрыВидео.Вставить(""ТекстДляТестаГолоса"",ТекстДляТестаГолоса);
	КонецЕсли;	 
	ИмяФайла = МодульРаботыСВидео.ТестГолоса(ПараметрыВидео);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработатьЗапускТестаФайлаОзвучки"", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеОповещения, ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтрокеСОшибкой(Команда)
	
	ИДСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИДСтроки;
	
	СтрокаСОшибкой = ПолучитьСтрокуСОшибкойРекурсивно(Объект.ДеревоТестов, ИДСтроки);
	
	Если СтрокаСОшибкой = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаСОшибкой;
	
КонецПроцедуры

&НаКлиенте
Процедура Брейкпоинт(Команда)
	ОбработатьУстановкуСнятиеБрейкпоинта();
КонецПроцедуры

&НаКлиенте
Процедура БрейкпоинтУбратьВсе(Команда)
	КопияБрейкпоинты = Новый Массив;
	
	Для каждого Элем Из Брейкпоинты Цикл
		КопияБрейкпоинты.Добавить(Элем);
	КонецЦикла;
	Для каждого Элем Из КопияБрейкпоинты Цикл
		УдалитьБрейкПоинт(Элем);
	КонецЦикла;
	
	СнятьПометкуБрейкпоинтаРекурсивно(Объект.ДеревоТестов.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарийФорма(Команда)
	ВыполнитьВыделенныйСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФичуФорма(Команда)
	ВыполнитьФичу();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОдинШагФорма(Команда)
	ВыполнитьОдинШаг();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФичиИзКаталога(Команда)
	
	Объект.текЗначениеОперации = ""ЗагрузитьФичиИзКаталога"";
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;
	
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОднуФичу(Команда)
	Объект.текЗначениеОперации = ""ЗагрузитьОднуФичу"";
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;
	
	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры

&НаКлиенте
Процедура Перезагрузить(Команда)
	КомандаПерезагрузить();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарииФорма(Команда)
	КомандаВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьСценарии(Команда)
	КомандаОстановитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокКоманда(Команда)
	СоздатьШаблоныОбработок();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнить(Команда)
	Объект.ИдетВыполнениеСценариев                                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз 			= Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнитьДанныйСценарийФорма(Команда)
	ПерезагрузитьИВыполнитьДанныйСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФичаФайл(Команда)
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НомерСтрокиВФиче = СтрокаФичи.НомерСтрокиВФиче;
	
	ПолныйПуть   = СтрокаФичи.ПолныйПуть;
	ИмяФайлаФичи = Неопределено;
	Если Найти(НРег(ПолныйПуть),"".feature"") > 0 Тогда
		ИмяФайлаФичи = ИмяФайлаФичиИзПолногоПути(ПолныйПуть);
	КонецЕсли;	 
	
	Если ИмяФайлаФичи = Неопределено Тогда
		Если СтрокаФичи.Тип <> ""Фича"" Тогда
			СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
			Если СтрокаФичи = Неопределено Тогда
				СообщитьПользователю(Локализовать(""Строка с фича-файлом не найдена.""));
				Возврат;
			КонецЕсли;	
			
			ИмяФайлаФичи = СтрокаФичи.ПолныйПуть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	КомандаДляЗапуска = ИмяФайлаФичи;
	
	Если ЗначениеЗаполнено(Объект.КомандаОткрытияФичиВТекстовомРедакторе) Тогда
		КомандаДляЗапуска = Объект.КомандаОткрытияФичиВТекстовомРедакторе;
		КомандаДляЗапуска = СтрЗаменить(КомандаДляЗапуска,""%Feature%"","""""""" + ИмяФайлаФичи + """""""");
		КомандаДляЗапуска = СтрЗаменить(КомандаДляЗапуска,""%LineNumber%"", Формат(НомерСтрокиВФиче, ""ЧГ=; ЧН=0""));
	КонецЕсли;	 
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработатьЗапускПриложения"", ЭтаФорма);
		НачатьЗапускПриложения(ОписаниеОповещения, КомандаДляЗапуска);
	Иначе	
		ЗапуститьПриложение(КомандаДляЗапуска);
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФичи(Команда)
	
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаФичи.Тип <> ""Фича"" Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
		Если СтрокаФичи = Неопределено Тогда
			СообщитьПользователю(Локализовать(""Строка с фича-файлом не найдена.""));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	Если Не ЭтоLinux Тогда
		Если WshShell = Неопределено Тогда
			WshShell = ПолучитьWshShell();
			// Далее переменная WshShell будет закеширована, чтобы не создавать ComObject каждый раз
		КонецЕсли;	 
		КомандаСистемы = ""explorer.exe /select,"""""" + СтрокаФичи.ПолныйПуть + """""""";
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
	Иначе	
		Файл = Новый Файл(СтрокаФичи.ПолныйПуть);
		
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработатьОткрытьКаталогФичи"", ЭтаФорма);
			НачатьЗапускПриложения(ОписаниеОповещения, Файл.Путь);
		Иначе	
			ЗапуститьПриложение(Файл.Путь);
		КонецЕсли;  
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователяКнопка(Команда)
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Если ДанныеКлиентовТестирования.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить(""Имя"", ""Этот клиент"");
			
			НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
				Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = ДанныеЗапускаКлиентаТестирования.ПолучитьИдентификатор();
				ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТекущиеДанные = Неопределено Тогда
		СообщитьПользователю(""Не найден Клиент тестирования для подключения."");
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ТипКлиента = ""Web"" Тогда
		СообщитьПользователю(""Web клиент не поддерживает запись действий пользователя."");
		Возврат;
	КонецЕсли;	 
	
	ЭтаФорма.ТекущийЭлемент = Элементы.РаботасUI;
	НачатьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя(""НачатьЗапись"");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриостановитьЗаписьДействийПользователя(Команда)
	УправлениеВидимостьюЗаписиДействийПользователя(""ПриостановитьЗапись"");
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаписьДействийПользователя(Команда)
	УправлениеВидимостьюЗаписиДействийПользователя(""ПродолжитьЗапись"");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодключитьTestClient(Команда)
	ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаписьДействийПользователяКнопка(Команда)
	ЗавершитьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя(""ЗавершитьЗапись"");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуВыполнятьСценарийСЭтогоШага(Команда)
	ПроцУстановитьПометкуВыполнятьСценарийСЭтогоШага();
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуВыполнятьСценарийСЭтогоШага(Команда)
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Если СтрокаШагаСКоторогоНадоВыполнятьСценарий <> Неопределено Тогда
		ПромСтрока = Неопределено;
		НайтиСтрокуДереваПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), ПромСтрока);
		СтрокаШагаСКоторогоНадоВыполнятьСценарий = ПромСтрока;
		
		СтрокаШагаСКоторогоНадоВыполнятьСценарий.ВыполнятьСценарийСЭтогоШага = Ложь;
	КонецЕсли;	 
	
	СтрокаШагаСКоторогоНадоВыполнятьСценарий = Неопределено;
	
	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость = Ложь;
	
	СообщитьПользователю(Локализовать(""Пометка снята.""));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСостояниеФормыTestClientКнопка(Команда)
	ЗапомнитьСостояниеФормыTestClient();
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСостояниеФормыTestClientКнопка(Команда)
	ЗабытьСостояниеФормыTestClient();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяОбработкиVA()
	
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		Возврат ""ВнешняяОбработка.VanessaAutomation"";
	ИначеЕсли Объект.ВерсияПоставки = ""single"" Тогда
		Если VAОткрытаКакВнешняяОбработка Тогда
			Возврат ""ВнешняяОбработка.VanessaAutomationsingle""; 
		Иначе	
			Возврат ""Обработка.VanessaAutomationsingle""; 
		КонецЕсли;
	Иначе	
		ТекстСообщения = Локализовать(""Неизвестная версия поставки Vanessa-Automation: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Объект.ВерсияПоставки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции	 

&НаКлиенте
Процедура ИсследовательФормы(Команда)
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		СообщитьПользователю(Локализовать(""Клиент тестирования подключен.""));
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""Язык"", Объект.ЯзыкГенератораGherkin);
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + "".Форма.ИсследовательФормы"", ПараметрыФормы,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзмененияФормыGherkinКнопка(Команда)
	ПолучитьИзмененияФормыGherkin();
	СделатьПереводСгенерированногоТекстаGherkin();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеТекущегоЭлементаФормыКнопка(Команда)
	ПолучитьСостояниеТекущегоЭлементаФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДляВызоваКонфигуратора(Команда)
	ВызватьИсключение """";
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоФич(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоФичРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоСценариев(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоСценариевРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоШагов(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоШаговРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЧтоЗаписьВидеоБудетРаботать(Команда)
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ПроверитьЧтоЗаписьВидеоБудетРаботать(ПараметрыВидео);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	СохранитьНастройки();
	СохранитьНастройкиВХранилище(""КаталогиБиблиотек"", Объект.КаталогиБиблиотек, ПараметрыДляСохраненияНастроек());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайл(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(""ВыгрузитьНастройкиВФайлПродолжение"", ЭтаФорма);
		ТекстВопроса = Локализовать(""Настроки модернизированы. Сохранить и продолжить?"");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);	
	Иначе 
		ВыгрузитьНастройкиВФайлПродолжение(Истина, Неопределено);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = Локализовать(""Выберите файл настроек Vanessa Automation."");
	Диалог.Фильтр = Локализовать(""Настройки VA (*.json)|*.json"");
	
	Если Диалог.Выбрать() Тогда 		
		ОписаниеОповещения = Новый ОписаниеОповещения(""ЗагрузитьНастройкиИзФайлаЗавершение"", ЭтаФорма, Диалог.ВыбранныеФайлы[0]);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПоУмолчанию(Команда)
	
	ИмяФайла = Объект.КаталогИнструментов;
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ТекстСообщения = Локализовать(""Не найден каталог инструментов: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ИмяФайла = Объект.КаталогИнструментов + ""\tools\JSON\VBParams836UF.json"";
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ТекстСообщения = Локализовать(""Файл <%1> не существует."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Попытка
		ПараметрыФайла = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ПараметрыФайла = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
		
	Если ПараметрыФайла <> Неопределено Тогда
		Для Каждого Элем Из ПараметрыФайла Цикл
			Если Лев(Элем.Ключ, 11) = ""ЗаписьВидео"" Тогда
				Если Найти(Элем.Ключ, ""ВодянойЗнак"") > 0 Тогда
					Продолжить;
				ИначеЕсли Найти(Элем.Ключ, ""ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм"") > 0 Тогда
					Продолжить;
				ИначеЕсли Найти(Элем.Ключ, ""ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы"") > 0 Тогда
					Продолжить;
				ИначеЕсли Найти(Элем.Ключ, ""ЗаписьВидеоКаталогМузыки"") > 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Найти(Элем.Ключ, ""СловарьЗаменСписок"") > 0 Тогда
					Объект.ЗаписьВидеоСловарьЗамен.Очистить();
					Для Каждого ПутьКСловарюЗамен Из Элем.Значение Цикл
						Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(ПутьКСловарюЗамен));
					КонецЦикла;

					Продолжить;
				КонецЕсли;

				Если Найти(Элем.Ключ, ""СловарьЗамен"") > 0 Тогда
					Объект.ЗаписьВидеоСловарьЗамен.Очистить();
					Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение));
					Продолжить;
				КонецЕсли;

				Значение = Элем.Значение;
				Если Лев(Элем.Значение, 1) = ""."" Тогда
					Значение = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
				КонецЕсли;

				Объект[Элем.Ключ] = Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Объект.ЗаписьВидеоКоличествоКадров = 20;
	
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКлиентовТестированияКоманда(Команда)
	СохранитьКлиентовТестирования();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВыбранногоКлиентаТестирования(Команда)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	ПодключитьПрофильTestClientПоИмени(ТекущиеДанные.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователяВВыбранномКлиентеТестирования(Команда)
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипКлиента = ""Web"" Тогда
		СообщитьПользователю(""Web клиент не поддерживает запись действий пользователя."");
		Возврат;
	КонецЕсли;	 
	
	Если Не ТекущиеДанные.Подключен Тогда
		ПодключитьВыбранногоКлиентаТестирования("""");
	КонецЕсли;
	
	НачатьЗаписьДействийПользователя(Ложь);
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаДополнительно;
	
	УправлениеВидимостьюЗаписиДействийПользователя(""НачатьЗапись"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВыбранногоКлиентаТестирования(Команда)
	РазорватьСоединениеTestClient();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу1(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[0].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу2(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[1].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу3(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[2].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу4(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[3].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу5(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[4].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу6(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[5].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу7(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[6].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу8(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[7].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу9(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[8].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОпределениеШага(Команда)
	ОткрытьФормуИзвестныхШагов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзвестныйШаг(Команда)
	ОткрытьФормуИзвестныхШагов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаФорма(Команда)
	ВыполнитьДанныйСценарийСТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаСПродолжениемФорма(Команда)
	ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением();
КонецПроцедуры

&НаКлиенте
Процедура СброситьКешИзвестныхStepDefinition(Команда)
	СброситьКешИзвестныхStepDefinitionСервер();
	СообщитьПользователю(""Надо сделать перезапуск фреймворка тестирования."");
	ТаблицаУжеСуществующихСценариев = Новый Массив;
КонецПроцедуры

//	{ управление видимостью колонок ДереваТестов
&НаКлиенте
Процедура ПоказатьСкрытьПутьКФайлу(Команда)
	
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость Или Команда = ""Показать"" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость = Истина;
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость = Ложь;
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСнипет(Команда)
	
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость  Или Команда = ""Показать"" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость = Истина;
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость = Ложь;
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьАдресСнипета(Команда)
	
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость  Или Команда = ""Показать"" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость = Истина;
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость = Ложь;
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСтрокаРеальнойПроцедуры(Команда)
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость  Или Команда = ""Показать"" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость = Истина;
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость = Ложь;
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВсеКолонки(Команда)

	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость Тогда

		ПоказатьСкрытьСтрокаРеальнойПроцедуры(""Показать"");
		ПоказатьСкрытьАдресСнипета(""Показать"");
		ПоказатьСкрытьСнипет(""Показать"");
		ПоказатьСкрытьПутьКФайлу(""Показать"");
		//ПоказатьСкрытьИДСтроки(""Показать"");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.УстановитьФлажки;
		
	Иначе
		ПоказатьСкрытьСтрокаРеальнойПроцедуры("""");
		ПоказатьСкрытьАдресСнипета("""");
		ПоказатьСкрытьСнипет("""");
		ПоказатьСкрытьПутьКФайлу("""");
		//ПоказатьСкрытьИДСтроки("""");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИДСтроки(Команда)
	
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость  Или Команда = ""Показать"" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость = Истина;
		Элементы.ПоказатьСкрытьИДСтроки.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость = Ложь;
		Элементы.ПоказатьСкрытьИДСтроки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры
//	} управление видимостью колонок ДереваТестов

&НаКлиенте
Процедура РедактироватьТаблицуТекст(Команда)
	ОткрытьРедактированиеТаблицыGherkin();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМакетПоТаблице(Команда)
	
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Объект.СгенерированныйСценарий, Символы.ПС);
	
	Если МассивСтрок.Количество() = 0 Тогда
	    Возврат;	
	КонецЕсли;
	
	МассивСтрокДляРедактирования = Новый Массив;
	Для Ккк = (НижняяГраница - 1) По ВерхняяГраница - 1 Цикл
		МассивСтрокДляРедактирования.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;
	
	Если МассивСтрокДляРедактирования.Количество() = 0 Тогда
		СообщитьПользователю(""Не найдена таблица для редактирования."");
		Возврат;
	КонецЕсли;	 
	
	ТабДок = Новый ТабличныйДокумент;
	НомСтр = 0;
	Для Каждого СтрокаМассива Из МассивСтрокДляРедактирования Цикл
		НомСтр = НомСтр + 1;
		
		
		Стр = СокрЛП(СтрокаМассива);
		Если Лев(Стр,1) = ""|"" Тогда
			Стр = Сред(Стр,2);
		КонецЕсли;	 
		
		Если Прав(Стр,1) = ""|"" Тогда
			Стр = Лев(Стр,СтрДлина(Стр)-1);
		КонецЕсли;	 
		
		МассивЗначений = РазложитьСтрокуВМассивПодстрок(Стр,""|"");
		
		НомКол = 0;
		Для Ккк = 0 По МассивЗначений.Количество()-1 Цикл
			НомКол = НомКол + 1;
			
			ТекЗначение = СокрЛП(МассивЗначений[Ккк]);
			Если ТекЗначение = ""''"" Тогда
				ТекЗначение = """";
			КонецЕсли;	
			
			Если Лев(ТекЗначение,1) = ""'"" И Прав(ТекЗначение,1) = ""'"" Тогда
				ТекЗначение = Сред(ТекЗначение,2);
				ТекЗначение = Лев(ТекЗначение,СтрДлина(ТекЗначение)-1);
			КонецЕсли;	 
			
			ТекЗначение = СтрЗаменить(ТекЗначение,""\n"",Символы.ПС);
			
			ТабДок.Область(НомСтр,НомКол,НомСтр,НомКол).Текст = ТекЗначение;
			
			Если НомСтр = 1 Тогда
				ТабДок.Область(НомСтр,НомКол,НомСтр,НомКол).ШиринаКолонки = 12;
			КонецЕсли;	 
		КонецЦикла;	
	КонецЦикла;	
	
	ТабДок.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКод(Команда)
	Выполнить(РеквизитПроизвольныйКод);
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеанса(Команда)
	ВычислитьPIDЭтогоСеансаСлужебный();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиКлиент(Команда)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВСписокБиблиотек(Команда)
	Элементы.КаталогиБиблиотек.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВСписокСловарейЗамен(Команда)
	Элементы.ЗаписьВидеоСловарьЗамен.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСгенерированныйСценарий(Команда)
	Объект.СгенерированныйСценарий = """";
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиТекстНаДругойЯзык(Команда)
	Перевод = ПеревестиТекст(Объект.СгенерированныйСценарий);
	Объект.СгенерированныйСценарий = Перевод;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийСтрокиСценария(Команда)
		
	Если ПустаяСтрока(Объект.СгенерированныйСценарий) Тогда
		Возврат;
	КонецЕсли;	
	
	НомерНачальнойСтроки = 0;
	НомерНачальнойКолонки = 0;
	НомерКонечнойСтроки = 0;
	НомерКонечнойКолонки = 0;
	Элементы.СгенерированныйСценарий.ПолучитьГраницыВыделения(НомерНачальнойСтроки, НомерНачальнойКолонки, НомерКонечнойСтроки, НомерКонечнойКолонки);
	
	КомментироватьРаскомментироватьСтрокиСценарияНаСервере(НомерНачальнойСтроки, НомерКонечнойСтроки);	
	Если Версия8310ИлиВыше Тогда
		Выполнить(""ОбновитьОтображениеДанных(Элементы.СгенерированныйСценарий)"");
	КонецЕсли;	 
	Элементы.СгенерированныйСценарий.УстановитьГраницыВыделения(НомерНачальнойСтроки, НомерНачальнойКолонки, НомерКонечнойСтроки, НомерКонечнойКолонки);
	
КонецПроцедуры

&НаСервере
Процедура КомментироватьРаскомментироватьСтрокиСценарияНаСервере(Знач НомерНачальнойСтроки, Знач НомерКонечнойСтроки);

	СимволыКомментария = ""#"";
	ДлинаСимволовКомментария = СтрДлина(СимволыКомментария);
		
	ТекстКакДокумент = Новый ТекстовыйДокумент; 
	ТекстКакДокумент.УстановитьТекст(Объект.СгенерированныйСценарий);
    СвойстваГруппыВыделенныхСтрок = СвойстваСтрокВИнтервалеТекстовогоДокумента(ТекстКакДокумент, НомерНачальнойСтроки, НомерКонечнойСтроки, СимволыКомментария);	
	СвойстваОтдельныхСтрок = СвойстваГруппыВыделенныхСтрок.СвойстваСтрок;
	
	ЕстьНезакомментированныйТекст = Ложь; 
	ВсеСтрокиПусты = Истина;
	
	Для Каждого СвойстваСтроки Из СвойстваОтдельныхСтрок Цикл
		
		Если Не СвойстваСтроки.СтрокаПуста Тогда
			ВсеСтрокиПусты = Ложь;
		КонецЕсли;
		
		Если Не СвойстваСтроки.СтрокаЗакомментирована И Не СвойстваСтроки.СтрокаПуста Тогда
			ЕстьНезакомментированныйТекст= Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнятьКомментирование = ЕстьНезакомментированныйТекст Или ВсеСтрокиПусты;	
	
	Для Каждого СвойстваСтроки Из СвойстваОтдельныхСтрок Цикл
		
		НоваяСтрока = """";
		
		Если ВыполнятьКомментирование Тогда
			НоваяСтрока = СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева + СимволыКомментария + "" "" + СвойстваСтроки.СтрокаУсредненная;
		Иначе
			СимволПослеСимволаКомментария = Сред(СвойстваСтроки.СтрокаСокрЛП, ДлинаСимволовКомментария + 1, 1);
			ПослеСимволаКомментарияЕстьПустойСимвол = СтрДлина(СимволПослеСимволаКомментария) = 1 И ПустаяСтрока(СимволПослеСимволаКомментария);
			ОтступДляПолученияСтроки = ?(ПослеСимволаКомментарияЕстьПустойСимвол, 2, 1);
			НоваяСтрока = СвойстваСтроки.ПустыеСимволыИсходнойСтрокиСлева + Сред(СвойстваСтроки.СтрокаСокрЛП, ДлинаСимволовКомментария + ОтступДляПолученияСтроки);
		КонецЕсли;
		
		ТекстКакДокумент.ЗаменитьСтроку(СвойстваСтроки.НомерСтроки, НоваяСтрока);
		
	КонецЦикла;
	
	Объект.СгенерированныйСценарий = ТекстКакДокумент.ПолучитьТекст();
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыделитьСтрокиСценарияКакКодВстроенногоЯзыка(Команда)
	
	Если ПустаяСтрока(Объект.СгенерированныйСценарий) Тогда
	  	Возврат;
	КонецЕсли;
	
	НомерНачальнойСтроки = 0;
	НомерНачальнойКолонки = 0;
	НомерКонечнойСтроки = 0;
	НомерКонечнойКолонки = 0;
	Элементы.СгенерированныйСценарий.ПолучитьГраницыВыделения(НомерНачальнойСтроки, НомерНачальнойКолонки, НомерКонечнойСтроки, НомерКонечнойКолонки);
	
	ВыделитьСтрокиСценарияКакКодВстроенногоЯзыкаНаСервере(НомерНачальнойСтроки, НомерКонечнойСтроки);	
	Если Версия8310ИлиВыше Тогда
		Выполнить(""ОбновитьОтображениеДанных(Элементы.СгенерированныйСценарий)"");
	КонецЕсли;	 
	Элементы.СгенерированныйСценарий.УстановитьГраницыВыделения(НомерНачальнойСтроки, НомерНачальнойКолонки, НомерКонечнойСтроки, НомерКонечнойКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьСтрокиСценарияКакКодВстроенногоЯзыкаНаСервере(Знач НомерНачальнойСтроки, Знач НомерКонечнойСтроки)

	СимволыНачалаВыделения = ""|' "";
	СимволыКонцаВыделения  = "" '|"";
		
	ТекстКакДокумент = Новый ТекстовыйДокумент; 
	ТекстКакДокумент.УстановитьТекст(Объект.СгенерированныйСценарий);
	СвойстваГруппыВыделенныхСтрок = СвойстваСтрокВИнтервалеТекстовогоДокумента(ТекстКакДокумент, НомерНачальнойСтроки, НомерКонечнойСтроки);
	СвойстваОтдельныхСтрок = СвойстваГруппыВыделенныхСтрок.СвойстваСтрок;
	
	НеобрабатываемыеСтроки = Новый Массив;
	
	Для Каждого СвойстваСтроки Из СвойстваОтдельныхСтрок Цикл
		
		НеобходимоВыделение = Лев(СвойстваСтроки.СтрокаСокрЛП, СтрДлина(СимволыНачалаВыделения)) <> СимволыНачалаВыделения 
								Или Прав(СвойстваСтроки.СтрокаСокрЛП, СтрДлина(СимволыКонцаВыделения)) <> СимволыКонцаВыделения;
								
		Если Не НеобходимоВыделение Тогда
			НеобрабатываемыеСтроки.Добавить(СвойстваСтроки);
			Продолжить;
		КонецЕсли;
		
		Если Не СвойстваСтроки.СтрокаПуста Тогда
			
			ДлинаДоЭкранирования = СтрДлина(СвойстваСтроки.СтрокаУсредненная);
			СвойстваСтроки.СтрокаУсредненная = ЭкранироватьСпецСимволыДляЗначенияШага(СвойстваСтроки.СтрокаУсредненная);
			ДлинаПолеЭкранирования = СтрДлина(СвойстваСтроки.СтрокаУсредненная);
			РазницаДлинДоИПослеЭкранирования = ДлинаПолеЭкранирования - ДлинаДоЭкранирования;
									
			Если СвойстваСтроки.ДлинаСокрПрав = СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав
				И РазницаДлинДоИПослеЭкранирования > 0 Тогда
				
				СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав = СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав
																				+ РазницаДлинДоИПослеЭкранирования;
			КонецЕсли;
						
			СвойстваСтроки.ДлинаСокрПрав = СвойстваСтроки.ДлинаСокрПрав + РазницаДлинДоИПослеЭкранирования; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПропускаемаяСтрока Из НеобрабатываемыеСтроки Цикл		
		СвойстваОтдельныхСтрок.Удалить(ПропускаемаяСтрока);
	КонецЦикла;
		
	Для Каждого СвойстваСтроки Из СвойстваОтдельныхСтрок Цикл
		
		НехваткаСимволовДоМаксимальнойДлины = 0;
		
		Если СвойстваСтроки.СтрокаПуста Тогда			
			НехваткаСимволовДоМаксимальнойДлины = СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав 
													- СвойстваГруппыВыделенныхСтрок.МинимальноеКоличествоПустыхСимволовСлева;
		Иначе			
			НехваткаСимволовДоМаксимальнойДлины = СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав 
													- СвойстваСтроки.ДлинаСокрПрав;
		КонецЕсли;
		
		// Для выравнивания всегда используем пробелы, даже если отступы сформированы табуляцией, так как строки все равно будут
		// оборачиваться в СимволыНачалаВыделения и СимволыКонцаВыделения, а пробелы гарантируют более стаблильное выравнивание.
		ПробелыВыравнивания = """";
		Для Счетчик = 1 По НехваткаСимволовДоМаксимальнойДлины Цикл
			ПробелыВыравнивания = ПробелыВыравнивания + "" "";
		КонецЦикла;
		
		НоваяСтрока = СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева
						+ СимволыНачалаВыделения
						+ СвойстваСтроки.СтрокаУсредненная
						+ ПробелыВыравнивания
						+ СимволыКонцаВыделения;
		ТекстКакДокумент.ЗаменитьСтроку(СвойстваСтроки.НомерСтроки, НоваяСтрока);	
		
	КонецЦикла;
	
	Объект.СгенерированныйСценарий = ТекстКакДокумент.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Функция СвойстваСтрокВИнтервалеТекстовогоДокумента(Знач ТекстовыйДокумент, Знач НомерНачальнойСтроки, Знач НомерКонечнойСтроки, Знач СимволыКомментария = """")
		
	ДлинаСимволовКомментария = СтрДлина(СимволыКомментария);
	
	СвойстваСтрок = Новый ТаблицаЗначений();
	СвойстваСтрок.Колонки.Добавить(""НомерСтроки"", Новый ОписаниеТипов(""Число""));
	СвойстваСтрок.Колонки.Добавить(""СтрокаСокрПрав"", Новый ОписаниеТипов(""Строка""));
	СвойстваСтрок.Колонки.Добавить(""ДлинаСокрПрав"", Новый ОписаниеТипов(""Число""));
	СвойстваСтрок.Колонки.Добавить(""СтрокаСокрЛП"", Новый ОписаниеТипов(""Строка""));
	СвойстваСтрок.Колонки.Добавить(""СтрокаУсредненная"", Новый ОписаниеТипов(""Строка""));	
	СвойстваСтрок.Колонки.Добавить(""ПустыеСимволыИсходнойСтрокиСлева"", Новый ОписаниеТипов(""Строка""));
	СвойстваСтрок.Колонки.Добавить(""ПустыеСимволыУсреденннойСтрокиСлева"", Новый ОписаниеТипов(""Строка""));
	СвойстваСтрок.Колонки.Добавить(""СтрокаЗакомментирована"", Новый ОписаниеТипов(""Булево""));
	СвойстваСтрок.Колонки.Добавить(""СтрокаПуста"", Новый ОписаниеТипов(""Булево""));
			
	МинКоличествоПустыхСимволовСлева = Неопределено;
	МинКоличествоПустыхСимволовСправа = Неопределено;
	МаксимальнаяДлинаСтрокиСокрПрав = 0;
	МинимальнаяПустаяСтрокаСлева = """";
	
	ОбрабатываемыеСтроки = Новый Массив;
		
	Для НомерСтроки = НомерНачальнойСтроки По НомерКонечнойСтроки Цикл
				
		ИсходнаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		СвойстваСтроки = СвойстваСтрок.Добавить();
		СвойстваСтроки.НомерСтроки = НомерСтроки;
				
		СтрокаСокрЛев = СокрЛ(ИсходнаяСтрока);
		СвойстваСтроки.СтрокаСокрПрав = СокрП(ИсходнаяСтрока);
		СвойстваСтроки.СтрокаСокрЛП = СокрП(СтрокаСокрЛев);
		СвойстваСтроки.СтрокаЗакомментирована = ДлинаСимволовКомментария <> 0 
												И СимволыКомментария = Лев(СтрокаСокрЛев, ДлинаСимволовКомментария);
												
		ДлинаИсходная = СтрДлина(ИсходнаяСтрока);												
		ДлинаСокрЛП = СтрДлина(СвойстваСтроки.СтрокаСокрЛП);
		ДлинаСокрЛев = СтрДлина(СтрокаСокрЛев);
		СвойстваСтроки.ДлинаСокрПрав = СтрДлина(СвойстваСтроки.СтрокаСокрПрав);
										
		ПустыхСлева = ДлинаИсходная - ДлинаСокрЛев;
		ПустыхСправа = ДлинаИсходная - СвойстваСтроки.ДлинаСокрПрав;
		
		СвойстваСтроки.ПустыеСимволыИсходнойСтрокиСлева = Лев(ИсходнаяСтрока, ПустыхСлева);
		СвойстваСтроки.СтрокаПуста = (ДлинаСокрЛП = 0);
		
		Если ДлинаСокрЛП <> 0 И (МинКоличествоПустыхСимволовСлева = Неопределено Или ПустыхСлева < МинКоличествоПустыхСимволовСлева) Тогда
			МинКоличествоПустыхСимволовСлева = ПустыхСлева;
			МинимальнаяПустаяСтрокаСлева = СвойстваСтроки.ПустыеСимволыИсходнойСтрокиСлева;
		КонецЕсли;
			
		Если ДлинаСокрЛП <> 0 И (МинКоличествоПустыхСимволовСправа = Неопределено Или ПустыхСправа < МинКоличествоПустыхСимволовСправа) Тогда
			МинКоличествоПустыхСимволовСправа = ПустыхСправа;			
		КонецЕсли;  
		
		Если СвойстваСтроки.ДлинаСокрПрав > МаксимальнаяДлинаСтрокиСокрПрав Тогда
			МаксимальнаяДлинаСтрокиСокрПрав = СвойстваСтроки.ДлинаСокрПрав;
		КонецЕсли;
				
	КонецЦикла;
	
	Если МинКоличествоПустыхСимволовСлева = Неопределено Тогда
		МинКоличествоПустыхСимволовСлева = 0;
	КонецЕсли;
	
	Если МинКоличествоПустыхСимволовСправа = Неопределено Тогда
		МинКоличествоПустыхСимволовСправа = 0;
	КонецЕсли;
		
	Для Каждого СвойстваСтроки Из СвойстваСтрок Цикл
				
		СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева = Лев(СвойстваСтроки.СтрокаСокрПрав, МинКоличествоПустыхСимволовСлева);
		СвойстваСтроки.СтрокаУсредненная = Сред(СвойстваСтроки.СтрокаСокрПрав, МинКоличествоПустыхСимволовСлева + 1); 
		
		// Для корректного выделения пустых строк необходимо выровнять их по правой границе и уточнить для них нехватку до максимальной длины.
		// В этом случае корректное выравнивание пустых строк будет только при условии, что в начале каждой выделенной строки одинаковые символы отступов:
		// либо только табуляции, либо только пробелы.
		Если СтрДлина(СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева) < МинКоличествоПустыхСимволовСлева Тогда
			СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева = МинимальнаяПустаяСтрокаСлева;			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемыеСвойства = Новый Структура;
	ВозвращаемыеСвойства.Вставить(""СвойстваСтрок"", СвойстваСтрок);
	ВозвращаемыеСвойства.Вставить(""МаксимальнаяДлинаСтрокиСокрПрав"", МаксимальнаяДлинаСтрокиСокрПрав);
	ВозвращаемыеСвойства.Вставить(""МинимальноеКоличествоПустыхСимволовСлева"", МинКоличествоПустыхСимволовСлева); 	
	
	Возврат ВозвращаемыеСвойства;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		РазвернутьСтрокуДерева(Строка,Ложь);
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			РазвернутьВсеСтрокиДерева(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура РазвернутьВсеСтрокиДереваСлужебный(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	РазвернутьВсеСтрокиДерева(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СброситьПодключениеSikuliXСервера(Команда)
	Если SikuliXСеверЗапущен <> Истина Тогда
		СообщитьПользователю(""Не найдено подключение SikuliX сервера."");
		Возврат;
	КонецЕсли;	 
	ОстановитьSikuliXСервер();
	SikuliXСеверЗапущен = Ложь;
	СообщитьПользователю(""Подключение SikuliX сервера сброшено."");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьТаблоПеременных(Команда)
	Элементы.ГруппаПросмотрПеременных.Видимость = НЕ Элементы.ГруппаПросмотрПеременных.Видимость;
	
	Если Элементы.ГруппаПросмотрПеременных.Видимость Тогда
		ОбновитьЗначенияВТаблоПеременных();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблоПеременных(Команда)
	ОбновитьЗначенияВТаблоПеременных();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьТаблоПеременных(Команда)
	Элементы.ГруппаПросмотрПеременных.Видимость = НЕ Элементы.ГруппаПросмотрПеременных.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГенератораСценариев(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""СоответствиеТекстовСообщений"", Объект.ТекстСообщенийПользователю);
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + "".Форма.ГенераторТестов"", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КаталогиСкриптовSikuliXПоУмолчанию(Команда)
	
	Объект.КаталогиСкриптовSikuliX = ОбъединитьПути(Объект.КаталогИнструментов, ""tools"", ""sikuli"");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСервисныеУтилиты(Команда)
	
	ТекстВопроса = Локализовать(""Скачать и установить необходимы сервисные утилиты для шагов SikuliX?"");
	ЗаголовокОкна = Локализовать(""Сервисные утилиты"");
	ОписаниеОповещения = Новый ОписаниеОповещения(""УстановитьСервисныеУтилитыЗавершение"", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, ЗаголовокОкна);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТиповыеПрофилиЦветов(Команда)
	ЗаполнитьТиповыеПрофилиЦветовСервер();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВнешнююКомпонентуДляСкриншотов(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения(""УстановкаВнешнейКомпонентыДляСкриншотовЗавершение"", ЭтаФорма, Истина);
	НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, МестоположениеВнешнейКомпонентыДляСкриншотов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьРазмерОкнаКлиентаТестирования(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""МестоположениеВнешнейКомпонентыДляСкриншотов"", МестоположениеВнешнейКомпонентыДляСкриншотов);
	ПараметрыФормы.Вставить(""ДескрипторОкнаКлиентаТестирования"", ДескрипторОкнаКлиентаТестирования);
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + "".Форма.УправлениеОкномКлиентаТестирования"", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийДеревоТестов

&НаКлиенте
Процедура ДеревоТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекДанные.ТекстОшибки) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьТекстОшибки(ТекДанные.ТекстОшибки,ТекДанные.ПроизвольныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда //F9
		ОбработатьУстановкуСнятиеБрейкпоинта();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	глПараметрыПеретаскивания = ПараметрыПеретаскивания;
	ПодключитьОбработчикОжидания(""ДеревоТестовПеретаскиваниеОбработчик"",0.1,Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийТаблоПеременных

&НаКлиенте
Процедура ТаблоПеременныхЗначениеПриИзменении(Элемент)
	Если Элементы.ТаблоПеременных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных = ""Контекст"" Тогда
		Имя      = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
		Значение = Элементы.ТаблоПеременных.ТекущиеДанные.Значение;
		ТекЗначение = ОбъектКонтекст[Имя];
		
		ОбъектКонтекст.Вставить(Имя,Значение);
		
		ТекстСообщения = ""Значение переменной <%1> изменено с <%2> на <%3>."";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ТекЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",Значение);
		СообщитьПользователю(ТекстСообщения);
	ИначеЕсли Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных = ""КонтекстСохраняемый"" Тогда
		Имя      = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
		Значение = Элементы.ТаблоПеременных.ТекущиеДанные.Значение;
		ТекЗначение = ОбъектКонтекстСохраняемый[Имя];
		
		ОбъектКонтекстСохраняемый.Вставить(Имя,Значение);
		
		ТекстСообщения = ""Значение глобальной переменной <%1> изменено с <%2> на <%3>."";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ТекЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",Значение);
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблоПеременныхПередУдалением(Элемент, Отказ)
	Если Элементы.ТаблоПеременных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблоПеременных.ТекущиеДанные.СлужебнаяСтрока Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных = ""Контекст"" Тогда
		Имя = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
		ОбъектКонтекст.Вставить(Имя,Неопределено);
		ОбъектКонтекст.Удалить(Имя);
		
		ТекстСообщения = ""Переменная <%1> удалена."";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Имя);
		СообщитьПользователю(ТекстСообщения);
	ИначеЕсли Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных = ""КонтекстСохраняемый"" Тогда
		Имя = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
		ОбъектКонтекстСохраняемый.Вставить(Имя,Неопределено);
		ОбъектКонтекстСохраняемый.Удалить(Имя);
		
		ТекстСообщения = ""Глобальная переменная <%1> удалена."";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Имя);
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблоПеременныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблоПеременныхПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.ТаблоПеременных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблоПеременных.ТекущиеДанные.СлужебнаяСтрока Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы

#Область ВыборКаталогов

&НаКлиенте
Процедура ЗаписьВидеоПутьКСлайдуЗаголовокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоПутьКСлайдуЗаголовокЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКСлайдуЗаголовокЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоПутьКСлайдуЗаголовок = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоЗаписьВидеоПутьКСлайдуФиналНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоПутьКЗаписьВидеоПутьКСлайдуФиналЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКЗаписьВидеоПутьКСлайдуФиналЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоПутьКСлайдуФинал = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогПроектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ДиалогВыбораКаталога.ПолноеИмяФайла = Объект.КаталогПроекта;
	КонецЕсли; 
	ПараметрыОбъекта = Новый Структура(""МножественныйВыбор, ИмяРеквизитаОбъекта, ИмяРеквизитаФормы"", ДиалогВыбораКаталога.МножественныйВыбор, ""КаталогПроекта"", """");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогВыборЗавершение"""", ЭтаФорма, ПараметрыОбъекта)""));
	Иначе
		Если ДиалогВыбораКаталога.Выбрать() Тогда
			МассивВыбранныхФайлов = Новый Массив;
			МассивВыбранныхФайлов.Добавить(ДиалогВыбораКаталога.Каталог);
			КаталогВыборЗавершение(МассивВыбранныхФайлов, ПараметрыОбъекта);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыборЗавершение(ВыбранныеФайлы, ПараметрыОбъекта) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ВыборОбъектаМножественный = Ложь;
	Если ПараметрыОбъекта.Свойство(""МножественныйВыбор"") Тогда
		ВыборОбъектаМножественный = ПараметрыОбъекта[""МножественныйВыбор""];
	КонецЕсли;
	
	ИмяРеквизитаОбъекта = """"; ИмяРеквизитаФормы = """";
	Если ПараметрыОбъекта.Свойство(""ИмяРеквизитаОбъекта"", ИмяРеквизитаОбъекта) И ЗначениеЗаполнено(ИмяРеквизитаОбъекта) Тогда 
		Объект[ИмяРеквизитаОбъекта] =  ?(ВыборОбъектаМножественный, ВыбранныеФайлы, ВыбранныеФайлы[0]);
	КонецЕсли;
	
	Если ПараметрыОбъекта.Свойство(""ИмяРеквизитаФормы"", ИмяРеквизитаФормы) И ЗначениеЗаполнено(ИмяРеквизитаФормы) Тогда 
		Объект[ИмяРеквизитаФормы] =  ?(ВыборОбъектаМножественный, ВыбранныеФайлы, ВыбранныеФайлы[0]);
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.КаталогиБиблиотек.ТекущиеДанные;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""КаталогиБиблиотекЗначениеНачалоВыбораЗавершение"", ЭтаФорма, ТекущиеДанные);
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекЗначениеНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.КаталогиБиблиотек Цикл
		Если Строка.Значение = Элементы.КаталогиБиблиотек.ТекущиеДанные.Значение Тогда
			Строка.Значение = ВыбранныеФайлы[0];
			СохранитьНастройкиВХранилище(""КаталогиБиблиотек"", Объект.КаталогиБиблиотек,ПараметрыДляСохраненияНастроек());
			Прервать;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputAllureНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогOutputAllureНачалоВыбораЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputAllureНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиAllure = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputСкриншотыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогOutputСкриншотыЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputСкриншотыЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиСкриншотов = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиJUnitНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогOutputjUnitНачалоВыбораЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputjUnitНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиJUnit = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputCucumberJsonНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогOutputCucumberJsonНачалоВыбораЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputCucumberJsonНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиCucumberJson = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputВнутреннийФорматНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогOutputВнутреннийФорматНачалоВыбораЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputВнутреннийФорматНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайлаЛогВыполненияСценариев = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиСППРНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.КаталогВыгрузкиСППР;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""КаталогВыгрузкиСППРНачалоВыбораЗавершение"", ЭтаФорма);
	
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиСППРНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиСППР = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЛогОшибокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ИмяКаталогаЛогОшибокНачалоВыбораЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЛогОшибокНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ИмяКаталогаЛогОшибок = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияHTMLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогOutputИнструкцияHTMLЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияMarkdownНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогOutputИнструкцияMarkdownЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияHTMLЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиИнструкцийHTML = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияMarkdownЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиИнструкцийMarkdown = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияВидеоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогOutputИнструкцияВидеоЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияВидеоЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиИнструкцийВидео = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшВидеоВставокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоКэшВидеоВставокЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшВидеоВставокЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКэшВидеоВставок = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогМузыкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоКаталогМузыкиЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогМузыкиЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКаталогМузыки = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКДвижкуTTSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоПутьКДвижкуTTSЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКДвижкуTTSЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоПутьКДвижкуTTS = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшФайловTTSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоКэшФайловTTSНачалоВыбораЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшФайловTTSНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКэшФайловTTS = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения(""ЗаписьВидеоСловарьЗаменЗавершение"", ЭтаФорма);
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоСловарьЗамен = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлКурсораМышкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоФайлКурсораМышкиЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлКурсораМышкиЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоФайлКурсораМышки = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлВодянойЗнакНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоФайлВодянойЗнакЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлВодянойЗнакЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоФайлВодянойЗнак = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогИнструментовЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогИнструментов = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыДляГенерацииEPFНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.КаталогиБиблиотек.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""ВерсияПлатформыДляГенерацииEPFНачалоВыбораЗавершение"", ЭтаФорма, ТекущиеДанные);
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыДляГенерацииEPFНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда		
		Объект.ВерсияПлатформыДляГенерацииEPF = ВыбранныеФайлы[0];
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаписьВидеоСловарьЗамен.ТекущиеДанные;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения(""ЗаписьВидеоСловарьЗаменНачалоВыбораЗавершение"", ЭтаФорма, ТекущиеДанные);
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ЗаписьВидеоСловарьЗамен Цикл
		Если Строка.Значение = Элементы.ЗаписьВидеоСловарьЗамен.ТекущиеДанные.Значение Тогда
			Строка.Значение = ВыбранныеФайлы[0];
			Прервать;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КаталогОтносительноКоторогоНадоСтроитьИерархию1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""КаталогОтносительноКоторогоНадоСтроитьИерархию1НачалоВыбораЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура КаталогОтносительноКоторогоНадоСтроитьИерархию1НачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогОтносительноКоторогоНадоСтроитьИерархию = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоAmazonСекретныйКлючНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоAmazonСекретныйКлючЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоAmazonСекретныйКлючЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоAmazonСекретныйКлюч = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоYandexTTSOauthTokenНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить(""Новый ОписаниеОповещения(""""ЗаписьВидеоYandexTTSOauthTokenЗавершение"""", ЭтаФорма)""));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоYandexTTSOauthTokenЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоYandexTTSOauthToken = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоYandexTTSСкоростьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление > 0 Тогда
		Если Объект.ЗаписьВидеоYandexTTSСкорость < Элемент.МаксимальноеЗначение Тогда 
			Объект.ЗаписьВидеоYandexTTSСкорость = Объект.ЗаписьВидеоYandexTTSСкорость + 0.1;
		КонецЕсли;
	Иначе
		Если Объект.ЗаписьВидеоYandexTTSСкорость > Элемент.МинимальноеЗначение Тогда 
			Объект.ЗаписьВидеоYandexTTSСкорость = Объект.ЗаписьВидеоYandexTTSСкорость - 0.1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогДляВременныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.ЗаписьВидеоКаталогДляВременныхФайлов;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		""ЗаписьВидеоКаталогДляВременныхФайловНачалоВыбораЗавершение"",
		ЭтаФорма);
		
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогДляВременныхФайловНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКаталогДляВременныхФайлов = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКомандаConvertНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	 СтандартнаяОбработка = Ложь;
	 
	 Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	 Диалог.МножественныйВыбор = Ложь;
	 Диалог.Каталог = ""C:\Program Files\"";
	 Диалог.Фильтр = ""convert.exe|convert.exe|*.exe|*.exe"";
	 
	 ОписаниеОповещения = Новый ОписаниеОповещения(
		""ЗаписьВидеоКомандаConvertНачалоВыбораЗавершение"",
		ЭтаФорма);
		
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКомандаConvertНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКомандаConvert = ВыбранныеФайлы[0];	
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляГенерацииКартинокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.КаталогиСкриптовSikuliX;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		""КаталогДляГенерацииКартинокНачалоВыбораЗавершение"",
		ЭтаФорма);
	
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляГенерацииКартинокНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогДляГенерацииКартинок = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогиСкриптовSikuliXНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.КаталогиСкриптовSikuliX;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		""КаталогиСкриптовSikuliXНачалоВыбораЗавершение"",
		ЭтаФорма);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогиСкриптовSikuliXНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогиСкриптовSikuliX = ВыбранныеФайлы[0];
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеЭлементыФормы

&НаКлиенте
Процедура ЗаписьВидеоЗаменитьIntroФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоЗаменитьOutroФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРаботыVanessaAutomationВРежимеTestClientПриИзменении(Элемент)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ЕстьКонстантаВКонфигурацииПутьКVA"",ЕстьКонстантаВКонфигурацииПутьКVA);
	УстановитьВидимостьСлужебныхЭлементов(ДопПараметры);
	Объект.ВыполнятьШагиАссинхронно = Ложь;
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовСлужебныйПриИзменении(Элемент)
	ПодключитьБиблиотекуРаботыСВидео();
	ЗагрузитьПлагины();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюВидеоПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФормироватьИнструкциюТипMarkdownПриИзменении(Элемент)
	ПриИзмененииТипаВидеоИнструкции();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФормироватьИнструкциюТипHTMLПриИзменении(Элемент)
	ПриИзмененииТипаВидеоИнструкции();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФормироватьИнструкциюТипВидеоПриИзменении(Элемент)
	ПриИзмененииТипаВидеоИнструкции();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьSikuliXСерверПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоЭмулироватьДвиженияМышкиПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюHTMLПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюMarkdownПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьСкриншотПриВозникновенииОшибкиПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеАллюрПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьКИмениСценарияУсловияВыгрузкиПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеxUnitПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеСППРПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеCucumberJsonПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьЛогВыполненияСценариевВТекстовыйФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьЛогОшибокВТекстовыйФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоДелатьНаложениеTTSПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшироватьФайлыTTSПриИзменении(Элемент)
	Элементы.ЗаписьВидеоКэшФайловTTS.Видимость = Объект.ЗаписьВидеоКэшироватьФайлыTTS;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшироватьВидеоВставкиПриИзменении(Элемент)
	Элементы.ЗаписьВидеоКэшВидеоВставок.Видимость = Объект.ЗаписьВидеоКэшироватьВидеоВставки;
КонецПроцедуры

&НаКлиенте
Процедура ЗапускатьТестКлиентВРежимеОтладкиПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура РежимСамотестированияПриИзменении(Элемент)
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекПослеУдаления(Элемент)
	СохранитьНастройкиВХранилище(""КаталогиБиблиотек"", Объект.КаталогиБиблиотек,ПараметрыДляСохраненияНастроек());
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	
	Если ТекущиеДанные.Имя = ""Этот клиент"" 
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> ""ДанныеКлиентовТестированияДопПараметры""
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> ""ДанныеКлиентовТестированияТипКлиента""
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> ""ДанныеКлиентовТестированияПорт""
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> ""ДанныеКлиентовТестированияПутьКИнфобазе""
	Тогда
		СообщитьПользователю(Локализовать(""Нельзя изменять текущее поле у зарезервированного подключения <Этот клиент>.""));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// проверка на дубли в колонке ""Имя""
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Имя"", Элемент.ТекущиеДанные.Имя);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = Локализовать(""В таблице подключений уже есть подключение с именем <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Элемент.ТекущиеДанные.Имя);
		СообщитьПользователю(Локализовать(ТекстСообщения));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИмяКомпьютера) Тогда
		Элемент.ТекущиеДанные.ИмяКомпьютера = ""localhost"";
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПослеУдаления(Элемент)
	
	Если ДанныеКлиентовТестирования.Количество() = 0 Тогда
		СообщитьПользователю(Локализовать(""Должна оставаться строка подключения текущего клиента""));
		ЗаполнитьДанныеТекущейИнфобазы();
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Имя"", ""Этот клиент"");
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СообщитьПользователю(""Данные по основному подключению Клиента тестирования перезаполнены."");
		ЗаполнитьДанныеТекущейИнфобазы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияТипКлиентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипКлиента = ""Web"" Тогда
		Если НРег(ТекущиеДанные.ИмяКомпьютера) = ""localhost"" Тогда
			ТекущиеДанные.ПортЗапускаТестКлиента = 1538;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияИмяКомпьютераПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипКлиента = ""Web"" Тогда
		Если НРег(ТекущиеДанные.ИмяКомпьютера) <> ""localhost"" Тогда
			Если ТекущиеДанные.ПортЗапускаТестКлиента = 1538 Тогда
				ТекущиеДанные.ПортЗапускаТестКлиента = 1541;
			КонецЕсли;	 
		Иначе	
			Если ТекущиеДанные.ПортЗапускаТестКлиента = 1541 Тогда
				ТекущиеДанные.ПортЗапускаТестКлиента = 1538;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкГенератораGherkinПриИзменении(Элемент)
	
	ТекущийЯзык = Объект.ЯзыкГенератораGherkin;
	ДобавитьЯзыковойПараметрЗапускаТестовогоКлиента(ТекущийЯзык);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьШагиАссинхронноПриИзменении(Элемент)
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Объект.ВыполнятьШагиАссинхронно;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоТипОзвучкиTTSПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура БезопасноеВыполнениеШаговПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьSikuliXСерверРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаВнешнейКомпонентыДляСкриншотовЗавершение(ДополнительныеПараметры) Экспорт
	
	НачатьПодключениеВнешнейКомпоненты(
		Новый ОписаниеОповещения(""ПодключениеВнешнейКомпонентыДляСкриншотовЗавершение"", ЭтаФорма, ДополнительныеПараметры),
		МестоположениеВнешнейКомпонентыДляСкриншотов, ""WindowCaptureComponent"", ТипВнешнейКомпоненты.Native
	); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыДляСкриншотовЗавершение(Подключение, ДополнительныеПараметры) Экспорт
	
	Если Подключение Тогда
		ВнешняяКомпонентаДляСкриншотов = Новый(""AddIn.WindowCaptureComponent.WindowsControl"");
	ИначеЕсли ДополнительныеПараметры = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(""УстановкаВнешнейКомпонентыЗавершение"", ЭтаФорма, Ложь);
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, МестоположениеВнешнейКомпонентыДляСкриншотов);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

#Область ВыполнениеШагов

//Возвращает значения параметров сценария как они переданы в тексте сценария
&НаКлиенте
Функция ЗначенияПараметровТекущегоСценария() Экспорт
	СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
	Массив = Новый Массив;
	Для Каждого Элем Из СостояниеVanessaAutomation.ТекущийШаг.ЗначенияПараметров Цикл
		Массив.Добавить(Элем.Значение.Значение);
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	 

//Включает режим асинхронного выполнения шагов
&НаКлиенте
Процедура ВключитьАсинхронныйРежимВыполненияШаговСИнтервалом(Интервал) Экспорт
	Объект.ВыполнятьШагиАссинхронно = Истина;
	Объект.ИнтервалВыполненияШагаЗаданныйПользователем = Число(Интервал);
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Истина;
КонецПроцедуры 

//Выключает режим асинхронного выполнения шагов
&НаКлиенте
Процедура ОтключитьАсинхронныйРежимВыполненияШагов() Экспорт
	Объект.ВыполнятьШагиАссинхронно = Ложь;
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Ложь;
КонецПроцедуры 

//Позволяет вызывающей системе указать, что нужно прервать выполнени сценария
&НаКлиенте
Процедура ДобавитьОшибкуСценария(ТекстОшибки) Экспорт
	ОшибкиСценарияПереданныеИзвне.Добавить(ТекстОшибки);
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОграничениеНаКоличествоПопытокДействий(Параметр) Экспорт
	ОграничениеНаКоличествоПопытокДействий = Параметр;
КонецПроцедуры 

// Действие, соответствующее нажатию на кнопку ""Выполнить сценарии""
&НаКлиенте
Процедура КомандаВыполнитьСценарии() Экспорт
	
	Если Объект.ИдетВыполнениеСценариев Тогда
	   Возврат;
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;
	СделатьПараметрыКорректными();
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	ВыполнитьСценарии();
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаОстановитьСценарии() Экспорт
	
	Если Объект.ИдетВыполнениеСценариев Тогда		
		ПрекратитьВыполнениеВсехСценариев = Истина;
		ОбновитьСтатусыКнопокСценариев(Истина);
		АктивизироватьСтрокуДереваТекущегоШага();		
	КонецЕсли;
	
	Объект.ИдетВыполнениеСценариев = Ложь;
КонецПроцедуры 

// Действие, соответствующее нажатию на кнопку ""Перезагрузить сценарии""
&НаКлиенте
Процедура КомандаПерезагрузить() Экспорт
	Объект.ИдетВыполнениеСценариев = Ложь;
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
	Объект.ВыполнитьСценарииПослеЗагрузкиФич = Ложь;
	Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
	ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
	КонецЕсли;	 
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	ЗагрузитьФичи();
КонецПроцедуры 

&НаКлиенте
Процедура Шаг(Стр, ВыполнятьЧерезВременнуюФичу = Ложь, ДопПараметры = Неопределено) Экспорт
	Поз = Найти(Стр, Символы.ПС);
	Если (Поз > 0) ИЛИ ВыполнятьЧерезВременнуюФичу Тогда // значит это многострочный текст - для него будем работать через временную фичу
		ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр, ДопПараметры);
	Иначе
		ДвДанныеvbFeatureReader = Неопределено;
		Если Объект.ВерсияПоставки = ""standart"" Тогда
			Если НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
				ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
			КонецЕсли;	 
		КонецЕсли;	 
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить(""КешСнипетов"",КешСнипетов);
		СтруктураПараметров.Вставить(""СтрокаПробелов"",СтрокаПробелов);
		ТекШаг = ПолучитьДанныеДляВыполненияОдногоШага(Стр, ДвДанныеvbFeatureReader, Объект.КаталогИнструментов, СтруктураПараметров);
		
		Если НЕ ТекШаг.ШагНайден Тогда
			ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр, ДопПараметры);
			Возврат;
		КонецЕсли;	 
		
		ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(ТекШаг.ИмяФайла);
		
		Если ОбработкаТеста = Неопределено Тогда
			ЗапретитьВыполнениеШагов();
			ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШаг(ТекШаг.ИмяФайла, ТекШаг);
			Возврат;
		КонецЕсли;	 
		
		ВыполнитьПроцедуруШагПродолжение(ОбработкаТеста, ТекШаг);
		// это одна строка. для неё будем вызывать преобразование строки Gherkin
	КонецЕсли;	 
КонецПроцедуры

// Оставлена для совместимости.
&НаКлиенте
Функция ПолучитьСостояниеVanessaBehavior() Экспорт 
	Возврат ПолучитьСостояниеVanessaAutomation(); 
КонецФункции	 

// Возвращает структуру, позволяющую понять состояние выполнения шагов.
//
// СостояниеVanessaAutomation.ТекущаяФича.Имя - Имя фичи
// СостояниеVanessaAutomation.ТекущаяФича.ПолныйПуть - Полный путь к фича файлу.
// СостояниеVanessaAutomation.ТекущаяФича.Каталог - Каталог, где находится фича файл.
//
// СостояниеVanessaAutomation.ТекущийСценарий.Имя - Имя сценария.
// СостояниеVanessaAutomation.ТекущийСценарий.ИдСценария - Внутренний ИД сценария.
//
// СостояниеVanessaAutomation.ТекущийШаг.Имя - Имя текущего шага.
// СостояниеVanessaAutomation.ТекущийШаг.ИдСтроки - ИД строки в дереве шагов.
// СостояниеVanessaAutomation.ТекущийШаг.ЗначенияПараметров - Значения параметров шага.
// СостояниеVanessaAutomation.ТекущийШаг.НомерСтрокиФичи - Номер строки в фича файле для этого шага.
// СостояниеVanessaAutomation.ТекущийШаг.МассивТеговШага - Теги данного шага.
// СостояниеVanessaAutomation.ТекущийШаг.МассивКомментариевШага - Комментарии данного шага.
// СостояниеVanessaAutomation.ТекущийШаг.ЭтоШагКонтекста - Флаг того, что это шаг контекста.
&НаКлиенте
Функция ПолучитьСостояниеVanessaAutomation() Экспорт 
	Рез = Новый Структура;
	
	ТекущаяФича = Новый Структура;
	ТекущаяФича.Вставить(""Имя"", Неопределено);
	ТекущаяФича.Вставить(""ПолныйПуть"", Неопределено);
	
	ТекущийСценарий = Новый Структура;
	ТекущийСценарий.Вставить(""Имя"", Неопределено);
	ТекущийСценарий.Вставить(""ИдСценария"", Неопределено);
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	ТекущийСценарий.Вставить(""ОписаниеСценария"", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	ТекущийСценарий.Вставить(""РезультатПрохожденияТестовСценария"", РезультатПрохожденияТестовСценария);
	
	ТекущийШаг = Новый Структура;
	ТекущийШаг.Вставить(""Имя"", Неопределено);
	ТекущийШаг.Вставить(""ЗначенияПараметров"", Неопределено);
	ТекущийШаг.Вставить(""ИдСтроки"", Неопределено);
	
	Рез.Вставить(""ТекущаяФича"", ТекущаяФича);
	Рез.Вставить(""ТекущийСценарий"", ТекущийСценарий);
	Рез.Вставить(""ТекущийШаг"", ТекущийШаг);
	
	Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
		Возврат Рез;
	КонецЕсли;	 
	
	ТекущийСценарий.Вставить(""Имя"", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	ТекущийСценарий.Вставить(""ИдСценария"", ТекИД_СценарияВМассиве);
	
	ТекущаяФича.Вставить(""Имя"", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи);
	ТекущаяФича.Вставить(""ПолныйПуть"", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	Файл = Новый Файл(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТекущаяФича.Вставить(""Каталог"", Файл.Путь);
	
	Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	Если (Шаги.Количество() - 1) < ТекИД_ШагаВМассиве Тогда
		Возврат Рез;
	КонецЕсли;	 
	
	Если ТекИД_ШагаВМассиве < 0 Тогда
		Возврат Рез;
	КонецЕсли;	 
	
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	ТекущийШаг.Вставить(""Имя"", ТекШаг.Имя);
	ТекущийШаг.Вставить(""ИдСтроки"", ТекШаг.СтрокаШага);
	ТекущийШаг.Вставить(""ЗначенияПараметров"", ТекШаг.ЗначенияПараметров.Скопировать());
	ТекущийШаг.Вставить(""НомерСтрокиФичи"", ТекШаг.НомерСтрокиВФиче);
	ТекущийШаг.Вставить(""МассивТеговШага"", ТекШаг.МассивТеговШага);
	ТекущийШаг.Вставить(""МассивКомментариевШага"", ТекШаг.МассивКомментариевШага);
	ТекущийШаг.Вставить(""ЭтоШагКонтекста"", ТекШаг.ЭтоШагКонтекста);
	
	Возврат Рез;
КонецФункции	 

&НаКлиенте
Процедура ЗапретитьВыполнениеШагов() Экспорт
	Объект.ОстановитьВыполнениеШагов = Истина;
	АктивизироватьСтрокуДереваТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеШагов(ШагУпал = Ложь, ОписаниеОшибки = """") Экспорт
	Объект.ОстановитьВыполнениеШагов = Ложь;
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ТекстСообщения = Локализовать(""ШагУпал=%1; ВсёЕщёИдётВыполнениеШагов=%2; ОписаниеОшибки=%3;"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ШагУпал); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ВсёЕщёИдётВыполнениеШагов); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ОписаниеОшибки); 
		ЗаписатьЛогВЖРИнформация(""ПродолжитьВыполнениеШагов"", ТекстСообщения);
	КонецЕсли;	 
	
	Если ШагУпал Тогда
		УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки,Ложь);
	Иначе	
		Если ТипЗнч(ОшибкиАссертов) = Тип(""Массив"") Тогда
			Если ОшибкиАссертов.Количество() > 0 Тогда
				ЗначениеExpected = ОшибкиАссертов[0].ЗначениеExpected;
				ЗначениеActual   = ОшибкиАссертов[0].ЗначениеActual;
				ОписаниеОшибки   = ОшибкиАссертов[0].ОписаниеОшибки;
				
				УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки,Истина);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Если ОшибкиСценарияПереданныеИзвне.Количество() > 0 Тогда
		СтрокаИсключения = СтрокаИсключенияОшибкиСценарияПереданныеИзвне();
		УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(СтрокаИсключения,Истина);
	КонецЕсли;	 
	
	Если ВсёЕщёИдётВыполнениеШагов  > 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения <> Неопределено Тогда
		Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли; 
	
	ИдСледующегоШага = Неопределено;
	Если ТекИД_ШагаВМассиве <> Неопределено И ТекИД_ШагаВМассиве >= 0 Тогда
		Если (МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги.Количество()-1) >= ТекИД_ШагаВМассиве Тогда
			ТекШаг = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги[ТекИД_ШагаВМассиве];
			ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПерейтиКВыполнениюСледующегоШага(Истина, Истина,ИдСледующегоШага);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатУсловия(Результат) Экспорт
	Если ТипЗнч(Результат) <> Тип(""Булево"") Тогда
		ТекстСообщения = Локализовать(""В процедуру <УстановитьРезультатУсловия> передан неверный тип параметра <%1>. Ожидаемый тип: Булево."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Результат); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Объект.РезультатУсловия = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарии(ТекСценарий = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	//Если Объект.ИдетВыполнениеСценариев Тогда
	//	ПрекратитьВыполнениеВсехСценариев = Истина;
	//	АктивизироватьСтрокуДереваТекущегоШага();
	//	Возврат;
	//КонецЕсли;	 
	
	Оповестить(""ЗапускСценариевVB"");
	
	//ОчиститьСообщения();
	
	ФлагСценарииВыполнены               = Ложь;
	ВозниклаОшибкаПодключенияTestClient = Ложь;
	ВозниклаОшибкаВШагеКонтекста        = Ложь;
	ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Ложь;
	КоличествоЗапущенныхКлиентовТестирования = 0;
	
	Объект.ИдетВыполнениеСценариев    = Истина;
	ОбновитьСтатусыКнопокСценариев();
	
	БылаОшибкаСкриптовСборкиВидео     = Ложь;
	Объект.ОстановитьВыполнениеШагов  = Ложь;
	Объект.ИдетЗаписьВидео            = Ложь;
	
	СтатусЗапускаСценариев            = Истина;
	ПрекратитьВыполнениеВсехСценариев = Ложь;
	ПрекратитьВыполнениеДанногоСценария = Ложь;
	ТекущийИсполняемыйФичаФайл        = Неопределено;
	
	СчетчикШаговБезТаймера = 0;
	
	ЭтоПример   = Ложь;
	ЭтоКонтекст = Ложь;
	ИдСценарияПоСтрокеШага = ОпределитьИдСценарияПоСтрокеШагаКлиент(Элементы.ДеревоТестов.ТекущиеДанные, ЭтоПример, ЭтоКонтекст);	
	
	ТекущаяСтрокаДереваИдСтроки = Неопределено;
	Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		НужнаяСтрока = Неопределено;
		ТекущаяСтрокаДереваИдСтроки = ОпределитьИдИсполняемойСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные,НужнаяСтрока);
		Если Объект.РежимВыполненияОдногоШага Тогда
			Если ТекущаяСтрокаДереваИдСтроки <> Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки Тогда
				Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;	 
			СоздатьСтруктуруПоискаДляСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные);
			ЗапомнитьАктивноеОкно(Неопределено);
		КонецЕсли;	 
	КонецЕсли;	 
	
	МассивИДСтрокиДерева                     = Новый Массив;
	МассивРезультатПрохожденияТестовСценария = Новый Массив;
	
	МассивСценариевДляВыполнения             = Новый Массив;
	МассивСтрокДереваДанныеФормы             = Новый Массив;
	
	ЕстьСохранённыйКонтекст = Ложь;
	Если ТекСценарий = Неопределено И Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
		
		СохраненнаяСтруктура   = ПолучитьСостоянияКонтекстовПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
		Если СохраненнаяСтруктура <> Неопределено Тогда //значит есть сохранённый контекст
			ЕстьСохранённыйКонтекст = Истина;
		КонецЕсли;	 
		
	ИначеЕсли ТекСценарий = Неопределено И Объект.РежимВыполненияДанногоСценарияСТекущегоШага Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
	ИначеЕсли ТекСценарий = Неопределено И Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
	КонецЕсли;	
		
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	
	Если Не ДопПараметры.Свойство(""ЭтоПример"") Тогда
		ДопПараметры.Вставить(""ЭтоПример"", ЭтоПример);
	КонецЕсли;	 
	
	ДопПараметры.Вставить(""ЭтоLinux"", ЭтоLinux);
	ДопПараметры.Вставить(""УровеньПодсценария"", 0);	
	ДопПараметры.Вставить(""ТекстСообщенийПользователю"", Объект.ТекстСообщенийПользователю);	
	ДопПараметры.Вставить(""РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов"", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов И ЕстьСохранённыйКонтекст);
	ДопПараметры.Вставить(""РежимВыполненияДанногоСценарияСТекущегоШага"", Объект.РежимВыполненияДанногоСценарияСТекущегоШага);
	ДопПараметры.Вставить(""РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением"", Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением);
	ДопПараметры.Вставить(""РежимВыполненияОдногоШага"", Объект.РежимВыполненияОдногоШага);
	ДопПараметры.Вставить(""ДобавитьСценарииПослеНайденного"", Ложь);
	ДопПараметры.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага"", Неопределено);
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		ДопПараметры.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов"", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	ИначеЕсли Объект.РежимВыполненияДанногоСценарияСТекущегоШага Тогда
		ДопПараметры.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага"", ТекущаяСтрокаДереваИдСтроки);
		ДопПараметры.Вставить(""НашелСценарий"", Ложь);
	ИначеЕсли Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
		ДопПараметры.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага"", ТекущаяСтрокаДереваИдСтроки);
		ДопПараметры.Вставить(""ДобавитьСценарииПослеНайденного"", Истина);
		ДопПараметры.Вставить(""НашелСценарий"", Ложь);
	ИначеЕсли Объект.РежимВыполненияОдногоШага Тогда
		ДопПараметры.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага"", ТекущаяСтрокаДереваИдСтроки);
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		ЗаполнитьМассивСценариевДляВыполненияКлиент(МассивСценариевДляВыполнения);
	Иначе	
		ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы, ТекСценарий, МассивИменКонтекстовОбработок, ДопПараметры);
	КонецЕсли;	 
	
	ЗапомнитьСтрокиДереваДанныеФормы();
	// Ниже не должно быть серверных вызовов, которые бы изменили ДеревоТестов, иначе кеш данных формы надо будет строить заново
	
	ТекущаяФичаИнструкцииHTML     = """";
	ТекущаяФичаИнструкцииMarkdown = """";
	Если НЕ ПроверитьНаличиеИнструментаДляСозданияСкриншотов() Тогда
		КомандаОстановитьСценарии();
		Возврат;
	КонецЕсли;  
	
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Если Не ЗначениеЗаполнено(Объект.КомандаСделатьСкриншот) Тогда
			ТекстСообщения = Локализовать(""Не указана команада для выполнения скриншотов. Например <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",""""""C:\Program Files (x86)\IrfanView\i_view32.exe"""" /capture=1 /convert=""); 
			СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	 
		ОчиститьСодержимоеКаталога(Объект.КаталогВыгрузкиСкриншотов,""*.png"");
	КонецЕсли;	 
		
	Если Объект.СоздаватьИнструкциюВидео Тогда
		Если Не ЗначениеЗаполнено(Объект.КаталогВыгрузкиИнструкцийВидео) Тогда
			ТекстСообщения = Локализовать(""Не указан каталог для формирования видео инструкции."");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийВидео), ""*.mp4"");
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ЗаписьВидеоКаталогДляВременныхФайлов));
		ВыполнитьПодготовкуКЗаписиВидео();
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML));
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийMarkdown));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		// TODO: Процедура ВыполнитьСценарии #475
		Если ПустаяСтрока(Объект.КаталогВыгрузкиAllure) Тогда
			ТекстСообщения = Локализовать(""Не задан путь каталога выгрузки отчета Allure"");
			СообщитьПользователю(ТекстСообщения);
		Иначе 
			СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиAllure)); // тут уже не должно быть относительных путей		
		КонецЕсли;
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиJUnit));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеСППР Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиСППР));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиCucumberJson));
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		Если ФайлСуществуетКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяФайлаЛогВыполненияСценариев)) Тогда
			Если Не ЭтоLinux Или Объект.ИмяФайлаЛогВыполненияСценариев <> ""/dev/stdout"" Тогда
			 	УдалитьФайлыКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяФайлаЛогВыполненияСценариев));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Если ФайлСуществуетКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяКаталогаЛогОшибок)) Тогда
			ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяКаталогаЛогОшибок));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюВидео Тогда
		ПрочитатьИзФичиПараметрыСборкиВидео();
	КонецЕсли;	 
	
	Если ВыполнятьСценарииАсинхронно Тогда
		ТекИД_СценарияВМассиве = -1;
		ПерейтиКВыполнениюСледующегоСценария();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШага() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Истина;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	
	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Истина;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОдинШаг() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ДопТип = ""УсловиеИначе"" Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Истина;
	
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарий() Экспорт
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаСценария = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоПример = Ложь;
	Если СтрокаСценария.Тип <> ""Сценарий"" Тогда
		ЭтоШагКонтекста = Ложь;
		СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаСценария, ЭтоПример,ЭтоШагКонтекста);
		Если СтрокаСценария = Неопределено Тогда
			СообщитьПользователю(Локализовать(""Не найдена строка сценария.""));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ЭтоПример"", ЭтоПример);
	
	Массив = Новый Массив;
	Массив.Добавить(СтрокаСценария.ИДСтроки);
	ВыполнитьСценарии(Массив, ДопПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнитьДанныйСценарий() Экспорт
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаСценария = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоПример = Ложь;
	Если СтрокаСценария.Тип <> ""Сценарий"" Тогда
		ЭтоШагКонтекста = Ложь;
		СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаСценария, ЭтоПример,ЭтоШагКонтекста);
		Если СтрокаСценария = Неопределено Тогда
			СообщитьПользователю(Локализовать(""Не найдена строка сценария.""));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки             = СтрокаСценария.Имя;
	СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример = ЭтоПример;
	Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
	
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ПроцУстановитьПометкуВыполнятьСценарийСЭтогоШага() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.Тип <> ""Шаг"" Тогда
		СообщитьПользователю(Локализовать(""Это возможно только для шага.""));
		Возврат;
	КонецЕсли;	
	
	Если СтрокаШагаСКоторогоНадоВыполнятьСценарий <> Неопределено Тогда
		Если СтрокаШагаСКоторогоНадоВыполнятьСценарий.Тип = ""Шаг"" Тогда
			ПромСтрока = Неопределено;
			НайтиСтрокуДереваПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), ПромСтрока);
			СтрокаШагаСКоторогоНадоВыполнятьСценарий = ПромСтрока;
			
			СтрокаШагаСКоторогоНадоВыполнятьСценарий.ВыполнятьСценарийСЭтогоШага = Ложь;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрокаШагаСКоторогоНадоВыполнятьСценарий  = ТекущиеДанные;
	ТекущиеДанные.ВыполнятьСценарийСЭтогоШага = Истина;	
	
	АктивироватьСоседнююСтрокуДерева(СтрокаШагаСКоторогоНадоВыполнятьСценарий);
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Истина;
	Если НЕ Объект.СохранятьКонтекстыПередВыполнениемШагов Тогда
		Объект.СохранятьКонтекстыПередВыполнениемШагов = Истина;
		СообщитьПользователю(""Флаг <Сохранять контексты перед выполнением шагов> установлен в <Истина>."");
	КонецЕсли;	 
	
	
	
	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость   = Истина;
	
	СообщитьПользователю(Локализовать(""Пометка для шаг установлена.""));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияШаговВсехСценариев() Экспорт
	ПрекратитьВыполнениеВсехСценариев = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияШаговОдногоСценария() Экспорт
	ПрекратитьВыполнениеДанногоСценария = Истина;
КонецПроцедуры

#КонецОбласти

#Область СообщенияПользователю

&НаКлиенте
Процедура СообщитьПользователю(Знач Сообщение) Экспорт
		
	ТекстСообщения = Формат(ТекущаяДата(), ""ДЛФ=DT"") + "" "" + Сообщение;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьПользователюСеврер(Знач Сообщение)
		
	ТекстСообщения = Формат(ТекущаяДата(), ""ДЛФ=DT"") + "" "" + Сообщение;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
		
КонецПроцедуры


// Делает сообщение пользователю, если установлен флаг ""Включить отладочные сообщения""
&НаКлиенте
Процедура Отладка(Знач Сообщение) Экспорт
	Если Объект.DebugLog Тогда
		СообщитьПользователю(Сообщение);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область TestClient

// Производит проверку на вхождение строк в таблицу
&НаКлиенте
Функция ПроизвестиСравнениеТаблицНаВхождениеСтрок(ИмяТЧ, ТабПарам, ЗначениеТЧ,МассивОшибок,ДопПараметры) Экспорт
	Возврат ПроизвестиСравнениеТаблицНаВхождениеСтрокНаСервере(ИмяТЧ, ТабПарам, ЗначениеТЧ,МассивОшибок,ДопПараметры);
КонецФункции	 

// Возвращает стандартизированное представление флага
&НаКлиенте
Функция ПривестиЗначениеФлагаКСтандарту(Значение) Экспорт
	НРегЗначение = НРег(Значение);
	
	Если НРегЗначение = ""истина"" Тогда
		ЗначениеПоиска = ""Да"";
	ИначеЕсли НРегЗначение = ""да"" Тогда
		ЗначениеПоиска = ""Да"";
	ИначеЕсли НРегЗначение = ""ложь"" Тогда
		ЗначениеПоиска = ""Нет"";
	ИначеЕсли НРегЗначение = ""нет"" Тогда
		ЗначениеПоиска = ""Нет"";
	ИначеЕсли НРегЗначение = ""yes"" Тогда
		ЗначениеПоиска = ""Да"";
	ИначеЕсли НРегЗначение = ""no"" Тогда
		ЗначениеПоиска = ""Нет"";
	ИначеЕсли НРегЗначение = ""true"" Тогда
		ЗначениеПоиска = ""Да"";
	ИначеЕсли НРегЗначение = ""false"" Тогда
		ЗначениеПоиска = ""Нет"";
	Иначе	
		ЗначениеПоиска = Значение;
	КонецЕсли;	
	
	Возврат ЗначениеПоиска; 
КонецФункции	 

// Возвращает данные клиента тестирования по имени профиля или синониму
&НаКлиенте
Функция ПолучитьДанныеКлиентаТестирования(ИмяTestClient) Экспорт
	
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		
		Если СтрокаДанныеКлиентовТестирования.Имя = ИмяTestClient Тогда
			Возврат СтрокаДанныеКлиентовТестирования;
		КонецЕсли;
		
		Если СтрокаДанныеКлиентовТестирования.Синоним = ИмяTestClient Тогда
			Возврат СтрокаДанныеКлиентовТестирования;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = Локализовать(""Не существует клиента тестирования <%1>."");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяTestClient); 
	ВызватьИсключение ТекстСообщения;
КонецФункции

// Обновляет данные после отключения клиента тестирования
&НаКлиенте
Процедура ОбновитьДанныеКлиентовТестированияПослеОтключенияКлиентаТестирования() Экспорт
	
	ОбъектКонтекстСохраняемый.Вставить(""ТестовоеПриложение"",Неопределено);
	
	Если ОбъектКонтекстСохраняемый.Свойство(""ПодключенныеTestClient"") Тогда
		ПодключенныеTestClient = ОбъектКонтекстСохраняемый.ПодключенныеTestClient;
		УдалитьЭлементПодключенныеTestClient(ПодключенныеTestClient,ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
	КонецЕсли;

	// снимем флаг подключения в таблице TestClient
	Для каждого СтрокаПодключения Из ДанныеКлиентовТестирования Цикл
		СтрокаПодключения.Подключен = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет данные о подключении клиента тестирования
&НаКлиенте
Процедура УдалитьЭлементПодключенныеTestClient(ПодключенныеTestClient,ИмяTestClient,Синоним = Неопределено) Экспорт
	Если ПодключенныеTestClient = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Ккк = 0 По ПодключенныеTestClient.Количество()-1 Цикл
		Если ПодключенныеTestClient[Ккк].Имя = ИмяTestClient Тогда
			Синоним = ПодключенныеTestClient[Ккк].Синоним;
			ПодключенныеTestClient.Удалить(Ккк);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает переменную типа ТестируемоеПриложение
&НаКлиенте
Функция ПолучитьТестовоеПриложение() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		ВызватьИсключение Локализовать(""Клиент тестирования не подключен."");
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		ВызватьИсключение Локализовать(""Клиент тестирования не подключен."");
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение; 
КонецФункции	  

// Фиксирует форму TestClient, с которой будет происходить работа
// в ней будет происходить поиск элементов формы
&НаКлиенте
Процедура ЗафиксироватьФормуTestClient(ФормаПриложения) Экспорт
	ЗафиксированнаяФормаTestClient = ФормаПриложения;
КонецПроцедуры

// проверяет видимость элмента формы с учетом родительских групп
&НаКлиенте
Функция ВидимостьЭлементаСУчетомРодителя(ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяВидимость) Экспорт
	Если ТекущаяФормаЭлемента = Неопределено Тогда
		ТекстСообщения = Локализовать(""Для элемента с именем <%1> не найдена форма."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ЭлементФормы.Имя); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ПроверятьВидимостьЭлементаСУчетомРодителя <> Истина Тогда
		Возврат ТекущаяВидимость;
	КонецЕсли;	 
	
	Если НЕ ТекущаяВидимость Тогда
		// нет смысла проверять для невидимых элементов
		Возврат ТекущаяВидимость; 
	КонецЕсли;
	
	ГруппыФормы = ТекущаяФормаЭлемента.НайтиОбъекты(Тип(""ТестируемаяГруппаФормы""));
	Для Каждого ТекГруппа Из ГруппыФормы Цикл
		ЭлементыГруппы = ТекГруппа.НайтиОбъекты();
		Если ЭлементыГруппы.Найти(ЭлементФормы) <> Неопределено Тогда
			Если НЕ ТекГруппа.ТекущаяВидимость() Тогда
				// значит элемент лежит в невидимой группе
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Возврат ТекущаяВидимость;
КонецФункции	

// Устанаваливает статус проверки видимости элемента с учетом видимости родительской группы
&НаКлиенте
Процедура УстановитьСтатусПроверятьВидимостьЭлементаСУчетомРодителя(Значение) Экспорт
	ПроверятьВидимостьЭлементаСУчетомРодителя = Значение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуАктивногоОкна(ДопПараметры = Неопределено) Экспорт
	ОчиститьКешАктивнойТаблицыTestClient();
	
	СбрасыватьЗафиксированнуюФорму = Истина;
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""СбрасыватьЗафиксированнуюФорму"") Тогда
			СбрасыватьЗафиксированнуюФорму = ДопПараметры.СбрасыватьЗафиксированнуюФорму;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СбрасыватьЗафиксированнуюФорму Тогда
		// убираем фиксацию формы, т.к. окно сменилось
		ЗафиксироватьФормуTestClient(Неопределено);
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКешАктивнойТаблицыTestClient() Экспорт
	ОбъектКонтекст.Вставить(""АктивнаяТаблицаTestClient"",Новый Структура(""ИмяТаблицы,Значение"",Неопределено,Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКешТаблицуTestClient(ИмяТаблицы,Таблица) Экспорт
	Если ТипЗнч(Таблица) = Тип(""ТестируемаяТаблицаФормы"") Тогда
		ОбъектКонтекст.Вставить(""АктивнаяТаблицаTestClient"",Новый Структура(""ИмяТаблицы,Значение"",ИмяТаблицы,Таблица));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректноеЗначениеДляРаботыСПолем(Знач Значение) Экспорт
	Если Значение = ""$""  ИЛИ Значение = ""$$"" Тогда
		Возврат Значение;
	ИначеЕсли Лев(Значение, 2) = ""$$"" И  Прав(Значение, 2) = ""$$"" Тогда
		ИмяПеременной = Сред(Значение,3,СтрДлина(Значение) - 4);
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		
		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;
		
		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекстСохраняемый[ИмяПеременной]; 
		КонецЕсли;	 
		
		СохраненноеЗначение = ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной);
		
		Если СохраненноеЗначение = Неопределено Тогда
			ТекстСообщения = Локализовать(""Не смог найти сохранненное значение по переменой <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяПеременной); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Возврат СохраненноеЗначение;
	ИначеЕсли Лев(Значение,1) = ""$"" И  Прав(Значение,1) = ""$"" Тогда
		ИмяПеременной = Сред(Значение,2,СтрДлина(Значение)-2);
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		
		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекст.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;
		
		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекст[ИмяПеременной];
		Иначе
			Возврат Значение;
		КонецЕсли;	 
	Иначе
		Возврат Значение;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Функция ПолучитьКорректныйТекстДляВставкиВПоле(Знач Текст) Экспорт
	Если ТипЗнч(Текст) = Тип(""Массив"") Тогда
		НовыйТекст = """";
		КолЗначений = Текст.Количество();
		Счетчик = 0;
		Для Каждого Элем Из Текст Цикл
			Счетчик = Счетчик + 1;
			Если Счетчик < КолЗначений Тогда
				НовыйТекст = НовыйТекст + Элем.Кол1 + Символы.ПС;
			Иначе	
				НовыйТекст = НовыйТекст + Элем.Кол1;
			КонецЕсли;	 
		КонецЦикла;	
		
		Текст = НовыйТекст;
	КонецЕсли;
	
	Возврат Текст;
КонецФункции	 

&НаКлиенте
Функция СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclient(ОжидаемаяТаблица,ТаблицаTestClient,СтрокаОшибки,СтруктураПараметров) Экспорт
	Возврат СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclientСервер(ОжидаемаяТаблица, ТаблицаTestClient, СтрокаОшибки, СтруктураПараметров);
КонецФункции	

&НаКлиенте
Функция НайтиВсеОкнаTestClient() Экспорт
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
КонецФункции

&НаКлиенте
Функция НайтиОкноTestClientПоЗаголовку(ЗаголовокОкна) Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		ВызватьИсключение Локализовать(""Клиент тестирования не подключен."");
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""),ЗаголовокОкна);
КонецФункции

&НаКлиенте
Функция НайтиОкноVB() Экспорт
	МассивОкон = НайтиВсеОкнаTestClient();
	ОкноVB = Неопределено;
	
	Для Каждого ОкноИзМассива Из МассивОкон Цикл
		Если Найти(ОкноИзМассива.Заголовок,""autotest"") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(ОкноИзМассива.Заголовок,""Vanessa Behavior"") > 0 Тогда
			ОкноVB = ОкноИзМассива;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат ОкноVB;
КонецФункции

&НаКлиенте
Функция НайтиТаблицыФормыTestClient(ТекущаяФорма) Экспорт
	Возврат  ТекущаяФорма.НайтиОбъекты(Тип(""ТестируемаяТаблицаФормы""));
КонецФункции	

&НаКлиенте
Функция НайтиРеквизитОткрытойФормыПоЗаголовку(
		Знач ИмяРеквизита,
		ИскатьПоИмени = Ложь,
		ВызыватьИсключение = Истина,
		ТипПоля = Неопределено,
		ДопПараметры = Неопределено) Экспорт
	      
	//ИмяРеквизита = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяРеквизита);
	
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстСообщения = """";
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстСообщения = """";
		БылаОшибка = Ложь;
		
		Попытка
			
			ПолеРеквизит = Неопределено;
			Если ЗафиксированнаяФормаTestClient = Неопределено Тогда
				НайтиРеквизитВАктивномОкне(ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры);
			Иначе	
				МассивФорм = НайтиФормыТекущегоОкнаTestClient();
				НайтиРеквизитВМассивеФорм(МассивФорм,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры);
			КонецЕсли;	
			Если ПолеРеквизит <> Неопределено Тогда
				Возврат ПолеРеквизит;
			КонецЕсли;	 
			
			Если НЕ Версия8311ИлиВыше И ПолеРеквизит = Неопределено Тогда
				// Проверим, что возможно есть окно, которое некорректно определяется как активное окно
				МассивФорм = НайтиФормыОкнаИзКонтекста();
				Если МассивФорм <> Неопределено Тогда
					НайтиРеквизитВМассивеФорм(МассивФорм,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры);
					Если ПолеРеквизит <> Неопределено Тогда
						Возврат ПолеРеквизит;
					КонецЕсли;	 
				КонецЕсли;
			КонецЕсли;	 
			
			Если ПолеРеквизит = Неопределено Тогда
				Если Версия8315ИлиВыше Тогда
					Если ИмяРеквизита = """" Тогда
						НайтиРеквизитВАктивномОкне(ПолеРеквизит,""SpreadsheetDocument"",ИскатьПоИмени,ТипПоля,ДопПараметры);
						Если ПолеРеквизит <> Неопределено Тогда
							Возврат ПолеРеквизит;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ВызыватьИсключение Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Локализовать(""Элемента формы с именем <%1> не найдено."");
				Иначе	
					ТекстСообщения = Локализовать(""Элемента формы с заголовком <%1> не найдено."");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяРеквизита); 
				
				ВызватьИсключение ТекстСообщения;
			Иначе	
				Прервать;
			КонецЕсли;	
			
		Исключение
			Если ТекстСообщения = """" Тогда
				ТекстСообщения = ОписаниеОшибки();
			КонецЕсли;	 
			
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				sleep(1);
			КонецЕсли;	 
			ЗапомнитьАктивноеОкно(Неопределено);
		КонецПопытки;
	КонецЦикла;	
	
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		ДопПараметры.Вставить(""ТекстОшибки"",ТекстСообщения);
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(Неопределено);
	Если ВызыватьИсключение И БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьТекстРеквизитаОткрытойФормы(ИмяРеквизита, Текст, ИскатьПоИмени = Ложь) Экспорт
	Нашли = Ложь;
	
	МассивФорм = НайтиФормыТекущегоОкнаTestClient();
	
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени Тогда
			ЭлементФормы = ТекущаяФорма.НайтиОбъект(, , ИмяРеквизита);
			МассивЭлементов = Новый Массив;
			МассивЭлементов.Добавить(ЭлементФормы);
		Иначе
			МассивЭлементов = ТекущаяФорма.НайтиОбъекты(, ИмяРеквизита);
		КонецЕсли;	 
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() > 1  Тогда
			ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
			ТекстСообщения = Локализовать(""Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяРеквизита); 
			СообщитьПользователю(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ПолеРеквизит = МассивЭлементов[0];
		Нашли         = Истина;
		Прервать;
	КонецЦикла;
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Локализовать(""Элемента формы с именем <%1> не найдено."");
		Иначе	
			ТекстСообщения = Локализовать(""Элемента формы с заголовком <%1> не найдено."");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяРеквизита); 
		
		СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.ВвестиТекст(Текст);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит,ДопПараметры = Неопределено) Экспорт
	Тип = ТипЗнч(ПолеРеквизит);
	
	Если Тип = Тип(""ТестируемоеПолеФормы"") Тогда
		Если ПолеРеквизит.Вид = ВидПоляФормы.ПолеВвода Тогда
			Попытка
				Возврат ПолеРеквизит.ПолучитьТекстРедактирования();
			Исключение
				// если поле невидимое - тогда получим представление данных
				Возврат ПолеРеквизит.ПолучитьПредставлениеДанных();
			КонецПопытки;
		КонецЕсли;	 
		
		Возврат ПолеРеквизит.ПолучитьПредставлениеДанных();
	ИначеЕсли Тип = Тип(""ТестируемаяДекорацияФормы"") Тогда
		Попытка
			Стр = ПолеРеквизит.ПолучитьПредставлениеДанных();
		Исключение
			Стр = Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Стр) Тогда
			Стр = ПолеРеквизит.ТекстЗаголовка;
		КонецЕсли;	 
		Возврат Стр;
	ИначеЕсли Тип = Тип(""ТестируемаяТаблицаФормы"") Тогда
		ТабДок = ПолучитьЗначениеТестируемаяТаблицаФормы(ПолеРеквизит,ДопПараметры);
		Возврат ТабДок;
	ИначеЕсли Тип = Тип(""ТестируемаяГруппаФормы"") Тогда
		Возврат ПолеРеквизит.ТекстЗаголовка;
	КонецЕсли;	 
КонецФункции	

// Значение реквизита открытой формы по заголовку
//
// Параметры:
//  ИмяРеквизита	 - Строка - Имя реквизита формы
//  ИскатьПоИмени	 - Булево - Определяет поиск по имени или заголовку поля
//  ДопПараметры	 - Структура - Дополнительным параметры переданные функции
// 
// Возвращаемое значение:
//  Строка, - Значение поля формы
//
&НаКлиенте
Функция ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени = Ложь,ДопПараметры = Неопределено) Экспорт
	ПолеРеквизит = ПолучитьЭлементФормыИзКешЕслиЭтоВозможно(ИмяРеквизита);
	Если ПолеРеквизит <> Неопределено Тогда
		Возврат ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит);
	КонецЕсли;	 
	
	ВызыватьИсключение = Истина;
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""ВызыватьИсключение"") Тогда
			ВызыватьИсключение = ДопПараметры.ВызыватьИсключение;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Нашли = Ложь;
	МассивФорм = НайтиФормыТекущегоОкнаTestClient();
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Попытка
			Если ИскатьПоИмени Тогда
				МассивЭлементов = Новый Массив;
				НужныйЭлемент = ТекущаяФорма.НайтиОбъект(, , ИмяРеквизита);
				Если НужныйЭлемент <> Неопределено Тогда
					МассивЭлементов.Добавить(НужныйЭлемент);
				КонецЕсли;	 
			Иначе
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты(, ИмяРеквизита);
			КонецЕсли;
			
		Исключение
			// это возможно, если форма закрылась по ходу выполнения сценария
			Продолжить;
		КонецПопытки;
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() > 1  Тогда
			ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
			ТекстСообщения = Локализовать(""Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяРеквизита); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ПолеРеквизит = МассивЭлементов[0];
		СохранитьВКешТаблицуTestClient(ИмяРеквизита,ПолеРеквизит);
		
		Возврат ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит,ДопПараметры);
	КонецЦикла;
	
	
	Если Не ВызыватьИсключение Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Локализовать(""Элемента формы с именем <%1> не найдено."");
		Иначе	
			ТекстСообщения = Локализовать(""Элемента формы с заголовком <%1> не найдено."");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяРеквизита); 
		
		СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция НайтиРеквизитТаблицы(ИмяТаблицы,ИмяРеквизита,ИскатьПоИмени = Ложь,Таблица = Неопределено) Экспорт
	Если Таблица = Неопределено Тогда
		Таблица = НайтиТЧПоИмени(ИмяТаблицы);
	КонецЕсли;	 
	
	ПолеРеквизит = Неопределено;
	
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Таблица.НайтиОбъект(Тип(""ТестируемоеПолеФормы""),, ИмяРеквизита);
			Иначе	
				ПолеРеквизит = Таблица.НайтиОбъект(Тип(""ТестируемоеПолеФормы""), ИмяРеквизита);
			КонецЕсли;	 
			
			Если ПолеРеквизит <> Неопределено Тогда
				Прервать;
			КонецЕсли;	 
		Исключение
			Если СчетчикПопыток < КоличествоПопыток Тогда
				sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	 
	
	Возврат ПолеРеквизит;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеРеквизитаОткрытойФормыПоИмени(ИмяРеквизита) Экспорт
	Возврат ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина);
КонецФункции

// Вводит текст в поле. Если идёт формирование автоинструкции, то возможна эмуляция ввода текста посимвольно.
&НаКлиенте
Процедура ВвестиВПолеТекст(Поле,Текст) Экспорт
	Если НужноЭмулироватьДействияМышки() Тогда
		КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Поле.ТекстЗаголовка + "":"",""MainForm"");
	КонецЕсли;	
	
	Если Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры 
		И (Объект.СоздаватьИнструкциюВидео Или Объект.СоздаватьИнструкциюHTML Или Объект.СоздаватьИнструкциюMarkdown) Тогда
		
		НадоЭмулироватьКлавиатуру = Ложь;
		Попытка
			Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			Если НЕ ТекШаг.ЭтоШагКонтекста Тогда
				НадоЭмулироватьКлавиатуру = Истина;
			КонецЕсли;	 
		Исключение
			НадоЭмулироватьКлавиатуру = Ложь;
		КонецПопытки;
		
		Если НадоЭмулироватьКлавиатуру Тогда
			KeyboardType = Объект.КаталогИнструментов + ""\tools\VideoTools\KeyboardType.exe"";
			Если Не ФайлСуществуетКомандаСистемы(KeyboardType) Тогда
				ТекстСообщения = Локализовать(""Файл <%1> не найден."");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",KeyboardType);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ИмяФайла = ПолучитьИмяВременногоФайла(""txt"");
			ЗТ = Новый ЗаписьТекста(ИмяФайла,""windows-1251"",,Ложь); 
			ЗТ.Записать(Текст); 
			ЗТ.Закрыть();
			Команда = KeyboardType + "" typespeed=100 """"filename="" + ИмяФайла + """""""";
			
			Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
			ПроверитьРавенство(Результат, 0 , ""Выполнен шаг ЯЭмулируюНаборТекстаИзФайла <"" + ИмяФайла + "">"");
		Иначе	
			Поле.ВвестиТекст(Строка(Текст));
		КонецЕсли;	 
	Иначе	
		Поле.ВвестиТекст(Строка(Текст));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция НайтиТЧПоИмени(ИмяТЧ, НужнаяФорма = Неопределено, ИскатьПоИмени = Истина,ВызыватьИсключение = Истина) Экспорт
	
	ФормаДляПоиска    = НужнаяФорма;
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстОшибки       = """";
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстОшибки = """";
		
		Попытка
			
			Если ОбъектКонтекст.Свойство(""АктивнаяТаблицаTestClient"") Тогда
				Если ОбъектКонтекст.АктивнаяТаблицаTestClient <> Неопределено Тогда
					Если ОбъектКонтекст.АктивнаяТаблицаTestClient.ИмяТаблицы = ИмяТЧ Тогда
						Возврат ОбъектКонтекст.АктивнаяТаблицаTestClient.Значение;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ФормаДляПоиска = Неопределено Тогда
				
				Если ЗафиксированнаяФормаTestClient = Неопределено Тогда
					ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
					Если ОкноПриложения <> Неопределено Тогда
						ФормаДляПоиска = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
					КонецЕсли;	 
				Иначе	
					ФормаДляПоиска = ЗафиксированнаяФормаTestClient;
				КонецЕсли;	 
				
				
				Если ФормаДляПоиска = Неопределено Тогда
					// это бывает когда ОкноПриложения это начальная страница и на ней нет форм
					ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
					Если ОкноПриложения <> Неопределено Тогда
						ФормаДляПоиска = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			ТЧ = НайтиТЧВДаннойФорме(ИмяТЧ,ФормаДляПоиска,ИскатьПоИмени);
			
			Если ФормаДляПоиска = Неопределено ИЛИ ТЧ = Неопределено Тогда
				// Иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
				// сначала поищем в недавно открытом окне
				
				Попытка
					ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
					ФормаДляПоиска    = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
					ТЧ             = НайтиТЧВДаннойФорме(ИмяТЧ,ФормаДляПоиска,ИскатьПоИмени);
				Исключение
					
				КонецПопытки;
			КонецЕсли;	 
			
			Если ФормаДляПоиска = Неопределено Тогда
				ТекстСообщения = Локализовать(""Не найдена активная форма."");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ТЧ = Неопределено И ВызыватьИсключение Тогда
				ТекстСообщения = Локализовать(""Таблица формы с именем <%1> не найдена."");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяТЧ); 
				СообщитьПользователю(ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				sleep(1);
			КонецЕсли;	 
			ЗапомнитьАктивноеОкно(Неопределено);
			ФормаДляПоиска = Неопределено;
		КонецПопытки;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
	Если ТЧ <> Неопределено Тогда
		ОбъектКонтекст.Вставить(""ТекущаяТЧ"",ТЧ);
	КонецЕсли;	 
	
	СохранитьВКешТаблицуTestClient(ИмяТЧ,ТЧ);
	НужнаяФорма = ФормаДляПоиска;
	
	Возврат ТЧ;
КонецФункции	

&НаКлиенте
Процедура ЗапомнитьАктивноеОкно(АктивноеОкно,ДопПараметры = Неопределено) Экспорт
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""ЗапомнитьАктивноеОкно"") Тогда
			Если Не ДопПараметры.ЗапомнитьАктивноеОкно Тогда
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ОбъектКонтекст.Свойство(""АктивноеОкно"") Тогда
		Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
			ОбъектКонтекст.Вставить(""ПредыдущееАктивноеОкно"",ОбъектКонтекст.АктивноеОкно);
		КонецЕсли;	 
	КонецЕсли;	 
	ОбъектКонтекст.Вставить(""АктивноеОкно"",АктивноеОкно);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры = Неопределено) Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		ВызватьИсключение Локализовать(""Клиент тестирования не подключен."");
	КонецЕсли;	 
	
	Если НЕ Версия8311ИлиВыше Тогда
		// обход ошибки платформы определения активного окна, когда открыт модальный диалог
		ИскатьМодальныйДиалог = Ложь;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство(""ИскатьМодальныйДиалог"") Тогда
				ИскатьМодальныйДиалог = ДопПараметры.ИскатьМодальныйДиалог;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИскатьМодальныйДиалог Тогда
			// Если в платформе не исправлена ошибка определения активного окна
			// указать версию
			ОкноМодальногоДиалога = НайтиОкноМодальногоДиалога();
			Если ОкноМодальногоДиалога <> Неопределено Тогда
				Возврат ОкноМодальногоДиалога;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Попытка
		АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
	Исключение
		ЗапомнитьАктивноеОкно(Неопределено);
		Возврат Неопределено;
	КонецПопытки;
	
	ЗапомнитьАктивноеОкно(АктивноеОкно,ДопПараметры);
	Возврат АктивноеОкно;
КонецФункции

&НаКлиенте
Функция ПолучитьГлавноеОкноИзТестовоеПриложение() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		ВызватьИсключение Локализовать(""Клиент тестирования не подключен."");
	КонецЕсли;	 
	
	ОкнаПриложения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
	
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ОкноПриложения.Основное Тогда
			Возврат ОкноПриложения; 
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НайтиТекущееОкноTestClient() Экспорт
	Возврат ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции	

&НаКлиенте
Функция НайтиФормыТекущегоОкнаTestClient(ДопПараметры = Неопределено) Экспорт
	Если ЗафиксированнаяФормаTestClient <> Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(ЗафиксированнаяФормаTestClient);
		Возврат Массив;
	КонецЕсли;	 
	
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если ОкноПриложения = Неопределено Тогда
		ТекстСообщения = Локализовать(""Не получилось определить активное окно Клиента тестирования."");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ОкноПриложения.НачальнаяСтраница Тогда
		МассивФорм = ОкноПриложения.НайтиОбъекты(Тип(""ТестируемаяФорма""));
	Иначе	
		ТекФорма = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
		МассивФорм = Новый Массив;
		МассивФорм.Добавить(ТекФорма);
	КонецЕсли;	 
	
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить(""АктивноеОкно"",ОкноПриложения);
	КонецЕсли;	 
	Возврат МассивФорм;
КонецФункции	

&НаКлиенте
Функция НайтиФормуТекущегоОкнаTestClient(ДопПараметры = Неопределено) Экспорт
	Если ЗафиксированнаяФормаTestClient <> Неопределено Тогда
		Возврат ЗафиксированнаяФормаTestClient;
	КонецЕсли;	 
	
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если ОкноПриложения = Неопределено Тогда
		ТекстСообщения = Локализовать(""Не получилось определить активное окно Клиента тестирования."");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТекФорма = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить(""АктивноеОкно"",ОкноПриложения);
	КонецЕсли;	 
	Возврат ТекФорма;
КонецФункции

&НаКлиенте
Функция НайтиФормыОкнаИзКонтекста(ДопПараметры = Неопределено) Экспорт
	ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
	Если ОкноПриложения = Неопределено Тогда
		ТекстСообщения = Локализовать(""Не получилось определить активное окно Клиента тестирования из Контекста."");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Попытка
		МассивФорм = ОкноПриложения.НайтиОбъекты(Тип(""ТестируемаяФорма""));
	Исключение
		// Скорее всего окно уже закрылось, но пока ещё есть в контексте.
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат МассивФорм;
КонецФункции	

&НаКлиенте
Функция НайтиОкноМодальногоДиалога(ТолькоПредупреждение = Ложь) Экспорт
	НужноеОкно = Неопределено;
	
	ОкнаПриложения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок)
			ИЛИ ((ОкноПриложения.Заголовок = ""Выбор типа данных"") И НЕ ТолькоПредупреждение)
			ИЛИ ((ОкноПриложения.Заголовок = ""Список значений"") И НЕ ТолькоПредупреждение)
			ИЛИ ((ОкноПриложения.Заголовок = ""Данные были изменены"") И НЕ ТолькоПредупреждение)
			ИЛИ ((ОкноПриложения.Заголовок = ""Предупреждение безопасности"") И НЕ ТолькоПредупреждение)
			Тогда
			НужноеОкно = ОкноПриложения;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НужноеОкно <> Неопределено Тогда
		ЗапомнитьАктивноеОкно(НужноеОкно);
	КонецЕсли;	 
	
	Возврат НужноеОкно;
КонецФункции	

&НаКлиенте
Функция НайтиОкноПредупреждения() Экспорт
	Возврат НайтиОкноМодальногоДиалога(Истина); 
КонецФункции	

//Проверяет, что переданное окно является модальным диалогом
&НаКлиенте
Функция ЭтоМодальныйДиалог(ОкноПриложения) Экспорт
	Если ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если ОкноПриложения.Основное Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ФормаОкна = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
	
	Если ФормаОкна = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ФормаОкна.ИмяФормы = """" Тогда
		Возврат Истина;
	КонецЕсли;	 
	Если ФормаОкна.ИмяФормы = ""MessageBox"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоЗаголовокОкнаМодальногоДиалога(Заголовок) Экспорт
	Если Заголовок = ""1С:Предприятие"" Тогда
		Возврат Истина;
	ИначеЕсли Заголовок = ""1C:Enterprise"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ПолучитьТекстОкнаПредупреждения(НужноеОкно) Экспорт
	ПоляФормы = НужноеОкно.НайтиОбъекты(Тип(""ТестируемоеПолеФормы""));
	Если ПоляФормы.Количество() = 0 Тогда
		ТекстСообщения = Локализовать(""У окна <%1> не найдено ни одного элемента с типом <ТестируемоеПолеФормы>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",НужноеОкно.Заголовок); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеФормы = ПоляФормы[0];
	
	Возврат ПолеФормы.ТекстЗаголовка;
КонецФункции	

&НаКлиенте
Функция НайтиФормуПоЗаголовку(ИмяФормы) Экспорт
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	НужнаяФорма = Неопределено;
	Если ОкноПриложения <> Неопределено Тогда
		НужнаяФорма = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""), ИмяФормы);
	КонецЕсли;	 
	Если НужнаяФорма = Неопределено Тогда
		// Иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
		// сначала поищем в недавно открытом окне
		
		Попытка
			ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
			НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;
		
		
		// затем будем искать во всех окнах
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
		Для каждого ТекОкно Из МассивОкон Цикл
			
			НужнаяФорма    = ТекОкно.НайтиОбъект(Тип(""ТестируемаяФорма""), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				ЗапомнитьАктивноеОкно(ТекОкно); //произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЕсли;	 
	
	Если НужнаяФорма = Неопределено Тогда
		ТекстСообщения = Локализовать(""Форма с заголовком <%1> не найдена."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФормы); 
		СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
	Возврат НужнаяФорма;
КонецФункции	

// Использовать, когда известно, что у текущего окна только одна форма, иначе надо использовать НайтиФормыТекущегоОкна()
&НаКлиенте
Функция НайтиТекущуюФормуTestClient() Экспорт
    Получилось = Истина;
    Попытка
        ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
        ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
    Исключение
        Получилось = Ложь;    
    КонецПопытки;
    
    Если Не Получилось Тогда
        ОкноПриложения         = ПолучитьАктивноеОкноИзТестовоеПриложение();
        ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
		ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
    КонецЕсли;     
    
    Возврат ТекущаяФорма;
КонецФункции	

&НаКлиенте
Процедура ПолучитьПараметрыОбластиМакета(Знач ИмяОбласти,НачСтр,НачКол,КолСтр,КолКол) Экспорт
	ИмяОбластиОригинал = ИмяОбласти;
	
	ИмяОбласти = СокрЛП(ВРег(ИмяОбласти));
	Поз = Найти(ИмяОбласти,""R"");
	Если Поз = 0 Тогда
		ТекстСообщения = Локализовать(""Неверный формат области <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяОбластиОригинал); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	Поз = Найти(ИмяОбласти,""C"");
	Если Поз = 0 Тогда
		ТекстСообщения = Локализовать(""Неверный формат области <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяОбластиОригинал); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	НачСтр = Число(Лев(ИмяОбласти,Поз-1));	
	
	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	Поз = Найти(ИмяОбласти,"":"");
	Если Поз = 0 Тогда
		КолСтр = НачСтр;
		Поз = Найти(ИмяОбластиОригинал,""C"");
		НачКол = Число(Сред(ИмяОбластиОригинал,Поз+1));
		КолКол = НачКол;
		Возврат;
	КонецЕсли;	 
	НачКол = Число(Лев(ИмяОбласти,Поз-1));	

	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	
	ИмяОбласти = СокрЛП(ВРег(ИмяОбласти));
	Поз = Найти(ИмяОбласти,""R"");
	Если Поз = 0 Тогда
		ТекстСообщения = Локализовать(""Неверный формат области <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяОбластиОригинал); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	// вторая часть, после символа :
	
	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	Поз = Найти(ИмяОбласти,""C"");
	Если Поз = 0 Тогда
		ТекстСообщения = Локализовать(""Неверный формат области <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяОбластиОригинал); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	КолСтр = Число(Лев(ИмяОбласти,Поз-1))-НачСтр+1;	
	
	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	КолКол = Число(ИмяОбласти)-НачКол+1;	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователя(ОдинКлиентТестирования = Истина) Экспорт 
	Если ОдинКлиентТестирования Тогда
		ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий();
	КонецЕсли;
	
	Если ТекущийTestclientЭтоWebКлиент Тогда
		СообщитьПользователю(Локализовать(""Web клиент не поддерживает запись действий пользователя.""));
		Возврат;
	КонецЕсли;	 
	
	Если Элементы.кнНачатьЗаписьДействийПользователя.Видимость = Истина Тогда
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.НачатьЗаписьЖурналаДействийПользователя();
			СообщитьПользователю(""Запись действий пользователя начата."");
		Исключение
			// TODO: Почему такой текст сообщения?
			ТекстСообщения = Локализовать(""НачатьЗаписьДействийПользователя:%1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки()); 
			СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Заголовок = ""Продолжить запись поведения"";

		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПриостановитьЗаписьЖурналаДействийПользователя();
			СообщитьПользователю(Локализовать(""Запись действий пользователя приостановлена.""));
		Исключение
			// TODO: Почему такой текст сообщения?
			ТекстСообщения = Локализовать(""НачатьЗаписьДействийПользователя:%1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки()); 
			СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость = Истина Тогда
		
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПродолжитьЗаписьЖурналаДействийПользователя();;
			СообщитьПользователю(Локализовать(""Запись действий пользователя продолжена.""));
		Исключение
			// TODO: Почему такой текст сообщения?
			ТекстСообщения = Локализовать(""НачатьЗаписьДействийПользователя:%1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки()); 
			СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ИдетОпросЭлементовФормTestClient = Ложь;
	МассивСостояниеФормTestClient    = Новый Массив;
	ПодключитьОбработчикОжидания(""ОпросЭлементовФормTestClient"", 1);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьТаблицуGherkin(МассивТаблицы) Экспорт
	МассивПараметров = ОпределитьПараметрыВСтрокеПримера(МассивТаблицы[0]);
	КолПараметров = МассивПараметров.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивПараметров Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	Для каждого СтрТзн Из МассивТаблицы Цикл
		МассивПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн);
		
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			ДлинаСтроки = СтрДлина(СокрЛП(МассивПараметров.Получить(Ккк)));
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;	 
		КонецЦикла;
	КонецЦикла;
	
	Для Ррр = 0 По (МассивТаблицы.Количество()-1) Цикл
		СтрТзн = МассивТаблицы[Ррр];
		МассивПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн);
		СтрПараметров = ""| "";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивПараметров[Ккк]);
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + "" "";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + "" | "";
		КонецЦикла;
		
		СтрПараметров = СокрЛП(СтрПараметров);
		
		МассивТаблицы[Ррр] = СтрПараметров;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаписьДействийПользователя() Экспорт
	
	Элементы.кнНачатьЗаписьДействийПользователя.Заголовок = Локализовать(""Начать запись поведения"");
	
	ОтключитьОбработчикОжидания(""ОпросЭлементовФормTestClient"");
	Попытка
		Стр = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ЗавершитьЗаписьЖурналаДействийПользователя();
		СообщитьПользователю(Локализовать(""Запись действий пользователя закончена.""));
	Исключение
		// TODO: Почему такой текст сообщения?
		ТекстСообщения = Локализовать(""ЗавершитьЗаписьДействийПользователя:%1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"", ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Стр);
	
	Объект.СгенерированныйXML = Текст.ПолучитьТекст();
	
	ОбработатьXMLВUILogToScript(Стр);
	
	СделатьПереводСгенерированногоТекстаGherkin();

КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИсходныйXML() Экспорт
	Стр = Объект.СгенерированныйXML;
	ОбработатьXMLВUILogToScript(Стр);
	СделатьПереводСгенерированногоТекстаGherkin();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СценарийПоведения;
КонецПроцедуры

&НаКлиенте
Функция НаЭкранеОкноПредупреждения()
	Если Не ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Попытка
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого ТекущееОкно Из МассивОкон Цикл
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция НаЭкранеДиалогАвторизации() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Попытка
		НужноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения"")
		,""1С:Предприятие. Доступ к информационной базе"");
	Исключение
		Возврат Ложь;
	КонецПопытки;
		  
	Если НужноеОкно = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ПроверитьПортНаЗанятость(Знач Порт = 48000) Экспорт
	
	Если Порт <= 0 Или Порт > 65536 Тогда
		Порт = 48000;
	КонецЕсли;
	
	НачалоДиапазонаПортов    = 48000;
	ОкончаниеДиапазонаПортов = 50000;
	
	Если ЗначениеЗаполнено(Объект.ДиапазонПортовTestclient) Тогда
		// там должна быть строка вида 48000-48020
		МассивЗначений = РазложитьСтрокуВМассивПодстрок(Объект.ДиапазонПортовTestclient,""-"");
		Если МассивЗначений.Количество() <> 2 Тогда
			ТекстСообщения = Локализовать(""Указан неверный диапазон портов: <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Объект.ДиапазонПортовTestclient); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		НачалоДиапазонаПортов = Число(МассивЗначений[0]);
		ОкончаниеДиапазонаПортов = Число(МассивЗначений[1]);
		Порт = НачалоДиапазонаПортов;
	КонецЕсли;	 
	
	МассивЗанятыхПортов = ПолучитьМассивЗанятыхПортов();
	Если МассивЗанятыхПортов.Найти(Порт) <> Неопределено Тогда
		СвободныйПорт = НачалоДиапазонаПортов;
		// найти свободный порт в диапазоне
		Для Счетчик = НачалоДиапазонаПортов По ОкончаниеДиапазонаПортов Цикл
			Если МассивЗанятыхПортов.Найти(Счетчик) = Неопределено Тогда
				СвободныйПорт = Счетчик;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Возврат СвободныйПорт;
	КонецЕсли;	
	
	Возврат Порт;
	
КонецФункции // ПолучитьСвободныйПорт()

&НаКлиенте
Функция ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(ДопПараметр = """",СтрокаОшибки = Неопределено) Экспорт 
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(""Имя"", ""Этот клиент"");
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(""Имя"", ТекущиеДанные.Имя);
	КонецЕсли;	 
	
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДопПараметр) Тогда
		ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДопПараметр;
	КонецЕсли;	 
	
	РезультатПодключения = ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования,СтрокаОшибки);
	
	Возврат РезультатПодключения;
	
КонецФункции

// Возвращает массив
// каждая строка массива - массив значений исходного табличного документа
// если возможно используется ЗаписатьСодержимоеВФайл
// для web клиента и для платформы меньше 8.3.8 - считывает макет по ячейкам, согласно указанных параметров
// если использовался метод ЗаписатьСодержимоеВФайл - будет взята только часть макета, согласно указанных параметров
// чтения макета параметры чтения макета задаются через шаг: Тогда Я задаю системные параметры считывания макета НачСтр
// 1 НачКол 1 КолСтр 5 КолКол 3
&НаКлиенте
Функция ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы,ДопПараметры = Неопределено) Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если НЕ ТекущийTestclientЭтоWebКлиент И ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.8.0"") Тогда
		// значит можно сохранить макет в файл и пробросить в TestManager
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""mxl"");
		
		ТекущаяДоступность = Истина;
		Попытка
			ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
		Исключение
		КонецПопытки;
		
		Если ТекущаяДоступность Тогда
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяВременногоФайла);
			ЭлементФормы.ЗаписатьСодержимоеВФайл();
			
			КоличествоПопытокПроверкиСуществованияФайла     = 0;
			МаксКоличествоПопытокПроверкиСуществованияФайла = ЗначениеТаймаутаДляАсинхронногоШага(10);
			Пока Истина Цикл
				КоличествоПопытокПроверкиСуществованияФайла = КоличествоПопытокПроверкиСуществованияФайла + 1;
				Если КоличествоПопытокПроверкиСуществованияФайла > МаксКоличествоПопытокПроверкиСуществованияФайла Тогда
					Прервать;
				КонецЕсли;	 
				
				Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
					Прервать;
				КонецЕсли;	 
				
				Sleep(1);
			КонецЦикла;	
		Иначе	
			Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы,ДопПараметры);
		КонецЕсли;	 
		
		Если Не ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			// Значит либо файл не успел сохраниться, либо ТабличныйДокумент не доступен для редактирования, и просто не может
			// сохранить файл значит надо считать ТабличныйДокумент по ячейкам
			Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы,ДопПараметры);
		КонецЕсли;	 
		
		КоличествоПопытокПолученияДвоичныхДанных     = 0;
		МаксКоличествоПопытокПолученияДвоичныхДанных = ЗначениеТаймаутаДляАсинхронногоШага(10);
		Пока Истина Цикл
			КоличествоПопытокПолученияДвоичныхДанных = КоличествоПопытокПолученияДвоичныхДанных + 1;
			
			Попытка
				ФайлМакета = Новый ДвоичныеДанные(ИмяВременногоФайла);
				Прервать;
			Исключение
				
			КонецПопытки;
			
			Если КоличествоПопытокПолученияДвоичныхДанных > МаксКоличествоПопытокПолученияДвоичныхДанных Тогда
				ТекстСообщения = Локализовать(""Не смог получить данные файла <%1>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяВременногоФайла); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Sleep(1);
		КонецЦикла;	 
		
		
		ТабДок = ПреобразоватьФайлМакетаВМассив(ФайлМакета,ДопПараметры);
		
		УдалятьПустыеСтрокиИзМакета = Истина;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство(""УдалятьПустыеСтрокиИзМакета"") Тогда
				УдалятьПустыеСтрокиИзМакета = ДопПараметры.УдалятьПустыеСтрокиИзМакета;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если УдалятьПустыеСтрокиИзМакета Тогда
			УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок);
		КонецЕсли;	 
		
		Возврат ТабДок;
	Иначе	
		// значит надо считывать макет по каждой ячейке
		Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы,ДопПараметры);
	КонецЕсли;	 
КонецФункции	

// Возвращает ТабличныйДокумент
// для тонкого клиента, если возможно - использует ЗаписатьСодержимоеВФайл, при этом макет сохраняется целиком как есть
// для web клиента и для платформы меньше 8.3.8 - считывает макет по ячейкам, согласно указанных параметров чтения макета
// параметры чтения макета задаются через шаг: Тогда Я задаю системные параметры считывания макета НачСтр 1 НачКол 1
// КолСтр 5 КолКол 3
&НаКлиенте
Функция ПолучитьТабличныйДокументTestClient(ЭлементФормы,ДопПараметры = Неопределено) Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если НЕ ТекущийTestclientЭтоWebКлиент И ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.8.0"") Тогда
		// значит можно сохранить макет в файл и пробросить в TestManager
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""mxl"");
		
		ТекущаяДоступность = Истина;
		Попытка
			ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
		Исключение
		КонецПопытки;
		
		Если ТекущаяДоступность Тогда
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяВременногоФайла);
			ЭлементФормы.ЗаписатьСодержимоеВФайл();
			
			КоличествоПопытокПроверкиСуществованияФайла     = 0;
			МаксКоличествоПопытокПроверкиСуществованияФайла = ЗначениеКоличествоПопытокВыполненияДействия();
			МаксКоличествоПопытокПроверкиСуществованияФайла = Макс(МаксКоличествоПопытокПроверкиСуществованияФайла,2);
			Пока Истина Цикл
				КоличествоПопытокПроверкиСуществованияФайла = КоличествоПопытокПроверкиСуществованияФайла + 1;
				Если КоличествоПопытокПроверкиСуществованияФайла > МаксКоличествоПопытокПроверкиСуществованияФайла Тогда
					Прервать;
				КонецЕсли;	 
				
				Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
					Прервать;
				КонецЕсли;	 
				
				Sleep(1);
			КонецЦикла;	
		Иначе	
			Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы,ДопПараметры);
		КонецЕсли;	 
		
		Если Не ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			ИмяВременногоФайла = ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии();
			// Значит либо файл не успел сохраниться, либо ТабличныйДокумент не доступен для редактирования, и просто не может
			// сохранить файл значит надо считать ТабличныйДокумент по ячейкам
			Если ИмяВременногоФайла = Неопределено Тогда
				Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы,ДопПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
		
		КоличествоПопытокПолученияДвоичныхДанных     = 0;
		МаксКоличествоПопытокПолученияДвоичныхДанных = ЗначениеКоличествоПопытокВыполненияДействия();
		МаксКоличествоПопытокПолученияДвоичныхДанных = Макс(МаксКоличествоПопытокПолученияДвоичныхДанных,2);
		Пока Истина Цикл
			КоличествоПопытокПолученияДвоичныхДанных = КоличествоПопытокПолученияДвоичныхДанных + 1;
			
			Попытка
				ФайлМакета = Новый ДвоичныеДанные(ИмяВременногоФайла);
				Прервать;
			Исключение
				
			КонецПопытки;
			
			Если КоличествоПопытокПолученияДвоичныхДанных > МаксКоличествоПопытокПолученияДвоичныхДанных Тогда
				ТекстСообщения = Локализовать(""Не смог получить данные файла <%1>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяВременногоФайла); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Sleep(1);
		КонецЦикла;	
		
		ЗапомнитьДанныеФайлаПриСохраненииМакета(ИмяВременногоФайла);
		
		НадоСчитатьОбласть = Ложь;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство(""НадоСчитатьОбласть"") Тогда
				НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если НадоСчитатьОбласть Тогда
			ТабДок = ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ФайлМакета,ДопПараметры.НачСтр,ДопПараметры.НачКол,ДопПараметры.КолСтр,ДопПараметры.КолКол);
		Иначе	
			ТабДок = ТабличныйДокументИзДвоичныхДанных(ФайлМакета);
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
		
		Возврат ТабДок;
	Иначе	
		// значит надо считывать макет по ячейке
		Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы,ДопПараметры);
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементФормы,ДопПараметры = Неопределено) Экспорт
	ВыделятьВсеСтроки = Истина;
	ПроверкаКоличестваСтрок = Ложь;
	ВидСравненияТаблицы = Неопределено;
	ЗначениеСравнения = 0;
	НадоПолучитьТолькоНесколькоСтрок = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""ВыделятьВсеСтроки"") Тогда
			ВыделятьВсеСтроки = ДопПараметры.ВыделятьВсеСтроки;
		КонецЕсли;	 
		Если ДопПараметры.Свойство(""ПроверкаКоличестваСтрок"") Тогда
			ПроверкаКоличестваСтрок = ДопПараметры.ПроверкаКоличестваСтрок;
		КонецЕсли;	 
		Если ДопПараметры.Свойство(""ВидСравненияТаблицы"") Тогда
			ВидСравненияТаблицы = ДопПараметры.ВидСравненияТаблицы;
		КонецЕсли;	 
		Если ДопПараметры.Свойство(""ЗначениеСравнения"") Тогда
			ЗначениеСравнения = ДопПараметры.ЗначениеСравнения;
		КонецЕсли;	 
		Если НРег(ВидСравненияТаблицы) = ""больше"" ИЛИ ВидСравненияТаблицы = "">"" Тогда
			НадоПолучитьТолькоНесколькоСтрок = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекущийРежимРедактирование = Ложь;
		Попытка
			ТекущийРежимРедактирование = ЭлементФормы.ТекущийРежимРедактирование();
		Исключение
		КонецПопытки;
		
		Если ТекущийРежимРедактирование Тогда
			Попытка
				ЭлементФормы.ЗакончитьРедактированиеСтроки();
			Исключение
			КонецПопытки;
		КонецЕсли;	 
		
		НадоПолучатьСтроки = Истина;
		ЗначениеТЧ         = Новый Массив;
		
		Попытка
			Если ВыделятьВсеСтроки Тогда
				ЭлементФормы.ПерейтиКПервойСтроке();
			КонецЕсли;	 
		Исключение
			// значит это не таблица
			НадоПолучатьСтроки = Ложь;
			ЗначениеТЧ         = Неопределено;
		КонецПопытки;
		
		Если НадоПолучатьСтроки  Тогда
			Попытка
				ТекЭлемент = ЭлементФормы.ПолучитьТекстЯчейки();
				Если ВыделятьВсеСтроки Тогда
					ЭлементФормы.ВыделитьВсеСтроки();
					Если ТекущийTestclientЭтоWebКлиент Тогда
						// чтобы дать web клиенту успеть выделить строки
						Если БезопасноеВыполнениеШагов() Тогда
							sleep(1);
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
				ЗначениеТЧ         = ЭлементФормы.ПолучитьВыделенныеСтроки();
				НадоПолучатьСтроки = Ложь;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если НадоПолучатьСтроки Тогда
			// для случая когда в таблице нет строк
			Попытка
				ЗначениеТЧ = ЭлементФормы.ПолучитьВыделенныеСтроки();
			Исключение
				СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	 
		
		Если ВыделятьВсеСтроки И (ЗначениеТЧ <> Неопределено) И (ЗначениеТЧ.Количество() = 1) Тогда
			// значит возможна ситуация, когда в таблице запрещено получение всех строк
			
			ЗначениеТЧ = Новый Массив;
			
			// будем получать значение таблицы через переход к каждой строке
			ЭлементФормы.ПерейтиКПервойСтроке();
			
			КоличествоПолученныхСтрок = 0;
			Пока Истина Цикл
				СтрокаТаблицы = ЭлементФормы.ПолучитьВыделенныеСтроки();
				Если СтрокаТаблицы.Количество() <> 1 Тогда
					ВызватьИсключение Локализовать(""Ожидали получить только одну строку таблицы."");
				КонецЕсли;	 
				
				ЗначениеТЧ.Добавить(СтрокаТаблицы[0]);
				КоличествоПолученныхСтрок = КоличествоПолученныхСтрок + 1;
				
				Если ПроверкаКоличестваСтрок И НадоПолучитьТолькоНесколькоСтрок Тогда
					Если КоличествоПолученныхСтрок > ЗначениеСравнения Тогда
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Попытка
					ЭлементФормы.ПерейтиКСледующейСтроке();
				Исключение
					Прервать;
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;
		
		Если ЗначениеТЧ <> Неопределено Тогда
			Прервать;
		Иначе
			Если СчетчикПопыток < КоличествоПопыток Тогда
				sleep(1);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат ЗначениеТЧ;
КонецФункции	

&НаКлиенте
Процедура ЗапомнитьСостояниеФормыTestClient() Экспорт
	ДопПараметры = Новый Структура;
	СохраненноеСостояниеФормыTestClient = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Элементы.ПолучитьИзмененияФормыGherkin.Заголовок = Локализовать(""Получить изменения формы"");
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСостояниеФормыTestClient() Экспорт
	СохраненноеСостояниеФормыTestClient = Неопределено;
	Элементы.ПолучитьИзмененияФормыGherkin.Заголовок = Локализовать(""Получить состояние всей формы"");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеТекущегоЭлементаФормы() Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ТолькоАктивныйЭлемент"",Истина);
	ПолучитьИзмененияФормы(""Gherkin"",ДопПараметры);
	СделатьПереводСгенерированногоТекстаGherkin();
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьИзмененияФормыGherkin() Экспорт
	ДопПараметры = Новый Структура;
	ПолучитьИзмененияФормы(""Gherkin"",ДопПараметры);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьПрофильTestClientПоИмени(ИмяКлиентаТестирования) Экспорт
	РазорватьСоединениеTestClient();
	
	
	// отключить существующий сеанс, если это не повторный запуск
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Подключен"", Истина);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОбъектКонтекстСохраняемый.Удалить(""ТестовоеПриложение"");
		ОбъектКонтекстСохраняемый.Удалить(""ГлавноеОкноТестируемого"");
	КонецЕсли;	
	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Имя"", ИмяКлиентаТестирования);
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = Локализовать(""Не найден профиль Клиента тестирования <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяКлиентаТестирования);
		СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	 
	
	СтрокаПрофиля = НайденныеСтроки[0];
	
	ЕстьПодключение = ПолучитьКлиентаТестирования(ИмяКлиентаТестирования);
	Если Не ЕстьПодключение Тогда
		СтрокаПрофиля.Подключен = Ложь;
	Иначе
		Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
			НайденнаяСтрока.Подключен = Ложь;
		КонецЦикла;
		
		СтрокаПрофиля.Подключен = Истина;
		
		Если Не ПустаяСтрока(ВнешняяКомпонентаДляСкриншотов) Тогда
			
			ДескрипторОкнаКлиентаТестирования = 
				ВнешняяКомпонентаДляСкриншотов.НайтиКлиентТестирования(СтрокаПрофиля.ПортЗапускаТестКлиента, Неопределено);
			
			СтрокаПрофиля.ДескрипторОкна = ДескрипторОкнаКлиентаТестирования;
			УстановитьДоступностьКнопкиЗадатьРазмерОкнаКлиентаТестирования(ДескрипторОкнаКлиентаТестирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаПрофиля.ПолучитьИдентификатор();
	
	Возврат ЕстьПодключение;
КонецФункции

&НаКлиенте
Функция ПолучитьКлиентаТестирования(ИмяКлиентаТестирования, ДопПараметр = """",СтрокаОшибки = Неопределено,ДополнительныеПараметры = Неопределено) Экспорт
	// отключаем существующее подключение
	РазорватьСоединениеTestClient();
	
	ДанныеЗапускаКлиентаТестирования = НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования);
	Если ДанныеЗапускаКлиентаТестирования = Неопределено Тогда
		ТекстСообщения = Локализовать(""Не смог найти данные для подключения профиля клиента тестирования <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ИмяКлиентаТестирования); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДопПараметр + ДанныеЗапускаКлиентаТестирования.ДопПараметры;
	ЕстьПодключение = ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования,СтрокаОшибки,ДополнительныеПараметры);
	
	Если ЕстьПодключение Тогда
		СохранитьКлиентовТестирования();
	КонецЕсли;	 
	
	Возврат ЕстьПодключение;
КонецФункции

&НаКлиенте
Функция НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования) Экспорт
	Результат = Неопределено;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Имя"", ИмяКлиентаТестирования);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0];
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(""Синоним"", ИмяКлиентаТестирования);
		
		НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Результат = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Делает переход к нужной строке таблицы
//
&НаКлиенте
Функция СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение = Ложь) Экспорт
	ПолучилосьПерейти = Ложь;
	Попытка
		ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить(""НаправлениеПереходаКСтроке.Вниз""),ПереключитьВыделение);
	Исключение
		ОшибкаПереходВниз = ОписаниеОшибки();
		//Сообщить("""" + ОписаниеОшибки());
	КонецПопытки;
	
	
	Если НЕ ПолучилосьПерейти Тогда
		Попытка
			ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить(""НаправлениеПереходаКСтроке.Вверх""),ПереключитьВыделение);
		Исключение
			ОшибкаПереходВверх = ОписаниеОшибки();
			//Сообщить("""" + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	Возврат ПолучилосьПерейти;
КонецФункции	

// пытается получить значения таблицы Gherkin из Контекста
//
&НаКлиенте
Функция ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам) Экспорт
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Для Каждого Колонка Из СтрокаТабПарам Цикл
			СтрокаТабПарам[Колонка.Ключ] = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Колонка.Значение);
		КонецЦикла;	
	КонецЦикла;	
	Возврат ТабПарам;
КонецФункции	 

// Проверяет значение на спецсимволы
// Если значение вида $ИмяПеременной$, тогда будет возвращено ОбъектКонтекст.ИмяПеременной
// ИначеЕсли значение вида $$ИмяПеременной$$, тогда будет возвращено ОбъектКонтекстСохраняемый.ИмяПеременной
// ИначеЕсли значение вида $$$ИмяПеременной$$$, это значит, что надо отбросить $$ слева и справа, т.е. символ $ экранирован
// Иначе будет возвращено просто значение
//
&НаКлиенте
Функция ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Знач Значение, ВызыватьИсключение = Истина) Экспорт
	Если Значение = ""$"" ИЛИ Значение = ""$$"" Тогда
	ИначеЕсли (Лев(Значение,1) = ""$"") Тогда
		Если (Лев(Значение,3) = ""$$$"") И (Прав(Значение,3) = ""$$$"") Тогда
			// это значит, что надо отбросить $$ слева и справа
			ЗначениеДляПерехода = Сред(Значение,3);
			ЗначениеДляПерехода = Лев(ЗначениеДляПерехода,СтрДлина(ЗначениеДляПерехода)-2);
			
			Значение = ЗначениеДляПерехода;
		ИначеЕсли (Лев(Значение,2) = ""$$"") И (Прав(Значение,2) = ""$$"") Тогда
			ИмяПеременной = Сред(Значение,3);
			ИмяПеременной = Лев(ИмяПеременной,СтрДлина(ИмяПеременной)-2);
			Если Найти(ИмяПеременной,""$"") > 0 Тогда
				Возврат Значение;
			КонецЕсли;	 
			ИмяПеременнойПолное = ИмяПеременной;
			ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
			
			Попытка
				ЕстьТакаяПеременная = ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной);
			Исключение
				ЕстьТакаяПеременная = Ложь;
			КонецПопытки;
			
			Если НЕ ЕстьТакаяПеременная Тогда
				// попробуем найти значение по ключу
				ЗначениеДляПроверки = ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременнойПолное);
				Если ЗначениеДляПроверки <> Неопределено Тогда
					Возврат ЗначениеДляПроверки; 
				КонецЕсли;	 
				Если ЗначениеДляПроверки = Неопределено И ВызыватьИсключение Тогда
					ТекстСообщения = Локализовать(""Не смог по переменной <%1> найти сохраненное значение."");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяПеременной); 
					ВызватьИсключение ТекстСообщения;
				Иначе
					Возврат Значение;
				КонецЕсли;	 
			Иначе	
				Значение = ОбъектКонтекстСохраняемый[ИмяПеременной];
			КонецЕсли;	 
			
		ИначеЕсли (Лев(Значение,1) = ""$"") И (Прав(Значение,1) = ""$"") Тогда
			ИмяПеременной = Сред(Значение,2);
			ИмяПеременной = Лев(ИмяПеременной,СтрДлина(ИмяПеременной)-1);
			Если Найти(ИмяПеременной,""$"") > 0 Тогда
				Возврат Значение;
			КонецЕсли;	 
			ИмяПеременнойПолное = ИмяПеременной;
			ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
			
			Попытка
				ЕстьТакаяПеременная = ОбъектКонтекст.Свойство(ИмяПеременной);
			Исключение
				ЕстьТакаяПеременная = Ложь;
			КонецПопытки;
			
            Если НЕ ЕстьТакаяПеременная Тогда
                ЗначениеДляПроверки = ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
				Если ЗначениеДляПроверки <> Неопределено Тогда
					Возврат ЗначениеДляПроверки; 
				КонецЕсли;	 
                Если ЗначениеДляПроверки = Неопределено И ВызыватьИсключение Тогда
                    ТекстСообщения = Локализовать(""Не смог по переменной <%1> найти сохраненное значение."");
                    ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ИмяПеременной); 
                    ВызватьИсключение ТекстСообщения;
				Иначе
					Возврат Значение;
                КонецЕсли;
            Иначе
                Значение = ОбъектКонтекст[ИмяПеременной];
            КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Значение; 
КонецФункции	 

&НаКлиенте
Функция ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ИмяТаблицы = Неопределено,ДопПараметры = Неопределено) Экспорт
	
	ЗаменятьИмяКолонки = Истина;
	ИсключитьКолонку = Неопределено;
	СравнениеПоШаблону = Ложь;
	ТаблицаКлиентаТестирования = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""ЗаменятьИмяКолонки"") Тогда
			ЗаменятьИмяКолонки = ДопПараметры.ЗаменятьИмяКолонки;
		КонецЕсли;	 
		Если ДопПараметры.Свойство(""ИсключитьКолонку"") Тогда
			ИсключитьКолонку = ДопПараметры.ИсключитьКолонку;
		КонецЕсли;	 
		Если ДопПараметры.Свойство(""СравнениеПоШаблону"") Тогда
			СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
		КонецЕсли;	 
		Если ДопПараметры.Свойство(""ТаблицаКлиентаТестирования"") Тогда
			ТаблицаКлиентаТестирования = ДопПараметры.ТаблицаКлиентаТестирования;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОписаниеСтроки = Новый Соответствие();
	
	Строка1    = ТабПарам[0];
	Строка2    = ТабПарам[1];
	КолКолонок = Строка1.Количество();
	
	Для Ккк = 1 По КолКолонок Цикл
		Если ИсключитьКолонку = Ккк Тогда
			Продолжить;
		КонецЕсли;	 
		
		Ключ = Строка1[""Кол""+Формат(Ккк, ""ЧГ=; ЧН=0"")];
		
		Если СравнениеПоШаблону и ТаблицаКлиентаТестирования <> Неопределено и ТаблицаКлиентаТестирования.Количество() > 0 Тогда
			Если Найти(Ключ,""*"") > 0  Тогда
				Для Каждого ДанныеПервойСтроки Из ТаблицаКлиентаТестирования[0] Цикл
					Если СтрокаСоответствуетШаблону(ДанныеПервойСтроки.Ключ,Ключ) Тогда
						Ключ = ДанныеПервойСтроки.Ключ;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Найти(Ключ,""\n"") > 0 Тогда
			ПереводСтроки = Истина;
			Если ТипЗнч(ДопПараметры) = Тип(""Структура"") И ДопПараметры.Свойство(""ПереводСтроки"") Тогда
				ПереводСтроки = ДопПараметры.ПереводСтроки;
			КонецЕсли;	 
			
			Если ПереводСтроки Тогда
				Ключ = СтрЗаменить(Ключ,""\n"",Символы.ПС);
			Иначе	
				Ключ = СтрЗаменить(Ключ,""\n"",Символы.ВК + Символы.ПС);
			КонецЕсли;	 
			
			Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
				ДопПараметры.Вставить(""ПереводСтроки"",НЕ ПереводСтроки);
			КонецЕсли;	 
		КонецЕсли;	 
		Значение = Строка2[""Кол""+Формат(Ккк, ""ЧГ=; ЧН=0"")];
		Если ТипЗнч(Значение) = Тип(""Число"") Тогда
			Значение = СтрЗаменить(Значение,Символы.НПП,"""");
		КонецЕсли;	 
		
		Значение = СтрЗаменить(Значение,""\n"",Символы.ПС);
		//Значение = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение);
		
		Если ЗаменятьИмяКолонки Тогда
			Если ИмяТаблицы = ""TypeTree"" И Ключ = ""Значение"" Тогда
				// Обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
				Ключ = """";
			ИначеЕсли ИмяТаблицы = ""TypeTree"" И Ключ = ""Колонка1"" И НЕ (ТекущийTestclientЭтоWebКлиент) Тогда
				// Обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
				Ключ = """";
			ИначеЕсли ИмяТаблицы = ""ValueList"" И Ключ = """" Тогда
				// Обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
				Ключ = ""Значение"";
			КонецЕсли;	
		КонецЕсли;	 
		
		ОписаниеСтроки.Вставить(Ключ,Значение);
	КонецЦикла;
	
	Возврат ОписаниеСтроки;
КонецФункции	

&НаКлиенте
Процедура АктивизироватьЭлементформы(ЭлементФормы) Экспорт
	Попытка
		ЭлементФормы.Активизировать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСоединениеTestClient() Экспорт
	Если ОбъектКонтекстСохраняемый <> Неопределено Тогда
		Если ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
			ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
			Попытка
				ТестовоеПриложение.РазорватьСоединение();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийTestclientЭтоWebКлиент = Ложь;

	ОбъектКонтекстСохраняемый.Удалить(""ТестовоеПриложение"");
	ОбъектКонтекстСохраняемый.Удалить(""ГлавноеОкноТестируемого"");
	
	ДескрипторОкнаКлиентаТестирования = 0;
	УстановитьДоступностьКнопкиЗадатьРазмерОкнаКлиентаТестирования(ДескрипторОкнаКлиентаТестирования);
	
	СброситьФлагПодключенияКлиентаТестирования();
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьКорректоеЗначениеДляСравненияТекста(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр,Символы.НПП,"" "");
	Возврат Стр; 
КонецФункции	 

// проверяет значение флага по его представлению
&НаКлиенте
Функция ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Экспорт
	Если Найти(ПредставлениеДанных, Строка(Истина)) = 1 Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = ""да"" Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = ""yes"" Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = ""1"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// проверяет значение флага по его представлению
&НаКлиенте
Функция ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Экспорт
	Если НРег(ПредставлениеДанных) = ""2"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// Преобразует переданное значение в макет.
// например массив структур или массив соответствий
&НаКлиенте
Функция ПреобразоватьЗначениеВМакет(Значение,МассивКлючей = Неопределено,ТолькоТекстЯчеек = Ложь) Экспорт
	ПереданМассивКлючей = Ложь;
	Если МассивКлючей <> Неопределено Тогда
		ПереданМассивКлючей = Истина;
	КонецЕсли;	 
	
	ТипЗначения = Неопределено;
	Если ТипЗнч(Значение) = Тип(""Структура"") Тогда
		ТипЗначения = Значение.Тип;
		Значение    = Значение.Значение;
	КонецЕсли;	 
	
	Если ТипЗнч(Значение) = Тип(""Массив"") ИЛИ ТипЗнч(Значение) = Тип(""ФиксированныйМассив"") Тогда
		Если Значение.Количество() = 0 Тогда
			Возврат Новый ТабличныйДокумент; 
		КонецЕсли;	 
		
		ЧитаемИзМассиваСтруктур = Ложь;
		ПерваяСтрокаСлужебная = Ложь;
		ПерваяСтрока = Значение[0];
		Если ТипЗнч(ПерваяСтрока) = Тип(""Структура"") И ТипЗначения <> ""Макет"" Тогда
			ЧитаемИзМассиваСтруктур = Истина;
			// из первой строки берём массив ключей
			ПерваяСтрокаСлужебная = Истина;
			
			Если Не ПереданМассивКлючей Тогда
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из ПерваяСтрока Цикл
					МассивКлючей.Добавить(Элем.Значение);
				КонецЦикла;	
			КонецЕсли;	 
		ИначеЕсли ТипЗнч(ПерваяСтрока) = Тип(""Соответствие"") И ТипЗначения <> ""Макет"" Тогда
			Если Не ПереданМассивКлючей  Тогда
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из ПерваяСтрока Цикл
					МассивКлючей.Добавить(Элем.Ключ);
				КонецЦикла;	
			КонецЕсли;	 
		КонецЕсли;	 	
		
		НовоеЗначение = Новый ТабличныйДокумент;
		
		ИдСтроки = 1;
		
		ИдКолонки = 0;
		Если МассивКлючей <> Неопределено Тогда
			НужноДобавитьСтроку = Истина;
			Если ТипЗнч(Значение) = Тип(""Массив"") Тогда
				Если Значение.Количество() > 0 Тогда
					Если ТипЗнч(Значение[0]) = Тип(""Массив"") Тогда
						НужноДобавитьСтроку = Ложь;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;
			Если НужноДобавитьСтроку Тогда
				Для Каждого Ключ Из МассивКлючей Цикл
					ИдКолонки = ИдКолонки + 1;
					НовоеЗначение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст = Ключ;
				КонецЦикла;	
				ИдСтроки = ИдСтроки + 1;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ЧитаемИзМассиваСтруктур Тогда
			Для Ккк = (ИдСтроки-1) По Значение.Количество()-1 Цикл
				СтрокаЗначение = Значение[Ккк];
				
				ИдКолонки = 0;
				Если МассивКлючей <> Неопределено Тогда
					Для Каждого Элем Из МассивКлючей Цикл
						ИдКолонки = ИдКолонки + 1;
						НовоеЗначение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст = СтрокаЗначение[""Кол"" + Формат(ИдКолонки, ""ЧГ=; ЧН=0"")];
					КонецЦикла;	
				КонецЕсли;	 
				
				ИдСтроки = ИдСтроки + 1;
			КонецЦикла;	
		Иначе	
			Если ИдСтроки = 2 Тогда
				НачЗначениеСчетчика = ИдСтроки-1-1;
			Иначе	
				НачЗначениеСчетчика = ИдСтроки-1;
			КонецЕсли;	 
			
			Для Ккк = НачЗначениеСчетчика По Значение.Количество()-1 Цикл
				СтрокаЗначение = Значение[Ккк];
				
				ИдКолонки = 0;
				Если МассивКлючей <> Неопределено И (ТипЗнч(СтрокаЗначение) = Тип(""Структура"") ИЛИ ТипЗнч(СтрокаЗначение) = Тип(""Соответствие"") ) Тогда
					Для Каждого Ключ Из МассивКлючей Цикл
						ИдКолонки = ИдКолонки + 1;
						НовоеЗначение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст = СтрокаЗначение[Ключ];
					КонецЦикла;
				Иначе
					Если ТипЗнч(СтрокаЗначение) = Тип(""Структура"") Тогда
						Для СчетчикКолонок = 1 По СтрокаЗначение.Количество() Цикл
							НовоеЗначение.Область(ИдСтроки,СчетчикКолонок,ИдСтроки,СчетчикКолонок).Текст = СтрокаЗначение[""Кол"" + Формат(СчетчикКолонок, ""ЧГ=; ЧН=0"")];
						КонецЦикла;	
					Иначе	
						Для СчетчикКолонок = 0 По СтрокаЗначение.Количество()-1 Цикл
							НовоеЗначение.Область(ИдСтроки,СчетчикКолонок+1,ИдСтроки,СчетчикКолонок+1).Текст = СтрокаЗначение[СчетчикКолонок];
						КонецЦикла;	
					КонецЕсли;	 
				КонецЕсли;	 
				
				ИдСтроки = ИдСтроки + 1;
			КонецЦикла;	
		КонецЕсли;	 
		
		Возврат НовоеЗначение;
	ИначеЕсли ТипЗнч(Значение) = Тип(""ТабличныйДокумент"") Тогда	
		Если ТолькоТекстЯчеек Тогда
			НовоеЗначение = Новый ТабличныйДокумент;
			
			Для ИдСтроки = 1 По Значение.ВысотаТаблицы Цикл
				Для ИдКолонки = 1 По Значение.ШиринаТаблицы Цикл
					НовоеЗначение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст = Значение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст;
				КонецЦикла;	
			КонецЦикла;	
			
			Возврат НовоеЗначение; 
		Иначе
			Возврат Значение; 
		КонецЕсли;	 
	Иначе
		Возврат Значение;
	КонецЕсли;	 
КонецФункции	 

// Определяет как надо искать элемент формы
// если ИмяПоля начинается с символа !, тогда поиск будет по имени поля
// иначе по заголовку
// если заголовок поля начинается с символа !, тогда в значении ИмяПоля он должен быть проэкранирован \!
&НаКлиенте
Процедура ОпределитьРежимПоискаЭлементаНаФорме(ИмяПоля,ИскатьПоИмени) Экспорт
	Если Лев(ИмяПоля,2) = ""\!"" Тогда
		ИмяПоля = Сред(ИмяПоля,2);
		ИскатьПоИмени = Ложь;
		Возврат;
	ИначеЕсли Лев(ИмяПоля,1) = ""!"" Тогда
		ИмяПоля = Сред(ИмяПоля,2);
		ИскатьПоИмени = Истина;
		Возврат;
	КонецЕсли;	 
	ИскатьПоИмени = Ложь;
КонецПроцедуры

// Возвращает максимум из переданного значения и Объект.ТаймаутДляАсинхронныхШагов
&НаКлиенте
Функция ЗначениеТаймаутаДляАсинхронногоШага(Знач КолСекунд) Экспорт
	Попытка
		КолСекунд = Число(КолСекунд);
	Исключение
		ТекстСообщения = Локализовать(""Значение параметра таймаута ожидания должно быть числом. Переданное значение: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",КолСекунд); 
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат Макс(Объект.ТаймаутДляАсинхронныхШагов,КолСекунд); 
КонецФункции	 

// Возвращает количество попыток выполнения действия при работе с объектами TestClient
&НаКлиенте
Функция ЗначениеКоличествоПопытокВыполненияДействия() Экспорт
	Если ОграничениеНаКоличествоПопытокДействий Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат Макс(Объект.КоличествоПопытокВыполненияДействия,1); 
КонецФункции	 

// Возвращает количество секунд, которое нужно подождать после открытия окна
&НаКлиенте
Функция ЗначениеПаузаПриОткрытииОкна() Экспорт
	Возврат Макс(Объект.ПаузаПриОткрытииОкна,1); 
КонецФункции	 

// проверяет доступность элмента формы с учетом родительских групп
&НаКлиенте
Функция ДоступностьЭлементаСУчетомРодителя(ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяДоступность) Экспорт
	Если ТекущаяФормаЭлемента = Неопределено Тогда
		ТекстСообщения = Локализовать(""Для элемента с именем <%1> не найдена форма."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ЭлементФормы.Имя); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ПроверятьДоступностьЭлементаСУчетомРодителя <> Истина Тогда
		Возврат ТекущаяДоступность;
	КонецЕсли;	 
	
	Если НЕ ТекущаяДоступность Тогда
		// нет смысла проверять для недоступных элементов
		Возврат ТекущаяДоступность; 
	КонецЕсли;
	
	ГруппыФормы = ТекущаяФормаЭлемента.НайтиОбъекты(Тип(""ТестируемаяГруппаФормы""));
	Для Каждого ТекГруппа Из ГруппыФормы Цикл
		ЭлементыГруппы = ТекГруппа.НайтиОбъекты();
		Если ЭлементыГруппы.Найти(ЭлементФормы) <> Неопределено Тогда
			Если НЕ ТекГруппа.ТекущаяДоступность() Тогда
				// значит элемент лежит в невидимой группе
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Возврат ТекущаяДоступность;
КонецФункции	

// Устанавливает статус проверки доступности элемента с учетом доступности родительской группы
&НаКлиенте
Процедура УстановитьСтатусПроверятьДоступностьЭлементаСУчетомРодителя(Значение) Экспорт
	ПроверятьДоступностьЭлементаСУчетомРодителя = Значение;
КонецПроцедуры

// Проверяет доступность элемента формы с учетом родительских групп
&НаКлиенте
Функция ТолькоПросмотрЭлементаСУчетомРодителя(ТекущаяФормаЭлемента,ЭлементФормы,ТекущееТолькоПросмотр) Экспорт
	Если ТекущаяФормаЭлемента = Неопределено Тогда
		ТекстСообщения = Локализовать(""Для элемента с именем <%1> не найдена форма."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ЭлементФормы.Имя); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ПроверятьТолькоПросмотрСУчетомРодителя <> Истина Тогда
		Возврат ТекущееТолькоПросмотр;
	КонецЕсли;	 
	
	Если ТекущееТолькоПросмотр Тогда
		Возврат ТекущееТолькоПросмотр; 
	КонецЕсли;
	
	ГруппыФормы = ТекущаяФормаЭлемента.НайтиОбъекты(Тип(""ТестируемаяГруппаФормы""));
	Для Каждого ТекГруппа Из ГруппыФормы Цикл
		ЭлементыГруппы = ТекГруппа.НайтиОбъекты();
		СообщитьПользователю(ТекГруппа.ТекстЗаголовка);
		
		Если ЭлементыГруппы.Найти(ЭлементФормы) <> Неопределено Тогда
			Если ТекГруппа.ТекущееТолькоПросмотр() Тогда
				// значит элемент лежит в невидимой группе
				Возврат Истина;
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Возврат ТекущееТолькоПросмотр;
КонецФункции	

// Устанавливает статус проверки доступности элемента с учетом доступности родительской группы
&НаКлиенте
Процедура УстановитьСтатусПроверятьТолькоПросмотрЭлементаСУчетомРодителя(Значение) Экспорт
	ПроверятьТолькоПросмотрСУчетомРодителя = Значение;
КонецПроцедуры

// Возвращает ссылку на панель разделов TestClient
&НаКлиенте
Функция ПанельРазделов() Экспорт
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""ГлавноеОкноТестируемого"") Тогда
		ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Локализовать(""Клиент тестирования не подключен."");
	КонецЕсли;	 
	
	ОбработатьСменуАктивногоОкна();
	
	Если ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено Тогда
		ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Локализовать(""Клиент тестирования не подключен."");
	КонецЕсли;	 
	
	Попытка
		ОкноПриложенияОсновноеCommandInterface = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	Исключение
		ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = Локализовать(""Не получилось получить командный интерфейс клиента тестирования."");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	ПанельРазделов = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если ЭтоПанельРазделов(Элем.ТекстЗаголовка) Тогда
			ПанельРазделов = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ПанельРазделов = Неопределено Тогда
		ВызватьИсключение Локализовать(""Не нашли панель разделов."");
	КонецЕсли;	
	
	Возврат ПанельРазделов;
КонецФункции	 

// Возвращает ссылку на панель функций TestClient
&НаКлиенте
Функция ПанельФункций(МенюФункцийТекущегоРаздела = Неопределено) Экспорт
	ОбработатьСменуАктивногоОкна();
	ОкноПриложенияОсновноеCommandInterface = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	МенюФункций                = Неопределено;
	МенюФункцийТекущегоРаздела = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если ЭтоМенюФункций(Элем.ТекстЗаголовка) Тогда
			МенюФункций = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если (МенюФункций = Неопределено) И (МенюФункцийТекущегоРаздела = Неопределено) Тогда
		ВызватьИсключение Локализовать(""Не нашли меню функций раздела."");
	КонецЕсли;	 
	
	Возврат МенюФункций; 
КонецФункции	 

// Возвращает корректное значение для строки, которая может располагаться в ячейке таблицы Gherkin
&НаКлиенте
Функция ПолучитьКорректноеЗначениеТаблицыGherkin(Стр) Экспорт
	ПромСтр = СтрЗаменить(Стр,""|"",""\|"");
	ПромСтр = СтрЗаменить(ПромСтр,""'"",""\'"");
	//ПромСтр = СтрЗаменить(ПромСтр,""\n"",""\\n"");
	ПромСтр = СтрЗаменить(ПромСтр,Символы.ВК,"""");
	Возврат СтрЗаменить(ПромСтр,Символы.ПС,""\n"") 
КонецФункции	 

//Проверяет, что это текст диалога, который предлагает пометить элемент на удаление
&НаКлиенте
Функция ЭтоТекстДиалогаПредлагающегоПометитьЭлементНаУдаление(Текст) Экспорт
	Если Найти(Текст,""Пометить"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Текст,""for deletion"") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

//Проверяет, что это текст диалога, который предлагает снять пометку удаления
&НаКлиенте
Функция ЭтоТекстДиалогаПредлагающегоСнятьПометкуУдаления(Текст) Экспорт
	Если Найти(Текст,""Снять"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Текст,""Clear"") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

//Возвращает текст модального предупреждения пользователю. Окно предупреждения ищется среди открытых окон.
//Также в переменную ОкноПредупреждения будет передана ссылка на модальный диалог.
&НаКлиенте
Функция ПолучитьТекстПредупреждения(ОкноПредупреждения = Неопределено) Экспорт
	ОкноПредупреждения = Неопределено;
	Попытка
		Если ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
			ОкнаПредупреждения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
			Для Каждого ТекущееОкно Из ОкнаПредупреждения Цикл
				Если ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
					ОкноПредупреждения = ТекущееОкно;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОкноПредупреждения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = """";
	
	ПоляПредупреждения = ОкноПредупреждения.НайтиОбъекты(Тип(""ТестируемоеПолеФормы""));
	Если ПоляПредупреждения.Количество() > 0 Тогда
		Для Каждого ПолеПредупреждения Из ПоляПредупреждения Цикл
			Если ЗначениеЗаполнено(Текст) Тогда
				Текст = Текст + Символы.ПС;
			КонецЕсли;	 
			
			Текст = Текст + ПолеПредупреждения.ТекстЗаголовка;
		КонецЦикла;	
	Иначе
		ПолеMessage = ОкноПредупреждения.НайтиОбъект(,,""Message"");
		Если ПолеMessage <> Неопределено Тогда
			Текст = Текст + ПолеMessage.ТекстЗаголовка;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Текст; 
КонецФункции	

//Возвращает текст предупреждения из переданного окна.
&НаКлиенте
Функция ТекстПредупреждения(ОкноДиалога) Экспорт
	Если Версия8315ИлиВыше Тогда
		ПолеФормы = ОкноДиалога.НайтиОбъект(,,""message"");
		Если ПолеФормы = Неопределено Тогда
			ПолеФормы = ОкноДиалога.НайтиОбъект(,,""Поле"");
		КонецЕсли;	 
		
		Если ПолеФормы = Неопределено Тогда
			ПолеФормы = ОкноДиалога.НайтиОбъект(,,""ErrorInfo"");
		КонецЕсли;	 
		
		Если ПолеФормы = Неопределено Тогда
			ТекстСообщения = Локализовать(""У окна <%1> не найдено ни одного элемента с типом <ТестируемоеПолеФормы>."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОкноДиалога.Заголовок);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	Иначе	
		ПоляФормы = ОкноДиалога.НайтиОбъекты(Тип(""ТестируемоеПолеФормы""));
		Если ПоляФормы.Количество() = 0 Тогда
			ТекстСообщения = Локализовать(""У окна <%1> не найдено ни одного элемента с типом <ТестируемоеПолеФормы>."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОкноДиалога.Заголовок);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ПолеФормы = ПоляФормы[0];
	КонецЕсли;	 
	
	Возврат ПолеФормы.ТекстЗаголовка;
КонецФункции	 

// Возвращает количество попыток поиска активного окна
&НаКлиенте
Функция ЗначениеКоличествоСекундПоискаОкна() Экспорт
	Возврат Макс(Объект.КоличествоСекундПоискаОкна,1); 
КонецФункции	 

// Возвращает ссылку на панель функций TestClient
&НаКлиенте
Функция ПанельОткрытых() Экспорт
	ОбработатьСменуАктивногоОкна();
	ОкноПриложенияОсновноеCommandInterface = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	ПанельОткрытых = Неопределено;
	
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если ЭтоПанельОткрытых(Элем.ТекстЗаголовка) Тогда
			ПанельОткрытых = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ПанельОткрытых = Неопределено Тогда
		ВызватьИсключение Локализовать(""Не нашли меню функций раздела."");
	КонецЕсли;	 
	
	Возврат ПанельОткрытых; 
КонецФункции	 

#КонецОбласти

#Область ОбщегоНазначения

//Возвращает значение флага ВозможнаОптимизацияРаботыСФайлами
&НаКлиенте
Функция ВозможнаОптимизацияРаботыСФайлами() Экспорт
	Возврат ВозможнаОптимизацияРаботыСФайлами; 
КонецФункции	 

//Убирает символы их строки, которые нельзя использовать в ключе структуры
&НаКлиенте
Функция УбратьЗапрещенныеСимволыИзКлючаСтруктуры(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр,"""""""","""");
	Стр = СтрЗаменить(Стр,Символы.ПС,"""");
	Стр = СтрЗаменить(Стр,Символы.ВК,"""");
	ЗапрещенныеСимволы = "" <>.,\/|':;!№%?*()@#$%^&*+-`~↓↑–"";
	
	Для НомерСимвола = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		ЗапрещенныйСимвол = Сред(ЗапрещенныеСимволы, НомерСимвола, 1);
		Стр = СтрЗаменить(Стр, ЗапрещенныйСимвол, """");
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

//Возвращает многострочную строку по переданному массиву. Для замены СтрСоеденить.
&НаКлиенте
Функция МассивВСтроку(Массив) Экспорт
	Стр = """";
	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Стр = Стр + Массив[Ккк];
		Если Ккк < Массив.Количество()-1 Тогда
			Стр = Стр + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции	 

// Возвращает строку, дополненную нулями слева.
&НаКлиенте
Функция ПолучитьФорматированныйНомер(НомШага, КолСимволов) Экспорт
	Стр = Формат(НомШага, ""ЧГ=; ЧН=0"");
	Стр = СтрЗаменить(Стр, Символы.НПП, """");
	
	Пока СтрДлина(Стр) < КолСимволов Цикл
		Стр = ""0"" + Стр;
	КонецЦикла; 
	
	Возврат Стр; 
КонецФункции	

// Возвращает ИД под которым будут сохранятся и читаться настройки.
&НаСервере
Функция ПолучитьИДСохраненияОбщихНастроек() Экспорт
	
	Ид = ""VanessaAutomationUF"";
	
	Если Объект.РежимСамотестирования Тогда
		Ид = ""VanessaAutomationUF_autotest"";
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = ""single"" Тогда
		Ид = Ид + ""_"" + Объект.ВерсияПоставки;
	КонецЕсли;	 
	
	Возврат Ид;

КонецФункции	

// Возвращает префикс, который используется при сохранении настроек
&НаСервере
Функция ПолучитьПрефиксИнструмента() Экспорт
	ПрефиксИнструмента = ""vanessabehavior_"";
	Если Объект.РежимСамотестирования Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + ""autotest_"";
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки <> ""standart"" Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + ""_"" + СокрЛП(Объект.ВерсияПоставки);
	КонецЕсли;	 
	
	Возврат ПрефиксИнструмента;
КонецФункции	 

// Выполняет команду системы без показа черного окна и возвращает результат потока вывода
&НаКлиенте
Функция ВыполнитьКомандуСПотокомВывода(Команда, Кодировка = Неопределено) Экспорт
	
	Если Кодировка = Неопределено Тогда 
		Кодировка = КодировкаТекста.OEM;
	КонецЕсли;
	
	ИмяФайлаПотокаВывода = ПолучитьИмяВременногоФайла(""stdout.tmp"");
	Команда = Команда + "" > """"%1"""""";
	Команда = СтрЗаменить(Команда,""%1"",ИмяФайлаПотокаВывода);
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	ЧтениеПотокаОшибок = Новый ЧтениеТекста(ИмяФайлаПотокаВывода, Кодировка);
	ПотокВывода = ЧтениеПотокаОшибок.Прочитать();
	ЧтениеПотокаОшибок.Закрыть();
	
	Попытка
		УдалитьФайлыКомандаСистемы(ИмяФайлаПотокаВывода);
	Исключение
		ТекстСообщения = Локализовать(""Не смог удалить файл %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"", ИмяФайлаПотокаВывода); 
		ЗаписатьЛогВЖРОшибка(""VanessaAutomation.УдалениеВременногоФайла"",ТекстСообщения);
	КонецПопытки;
	
	Возврат ПотокВывода;
	
КонецФункции

// Устарела. Использовать Локализовать(Сообщение)
//
&НаКлиенте
Функция ПолучитьТекстСообщенияПользователю(Текст) Экспорт
	Возврат Локализовать(Текст); 
КонецФункции	 

// Возвращает текст сообщения пользователю с учетом языка, на котором запущен Менеджер тестирования
// 
// Параметры:
// 	Сообщение - Строка
// Возвращаемое значение:
// 	Строка
//
&НаКлиенте
Функция Локализовать(Сообщение) Экспорт

	Если ЗначениеЗаполнено(Объект.ТекстСообщенийПользователю) Тогда
		Значение = Объект.ТекстСообщенийПользователю[Сообщение];
		Если ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;

	Возврат Сообщение;
	
КонецФункции	 

&НаСервере
Функция ЛокализоватьСервер(Сообщение) Экспорт
	
	Возврат ТекстСообщенияПользователюВызовСервера(Сообщение, Объект.ТекстСообщенийПользователю);
	
КонецФункции	 

// Служебная
//
&НаСервереБезКонтекста
Функция ТекстСообщенияПользователюВызовСервера(Сообщение, Знач ТекстыСообщенийПользователю)
	
	Если ЗначениеЗаполнено(ТекстыСообщенийПользователю) Тогда
		Значение = ТекстыСообщенийПользователю[Сообщение];
		Если ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;

	Возврат Сообщение;
	
КонецФункции	 

// Делает паузу во время исполнения кода на указанное число секунд
// Для реализации используется команда ping
// Кроссплатформено
&НаКлиенте
Процедура Sleep(КолСекунд) Экспорт
	Если ТипЗнч(ОбъектКонтекстСохраняемый) = Тип(""Структура"") 
		И ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") 
		И ОбъектКонтекстСохраняемый.ТестовоеПриложение <> Неопределено Тогда
		
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""),Строка(Новый УникальныйИдентификатор),,КолСекунд);
			Возврат;
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;	 
	
    Попытка
        Если ЭтоLinux Тогда
            Команда = ""ping -i "" + Формат(КолСекунд, ""ЧГ=; ЧН=0"") + "" 127.0.0.1 -c 2 > /dev/null"";
            КомандаСистемы(Команда);
        Иначе
            Команда = ""ping 127.0.0.1 -n "" + Формат(КолСекунд + 1, ""ЧГ=; ЧН=0""); // +1 нужен, т.к. в реальности происходит на один пинг меньше
            ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
        КонецЕсли;	    
    Исключение
        ТекстСообщения = Локализовать(""Sleep:%1"");
        ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки());
        СообщитьПользователю(ТекстСообщения);
    КонецПопытки;
	
КонецПроцедуры

// Делает паузу во время исполнения кода на указанное число секунд
// Для реализации используется команда ping
// Кроссплатформено
&НаСервереБезКонтекста
Процедура SleepOnServer(КолСекунд) Экспорт
    Попытка
        Если ЭтоLinuxСервер() Тогда
            Команда = ""ping -i "" + Формат(КолСекунд, ""ЧГ=; ЧН=0"") + "" 127.0.0.1 -c 2 > /dev/null"";
            ЗапуститьПриложение(Команда,,Истина);
        Иначе
            Команда = ""ping 127.0.0.1 -n "" + Формат(КолСекунд + 1, ""ЧГ=; ЧН=0""); // +1 нужен, т.к. в реальности происходит на один пинг меньше
            ЗапуститьПриложение(Команда,,Истина);
        КонецЕсли;	    
    Исключение
    КонецПопытки;
КонецПроцедуры

// Делает преобразование русской строки в английскую с помощью транслита
&НаКлиенте
Функция Транслит(Стр) Экспорт
    Рез = СокрЛП(Стр);   
    Рез = СтрЗаменить(Рез,""а"",""a"");
    Рез = СтрЗаменить(Рез,""б"",""b"");
    Рез = СтрЗаменить(Рез,""в"",""v"");
    Рез = СтрЗаменить(Рез,""г"",""g"");
    Рез = СтрЗаменить(Рез,""д"",""d"");
    Рез = СтрЗаменить(Рез,""е"",""e"");
    Рез = СтрЗаменить(Рез,""ё"",""e"");
    Рез = СтрЗаменить(Рез,""ж"",""zh"");
    Рез = СтрЗаменить(Рез,""з"",""z"");
    Рез = СтрЗаменить(Рез,""и"",""i"");
    Рез = СтрЗаменить(Рез,""к"",""k"");
    Рез = СтрЗаменить(Рез,""л"",""l"");
    Рез = СтрЗаменить(Рез,""м"",""m"");
    Рез = СтрЗаменить(Рез,""н"",""n"");
    Рез = СтрЗаменить(Рез,""о"",""o"");
    Рез = СтрЗаменить(Рез,""п"",""p"");
    Рез = СтрЗаменить(Рез,""р"",""r"");
    Рез = СтрЗаменить(Рез,""с"",""s"");
    Рез = СтрЗаменить(Рез,""т"",""t"");
    Рез = СтрЗаменить(Рез,""у"",""u"");
    Рез = СтрЗаменить(Рез,""ф"",""f"");
    Рез = СтрЗаменить(Рез,""х"",""h"");
    Рез = СтрЗаменить(Рез,""ч"",""ch"");
    Рез = СтрЗаменить(Рез,""ш"",""sh"");
    Рез = СтрЗаменить(Рез,""щ"",""sch"");
    Рез = СтрЗаменить(Рез,""ъ"","""");
    Рез = СтрЗаменить(Рез,""ь"","""");
    Рез = СтрЗаменить(Рез,""э"",""e"");
    Рез = СтрЗаменить(Рез,""ю"",""yu"");
    Рез = СтрЗаменить(Рез,""й"",""i"");
    Рез = СтрЗаменить(Рез,""ц"",""c"");
    Рез = СтрЗаменить(Рез,""я"",""ya"");
    Рез = СтрЗаменить(Рез,""ы"",""i"");
    Рез = СтрЗаменить(Рез,""А"",""A"");
    Рез = СтрЗаменить(Рез,""Б"",""B"");
    Рез = СтрЗаменить(Рез,""В"",""V"");
    Рез = СтрЗаменить(Рез,""Г"",""G"");
    Рез = СтрЗаменить(Рез,""Д"",""D"");
    Рез = СтрЗаменить(Рез,""Е"",""E"");
    Рез = СтрЗаменить(Рез,""Ё"",""E"");
    Рез = СтрЗаменить(Рез,""Ж"",""ZH"");
    Рез = СтрЗаменить(Рез,""З"",""Z"");
    Рез = СтрЗаменить(Рез,""И"",""I"");
    Рез = СтрЗаменить(Рез,""К"",""K"");
    Рез = СтрЗаменить(Рез,""Л"",""L"");
    Рез = СтрЗаменить(Рез,""М"",""M"");
    Рез = СтрЗаменить(Рез,""Н"",""N"");
    Рез = СтрЗаменить(Рез,""О"",""O"");
    Рез = СтрЗаменить(Рез,""П"",""P"");
    Рез = СтрЗаменить(Рез,""Р"",""R"");
    Рез = СтрЗаменить(Рез,""С"",""S"");
    Рез = СтрЗаменить(Рез,""Т"",""T"");
    Рез = СтрЗаменить(Рез,""У"",""U"");
    Рез = СтрЗаменить(Рез,""Ф"",""F"");
    Рез = СтрЗаменить(Рез,""Х"",""H"");
    Рез = СтрЗаменить(Рез,""Ч"",""CH"");
    Рез = СтрЗаменить(Рез,""Ш"",""SH"");
    Рез = СтрЗаменить(Рез,""Щ"",""SCH"");
    Рез = СтрЗаменить(Рез,""Ъ"","""");
    Рез = СтрЗаменить(Рез,""Ь"","""");
    Рез = СтрЗаменить(Рез,""Ы"",""I"");
    Рез = СтрЗаменить(Рез,""Ц"",""C"");
    Рез = СтрЗаменить(Рез,""Э"",""E"");
    Рез = СтрЗаменить(Рез,""Ю"",""YU"");
    Рез = СтрЗаменить(Рез,""Я"",""YA"");
    Рез = СтрЗаменить(Рез,""Й"",""I"");
    Возврат(Рез);
КонецФункции

// Выполняет SikuliX-скрипт
//
// Параметры:
//  СтрокаКоманды		 - Строка 	 - путь к Sikuli-скрипту и аргументы
//  ЖдатьОкончания		 - Число	 - флаг ожидания окончания выполнения Sikuli-скрипта:
//									   -1	 - ожидать окончания выполнения скрипта;
//									   0	 - не ожидать окончания выполнения скрипта.
//  ЗапускЧерезСкрипт	 - Булево	 - флаг способа запуска Sikuli-скриптов:
//									   Ложь	 - устаревший способ запуска для Windows,
//											   используется по умолчанию для совместимости
//									   Истина	 - запуск через скрипт runsikulix
// 
// Возвращаемое значение:
//   - Результат выполнения скрипта. 0 - если не было ошибок.
//
&НаКлиенте
Функция ВыполнитьSikuliСкрипт(СтрокаКоманды, ЖдатьОкончания = -1, ЗапускЧерезСкрипт = Истина,ОписаниеОшибки = Неопределено,ДопПараметры = Неопределено) Экспорт
	СлужебныйВызов = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Свойство(""СлужебныйВызов"",СлужебныйВызов)
	КонецЕсли;	 
	
	Если Объект.ИспользоватьSikuliXСервер И СлужебныйВызов <> Истина Тогда
		Возврат ВыполнитьSikuliСкриптЧерезSikuliXСервер(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт,ОписаниеОшибки,ДопПараметры);
	КонецЕсли;	 
	
	Стр = ПолучитьСтрокуВызоваSikuli(ЗапускЧерезСкрипт) + "" "" + СтрокаКоманды;
	
	Если ОписаниеОшибки <> Неопределено Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла(""txt"");
		Стр = Стр + "" > """""" + ВременныйФайл + """""""";
		Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
			Если ДопПараметры.Свойство(""ИмяФайлаВыводаКонсоли"") Тогда
				ДопПараметры.Вставить(""ИмяФайлаВыводаКонсоли"",ВременныйФайл);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Отладка(Стр);
	Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Стр, ЖдатьОкончания);
	Если Статус <> 0 Тогда
		Если ФайлСуществуетКомандаСистемы(ВременныйФайл) Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ВременныйФайл,""UTF-8"");
			ОписаниеОшибки = Текст.Прочитать();
			Текст.Закрыть();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Статус;
КонецФункции

// Возврашает значение переменной ИмяФайлаОтветаSikuliXСевер
&НаКлиенте
Функция ИмяФайлаОтветаSikuliXСевер() Экспорт
	Возврат ИмяФайлаОтветаSikuliXСевер; 
КонецФункции	 

// Выполняет команду системы, при этом на экране не будет показано окно cmd
// Использует WshShell.
//
// Параметры:
//  СтрокаКоманды		 - Строка - выполняемая команда
//  ЖдатьОкончания		 - Число  - флаг ожидания окончания выполнения команды:
//
// Возвращаемое значение:
//   - Результат выполнения скрипта. 0 - если не было ошибок.
//
&НаКлиенте
Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды, ЖдатьОкончания = -1) Экспорт
	// если ЖдатьОкончания = -1, тогда будет ожидание окончания работы приложения
	
	ИмяВременногоФайлаКоманды = ПолучитьИмяВременногоФайла(""bat"");
	
	// эти две строки нужны для записи файла без BOM - начало
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.ANSI, , Ложь); 
	ЗТ.Закрыть();
	// эти две строки нужны для записи файла без BOM - окончание
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.UTF8, , Истина); 
	Если НЕ ЭтоWindowsXP Тогда
		ЗТ.ЗаписатьСтроку(""chcp 65001""); 
	КонецЕсли;	 
	ЗТ.ЗаписатьСтроку(ТекстКоманды); 
	ЗТ.Закрыть();
	
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
		// Далее переменная WshShell будет закеширована, чтобы не создавать ComObject каждый раз
	КонецЕсли;	 
	Рез = WshShell.Run("""""""" + ИмяВременногоФайлаКоманды + """""""", 0, ЖдатьОкончания);
	
	Если ЖдатьОкончания = -1 И НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		// иначе удалять нельзя
		Попытка
			УдалитьФайлыКомандаСистемы(ИмяВременногоФайлаКоманды);
		Исключение
			ТекстСообщения = Локализовать(""Не смог удалить файл %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"", ИмяВременногоФайлаКоманды); 
			ЗаписатьЛогВЖРОшибка(""VanessaAutomation.УдалениеВременногоФайла"",ТекстСообщения);
		КонецПопытки;
	КонецЕсли;	 
	
	Возврат Рез;
КонецФункции	

// Выполняет запись строки в текстовый лог.
//
// Параметры:
//  Стр - Строка - нужная строка для записи в лог
//
// Запись в лог будет работать если выставлен флаг ДелатьЛогВыполненияСценариевВТекстовыйФайл
// 
// Возможно задать параметр при запуске VA через командную строку.
//
// Скрипты, которые входят в комплект VA позволяют читать этот файл на CI в реальном времени.
// Это позволяет видеть на CI какой сценарий сейчас выполняется.
&НаКлиенте
Процедура ЗаписатьСтрокуВТекстовыйЛог(Стр) Экспорт
	
	Если Не Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ПустаяСтрока(Объект.ИмяФайлаЛогВыполненияСценариев) Тогда
		ВызватьИсключение Локализовать(""Не указано имя файла лога в параметре <ИмяФайлаЛогВыполненияСценариев>"");
	КонецЕсли;	 
	
	ИмяФайла = Объект.ИмяФайлаЛогВыполненияСценариев;
	
	Попытка
		ЗТ = Новый ЗаписьТекста(ИмяФайла, ""UTF-8"", , Истина); 
		ЗТ.ЗаписатьСтроку(Стр); 
		ЗТ.Закрыть();
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

// Позволяет в отладке посмотреть значение переменной
//
// Параметры:
//  Парам - Произвольный - нужная переменная
//  ПараметрВызватьИсключение - Булево - флаг того, что надо вызвать исключение
//
// Процедура полезна, когда нужно из внешней обработки посмотреть значение переменной, не перезапуская сеанс TestManager.
// Нужна для отладки кода внешних обработок.
&НаКлиенте
Процедура ПосмотретьЗначение(Парам, ПараметрВызватьИсключение = Истина) Экспорт
	Если ПараметрВызватьИсключение Тогда
		Попытка
			// Эта попытка/исключение нужна, чтобы можно было выставить флаг ""Останавливаться по ошибке"".
			// Тогда будет остановка на данном исключении, но сценарий продолжит свою работу.
			ВызватьИсключение Локализовать(""Исключение для просмотра значения."");
		Исключение
			Отладка(Локализовать(""Вызов процедуры """"ПосмотретьЗначение"""".""));
		КонецПопытки;
	КонецЕсли;  
КонецПроцедуры

// Аналог СтрРазделить() для старых версий платформы
// Описание параметров аналогично описанию параметров для СтрРазделить()
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено, ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь)
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = "" "", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = "" "" Тогда
				Результат.Добавить("""");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок Тогда
		Если ПропускатьПустыеСтроки = Истина Тогда
			Возврат Вычислить(""СтрРазделить(Строка,Разделитель,Ложь)"");
		Иначе
			Возврат Вычислить(""СтрРазделить(Строка,Разделитель,Истина)"");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Обертка для функции РазложитьСтрокуВМассивПодстрок()
// Нужна, т.к. не работает вызов Ванесса.РазложитьСтрокуВМассивПодстрок() из других обработок.
&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрокКлиент(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	Возврат РазложитьСтрокуВМассивПодстрок(Строка,Разделитель,ПропускатьПустыеСтроки,ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок);
КонецФункции 

// Позволяет программно подключить внешнюю обработку, когда она уже помещена в хранилище
&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработкуСервер(Знач АдресХранилища,ИспользуетсяЗащитаОтОпасныхДействий,ДополнительныеПараметры = Неопределено) Экспорт
	ИмяОбработки = Неопределено;
	Если ИспользуетсяЗащитаОтОпасныхДействий Тогда
		ОписаниеЗащитыОтОпасныхДействий = Вычислить(""Новый ОписаниеЗащитыОтОпасныхДействий"");
		ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		Обработка = ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки);
		Если Обработка = Неопределено Тогда
			Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
				Если ДополнительныеПараметры.Свойство(""АдресХранилища"") Тогда
					ИмяОбработки = ВнешниеОбработки.Подключить(ДополнительныеПараметры.АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
				Иначе	
					ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки);
		
		Возврат ИмяОбработки;
	Иначе	
		Обработка = ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки);
		Если Обработка = Неопределено Тогда
			Если ДополнительныеПараметры.Свойство(""АдресХранилища"") Тогда
				ИмяОбработки = ВнешниеОбработки.Подключить(ДополнительныеПараметры.АдресХранилища, , Ложь); 
			Иначе	
				ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь); 
			КонецЕсли;	 
			ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки);
		КонецЕсли;	 
		Возврат ИмяОбработки;
	КонецЕсли;	 
КонецФункции 

// Позволяет программно подключить внешнюю обработку
&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(ИмяФайла,ПараметрыПодключения = Неопределено) Экспорт
	Попытка
		ДополнительныеПараметры = Новый Структура;
		Если ТипЗнч(ПараметрыПодключения) = Тип(""Структура"")  Тогда
			Для Каждого Элем Из ПараметрыПодключения Цикл
				ДополнительныеПараметры.Вставить(Элем.Ключ,Элем.Значение);
			КонецЦикла;	 
		КонецЕсли;	 
		Если ЕстьПоддержкаНемодальныхФорм Тогда
			Оповещение = Новый ОписаниеОповещения(""ОбработкаПослеПомещенияФайла"", ЭтаФорма, ДополнительныеПараметры);
			НачатьПомещениеФайла(Оповещение, , ИмяФайла, Ложь, УникальныйИдентификатор);
		Иначе
			АдресХранилища = """";
			ФайлДляПомещения = Новый Массив;
			ФайлДляПомещения.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
			ПомещенныеФайлы = Новый Массив;
			ПоместитьФайлы(ФайлДляПомещения, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			
			Если ПомещенныеФайлы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			
			АдресХранилища = ПомещенныеФайлы[0].Хранение;
			ДополнительныеПараметры.Вставить(""ИмяФайла"",ИмяФайла);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметры);
			Возврат ИмяОбработки;
		КонецЕсли;	 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции 

// Возвращает путь к парсеру фича файлов
&НаКлиенте
Функция ПолучитьПутьКFeatureReader() Экспорт
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""lib/FeatureReader/vbFeatureReader.epf"";
	
	Если Не ФайлСуществуетКомандаСистемы(ПутьКФайлу, ""ПолучитьПутьКFeatureReader"") Тогда
		ТекстСообщения = Локализовать(""Файл <vbFeatureReader.epf> не найден в каталоге инструментов <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"", СокрЛП(Объект.КаталогИнструментов)); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Возврат ПутьКФайлу;
КонецФункции

// TODO: Из данного метода требуется убрать обработку  ""workspaceRoot"" и ""instrumentsRoot""
&НаКлиенте
Функция ПреобразоватьПутьСТочкамиКНормальномуПути(Знач ОригСтр="""") Экспорт
	
	Если ПустаяСтрока(ОригСтр) Тогда
		Возврат ОригСтр;
	КонецЕсли; 
	
	Если Найти(ОригСтр, ""$workspaceRoot"") > 0 Тогда 
		ОригСтр = СтрЗаменить(ОригСтр, ""$workspaceRoot"", ДополнитьСлешВПуть(Объект.КаталогПроекта));
	КонецЕсли;
		
	Если Найти(ОригСтр, ""$instrumentsRoot"") > 0 И НЕ ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ОригСтр = СтрЗаменить(ОригСтр, ""$instrumentsRoot"", ДополнитьСлешВПуть(Объект.КаталогИнструментов));
	КонецЕсли;	
	
	ФайлПути = Новый Файл(ОригСтр);
	Если Лев(ОригСтр, 1) = ""."" Тогда
		// Для совместимости со старым кодом оставим пока КаталогИнструментов, правильней было-бы использовать КаталогПроекта
		ФайлПути = Новый Файл(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ОригСтр);
	КонецЕсли;
	
	Возврат ФайлПути.ПолноеИмя;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2) Экспорт
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1, ""."");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2, ""."");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

// TODO: Из данного метода требуется убрать обработку  ""workspaceRoot"" и ""instrumentsRoot""
&НаКлиенте
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданнаяКлиент(Версия1, Версия2) Экспорт
	
	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2); 

КонецФункции	

&НаСервере
Функция ПолучитьВстроенныйМакетПоИмени(Знач ИмяМакета,ИмяФичи)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Попытка
		Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета); 
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ИмяФичи) Тогда
		Попытка
			Файл = Новый Файл(ИмяФичи);
			ИмяМакета = ""МакетОбработки_"" + Файл.ИмяБезРасширения + ""_"" + ИмяМакета;
			Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета); 
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	ИмяФичи = Неопределено;
	Если (ТекИД_ШагаВМассиве >= 0) И (ТекИД_ШагаВМассиве <= (Шаги.Количество() - 1)) Тогда
		ТекШаг       = Шаги[ТекИД_ШагаВМассиве];
		ИДСтрокиШага = ТекШаг.СтрокаШага;
		СтрокаШага   = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
		
		ИмяФичи = ПолучитьИмяФичиИзПолногоПути(СтрокаШага.ПолныйПуть);
		
		Попытка
			Обработка = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФичи);
			
			// Далее будет попытка получить макет из обработки, которая относится к данному шагу (это либо обработка подчиненного
			// сценария, либо обработка связанная с основной фичей). Его может не быть, если это подчиненный сценарий, а хотели
			// получить макет из основной фичи. Если макет не был получен - значит далее будет попытка получить макет из
			// обработки связанной с основной фичей, если такая обработка существует.
			Макет     = Обработка.ПолучитьМакетОбработки(ИмяМакета);
			Возврат Макет;
		Исключение
			
		КонецПопытки;
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	Если СтрокаСценария.ФичаИмеетСвоюEPF Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
		Обработка  = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(СтрокаФичи.ПолныйПуть);
		Макет      = Неопределено;
		Попытка
			Макет = Обработка.ПолучитьМакетОбработки(ИмяМакета);
		Исключение
		КонецПопытки;
		
		Если Макет <> Неопределено Тогда
			Возврат Макет;
		КонецЕсли;	 
	КонецЕсли; 
	
	Если Объект.ВерсияПоставки = ""single"" Тогда
		Макет = ПолучитьВстроенныйМакетПоИмени(ИмяМакета, ИмяФичи);
		Если Макет <> Неопределено Тогда
			Возврат Макет; 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		Попытка
			ТабДок = НайтиМакетВКаталогеПроекта(ИмяМакета);
		Исключение
			ТабДок = Неопределено;
		КонецПопытки;
		
		Если ТабДок <> Неопределено Тогда
			Возврат ТабДок;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ИмяФичи) Тогда
		Файл = Новый Файл(ИмяФичи);
		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;
		НайтиФайлыКомандаСистемы(Файл.Путь,СписокКаталогов,СписокФайлов,Истина,ИмяМакета + "".mxl"");
		Если СписокФайлов.Количество() > 0 Тогда
			ИмяФайлаМакета = СписокФайлов[0].Значение.ПолноеИмя;
			
			Попытка
				ТабДок = ПолучитьМакетИзФайла(ИмяФайлаМакета);
			Исключение
				ТабДок = Неопределено;
			КонецПопытки;
			
			Если ТабДок <> Неопределено Тогда
				Возврат ТабДок;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция НайтиМакетВКаталогеПроекта(ИмяМакета) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ТекстСообщения = Локализовать(""Не найден эталон макета <%1>. Пустой каталог проекта."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяМакета); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = Ложь;
	
	ИмяМакетаДляПоиска = ИмяМакета;
	ИмяФайла           = Неопределено;
	Нашли              = НайтиМакетВКаталогеПроектаСлужебный(ИмяМакетаДляПоиска,ИмяФайла);
	
	Если Не Нашли Тогда
		ТекстСообщения = Локализовать(""Не найден файл макета <%1> в каталоге проекта <%2>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяМакета);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",Объект.КаталогПроекта);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ТабДок = ПолучитьМакетИзФайла(ИмяФайла);

	Возврат Табдок;
КонецФункции	

// Возвращает объект на сервере.
// Вызвать метод можно только в контексте сервера.
&НаСервере
Функция Объект() Экспорт
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектНаСервере;
КонецФункции

// Возвращает контекст фреймворка.
// Для сервера возвращает  Объект().
&НаСервере
Функция Контекст() Экспорт
	Возврат Объект();
КонецФункции	 

// Возвращает контекст фреймворка.
// Для сервера возвращает  Объект().
&НаСервере
Функция Context() Экспорт
	Возврат Контекст();
КонецФункции	 

// Внимание. Где-то есть данная функция
&НаКлиенте
Функция УстановленOneScript() Экспорт

	ИнструментУстановлен = Ложь;
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");
	Стр = ""oscript > """""" + ИмяФайлаЛога + """""" 2>&1"";
	
	ВыполнитьКомандуОС(Стр);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога, ""UTF-8"");
	
	Стр = Текст.ПрочитатьСтроку();
		
	Если Стр <> Неопределено Тогда
		Образец = ""1Script Execution Engine"";
		Если Лев(Стр, СтрДлина(Образец)) = Образец Тогда
			ИнструментУстановлен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Текст.Закрыть();
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	
	Возврат ИнструментУстановлен;

КонецФункции

&НаКлиенте
Процедура СоздатьШаблоныОбработок() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ВерсияПлатформыДляГенерацииEPF) Тогда
		СообщитьПользователю(Локализовать(""Не указан каталог с нужной версией платформы 8.3.10 или выше.""));
		Возврат;
	КонецЕсли;	 
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ""1cv8.exe"";
	Если ЭтоLinux Тогда
		ИмяФайла = ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ""1cv8"";
	КонецЕсли;	 
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ТекстСообщения = Локализовать(""Не найден файл <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла);
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	 
	
	
	МассивДействий = Новый Массив;
	ДобавитьМассивСостоянийФайлов(МассивДействий);
	ДобавитьСканированиеКаталогов(МассивДействий);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ТекИдМассива"", 0);
	ДопПараметры.Вставить(""МассивДействий"", МассивДействий);
	ДопПараметры.Вставить(""НадоЗагрузитьФичи"", Ложь);
	ДопПараметры.Вставить(""НадоГенерироватьEPF"", Истина);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
	Иначе
		ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
		СоздатьШаблоныОбработокПродолжение();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивPIDПроцессов(ИмяОбраза) Экспорт
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""txt"");
	ИмяВременногоBat = ПолучитьИмяВременногоФайла(""bat"");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, ""UTF-8"", , Истина); 
	ЗТ.ЗаписатьСтроку(""chcp 65001""); 
	ЗТ.ЗаписатьСтроку(""tasklist /v /fo list /fi """"imagename eq "" + ИмяОбраза + """""" > """""" + ИмяВременногоФайла + """"""""); 
	ЗТ.Закрыть();
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(ИмяВременногоBat);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла, ""UTF-8"");
	
	МассивProcessID = Новый Массив;
	ProcessID = Неопределено;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = НРег(Стр);
		Если Лев(Стр, 4) = ""pid:"" Тогда
			ProcessID = СокрЛП(Сред(Стр, 5));
		КонецЕсли;	 
		
		Если ProcessID <> Неопределено Тогда
			Если (Лев(Стр, 15) = ""заголовок окна:"") ИЛИ (Лев(Стр, 13) = ""window title:"") Тогда
				МассивProcessID.Добавить(ProcessID);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	Текст.Закрыть();
	
	Возврат МассивProcessID;
КонецФункции	

&НаКлиенте
Процедура ЗавершитьСеансыTestClientПринудительно() Экспорт
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""txt"");
	
	Если НЕ ЭтоLinux Тогда 
		ИмяВременногоBat = ПолучитьИмяВременногоФайла(""bat"");
		ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, ""windows-1251"", , Истина); 
		ЗТ.ЗаписатьСтроку(""chcp 65001""); 
		ЗТ.ЗаписатьСтроку(""tasklist /v /fo list /fi """"imagename eq 1cv8c.exe"""" > """""" + ИмяВременногоФайла + """"""""); 
		ЗТ.Закрыть();
		
		ЗапуститьПриложение(ИмяВременногоBat, , Истина);
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, ""UTF-8"");
		
		МассивProcessID = Новый Массив;
		ProcessID = Неопределено;
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Стр = НРег(Стр);
			Если Лев(Стр, 4) = ""pid:"" Тогда
				ProcessID = СокрЛП(Сред(Стр, 5));
			КонецЕсли;	 
			
			Если ProcessID <> Неопределено Тогда
				Если (Лев(Стр, 15) = ""заголовок окна:"") ИЛИ (Лев(Стр, 13) = ""window title:"") Тогда
					Если Найти(Стр, ""vanessa"") = 0 Тогда
						МассивProcessID.Добавить(ProcessID);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
		Текст.Закрыть();
		
		Если МассивProcessID.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	 
		
		ИмяВременногоBat = ПолучитьИмяВременногоФайла(""bat"");
		ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, ""UTF-8"", , Истина); 
		Стр = ""taskkill /F "";
		Для каждого ProcessID Из МассивProcessID Цикл
			Стр = Стр + ""/pid "" + ProcessID + "" "";
		КонецЦикла;
		ЗТ.ЗаписатьСтроку(Стр); 
		ЗТ.Закрыть();
		
		ЗапуститьПриложение(ИмяВременногоBat, , Истина);
		
	Иначе 
		
		СтрокаЗапуска = ""kill -9 `ps aux | grep -ie TESTCLIENT | grep -ie 1cv8c | awk '{print $2}'`"";
		ЗапуститьПриложение(СтрокаЗапуска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивPIDОкон1С() Экспорт
	Рез = Новый Массив;
	
	ЗаполнитьМассивPIDПоИмениПроцесса(""1cv8.exe"", Рез);
	ЗаполнитьМассивPIDПоИмениПроцесса(""1cv8c.exe"", Рез);
	
	Возврат Рез;
	
КонецФункции	

&НаКлиенте
Процедура СделатьОкноПроцессаАктивным(PID) Экспорт
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
	КонецЕсли;	 
	
	Попытка
		WshShell.AppActivate(PID);
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура TASKKILL(ИмяПриложения) Экспорт
	СтрокаКоманды = ""TASKKILL /F /IM "" + ИмяПриложения;
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагВМассивТестов(МассивТестов, Снипет, ИмяПроцедуры, ПредставлениеТеста = Неопределено, ОписаниеШага = Неопределено, ТипШагаДляОписания = Неопределено, ТипШагаВДереве = Неопределено) Экспорт
	Структура = Новый Структура;
	
	Структура.Вставить(""Снипет"", Снипет);
	Структура.Вставить(""ИмяПроцедуры"", ИмяПроцедуры);
	Структура.Вставить(""ПредставлениеТеста"", ПредставлениеТеста);
	Структура.Вставить(""ОписаниеШага"", ОписаниеШага);
	Структура.Вставить(""ТипШага"", ТипШагаДляОписания);
	Структура.Вставить(""ТипШагаВДереве"", ТипШагаВДереве);
	Структура.Вставить(""Транзакция"", Неопределено);
	МассивТестов.Добавить(Структура);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиНаЭкранЗначениеСтруктуры(Значение) Экспорт

	Стр = """" + ""Количество значений = "" + Значение.Количество() + Символы.ПС;
	Для Каждого Элем Из Значение Цикл
		Стр = Стр + ""Ключ="" + Элем.Ключ + "", Значение="" + Элем.Значение + Символы.ПС;
	КонецЦикла;	
	
	Предупреждение(Стр, 5);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКлиентовТестирования() Экспорт
	Если НЕ ЗначениеЗаполнено(ПрефиксИнструментаДляСохраненияНастроек) Тогда
		СохранитьНастройкиВХранилище(""ДанныеКлиентовТестирования"", ДанныеКлиентовТестирования,ПараметрыДляСохраненияНастроекСервер());
	Иначе
		СохранитьНастройкиВХранилище(""ДанныеКлиентовТестирования"", ДанныеКлиентовТестирования,ПараметрыДляСохраненияНастроек());
		СохранитьНастройкиВХранилище(""ДанныеАллюрМеток"", ДанныеАллюрМеток,ПараметрыДляСохраненияНастроек());
	КонецЕсли;
КонецПроцедуры

// Устанавливает флаг, что надо сохранить клиентов тестирования после открытия формы
&НаКлиенте
Процедура СохранитьКлиентовТестированияПослеОткрытияФормы() Экспорт
	СохранитьКлиентовТестированияПослеОткрытияФормы = Истина;
КонецПроцедуры 

// Преобразует строки вида ""больше или равно"" в "">=""
// Это нужно для работы ""Вычислить""
&НаКлиенте
Функция ПолучитьОператорПоТексту(Знач Стр) Экспорт
	Стр = СокрЛП(НРег(Стр));
	
	Если Стр = ""больше"" Тогда
		Стр = "">"";
	ИначеЕсли Стр = ""меньше"" Тогда
		Стр = ""<"";
	ИначеЕсли Стр = ""больше или равно"" Тогда
		Стр = "">="";
	ИначеЕсли Стр = ""меньше или равно"" Тогда
		Стр = ""<="";
	ИначеЕсли Стр = ""равно"" Тогда
		Стр = ""="";
	ИначеЕсли Стр = ""неравно"" Тогда
		Стр = ""<>"";
	ИначеЕсли Стр = ""не равно"" Тогда
		Стр = ""<>"";
	КонецЕсли;	
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеансаСлужебный() Экспорт
	Попытка
		PIDЭтогоСеанса = """";
		
        oLocator = Новый COMObject(""WbemScripting.SWbemLocator"");
        oService = oLocator.ConnectServer(""."", ""root\CIMV2"");
 
        oShell = Новый COMObject(""WScript.Shell"");
        oApp = oShell.Exec(""rundll32.exe kernel32,Sleep"");
        
        oChildProcess = oService.Get(""Win32_Process.Handle="" + Формат(oApp.ProcessID, ""ЧГ=; ЧН=0""));
        
        PIDЭтогоСеанса = Формат(oChildProcess.ParentProcessID, ""ЧГ=; ЧН=0"");
		
        oChildProcess.Terminate();
    Исключение
	   СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивФичаФайловИзКаталогаСогласноНастроек(КаталогСФичами) Экспорт
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогСФичами,СписокКаталогов,СписокФайлов,Истина);
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура(""Каталог,Фича,Уровень,Имя,ПолныйПуть,ДвоичныеДанные"",Истина,Ложь,1,
			КаталогСФичами,КаталогСФичами,Неопределено));
			
	Для Каждого ЭлементСпискаФайлов Из СписокФайлов Цикл
		Если НРег(Прав(ЭлементСпискаФайлов.Значение.ПолноеИмя,8)) <> "".feature"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Новый Структура(""Каталог,Фича,Уровень,Имя,ПолныйПуть,ДвоичныеДанные"",Ложь,Истина,2,
				ЭлементСпискаФайлов.Значение.Имя,ЭлементСпискаФайлов.Значение.ПолноеИмя,Новый ДвоичныеДанные(ЭлементСпискаФайлов.Значение.ПолноеИмя)));
	КонецЦикла;	
	МассивРезультатОбходаКаталогов = Массив;
	
	
	ДвДанныеvbFeatureReader = Неопределено;
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	
	МассивФичДляПослеНаложенияФильтров = Новый Массив;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""DebugLog"",Ложь);
	СтруктураПараметров.Вставить(""Брейкпоинты"",Новый Массив);
	СтруктураПараметров.Вставить(""ДополнительныеПараметры"",Неопределено);
	СтруктураПараметров.Вставить(""ИдетЗагрузкаИзКаталога"",Истина);
	СтруктураПараметров.Вставить(""КаталогИнструментов"",Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить(""КаталогФич"",Объект.КаталогФич);
	СтруктураПараметров.Вставить(""КаталогиБиблиотек"",Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить(""МассивРезультатОбходаКаталогов"",Новый Массив);
	СтруктураПараметров.Вставить(""МассивСообщений"",Новый Массив);
	СтруктураПараметров.Вставить(""ПутьКОбработке"",Неопределено);
	СтруктураПараметров.Вставить(""СписокТеговИсключение"",Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить(""СписокТеговОтбор"",Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить(""ТаблицаУжеСуществующихСценариевУФ"",Новый Массив);
	СтруктураПараметров.Вставить(""ТолькоДляПолученияСпискаФич"",Истина);
	СтруктураПараметров.Вставить(""МассивФичДляПослеНаложенияФильтров"",МассивФичДляПослеНаложенияФильтров);
	СтруктураПараметров.Вставить(""ЭтоLinux"",ЭтоLinux);
	СтруктураПараметров.Вставить(""КешСнипетов"",КешСнипетов);
	СтруктураПараметров.Вставить(""СтрокаПробелов"",СтрокаПробелов);
	СтруктураПараметров.Вставить(""НедавноЗагруженныеФичи"",НедавноЗагруженныеФичи);
	
	СтруктураПараметров.Вставить(""РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов"", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	СтруктураПараметров.Вставить(""МассивИменКонтекстовОбработок"", МассивИменКонтекстовОбработок);
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		СтруктураПараметров.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов"", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	КонецЕсли;	 
	
	ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров);
	
	Возврат СтруктураПараметров.МассивФичДляПослеНаложенияФильтров;
КонецФункции	

&НаКлиенте
Функция ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(Знач Текст,ВставлятьЗначение = Ложь) Экспорт
	Если Найти(Текст,""$"") = 0 Тогда
		Возврат Текст; 
	КонецЕсли;	 
	
	// проверим строку на корректость
	ЭтоВыражениеКонтекст                = Ложь;
	ЭтоВыражениеКонтекстСохраняемый     = Ложь;
	ЗакрытоВыражениеКонтекст            = Ложь;
	ЗакрытоВыражениеКонтекстСохраняемый = Ложь;
	
	НовыйТекст = """";
	ПредыдущийСимвол = Неопределено;
	ДлинаСтроки = СтрДлина(Текст);
	Для Ккк = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст,Ккк,1);
		
		Если ПредыдущийСимвол = ""$"" И Символ = ""$"" И НЕ ЗакрытоВыражениеКонтекст Тогда
			ЭтоВыражениеКонтекстСохраняемый = НЕ ЭтоВыражениеКонтекстСохраняемый;
			Если ЗакрытоВыражениеКонтекстСохраняемый Тогда
				НовыйТекст = НовыйТекст + ""~СпецРазделитель~"";
			КонецЕсли;	 
			
			НовыйТекст = НовыйТекст + ""~Экранирование$$~"";
			ПредыдущийСимвол = Символ;
			
			ЗакрытоВыражениеКонтекстСохраняемый = НЕ ЭтоВыражениеКонтекстСохраняемый;
			Продолжить;
			
		ИначеЕсли Символ = ""$"" Тогда
			Если Ккк < ДлинаСтроки Тогда
				СледующийСимвол = Сред(Текст,Ккк+1,1);
				Если СледующийСимвол = ""$"" Тогда
					Если Не ЭтоВыражениеКонтекст Тогда
						// значит это глобальная переменная
						
						ПредыдущийСимвол = Символ;
						Продолжить;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			
			ЭтоВыражениеКонтекст = НЕ ЭтоВыражениеКонтекст;
			Если ЗакрытоВыражениеКонтекст Тогда
				НовыйТекст = НовыйТекст + ""~СпецРазделитель~"";
			КонецЕсли;	 
			
			НовыйТекст = НовыйТекст + ""~Экранирование$~"";
			ПредыдущийСимвол = Символ;
			
			ЗакрытоВыражениеКонтекст = НЕ ЭтоВыражениеКонтекст;
			Продолжить;
		Иначе
			НовыйТекст = НовыйТекст + Символ;
		КонецЕсли;	 
		
		ПредыдущийСимвол = Символ;
		ЗакрытоВыражениеКонтекст = Ложь;
	КонецЦикла;	
	
	Текст = НовыйТекст;
	
	//Текст = СтрЗаменить(Текст,""$$"",""~Экранирование$$~"");
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Текст,""~Экранирование$$~"");
	ЭтоВыражение = Ложь;
	
	Если Лев(Текст,СтрДлина(""~Экранирование$$~"")) = ""~Экранирование$$~"" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;	 
	
	Результат = """";
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр = """" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЭтоВыражение Тогда
			Если ВставлятьЗначение Тогда
				Результат = Результат + ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(Стр);
			Иначе	
				Результат = Результат + ""ОбъектКонтекстСохраняемый."" + Стр;
			КонецЕсли;	 
		Иначе	
			Результат = Результат + Стр;
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	Текст = Результат;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Текст,""~Экранирование$~"");
	ЭтоВыражение = Ложь;
	
	Если Лев(Текст,СтрДлина(""~Экранирование$~"")) = ""~Экранирование$~"" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;	 
	
	Результат = """";
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр = """" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЭтоВыражение Тогда
			Если ВставлятьЗначение Тогда
				Результат = Результат + ПолучитьСохраненноеЗначениеИзКонтекста(Стр);
			Иначе	
				Результат = Результат + ""ОбъектКонтекст."" + Стр;
			КонецЕсли;	 
		Иначе	
			Если Стр <> ""~СпецРазделитель~"" Тогда
				Результат = Результат + Стр;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВычислитьВнутреннееВыражение(Знач Выражение) Экспорт
	Если ТипЗнч(Выражение) = Тип(""Булево"") Тогда
		Возврат Выражение;
	КонецЕсли;	 
	
	Выражение = ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(Выражение);
	// @skip-warning Используется в методе Вычислить() ниже
	Контекст = ОбъектКонтекст;
	// @skip-warning Используется в методе Вычислить() ниже
	КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	// @skip-warning Используется в методе Вычислить() ниже
	Ванесса = ЭтаФорма;
	
	Попытка
		ЗначениеВыражения = Вычислить(Выражение);
	Исключение
		ТекстСообщения = Локализовать(""Не смог вычислить выражение: %1"");
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		ТекстСообщения = ТекстСообщения + ОписаниеОшибки();
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Выражение);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат ЗначениеВыражения; 
КонецФункции	 

&НаКлиенте
Функция ПолучитьСтрокуВычисливВнутренниеВыражения(Знач Текст) Экспорт
	Результат = """";	
	
	Текст = СтрЗаменить(Текст,""Ванесса."",""ЭтаФорма."");
	Текст = СтрЗаменить(Текст,""Контекст."",""ОбъектКонтекст."");
	Текст = СтрЗаменить(Текст,""КонтекстСохраняемый."",""ОбъектКонтекстСохраняемый."");
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Текст,""$"");
	ЭтоВыражение = Ложь;
	Если Лев(Текст,1) = ""$"" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;	 
	
	Результат = """";
	Для Каждого Стр Из МассивСтрок Цикл
		Если ЭтоВыражение Тогда
			Результат = Результат + Вычислить(Стр);
		Иначе	
			Результат = Результат + Стр;
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеДополнительногоПараметра(ИмяПараметра) Экспорт
	Значение = Неопределено;
	Объект.ДополнительныеПараметры.Свойство(ИмяПараметра,Значение);
	
	Возврат Значение;
КонецФункции	

&НаКлиенте
Процедура УстановитьЗначениеДополнительногоПараметра(ИмяПараметра,Значение) Экспорт
	Объект.ДополнительныеПараметры.Вставить(ИмяПараметра,Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтрокуСтатуса(Стр) Экспорт
	Если НЕ Элементы.СтрокаСтатуса.Видимость Тогда
		Элементы.СтрокаСтатуса.Видимость = Истина;
	КонецЕсли;	 
	
	СтрокаСтатуса = Стр;
КонецПроцедуры

// Позволяет сделать поиск в строке ""ПроверяемаяСтрока"" подстроки ""Шаблон""
// при этом подстрока ""Шаблон"" может содержать символы *
// например СтрокаСоответствуетШаблону(""Привет"",""*вет"")
&НаКлиенте
Функция СтрокаСоответствуетШаблону(Знач ПроверяемаяСтрока, Знач Шаблон) Экспорт
	Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон);
	
	Если ЭтоLinux Тогда
		Возврат ПроверитьСтрокуRexExpLinux(ПроверяемаяСтрока,Шаблон);
	Иначе	
		Если Регулярка = Неопределено Тогда
			Регулярка = Новый COMОбъект(""VBScript.RegExp"");
		КонецЕсли;
		
		Регулярка.Global = Истина;
		Регулярка.Multiline = Истина;
		// для VBScript.RegExp явно указываем что есть начало и конец строки
		Шаблон            = ""^"" + Шаблон + ""$"";
		Регулярка.Pattern = Шаблон;
		Возврат Регулярка.Test(ПроверяемаяСтрока);
	КонецЕсли;	 
КонецФункции 

// Делает склейку параметров в одну строку, если они переданы.
&НаКлиенте
Процедура СоединитьСтрокиЕслиЭтоВозможно(Стр,Стр2,Стр3,Стр4,Стр5,Стр6,Стр7) Экспорт
	Если ТипЗнч(Стр) = Тип(""Массив"") Тогда
		Массив = Стр;
		Стр = """";
		НомерСтроки = 0;
		Для Каждого Элем Из Массив Цикл
			НомерСтроки = НомерСтроки + 1;
			Стр = Стр + Элем.Кол1;
			Если НомерСтроки < Массив.Количество() Тогда
				Стр = Стр + Символы.ПС;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если Стр2 <> Неопределено Тогда
		Стр = Стр + Стр2;
	КонецЕсли;	 
	Если Стр3 <> Неопределено Тогда
		Стр = Стр + Стр3;
	КонецЕсли;	 
	Если Стр4 <> Неопределено Тогда
		Стр = Стр + Стр4;
	КонецЕсли;	 
	Если Стр5 <> Неопределено Тогда
		Стр = Стр + Стр5;
	КонецЕсли;	 
	Если Стр6 <> Неопределено Тогда
		Стр = Стр + Стр6;
	КонецЕсли;	 
	Если Стр7 <> Неопределено Тогда
		Стр = Стр + Стр7;
	КонецЕсли;	 
КонецПроцедуры

// Позволяет указать значения таблиц или макетов, которые потом можно будет сравнить между собой
// также эти значения потом будут прикреплены к отчету Allure
// Если Тип = Неопределено, тогда считается, что переданы таблицы
&НаКлиенте
Процедура УстановитьЗначенияТаблицДляСравнения(Эталон,ТекущееЗначение,Тип = Неопределено) Экспорт
	Если Тип = Неопределено Тогда
		ГлобальныеЗначенияТаблиц.Вставить(""ТаблицаЭталон"",Эталон);
		ГлобальныеЗначенияТаблиц.Вставить(""ТаблицаТекущееЗначение"",ТекущееЗначение);
	Иначе
		ЗначениеЭталон = Новый Структура;
		ЗначениеЭталон.Вставить(""Тип"",Тип);
		ЗначениеЭталон.Вставить(""Значение"",Эталон);
		ГлобальныеЗначенияТаблиц.Вставить(""ТаблицаЭталон"",ЗначениеЭталон);
		
		ЗначениеТекущееЗначение = Новый Структура;
		ЗначениеТекущееЗначение.Вставить(""Тип"",Тип);
		ЗначениеТекущееЗначение.Вставить(""Значение"",ТекущееЗначение);
		ГлобальныеЗначенияТаблиц.Вставить(""ТаблицаТекущееЗначение"",ЗначениеТекущееЗначение);
	КонецЕсли;	 
КонецПроцедуры

// Преобразует табличный документ в массив структур
// в первой строке макета должна быть строка с именами колонок
&НаКлиенте
Функция ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДок) Экспорт
	Массив = Новый Массив;
	
	Если Ложь Тогда
		ТабДок = Новый ТабличныйДокумент;
	КонецЕсли;	 
	
	Если ТабДок.ВысотаТаблицы = 0 Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	СтрокаТаблицы = Новый Структура;
	Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
		СтрокаТаблицы.Вставить(""Кол"" + Формат(Ррр, ""ЧГ=; ЧН=0""),ТабДок.Область(1,Ррр,1,Ррр).Текст);
	КонецЦикла;	
	Массив.Добавить(СтрокаТаблицы);
	
	Для Ккк = 2 По ТабДок.ВысотаТаблицы Цикл
		СтрокаТаблицы = Новый Структура;
		Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
			СтрокаТаблицы.Вставить(""Кол"" + Формат(Ррр, ""ЧГ=; ЧН=0""),ТабДок.Область(Ккк,Ррр,Ккк,Ррр).Текст);
		КонецЦикла;	
		Массив.Добавить(СтрокаТаблицы);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	 

// Прикрепляет к строке сценария макет
&НаКлиенте
Процедура ПрикрепитьМакетКСценарию(Макет,Имя) Экспорт
	Если ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество()-1 Тогда
		ВызватьИсключение Локализовать(""Не смог получить строку сценария."");
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено,ИДСтрокиСценария,Истина);
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СтрокаСценария = Неопределено Тогда
		ВызватьИсключение Локализовать(""Не смог получить строку сценария."");
	КонецЕсли;	 
	
	Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	ПроизвольныеЗначения = СтрокаСценария.ПроизвольныеЗначения;
	Если Не ПроизвольныеЗначения.Свойство(""ПрикрепленныеМакеты"") Тогда
		ПроизвольныеЗначения.Вставить(""ПрикрепленныеМакеты"",Новый Массив);
	КонецЕсли;	 
	
	ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;
	ПрикрепленныеМакеты.Добавить(Новый Структура(""Макет,Имя"",Макет,Имя));
КонецПроцедуры 

// Прикрепляет произвольный файл к строке сценария
//  Параметры
//
//  ДвоичныеДанныеФайла - двоичные данные файла, который нужно прикрепить
//  ИмяФайла - имя файла с расширением
//  УникальностьИмени - флаг того, что надо добавлять уникальную строку к имени файла
&НаКлиенте
Процедура ПрикрепитьФайлКСценарию(ДвоичныеДанныеФайла,ИмяФайла,УникальностьИмени = Истина) Экспорт
	Если ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество()-1 Тогда
		ВызватьИсключение Локализовать(""Не смог получить строку сценария."");
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено,ИДСтрокиСценария,Истина);
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СтрокаСценария = Неопределено Тогда
		ВызватьИсключение Локализовать(""Не смог получить строку сценария."");
	КонецЕсли;	 
	
	Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	ПроизвольныеЗначения = СтрокаСценария.ПроизвольныеЗначения;
	Если Не ПроизвольныеЗначения.Свойство(""ПрикрепленныеФайлы"") Тогда
		ПроизвольныеЗначения.Вставить(""ПрикрепленныеФайлы"",Новый Массив);
	КонецЕсли;	 
	
	ПрикрепленныеФайлы = ПроизвольныеЗначения.ПрикрепленныеФайлы;
	ПрикрепленныеФайлы.Добавить(Новый Структура(""ДвоичныеДанныеФайла,ИмяФайла,УникальностьИмени"",ДвоичныеДанныеФайла,ИмяФайла,УникальностьИмени));
КонецПроцедуры 

//Добавляет произвольный файл к шагу сценария
&НаКлиенте
Процедура ДобавитьФайлКШагу(ИмяФайла, ТипФайла = ""text/plain"") Экспорт
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	АдресСнипета = ТекШаг.АдресСнипета;
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	
	Если НЕ РезультатПрохожденияТестовСценария.Свойство(""СписокФайлов"") Тогда
		СписокФайлов = Новый Массив();
		РезультатПрохожденияТестовСценария.Вставить(""СписокФайлов"", СписокФайлов);
	Иначе
		СписокФайлов = РезультатПрохожденияТестовСценария.СписокФайлов;
	КонецЕсли;
	
	ФайлИмяФайла = Новый Файл(ИмяФайла);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ТекстСообщения = Локализовать(""Не найден файл: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СтруктураФайл = Новый Структура;
	СтруктураФайл.Вставить(""ИмяФайла"", ФайлИмяФайла.Имя);
	СтруктураФайл.Вставить(""ДвоичныеДанные"", Новый ДвоичныеДанные(ИмяФайла));
	СтруктураФайл.Вставить(""ТипФайла"", ТипФайла);
	СписокФайлов.Добавить(СтруктураФайл);
	
КонецПроцедуры

// Сравнивает строки без учета регистра, и некоторых спецсимволов
&НаКлиенте
Функция СтрокиРавны(Знач Стр1,Знач Стр2) Экспорт
	Стр1 = СтрЗаменить(Стр1,Символы.НПП,"" "");
	Стр2 = СтрЗаменить(Стр2,Символы.НПП,"" "");
	Возврат (НРег(Стр1) = НРег(Стр2)); 
КонецФункции	 

// Проверяет что строка соответствует панели разделов
&НаКлиенте
Функция ЭтоПанельРазделов(Стр) Экспорт
	Если НРег(Стр) = НРег(""Панель разделов"") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Section panel"") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Panoul compartimentelor"") Тогда //ro
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// проверяет что строка соответствует панели открытых
&НаКлиенте
Функция ЭтоПанельОткрытых(Стр) Экспорт
	Если НРег(Стр) = НРег(""Панель открытых"") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Open items panel"") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Opened items panel"") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Panoul celor deschise"") Тогда //ro
		Возврат Истина;
	КонецЕсли;	 
	                         
	Возврат Ложь;
КонецФункции	 

// проверяет что строка соответствует меню функций
&НаКлиенте
Функция ЭтоМенюФункций(Стр) Экспорт
	Если НРег(Стр) = НРег(""Меню функций"") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Панель функций текущего раздела"") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Functions menu"") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Function menu"") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег(""Panoul funcțiilor secțiunii curente"") Тогда //ro
		Возврат Истина;
	КонецЕсли;	      
	
	Возврат Ложь;
КонецФункции	 

// возвращает признак того, что надо шаги выполнять в безопасно
&НаКлиенте
Функция БезопасноеВыполнениеШагов() Экспорт
	Возврат Объект.БезопасноеВыполнениеШагов; 
КонецФункции	 

// Возвращает значение переменной ИмяУправляющиегоФайлаSikuliXСервер
&НаКлиенте
Функция ИмяУправляющиегоФайлаSikuliXСервер() Экспорт
	Возврат ИмяУправляющиегоФайлаSikuliXСервер; 
КонецФункции	 

// возвращает значение переменной ИмяФайлаВыводаКонсолиSikuliXСервер
&НаКлиенте
Функция ИмяФайлаВыводаКонсолиSikuliXСервер() Экспорт
	Возврат ИмяФайлаВыводаКонсолиSikuliXСервер; 
КонецФункции	 

&НаСервере
Процедура ЯВыполняюКодВстроенногоЯзыкаНаСервереСервер(Текст) Экспорт
	Выполнить(Текст);
КонецПроцедуры 

#КонецОбласти

#Область РаботаСПеременнымиКонтекста

//Устаревшее
&НаКлиенте
Процедура СохранитьЗначениеВКонтекст(ИмяПеременной,Значение) Экспорт
	Если НЕ ОбъектКонтекст.Свойство(""СохраняемыеЗначения"") Тогда
		ОбъектКонтекст.Вставить(""СохраняемыеЗначения"",Новый Соответствие);
	КонецЕсли;	 
	
	ОбъектКонтекст.СохраняемыеЗначения.Вставить(ИмяПеременной,Значение);
КонецПроцедуры

//Устаревшее
&НаКлиенте
Процедура СохранитьЗначениеВКонтекстСохраняемый(Знач ИмяПеременной,Значение) Экспорт
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""СохраняемыеЗначения"") Тогда
		ОбъектКонтекстСохраняемый.Вставить(""СохраняемыеЗначения"",Новый Соответствие);
	КонецЕсли;	 
	
	// уберём служебные символы
	Если Лев(ИмяПеременной,2) = ""$$"" И Прав(ИмяПеременной,2) = ""$$"" Тогда
		ИмяПеременной = Сред(ИмяПеременной,3,СтрДлина(ИмяПеременной)-4);
	КонецЕсли;	 
	
	Если Лев(ИмяПеременной,1) = ""$"" И Прав(ИмяПеременной,1) = ""$"" Тогда
		ИмяПеременной = Сред(ИмяПеременной,2,СтрДлина(ИмяПеременной)-2);
	КонецЕсли;	 
	
	ОбъектКонтекстСохраняемый.СохраняемыеЗначения.Вставить(ИмяПеременной,Значение);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной) Экспорт
	Попытка
		Если ОбъектКонтекст.Свойство(ИмяПеременной) Тогда
			Возврат ОбъектКонтекст[ИмяПеременной];
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если НЕ ОбъектКонтекст.Свойство(""СохраняемыеЗначения"") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ОбъектКонтекст.СохраняемыеЗначения[ИмяПеременной];
КонецФункции

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной) Экспорт
	
	Попытка
		Если ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной) Тогда
			Возврат ОбъектКонтекстСохраняемый[ИмяПеременной];
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""СохраняемыеЗначения"") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.СохраняемыеЗначения[ИмяПеременной];

КонецФункции

// заменяет в ячейках макета значения вида $Переменная$ на значение из Контекста
&НаКлиенте
Процедура ВычислитьВМакетеЗначенияКонтекста(ТабДок) Экспорт
	Если Ложь Тогда
		ТабДок = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Если ТабДок.НайтиТекст(""$"") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для НомерСтроки = 1 По ТабДок.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По ТабДок.ШиринаТаблицы Цикл
			ТекстЯчейки = ТабДок.Область(НомерСтроки,НомерКолонки,НомерСтроки,НомерКолонки).Текст;
			ТабДок.Область(НомерСтроки,НомерКолонки,НомерСтроки,НомерКолонки).Текст = ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(ТекстЯчейки,Истина);
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры 

// Сохраняет значение в Контекст или в КонтекстСохраняемый
// ИмяПеременной - Строка
// Значение - ПроизвольноеЗначение
//
// Допустимо передавать значения вида:
// ИмяПеременной = будет сохранено в Контекст
// $ИмяПеременной$ = будет сохранено в Контекст
// $$ИмяПеременной$$ = будет сохранено в КонтекстСохраняемый
//
&НаКлиенте
Процедура СохранитьЗначениеПеременнойВКонтекст(Знач ИмяПеременной, Значение) Экспорт
	Если Найти(ИмяПеременной, ""$"") = 0 Тогда
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		ОбъектКонтекст.Вставить(ИмяПеременной, Значение);
		Возврат;
	КонецЕсли;

	Если Лев(ИмяПеременной, 2) = ""$$"" И Прав(ИмяПеременной, 2) = ""$$"" Тогда
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		ОбъектКонтекстСохраняемый.Вставить(ИмяПеременной, Значение);
		Возврат;
	КонецЕсли;

	Если Лев(ИмяПеременной, 1) = ""$"" И Прав(ИмяПеременной, 1) = ""$"" Тогда
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		ОбъектКонтекст.Вставить(ИмяПеременной, Значение);
		Возврат;
	КонецЕсли;
КонецПроцедуры 

// Получает значение из Контекст или из КонтекстСохраняемый
//ИмяПеременной - Строка
//Значение - ПроизвольноеЗначение
//
// Допустимо передавать значения вида:
// ИмяПеременной = будет получено из Контекст
// $ИмяПеременной$ = будет получено из Контекст
// $$ИмяПеременной$$ = будет получено из КонтекстСохраняемый
&НаКлиенте
Функция ПолучитьЗначениеПеременнойИзКонтекста(Знач ИмяПеременной) Экспорт
	Если Найти(ИмяПеременной,""$"") = 0 Тогда
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		Если Не ОбъектКонтекст.Свойство(ИмяПеременной) Тогда
			ТекстСообщения = Локализовать(""Переменная <%1> не найдена."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяПеременной);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Возврат ОбъектКонтекст[ИмяПеременной];
	КонецЕсли;	
	
	Возврат ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяПеременной); 
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

//Снимает скриншот и сохраняет его по указанному пути
&НаКлиенте
Процедура СделатьСкриншот(ИмяФайла) Экспорт
	
	Если Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов Тогда
		ДвоичныеДанные = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокЭкрана(Объект.СпособСнятияСкриншотовВнешнейКомпонентой);
		Если ТипЗнч(ДвоичныеДанные) = Тип(""ДвоичныеДанные"") Тогда 
			ДвоичныеДанные.Записать(ИмяФайла);
			Возврат;
		Иначе
			ТекстСообщения = Локализовать(""Ошибка при снятии скриншота внешней компонентой"");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КомандаСделатьСкриншот) Тогда
		ТекстСообщения = Локализовать(""Не указана команада для выполнения скриншотов. Например <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",""""""C:\Program Files (x86)\IrfanView\i_view32.exe"""" /capture=1 /convert=""); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Команда = Объект.КомандаСделатьСкриншот + "" """""" + ИмяФайла + """""""";
    Попытка
    	Если ЭтоLinux Тогда
    		КомандаСистемы(Команда);
    	Иначе
    		ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
    	КонецЕсли;
    	Отладка(""Команда создания скриншота="" + Команда);

    	КоличествоПопыток = 0;
    	МаксКоличествоПопыток = 5;
    	Пока Истина Цикл
    		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
    			Прервать;
    		КонецЕсли;
    		sleep(1);
    		КоличествоПопыток = КоличествоПопыток + 1;
    		Если КоличествоПопыток > МаксКоличествоПопыток Тогда
    			Прервать;
    		КонецЕсли;
    	КонецЦикла;
    Исключение
    	ТекстСообщения = Локализовать(""Ошибка создания скриншота:%1 команда:%2"");
    	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ОписаниеОшибки());
    	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", Команда);
    	СообщитьПользователю(ТекстСообщения);
    КонецПопытки;
	
КонецПроцедуры

// Возвращает макет по переданному имени файла
&НаКлиенте
Функция ПолучитьМакетИзФайла(ИмяФайла) Экспорт
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат ПолучитьТабличныйДокументНаСервере(АдресВременногоХранилища);
КонецФункции	 

// Убирает из строки символы, запрещенные к использованию в файловой системе.
&НаКлиенте
Функция УбратьВсеЗапрещенныеСимволыИзИмениФайла(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр, ""@"", """");
	Стр = СтрЗаменить(Стр, ""\"", """");
	Стр = СтрЗаменить(Стр, ""/"", """");
	Стр = СтрЗаменить(Стр, "":"", """");
	Стр = СтрЗаменить(Стр, ""*"", """");
	Стр = СтрЗаменить(Стр, ""?"", """");
	Стр = СтрЗаменить(Стр, """""""", """");
	Стр = СтрЗаменить(Стр, ""<"", """");
	Стр = СтрЗаменить(Стр, "">"", """");
	Стр = СтрЗаменить(Стр, ""|"", """");
	Стр = СтрЗаменить(Стр, ""+"", """");
	Стр = СтрЗаменить(Стр, Символы.НПП, """");

	Стр = СтрЗаменить(Стр, ""%"", """");
	Стр = СтрЗаменить(Стр, ""!"", """");

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура УдалитьФайлыКомандаСистемы(Знач ИмяФайла) Экспорт
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		УдалитьФайлы(ИмяФайла);
	ИначеЕсли ЕстьПоддержкаАсинхронныхВызовов И ВозможнаОптимизацияРаботыСФайлами Тогда
		УдалитьФайлыСервер(ИмяФайла);
	Иначе
		Если ЭтоLinux Тогда 
			ИмяФайла = СтрЗаменить(ИмяФайла, ""\"", ""/"");
			КомандаСистемы(""rm -Rf """""" + ИмяФайла + """""""");
		Иначе 
			ИмяФайла = СтрЗаменить(ИмяФайла, ""/"", ""\"");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(""DEL /Q """""" + ИмяФайла + """""""");
		КонецЕсли;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКаталогКомандаСистемы(Знач ИмяФайла) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЭтоLinux Тогда 
			ИмяФайла = СтрЗаменить(ИмяФайла, ""\"", ""/"");
			КомандаСистемы(""rm -Rf """""" + ИмяФайла + """""""");
		Иначе 
			
			ИмяФайла = СтрЗаменить(ИмяФайла, ""/"", ""\"");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(""RD /S /Q """""" + ИмяФайла + """""""");
		КонецЕсли;

	Иначе
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьФайлКомандаСистемы(Знач Откуда, Знач Куда) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		//КомандаСистемы(""MOVE """""" + Откуда + """""" """""" + Куда + """""""");
		Если ЭтоLinux Тогда 
			Откуда = СтрЗаменить(Откуда, ""\"", ""/"");
			Куда   = СтрЗаменить(Куда, ""\"", ""/"");
			КомандаСистемы(""mv """""" + Откуда + """""" """""" + Куда + """""""");
		Иначе 
			
			Откуда = СтрЗаменить(Откуда, ""/"", ""\"");
			Куда   = СтрЗаменить(Куда, ""/"", ""\"");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(""MOVE """""" + Откуда + """""" """""" + Куда + """""""");
		КонецЕсли;
	Иначе
		ПереместитьФайл(Откуда, Куда);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ВремяИзмененияФайлаКомандаСистемы(ИмяФайла) Экспорт
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Файл = Новый Файл(ИмяФайла);
		Возврат Файл.ПолучитьВремяИзменения();
	ИначеЕсли ЕстьПоддержкаАсинхронныхВызовов И ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ФайлВремяИзмененияСервер(ИмяФайла); 
	Иначе
		Если ЭтоLinux Тогда
			ВызватьИсключение Локализовать(""TODO: Сделать для Linux."");
		КонецЕсли;	 
		
		Файл = Новый Файл(ИмяФайла);
		Путь = Файл.Путь;
		Если Прав(Путь, 1) = ""\"" ИЛИ Прав(Путь, 1) = ""/"" Тогда
			Путь = Лев(Путь, СтрДлина(Путь) - 1);
		КонецЕсли;	 
		ТолькоИмяФайла = Файл.Имя;
		
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");
		Команда = ""forfiles /p """""" + Путь + """""" /m """""" + ТолькоИмяФайла + """""" /c """"cmd /c echo @fdate @ftime"""" > """""" + ИмяФайлаЛога + """""""";
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, ""UTF-8"");
		ТекстЛога = СокрЛП(Текст.Прочитать());
		Текст.Закрыть();
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		
		ТекстЛога = СтрЗаменить(ТекстЛога, "" "", "":"");
		ТекстЛога = СтрЗаменить(ТекстЛога, ""."", "":"");
		МассивЗначений = РазложитьСтрокуВМассивПодстрок(ТекстЛога, "":"");
		
		День    = Число(МассивЗначений[0]);
		Месяц   = Число(МассивЗначений[1]);
		Год     = Число(МассивЗначений[2]);
		Часы    = Число(МассивЗначений[3]);
		Минуты  = Число(МассивЗначений[4]);
		Секунды = Число(МассивЗначений[5]);
		
		Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Процедура НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, ИскатьВПодкаталогах, ИскомоеИмяФайла = Неопределено) Экспорт
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Файлы = НайтиФайлы(Путь, ""*"", ИскатьВПодкаталогах);
		
		Для Каждого Файл Из Файлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				СписокКаталогов.Добавить(Файл, Файл.ПолноеИмя);
			Иначе	
				СписокФайлов.Добавить(Файл, Файл.ПолноеИмя);
			КонецЕсли;	 
		КонецЦикла;	
	ИначеЕсли ЕстьПоддержкаАсинхронныхВызовов И ВозможнаОптимизацияРаботыСФайлами Тогда
		МассивФайлов    = Новый Массив;
		МассивКаталогов = Новый Массив;
		НайтиФайлыСервер(Путь, МассивКаталогов, МассивФайлов, ИскатьВПодкаталогах, ИскомоеИмяФайла);
		Для Каждого Элем Из МассивФайлов Цикл
			СписокФайлов.Добавить(Новый Файл(Элем), Элем);
		КонецЦикла;	 
		Для Каждого Элем Из МассивКаталогов Цикл
			СписокКаталогов.Добавить(Новый Файл(Элем), Элем);
		КонецЦикла;	 
	Иначе
		// получение каталогов
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");

		Если ЭтоLinux Тогда
			КомандаКаталоги = ""find """""" + Путь + """""" ""+ ?(ИскатьВПодкаталогах, """", ""-maxdepth 1"") + ""-type d -name '*'"" + "" > """""" + ИмяФайлаЛога + """""""";
			КомандаСистемы(КомандаКаталоги);	
		Иначе
			
			КомандаКаталоги = ""DIR """""" + Путь + """""" /A:D /B "" + ?(ИскатьВПодкаталогах, ""/S"", """") + "" > """""" + ИмяФайлаЛога + """""""";
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаКаталоги);
		КонецЕсли;	 
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, ""UTF-8"");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если НЕ ИскатьВПодкаталогах Тогда
				Стр = ДополнитьСлешВПуть(Путь) + Стр;
			КонецЕсли;	 
			СписокКаталогов.Добавить(Новый Файл(Стр), Стр);
		КонецЦикла;	
		
		Текст.Закрыть();
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		
		// получение файлов
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");
		
		Если ЭтоLinux Тогда
			КомандаКаталоги = ""find """""" + Путь + """""" ""+ ?(ИскатьВПодкаталогах, """", ""-maxdepth 1"") + ""-type f -name '*'"" + "" > """""" + ИмяФайлаЛога + """""""";
			КомандаСистемы(КомандаКаталоги);	
		Иначе
			КомандаФайлы = ""DIR """""" + Путь + """""" /A:-D /B "" + ?(ИскатьВПодкаталогах, ""/S"", """") + "" > """""" + ИмяФайлаЛога + """""""";
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаФайлы);
		КонецЕсли;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, ""UTF-8"");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если НЕ ИскатьВПодкаталогах Тогда
				Стр = ДополнитьСлешВПуть(Путь) + Стр;
			КонецЕсли;	 
			СписокФайлов.Добавить(Новый Файл(Стр), Стр);
		КонецЦикла;	
		
		Текст.Закрыть();
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	КонецЕсли;	 
	
	Если ИскомоеИмяФайла <> Неопределено Тогда
		СписокФайловНовый = Новый СписокЗначений;
		
		Для Каждого ЭлементСписка Из СписокФайлов Цикл
			Если НРег(ЭлементСписка.Значение.Имя) = НРег(ИскомоеИмяФайла) Тогда
				СписокФайловНовый.Добавить(ЭлементСписка.Значение);
			КонецЕсли;	 
		КонецЦикла;	 
		
		СписокФайлов = СписокФайловНовый;
	КонецЕсли;	 
	
КонецПроцедуры

// Делает фильтр по расширению для списка файлов
&НаКлиенте
Процедура ОставитьТолькоФайлыСРасширением(СписокФайлов, Расширение) Экспорт
	НовыйСписок = Новый СписокЗначений;
	Для Каждого Элем Из СписокФайлов Цикл
		Если НРег(Элем.Значение.Расширение) = НРег(Расширение) Тогда
			НовыйСписок.Добавить(Элем.Значение, Элем.Значение.ПолноеИмя)
		КонецЕсли;
	КонецЦикла;

	СписокФайлов = НовыйСписок;
КонецПроцедуры 


&НаКлиенте
Процедура КопироватьКаталогКомандаСистемы(Знач Откуда, Знач Куда)
	Куда = СтрЗаменить(Куда, ""\"", ""/"");
	Если Прав(Куда, 1) = ""/"" Тогда
		Куда = Лев(Куда, СтрДлина(Куда) - 1);
	КонецЕсли;	 
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(Откуда, СписокКаталогов, СписокФайлов, Истина);
	
	
	СписокКаталогов.СортироватьПоПредставлению();
	
	Позиция = СтрДлина(Откуда) + 1 + 1;
	
	Для Каждого Каталог Из СписокКаталогов Цикл
		ВтораяЧастьПути = СтрЗаменить(Сред(Каталог.Значение.ПолноеИмя, Позиция), ""\"", ""/"");
		НовыйКаталогИмя = Куда + ""/"" + ВтораяЧастьПути;
		
		СоздатьКаталогКомандаСистемы(НовыйКаталогИмя);
	КонецЦикла;	
	
	Для Каждого ЭлементФайл Из СписокФайлов Цикл
		Файл            = ЭлементФайл.Значение;
		ВтораяЧастьПути = СтрЗаменить(Сред(Файл.ПолноеИмя, Позиция), ""\"", ""/"");
		НовоеИмяФайла   = Куда + ""/"" + ВтораяЧастьПути;
		
		КопироватьФайлКомандаСистемы(Файл.ПолноеИмя, НовоеИмяФайла);
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлКомандаСистемы(Знач Откуда, Знач Куда) Экспорт
	
    Если ЕстьПоддержкаАсинхронныхВызовов Тогда
        Команда = """";
        Если ЭтоLinux Тогда 
            Откуда = СтрЗаменить(Откуда, ""\"", ""/"");
            Куда   = СтрЗаменить(Куда, ""\"", ""/"");
            Команда = ""cp -r """""" + Откуда + """""" """""" + Куда + """""""";
        Иначе 
            Откуда = СтрЗаменить(Откуда, ""/"", ""\"");
            Куда   = СтрЗаменить(Куда, ""/"", ""\"");
            Команда = ""COPY """""" + Откуда + """""" """""" + Куда + """""""";
        КонецЕсли;    

		Попытка
			Если ЭтоLinux Тогда
				КомандаСистемы(Команда);
			Иначе
				ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
			КонецЕсли;
		Исключение
			ТекстСообщения = Локализовать(""КопироватьФайлКомандаСистемы:%1 команда:%2"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ОписаниеОшибки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", Команда);
			СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	Иначе
		КопироватьФайл(Откуда, Куда);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогКомандаСистемы(Знач ИмяФайла, ДополнительныеПараметрыАсинхронности = Неопределено) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла, ""/"", ""\"");
		Если НЕ ЭтоLinux Тогда 
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(""MKDIR """""" + ИмяФайла + """""""");
		Иначе 
			ИмяФайла = СтрЗаменить(ИмяФайла, ""\"", ""/"");
			КомандаСистемы(""mkdir -p """""" + ИмяФайла + """""""");
		КонецЕсли;
	Иначе
		Попытка
			СоздатьКаталог(ИмяФайла);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ВызватьИсключение ТекстОшибки + Символы.ПС + ИмяФайла;
		КонецПопытки;
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Функция ФайлСуществуетКомандаСистемы(Знач ИмяФайла, ДопПараметры = Неопределено) Экспорт
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
		Возврат ФайлПроверкаСуществования.Существует();
	ИначеЕсли ЕстьПоддержкаАсинхронныхВызовов И ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ФайлСуществуетСервер(ИмяФайла);
	Иначе
		ИмяВременногоЛог = ПолучитьИмяВременногоФайла(""log"");
		
		Если НЕ ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, ""/"", ""\"");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(""(If Exist """""" + ИмяФайла + """""" (Echo yes) Else (Echo no)) > """""" + ИмяВременногоЛог + """""""");
		Иначе 
			ИмяВременнгоФайла = ПолучитьИмяВременногоФайла(""sh"");
			ЗТ = Новый ЗаписьТекста(ИмяВременнгоФайла, ""UTF-8"", Символы.ПС, Истина, Символы.ПС); 
			
			ЗТ.ЗаписатьСтроку(""#!/bin/sh"");

			Если Найти(ИмяФайла, "" "") > 0 Тогда
				ИмяФайла = СтрЗаменить(ИмяФайла, "" "", ""\ "");
			КонецЕсли;

			СтрокаКоманды = ""sh -c 'test -f "" + ИмяФайла + "" && echo yes || echo no' > "" + ИмяВременногоЛог + """";
			ЗТ.ЗаписатьСтроку(СтрокаКоманды); 
			СтрокаКоманды = ""sh -c 'test -d "" + ИмяФайла + "" && echo yes || echo no' >> "" + ИмяВременногоЛог + """";
			ЗТ.ЗаписатьСтроку(СтрокаКоманды);
			ЗТ.Закрыть();
			
			КомандаСистемы(""sh "" + ИмяВременнгоФайла);
		КонецЕсли;
		
		
		ФайлСуществует = Ложь;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоЛог, ""UTF-8"");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если Стр = ""yes"" Тогда
				ФайлСуществует = Истина;
			КонецЕсли;	 
		КонецЦикла;	
		Текст.Закрыть();
		
		Возврат ФайлСуществует;
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Процедура ОчиститьСодержимоеКаталога(Знач ИмяКаталога, ТипФайлов = ""*.*"") Экспорт
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяКаталога, ""ОчиститьСодержимоеКаталога"") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если СтрДлина(ИмяКаталога) <= 3 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Найти(Прав(ИмяКаталога, 1), ""\/"") > 0 Тогда
		ИмяКаталога = Лев(ИмяКаталога, СтрДлина(ИмяКаталога) - 1);
	КонецЕсли;	 
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		УдалитьКаталогКомандаСистемы(ИмяКаталога);
		СоздатьКаталогКомандаСистемы(ИмяКаталога);
	Иначе	
		МассивФайлов = НайтиФайлы(ИмяКаталога, ТипФайлов, Ложь);
		Для каждого Файл Из МассивФайлов Цикл
			Попытка
				УдалитьФайлыКомандаСистемы(Файл.ПолноеИмя);
			Исключение
				ТекстСообщения = Локализовать(""Не смог удалить файл %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Файл.ПолноеИмя);
				СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;	 
	
КонецПроцедуры

// Возвращает файл с картинкой
// ИмяФайла  - Строка - путь к файлу
//
&НаКлиенте
Функция ПолучитьФайлКартинки(ИмяФайла) Экспорт
	Путь = Объект.КаталогПроекта;
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		ТекстСообщения = Локализовать(""Не указано значение настройки Vanessa-automation: <КаталогПроекта>."");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, Истина, ИмяФайла	+ "".png"");
	Если СписокФайлов.Количество() = 0 Тогда
		ТекстСообщения = Локализовать(""В каталоге <%1> не найден файл <%2>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Путь);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ИмяФайла);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Если СписокФайлов.Количество() > 1 Тогда
		ТекстСообщения = Локализовать(""В каталоге <%1> найдено больше одного файла <%2>: %3."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Путь);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", СписокФайлов.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Возврат СписокФайлов[0].Значение;
КонецФункции	 

// Возвращает файл с картинкой
// ИмяФайла  - Строка - путь к файлу
//
&НаКлиенте
Функция ПолучитьФайлКартинкиИзТекста(Текст, ДанныеПрофиля = Неопределено) Экспорт
	Путь = Объект.КаталогДляГенерацииКартинок;
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		ТекстСообщения = Локализовать(""Не указано значение настройки Vanessa-automation: <КаталогДляГенерацииКартинок>."");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Шрифт = ""arial"";
	ЦветФона = ""white"";
	ЦветШрифта = ""black"";
	Размер = 13;
	
	Если ТипЗнч(ДанныеПрофиля) = Тип(""Структура"") Тогда
		Шрифт = ДанныеПрофиля.Шрифт;
		ЦветФона = ДанныеПрофиля.ЦветФона;
		ЦветШрифта = ДанныеПрофиля.ЦветШрифта;
		Размер = ДанныеПрофиля.Размер;
	ИначеЕсли ТипЗнч(ОбъектКонтекстСохраняемый) = Тип(""Структура"") Тогда
		Если ОбъектКонтекстСохраняемый.Свойство(""ОсновнойПрофильПоискаКартинкиСТекстом"") Тогда
			ОсновнойПрофильПоискаКартинкиСТекстом = ОбъектКонтекстСохраняемый.ОсновнойПрофильПоискаКартинкиСТекстом;
			Шрифт      = ОсновнойПрофильПоискаКартинкиСТекстом.Шрифт;
			ЦветФона   = ОсновнойПрофильПоискаКартинкиСТекстом.ЦветФона;
			ЦветШрифта = ОсновнойПрофильПоискаКартинкиСТекстом.ЦветШрифта;
			Размер     = ОсновнойПрофильПоискаКартинкиСТекстом.Размер;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяКартинки = Текст + ""_"" + Шрифт + ""_"" + ЦветФона + ""_"" + ЦветШрифта + ""_"" + Размер + "".png"";
	ИмяКартинки = СтрЗаменить(ИмяКартинки, "":"", КодСимвола("":""));
	ИмяКартинки = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяКартинки);
	ИмяКартинки = СтрЗаменить(ИмяКартинки, ""#"", """");
	ИмяКартинки = ДополнитьСлешВПуть(Путь) + ИмяКартинки;
	
	Если ФайлСуществуетКомандаСистемы(ИмяКартинки) Тогда
		Возврат Новый Файл(ИмяКартинки); 
	КонецЕсли;	 
	
	Команда = """""""" + Объект.ЗаписьВидеоКомандаConvert + """""" -background """"%1"""" -fill """"%2"""" -font """"%3"""" -pointsize %4 label:""""%5""""  """"%6"""""";
	Команда = СтрЗаменить(Команда, ""%1"", ЦветФона);
	Команда = СтрЗаменить(Команда, ""%2"", ЦветШрифта);
	Команда = СтрЗаменить(Команда, ""%3"", Шрифт);
	Команда = СтрЗаменить(Команда, ""%4"", Размер);
	Команда = СтрЗаменить(Команда, ""%5"", Текст);
	Команда = СтрЗаменить(Команда, ""%6"", ИмяКартинки);
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяКартинки) Тогда
		ТекстСообщения = Локализовать(""Не получилось создать картинку по тексту <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Текст);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Возврат Новый Файл(ИмяКартинки); 
КонецФункции	 

#КонецОбласти

#Область ЗагрузкаФич

&НаКлиенте
Процедура ЗагрузитьФичи(ДопПараметры = Неопределено) Экспорт
	ЗагрузитьПеременныеКонтекстаИзФайлаНастроек();	
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство(""КаталогФич"") Тогда
			Объект.КаталогФич = ДопПараметры.КаталогФич;
		КонецЕсли;
		
		Если ДопПараметры.Свойство(""УстановитьТекущийЭлемент"") Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;
		КонецЕсли;
	КонецЕсли;
	
	ФлагСценарииЗагружены                                           = Ложь;
	Объект.ИдетВыполнениеСценариев                                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	ОбновитьСтатусыКнопокСценариев();
	
	ДобавитьФичуВСписокНедавноЗагруженныхФич(Объект.КаталогФич);
	
	
	МассивДействий = Новый Массив;
	ДобавитьМассивСостоянийФайлов(МассивДействий);
	ДобавитьСканированиеКаталогов(МассивДействий);
	
	ПреобразоватьПутиБиблиотек();
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	
	ДопПараметры.Вставить(""ТекИдМассива"", 0);
	ДопПараметры.Вставить(""МассивДействий"", МассивДействий);
	ДопПараметры.Вставить(""НадоЗагрузитьФичи"", Истина);
	ДопПараметры.Вставить(""НадоГенерироватьEPF"", Ложь);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
	Иначе
		ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
		ЗагрузитьФичиПродолжение(ДопПараметры);
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область АвтоИнструкции

// Возвращает массив снипетов, которые создают видеовставку в автоинструкциях
&НаКлиенте
Функция ПолучитьМассивСнипетовВидеовставка() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(""обратитевнимание"");
	Массив.Добавить(""видеовставка"");
	
	Возврат Массив;
КонецФункции	

// Возвращает массив снипетов, которые особенно создают слайд с субтитрами в автоинструкциях
&НаКлиенте
Функция ПолучитьМассивСнипетовСубтитров() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(""текстсубтитров"");
	
	Возврат Массив;
КонецФункции	

// Возвращает массив снипетов, которые создают слайд из картинки
&НаКлиенте
Функция ПолучитьМассивСнипетовСлайдИзкартинки() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(""видеовставкакартинки"");
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура ЭтотШагНеНадоМасштабироватьВВидео() Экспорт
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		
		Если ТекИД_ШагаВМассиве >= 0 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			ТекШаг.Вставить(""МасштабироватьВВидео"", Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстИнструкции(Стр) Экспорт
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		
		Если ТекИД_ШагаВМассиве >= 0 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			ТекШаг.Вставить(""ТекстИнструкция"", Стр);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ЭтоПрерывающйВидеоШаг(ТекШаг) Экспорт
	Поз = Найти(ТекШаг.Снипет, ""("");
	Стр = НРег(Лев(ТекШаг.Снипет, Поз - 1));
	
	Если МассивСнипетовВидеовставкаИзТекста.Найти(Стр) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	

// Проверяет является ли этот шаг шагом, который создаёт видеовставку из текста.
&НаКлиенте
Функция ЭтоШагВидеовставкиИзТекста(ТекШаг) Экспорт
	Поз = Найти(ТекШаг.Снипет, ""("");
	Стр = НРег(Лев(ТекШаг.Снипет, Поз - 1));
	
	Если МассивСнипетовВидеовставкаИзТекста.Найти(Стр) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	

// Проверяет является ли этот шаг шагом, который создаёт видеовставку из картинки.
&НаКлиенте
Функция ЭтоШагВидеовставкиКартинки(ТекШаг) Экспорт
	Поз = Найти(ТекШаг.Снипет, ""("");
	Стр = НРег(Лев(ТекШаг.Снипет, Поз - 1));
	
	МассивСнипетовСлайдИзкартинки = ПолучитьМассивСнипетовСлайдИзкартинки();
	
	Если МассивСнипетовСлайдИзкартинки.Найти(Стр) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	

// рисует рамку вокруг активного элемента формы
&НаКлиенте
Процедура ПодсветитьАктивноеОкно(Длительность, ЖдатьЗавершения = Истина) Экспорт
	Если Не Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКПриложению = Объект.КаталогИнструментов + ""\tools\VideoTools\FrameShow.exe"";
	Если Не ФайлСуществуетКомандаСистемы(ПутьКПриложению) Тогда
		Возврат;
	КонецЕсли;	 
	
	Путь = ПутьКПриложению + "" -showframeofactivecontrol timeshowframe="" + СтрЗаменить(СтрЗаменить(Формат(Длительность, ""ND=10; NGS=*""), Символы.НПП, """"), ""*"", """");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЖдатьЗавершения Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь);	
		Иначе	
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, 0);	
		КонецЕсли;	 
	Иначе
		ЗапуститьПриложение(Путь, , ЖдатьЗавершения);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивныйЭлементФормы() Экспорт
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПодсветитьАктивноеОкно(2000, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивныйЭлементФормыHTML() Экспорт
	Если Не Объект.СоздаватьИнструкциюHTML И Не Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	 
	
	ПодсветитьАктивноеОкно(20000, Ложь);
	
	Sleep(3);
КонецПроцедуры

&НаКлиенте
Процедура УбратьПодсветкуАктвиногоЭлемента() Экспорт
	TASKKILL(""FrameShow.exe"");
КонецПроцедуры

// перемещает курсор у активному объекту
&НаКлиенте
Процедура СделатьДействияПриЗаписиИнструкции(ПарамСтр = """")Экспорт
	СделатьДействияПриЗаписиHTML(ПарамСтр);
	СделатьДействияПриЗаписиВидео(ПарамСтр);
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиВидео(ПарамСтр = """") Экспорт
	Если Объект.ИдетЗаписьВидео Тогда
		Если ПарамСтр = ""толькофрейм"" Тогда
			ПодсветитьАктивныйЭлементФормы();
		ИначеЕсли ПарамСтр = ""толькомышь"" Тогда
			ПереместитьКурсорМышиКАктивномуОбъекту();
		ИначеЕсли ПарамСтр = ""толькоскриншот"" Тогда
		Иначе	
			ПереместитьКурсорМышиКАктивномуОбъекту();
			ПодсветитьАктивныйЭлементФормы();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиHTML(ПарамСтр = """") Экспорт
	Если Объект.СоздаватьИнструкциюHTML ИЛИ Объект.СоздаватьИнструкциюMarkdown Тогда
		Попытка
			Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			Если ТекШаг.ЭтоШагКонтекста Тогда
				Возврат;
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если ПарамСтр = ""толькофрейм"" Тогда
			ПодсветитьАктивныйЭлементФормыHTML();
		ИначеЕсли ПарамСтр = ""толькомышь"" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
		ИначеЕсли ПарамСтр = ""толькоскриншот"" Тогда
		Иначе	
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
			ПодсветитьАктивныйЭлементФормыHTML();
		КонецЕсли;	 
		
		ДобавитьВЛогИнструкцииHTMLВыполненияШага();
		СкриншотСделанВСценарии = Истина;
		УбратьПодсветкуАктвиногоЭлемента();
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если ПарамСтр = ""толькофрейм"" Тогда
			ПодсветитьАктивныйЭлементФормыHTML();
		ИначеЕсли ПарамСтр = ""толькомышь"" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
		ИначеЕсли ПарамСтр = ""толькоскриншот"" Тогда
		Иначе	
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
			ПодсветитьАктивныйЭлементФормыHTML();
		КонецЕсли;	 
		
		ДобавитьВЛогИнструкцииMarkdownВыполненияШага();
		СкриншотСделанВСценарии = Истина;
		УбратьПодсветкуАктвиногоЭлемента();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОкну(Скорость, ЖдатьЗавершения = Истина) Экспорт
	Если Не Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКПриложению = Объект.КаталогИнструментов + ""\tools\VideoTools\MouseMove.exe"";
	Если Не ФайлСуществуетКомандаСистемы(ПутьКПриложению) Тогда
		Возврат;
	КонецЕсли;	 
	
	Путь = ПутьКПриложению + "" -movemousetoactivecontrol mousespeed="" + СтрЗаменить(Скорость, Символы.НПП, """");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЖдатьЗавершения Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь);	
		Иначе	
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, 0);	
		КонецЕсли;	 
	Иначе
		ЗапуститьПриложение(Путь, , ЖдатьЗавершения);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОбъекту() Экспорт
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышиКАктивномуОкну(500);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОбъектуHTML() Экспорт
	Если Не Объект.СоздаватьИнструкциюHTML И НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышиКАктивномуОкну(50);
КонецПроцедуры

#КонецОбласти

#Область Ассерты
// Портирован блок генерации данных из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
// взят релиз 3.0.0.3

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция Проверить(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
	Если Не ПроверяемоеЗначение Тогда
		ТекстСообщения = Локализовать(""Переданный параметр (%1) не является Истиной, а хотели, чтобы являлся. %2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Формат(ПроверяемоеЗначение, ""БЛ=ложь; БИ=истина""));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПроверяемоеЗначение, Ложь);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьИстину(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
	Возврат Проверить(ПроверяемоеЗначение, ДопСообщениеОшибки);
КонецФункции

// Проверяет, что переданное значение является Ложью.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьЛожь(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
	Если ПроверяемоеЗначение Тогда
		ТекстСообщения = Локализовать(""Переданный параметр (%1) не является Ложью, а хотели, чтобы являлся. %2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Формат(ПроверяемоеЗначение, ""БЛ=ложь; БИ=истина""));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(Ложь, Истина);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что переданная дата входит в переданный период дат.
//
// Параметры:
//   ПроверямыйПериод - СтандартныйПериод - Период дат, который будет использован для проверки.
//   ПроверяемаяДата   - Дата - Проверяемая дата.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьДату(ПроверямыйПериод,ПроверяемаяДата, ДопСообщениеОшибки = """") Экспорт
	Если ПроверяемаяДата < ПроверямыйПериод.ДатаНачала ИЛИ ПроверяемаяДата > ПроверямыйПериод.ДатаОкончания Тогда
		представление = ПредставлениеПериода(ПроверямыйПериод.ДатаНачала, ПроверямыйПериод.ДатаОкончания, ""ФП = Истина"");
		ТекстСообщения = Локализовать(""Переданный параметр (%1) не входит в период %2, а хотели, чтобы являлся. %3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Формат(ПроверяемаяДата, ""ДФ='dd.MM.yyyy HH:mm:ss'""));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", представление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПроверямыйПериод, ПроверяемаяДата);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции                                                           

// Проверяет равенство дат с точностью до двух секунд.
//
// Параметры:
//   ПерваяДата - Дата - Первая проверяемая дата.
//   ВтораяДата - Дата - Вторая проверяемая дата.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьРавенствоДатСТочностью2Секунды(ПерваяДата,ВтораяДата, ДопСообщениеОшибки = """") Экспорт
	Если ВтораяДата < ПерваяДата - 2 ИЛИ ВтораяДата > ПерваяДата + 2 Тогда
		ТекстСообщения = Локализовать(""Переданная дата (%1) не равна дате (%2) с точностью до 2-х секунд, а хотели, чтобы они равнялись. %3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Формат(ПерваяДата, ""ДФ='dd.MM.yyyy HH:mm:ss'""));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", Формат(ВтораяДата, ""ДФ='dd.MM.yyyy HH:mm:ss'""));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПерваяДата, ВтораяДата);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет равенство двух значений.
//
// Параметры:
//   ПервоеЗначение - Произвольный - Первое проверяемое значение.
//   ВтороеЗначение - Произвольный - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьРавенство(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = """") Экспорт
	Если ПервоеЗначение <> ВтороеЗначение Тогда
		ТекстСообщения = Локализовать(""Сравниваемые значения (%1; %2) не равны, а хотели, чтобы были равны.%3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", ФорматДСО(ДопСообщениеОшибки));

		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет неравенство двух значений.
//
// Параметры:
//   ПервоеЗначение - Произвольный - Первое проверяемое значение.
//   ВтороеЗначение - Произвольный - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьНеРавенство(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = """") Экспорт
	Если ПервоеЗначение = ВтороеЗначение Тогда
		ТекстСообщения = Локализовать(""Сравниваемые значения (%1; %2) равны, а хотели, чтобы были не равны.%3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", ФорматДСО(ДопСообщениеОшибки));

		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что второе значение больше первого.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьБольше(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = """") Экспорт
	Если ВтороеЗначение <= ПервоеЗначение Тогда
		ТекстСообщения = Локализовать(""Первый параметр (%1) меньше или равен второму (%2) а хотели, чтобы был больше.%3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", ФорматДСО(ДопСообщениеОшибки));

		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что второе значение больше или равено первому.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьБольшеИлиРавно(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = """") Экспорт
	Если ВтороеЗначение < ПервоеЗначение Тогда
		ТекстСообщения = Локализовать(""Первый параметр (%1) меньше второго (%2) а хотели, чтобы был больше или равен.%3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", ФорматДСО(ДопСообщениеОшибки));

		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что второе значение меньше первого.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьМеньше(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = """") Экспорт
	Если ВтороеЗначение >= ПервоеЗначение Тогда
		ТекстСообщения = Локализовать(""Значение <%1> больше или равно, чем <%2>, а ожидалось меньше. %3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что второе значение меньше или равное первому.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьМеньшеИлиРавно(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = """") Экспорт
	Если ВтороеЗначение > ПервоеЗначение Тогда
		ТекстСообщения = Локализовать(""Значение <%1> больше, чем <%2>, а ожидалось меньше или равно. %3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ВтороеЗначение); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ПервоеЗначение); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ФорматДСО(ДопСообщениеОшибки)); 
		ОбработатьAssertОжидаемоеРеальноеЗначение(ВтороеЗначение,ПервоеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецФункции

// Проверяет, что переданное выражение корректно выполнилось без ошибок.
//
// Параметры:
//   СтрокаАлгоритм - Строка - Строковое выражение, которое будет выполнено.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьВыполнилось(Знач СтрокаАлгоритм, Знач ДопСообщениеОшибки = """") Экспорт
	
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = Локализовать(""Хотели, чтобы алгоритм <%1> выполнился, а он упал с ошибкой <%2>. %3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаАлгоритм);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ПолученноеОписаниеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ФорматДСО(ДопСообщениеОшибки));
		
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина,Ложь);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	
КонецФункции

// Проверяет, что данный метод у объекта корректно выполнилось без ошибок.
//
// Параметры:
//   Объект - Произвольный - Объект, методо которого будет проверяться.
//   ИмяМетода - Строка - Имя метода.
//   ПараметрыИлиДопСообщениеОшибки - Строка, Массив
//       Если передн массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = """") Экспорт
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип(""Строка"") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		ПараметрыМетода = ПараметрыИлиДопСообщениеОшибки;
		Если ПараметрыМетода <> Неопределено Тогда
			ТипПараметра = ТипЗнч(ПараметрыМетода);
			Если ТипПараметра <> Тип(""Массив"") Тогда
				ТекстСообщения = Локализовать(""Ожидали, что вторым параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяМетода);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ТипПараметра);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(ПараметрыМетода,""ПараметрыМетода"");
	
	СтрокаВыполнения = ""Объект."" + ИмяМетода + ""("" + ПараметрыСтрока + "")"";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = Локализовать(""Хотели, чтобы код <%1> выполнился, а он упал с ошибкой <%2>. %3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаВыполнения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ПолученноеОписаниеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ФорматДСО(ДопСообщениеОшибки));
		
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	
КонецФункции

// Проверяет, что переданное выражение не выполнилось без ошибок.
//
// Параметры:
//   СтрокаАлгоритм - Строка - Строковое выражение, которое будет выполнено.
//   ОжидаемоеОписаниеОшибки - Строка - По этой строке будет выполнен поиск в тексте исключения. Если строка не найдена, тогда будет вызвано исключение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, Знач ОжидаемоеОписаниеОшибки = """", Знач ДопСообщениеОшибки = """") Экспорт

	НужноВызватьОшибку = Истина;
	
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ТекстСообщения = Локализовать(""Хотели, чтобы алгоритм <%1> упал с сообщением об ошибке <%2>, а он упал с сообщением <%3>.%4"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаАлгоритм);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ОжидаемоеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ПолученноеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%4"",ФорматДСО(ДопСообщениеОшибки));
			ОбработатьAssertОжидаемоеРеальноеЗначение(Истина,Ложь);
			
			Возврат ВызватьОшибкуПроверки(ТекстСообщения);
		КонецЕсли;
		НужноВызватьОшибку = Ложь;
	КонецПопытки;
	
	Если НужноВызватьОшибку Тогда
		ТекстСообщения = Локализовать(""Хотели, чтобы алгоритм <%1> упал, а он выполнился%2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаАлгоритм);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина,Ложь);
		
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;	 
	
КонецФункции

// Проверяет, что данный метод у объекта вызвал исключение при выполнении.
//
// Параметры:
//   Объект - Произвольный - Объект, методо которого будет проверяться.
//   ИмяМетода - Строка - Имя метода.
//   ПараметрыИлиОжидаемоеОписаниеОшибки - Строка, Массив
//       Если передн массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки - Строка - Строка, должна быть в строке исключения метода.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = """", Знач ДопСообщениеОшибки = """") Экспорт
	
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип(""Строка"") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		ПараметрыМетода = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если ПараметрыМетода <> Неопределено Тогда
			ТипПараметра = ТипЗнч(ПараметрыМетода);
			Если ТипПараметра <> Тип(""Массив"") Тогда
				ТекстСообщения = Локализовать(""Ожидали, что третьим параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяМетода);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ТипПараметра);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(ПараметрыМетода,""ПараметрыМетода"");
	
	СтрокаВыполнения = ""Объект."" + ИмяМетода + ""("" + ПараметрыСтрока + "")"";
	
	НужноВызватьОшибку = Истина;
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ТекстСообщения = Локализовать(""Хотели, чтобы код <%1> упал с сообщением об ошибке <%2>, а он упал с сообщением <%3>.%4"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаВыполнения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ОжидаемоеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ПолученноеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%4"",ФорматДСО(ДопСообщениеОшибки));
			
			Возврат ВызватьОшибкуПроверки(ТекстСообщения);
		КонецЕсли;
		НужноВызватьОшибку = Ложь;
	КонецПопытки;
	
	Если НужноВызватьОшибку Тогда
		ТекстСообщения = Локализовать(""Хотели, чтобы код <%1> упал, а он выполнился%2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаВыполнения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ФорматДСО(ДопСообщениеОшибки));
		
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;	 
	
КонецФункции

// Проверяет, что переданное значение не является пустым.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольное - Проверяемое на пустоту значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
	НужноВызватьОшибку = Истина;
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		НужноВызватьОшибку = Ложь;
	КонецПопытки;
	Если НЕ фЗаполнено И НужноВызватьОшибку Тогда
		ТекстСообщения = Локализовать(""Значение (%1) не заполнено, а ожидалась заполненность%2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ПроверяемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина,Ложь);
		
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецФункции

// Проверяет, что переданное значение является пустым.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольное - Проверяемое на пустоту значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
	ТекстСообщения = Локализовать(""Значение (%1) заполнено, а ожидалась незаполненность %2"");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ПроверяемоеЗначение);
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ФорматДСО(ДопСообщениеОшибки));
	
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина,Ложь);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	Если фЗаполнено Тогда
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина,Ложь);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецФункции

// Проверяет, что переданное значение нужного типа.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольное - Проверяемое значение.
//   ТипИлиИмяТипа       - Строка, Тип  - Тип значения.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьТип(ПроверяемоеЗначение, ТипИлиИмяТипа, ДопСообщениеОшибки = """") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип(""Строка"") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип(""Тип"") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ТекстСообщения = Локализовать(""ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <%1>%2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТипЗнч(ТипИлиИмяТипа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ФорматДСО(ДопСообщениеОшибки));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ТипЗнч(ПроверяемоеЗначение) <> искомыйТип Тогда
		ТекстСообщения = Локализовать(""Типом значения <%1> является <%2>, а ожидался тип <%3>.%4"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ПроверяемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ТипЗнч(ПроверяемоеЗначение));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ТипИлиИмяТипа);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%4"",ФорматДСО(ДопСообщениеОшибки));
		
		ОбработатьAssertОжидаемоеРеальноеЗначение(ТипЗнч(ПроверяемоеЗначение),искомыйТип);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что искомая подстрока входит в строку.
//
// Параметры:
//   Строка             - Строка - Строка, в которой происходит поиск.
//   ПодстрокаПоиска    - Строка - Строка, которая ищется.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьВхождение(Строка, ПодстрокаПоиска, ДопСообщениеОшибки = """") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = ""<"" + строка + "">"";
		Если СтрДлина(строка) > 20 Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = ""<"" + подстрокаПоиска + "">"";
		Если СтрДлина(подстрокаПоиска) > 20 Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		ТекстСообщения = Локализовать(""Искали в %1 подстроку %2, но не нашли.%3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ПредставлениеСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ПредставлениеПодСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(строка,подстрокаПоиска);
		
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что значение входит в коллекцию.
//
// Параметры:
//   Элемент            - Произвольный - Значение, которое будет искаться в коллекции.
//   Коллекция          - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений - Коллекция значений.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = """") Экспорт
	// Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип(""Массив"") ИЛИ ТипКоллекции = Тип(""ФиксированныйМассив"") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип(""Структура"") ИЛИ ТипКоллекции = Тип(""Соответствие"") 
		ИЛИ ТипКоллекции = Тип(""ФиксированнаяСтруктура"") ИЛИ ТипКоллекции = Тип(""ФиксированноеСоответствие"") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип(""СписокЗначений"") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		ТекстСообщения = Локализовать(""Утверждение <ПроверитьВхождениеВКоллекцию> не умеет работать с типом коллекции <%1>.%2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТипКоллекции);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ФорматДСО(ДопСообщениеОшибки));
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если Не Нашли Тогда
		ТекстСообщения = Локализовать(""Не нашли элемент <%1> в коллекции, а хотели, чтобы он был в коллекции.%2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Элемент);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ФорматДСО(ДопСообщениеОшибки));
		
		ОбработатьAssertОжидаемоеРеальноеЗначение(Элемент,Коллекция);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что запрос СКД не вызовет ошибок компиляции.
//
// Параметры:
//   ТекстЗапроса       - Строка - Текст запроса.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = """") Экспорт
	ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

// Проверяет, что табличные документы равны, игнорируя оформление.
//
// Параметры:
//   ТабДок1       - ТабличныйДокумент - Табличный документ.
//   ТабДок2       - ТабличныйДокумент - Табличный документ.
//   УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые колонки.
//   УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки  - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые строки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
&НаКлиенте
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = """",ДопПараметры = Неопределено) Экспорт
	ВычислятьЗначенияКонекстаВМакете = Истина;
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""ВычислятьЗначенияКонекстаВМакете"") Тогда
			ВычислятьЗначенияКонекстаВМакете = ДопПараметры.ВычислятьЗначенияКонекстаВМакете;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ВычислятьЗначенияКонекстаВМакете Тогда
		ВычислитьВМакетеЗначенияКонтекста(ТабДок1);
		ВычислитьВМакетеЗначенияКонтекста(ТабДок2);
	КонецЕсли;	 
	
	ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки,ДопПараметры);
КонецПроцедуры

// Проверяет, что табличные документы равны, игнорируя оформление.
//
// Параметры:
//   ТабДок1       - ТабличныйДокумент - Табличный документ.
//   ТабДок2       - ТабличныйДокумент - Табличный документ.
//   УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые колонки.
//   УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки  - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые строки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
&НаСервере
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = """",ДопПараметры = Неопределено) Экспорт
	Объект().ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки,ДопПараметры);
КонецПроцедуры

// Устанавливает ожидаемое и реальное значение для ассертов.
//
// Параметры:
//   ОжидаемоеЗначнеие - Произвольное - Ожидаемое значение.
//   РеальноеЗначение  - Произвольное - Реальное значение.
//
&НаКлиенте
Процедура ОбработатьAssertОжидаемоеРеальноеЗначение(ОжидаемоеЗначнеие,РеальноеЗначение) Экспорт
	ОшибкаAssert     = Истина;
	ЗначениеActual   = РеальноеЗначение;
	ЗначениеExpected = ОжидаемоеЗначнеие;
КонецПроцедуры 

// Проверяет, что таблицы равны.
//
// Параметры:
//   Таб1       - ТабличныйДокумент - Коллекция значений.
//   Таб2       - ТабличныйДокумент - Коллекция значений.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
&НаКлиенте
Процедура ПроверитьРавенствоТаблиц(Таб1, Таб2, ДопСообщениеОшибки = """",ДопПараметры) Экспорт
	ВызватьИсключение ""Ассерт не реализован при работе НаКлиенте."";
КонецПроцедуры 

#КонецОбласти

#Область РаботаСFixtures
// КоличествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи
// регистров сведений не считаются.
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения = Неопределено, ИмяКолонкиЗамещения = Неопределено) Экспорт
	Данные = СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
КонецФункции

&НаСервере
Функция УдалитьСозданныеДанныеСервер(Данные)
	Возврат Объект().УдалитьСозданныеДанные(Данные); 
КонецФункции	 

// Удаляет созданные данные
&НаКлиенте
Функция УдалитьСозданныеДанные(Данные) Экспорт
	Возврат УдалитьСозданныеДанныеСервер(Данные); 
КонецФункции

#КонецОбласти


#Область Плагины
// Плагины
// портировано из xUnitFor1C 4.1.1.0

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагинов(Знач НайденныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	ПомещаемыеФайлы = Новый Массив;
	ИдентификаторыПлагинов = Новый Соответствие;
	Для каждого ФайлОбработки Из НайденныеФайлы Цикл
		
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ФайлОбработки.ПолноеИмя);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
		ИдентификаторыПлагинов.Вставить(ФайлОбработки.ПолноеИмя, ИмяПлагина);
		
	КонецЦикла;
	
	Если ПомещаемыеФайлы.Количество() Тогда
		ПараметрыЗавершения = Новый Структура(""ИдентификаторыПлагинов"", ИдентификаторыПлагинов);
		Если Версия836ИлиВыше Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработчикПоискаКлиентскихПлагиновЗавершение"", ЭтаФорма, ПараметрыЗавершения);
			НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
		Иначе	
			ПомещенныеФайлы = Новый Массив;
			ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			ПодключитьНайденныеКлиентскиеПлагиныНаСервере(ПомещенныеФайлы, ИдентификаторыПлагинов);
		КонецЕсли;	 
	Иначе
		ПодключитьНайденныеКлиентскиеПлагиныНаСервере(Новый Массив, ИдентификаторыПлагинов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагиновЗавершение(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	ПодключитьНайденныеКлиентскиеПлагиныНаСервере(ПомещенныеФайлы, ДополнительныеПараметры.ИдентификаторыПлагинов);

КонецПроцедуры

&НаКлиенте
Функция Плагин(Знач Идентификатор) Экспорт
	
	ОбъектПлагин = Неопределено;
	ИдентификаторБезПрефиксовПодсистемы = Идентификатор; 
	Если КэшФормПлагинов.Свойство(ИдентификаторБезПрефиксовПодсистемы) Тогда
		ОбъектПлагин = КэшФормПлагинов[ИдентификаторБезПрефиксовПодсистемы];		
	КонецЕсли;
	
	Если ОбъектПлагин = Неопределено Тогда
		ТекстСообщения = Локализовать(""Неизвестный идентификатор плагина: <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Идентификатор);
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли ОбъектПлагин = Истина Тогда
		// загрузка клиентского плагина ""По требованию""
		ИмяПлагина = Объект.Плагины[Идентификатор];
		Попытка
			Если Объект.ВерсияПоставки = ""single"" Тогда
				ОбъектПлагин = ПолучитьФорму(ПолучитьИмяОбработкиVA() + "".Форма."" + ""Плагин_"" +  ИмяПлагина, , ЭтаФорма);
			Иначе	
				ОбъектПлагин = ПолучитьФорму(""ВнешняяОбработка."" + ИмяПлагина + "".Форма"", , ЭтаФорма);
			КонецЕсли;	 
			ОбъектПлагин.УстановитьСлужебныеПеременные(ЭтаФорма);
			КэшФормПлагинов.Вставить(ИдентификаторБезПрефиксовПодсистемы, ОбъектПлагин);
		Исключение
			// TODO добавить поведение при отсутствии управляемой формы у плагина
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;
	
	Возврат ОбъектПлагин;
КонецФункции

&НаКлиенте
Функция ПолучитьОписанияПлагиновПоТипу(Знач ТипПлагина) Экспорт
	Результат = ПолучитьОписанияПлагиновПоТипуНаСервере(ТипПлагина);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаПлагиновЗавершение() Экспорт
	
	ПодключитьОбработчикОжидания(""ПослеОткрытияФормы"", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДляАвтотестирования

// Позволяет получить доступ к переменной КонтекстСохраняемый тестируемой формы VA
&НаКлиенте
Функция ПолучитьКонтекстСохраняемый() Экспорт
	Возврат ОбъектКонтекстСохраняемый; 
КонецФункции	

&НаКлиенте
Процедура ПолучитьТекстШагаИзТекстаФичиЕслиОнТамЗадан(Текст,Шаг,Сценарий) Экспорт
	МассивТекстФичи = Сценарий.МассивТекстФичи;
	
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,""[autodoc.text]"",Шаг.НомерСтрокиВФиче);
	Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить(""ОбработкаПараметровШага"",Истина);
	ПараметрыОбработки.Вставить(""ВычислитьВыражения"",Истина);
	ПараметрыОбработки.Вставить(""Шаг"",Шаг);
	ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
	
	Текст = СлужебнаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура СделатьСлужебноеОповещение()Экспорт
	ПодключитьОбработчикОжидания(""ДляСлужебногоОповещения"", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСлужебныеБазыЕслиИхНет() Экспорт
	ИмяФайла = Объект.КаталогИнструментов + ""/tools/ServiceBases/v83ServiceBase836/1Cv8.1CD"";
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ИмяВременногоBat = ПолучитьИмяВременногоФайла(""bat"");
		
		ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, ""UTF-8"", , Истина); 
		ЗТ.ЗаписатьСтроку(""cd "" + Объект.КаталогИнструментов); 
		ЗТ.ЗаписатьСтроку(""oscript """""" + Объект.КаталогИнструментов + ""\tools\onescript\build-service-conf.os""""""); 
		ЗТ.Закрыть();
		
		
		
		Команда = ИмяВременногоBat;
		Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		Если Статус <> 0 Тогда
			ТекстСообщения = Локализовать(""Не смог создать сервисные базы. Статус=%1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Статус);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСеансСлужебнойБазы(Имябазы, ТипЗапуска, Ключи) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация; 
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	
	ПутьК1С = ""C:\Program Files (x86)\1cv8\%ВерсияПриложения%\bin\1cv8.exe"";
	ПутьК1С = СтрЗаменить(ПутьК1С, ""%ВерсияПриложения%"", ВерсияПриложения);
	
	СтрокаЗапускаКонфигуратора = """""""" + ПутьК1С + """""" "" + ТипЗапуска + "" /F"""""" + Объект.КаталогИнструментов
		 + ""\tools\ServiceBases\"" + Имябазы + """""" "" + Ключи;
	
	Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапускаКонфигуратора, 0); // не ждём окончания работы конфигуратора
	Если Статус <> 0 Тогда
		ТекстСообщения = Локализовать(""Не смог запустить конфигуратор. <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", СтрокаЗапускаКонфигуратора);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
		 
КонецПроцедуры

#КонецОбласти

#Область ПрочиеЭкспортные

&НаКлиенте
Функция СлужебныеДанныеДляПарсераФич() Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""СтрокаПробелов"",СтрокаПробелов);
	СтруктураПараметров.Вставить(""КешСнипетов"",КешСнипетов);
	Возврат СтруктураПараметров; 
КонецФункции	 

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	КопияДополнительныеПараметры = СкопироватьСтруктуру(ДополнительныеПараметры);
	КопияДополнительныеПараметры.Вставить(""ИмяФайла"",ВыбранноеИмяФайла);

	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища,ЕстьЗащитаОтОпасныхДействий,КопияДополнительныеПараметры);
	ДополнительныеПараметры.Вставить(""ИмяОбработки"", ИмяОбработки);
	
	Если ДополнительныеПараметры.Свойство(""ПроцедураПослеПодключения"") Тогда
		Выполнить(ДополнительныеПараметры.ПроцедураПослеПодключения);
	ИначеЕсли ДополнительныеПараметры.Свойство(""ПодключитьФормуВСлужебнуюПеременную"") Тогда
		СлужебнаяПеременная = ПолучитьФорму(""ВнешняяОбработка."" + ИмяОбработки + "".Форма."" + ДополнительныеПараметры.ИмяФормы,,,Истина);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПолучитьВремяИзмененияФайла(ВерсияФайла, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить(""ВерсияФайла"", ВерсияФайла);
	
	ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПроверкуЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить(""ЭтоКаталог"", ЭтоКаталог);
	
	Отладка(""ОбработчикНачатьПроверкуЭтоКаталог. "" + СтруктураФайла.ИмяПараметра + "": "" + СтруктураФайла.ИмяФайла + "". ЭтоКаталог="" + ЭтоКаталог);
	
	Если ЭтоКаталог Тогда
		ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
	Иначе	
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработчикНачатьПолучитьВремяИзмененияФайла"", ЭтаФорма, ДополнительныеПараметры);
		Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПроверкуСуществования(Существует, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить(""Существует"", Существует);
	
	Отладка(""ОбработчикНачатьПроверкуСуществования. "" + СтруктураФайла.ИмяПараметра + "": "" + СтруктураФайла.ИмяФайла + "". Существует="" + Существует);
	
	Если Существует Тогда
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработчикНачатьПроверкуЭтоКаталог"", ЭтаФорма, ДополнительныеПараметры);
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПолучитьВремяИзмененияФайлаМассив(ВерсияФайла, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	НайденныеФайлы = СтруктураФайла.НайденныеФайлы;
	
	ИДФайлаДляОбработки = СтруктураФайла.ИДФайлаДляОбработки;
	НайденныеФайлы[ИДФайлаДляОбработки].Вставить(""ВерсияФайла"", ВерсияФайла);
	
	ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	
	НайденныеФайлыМассив = Новый Массив;
	Для Каждого Элем Из НайденныеФайлы Цикл
		НайденныеФайлыМассив.Добавить(Новый Структура(""Файл"", Элем));
	КонецЦикла;	
	СтруктураФайла.Вставить(""НайденныеФайлы"", НайденныеФайлыМассив);
	
	СтруктураФайла.Вставить(""ИДФайлаДляОбработки"", - 1);
	ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры);
	
	
	//ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросНадоЛиЗагружатьФичи(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗагрузитьФичи();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаЗагрузкаФичи(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.КаталогФич = ВыбранныеФайлы[0];
	
	СохранитьНастройкиВХранилище(""КаталогФич"", Объект.КаталогФич ,ПараметрыДляСохраненияНастроек());
	
	// Очистим кеш при смене фичи
	КешStepDefinition.Очистить();
	
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
// TODO: Пустая
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗапускТестаФайлаОзвучки(КодВозврата, ДополнительныеПараметры) Экспорт
// TODO: Пустая
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытьКаталогФичи(КодВозврата, ДополнительныеПараметры) Экспорт
// TODO: Пустая
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайлПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
		
	Если Ответ = КодВозвратаДиалога.ОК Тогда		
		СохранитьНастройки();
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);		
	Диалог.Заголовок = Локализовать(""Файл сохранения настроек VA"");
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = Локализовать(""Настройки VA (*.json)|*.json"");
	Диалог.ПолноеИмяФайла = ""VAParams"";
	Диалог.Расширение = ""json"";
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""ВыгрузитьНастройкиВФайлЗавершение"", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнешнийСписокПроцедур(МассивСнипетовИзОбработки, ПолноеИмя, ФормаОбработки) Экспорт

	СтрТаблицаКонтекстовОбработок = Новый Структура;
	СтрТаблицаКонтекстовОбработок.Вставить(""ИмяФайла"", ПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить(""Обработка"", ФормаОбработки);
	ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);

	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(ПолноеИмя);
	МассивИменКонтекстовОбработок.Добавить(НРег(УниверсальноеПолноеИмя));

	Для каждого Снипет Из МассивСнипетовИзОбработки Цикл
		ТаблицаОбработокДляОтладки.Вставить(СокрЛП(Снипет.ИмяПроцедуры), Новый Структура(""ИмяПроцедуры, Обработка, ИмяФайла"", Снипет.ИмяПроцедуры, ФормаОбработки, УниверсальноеПолноеИмя));
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция МетаданныеИмя() Экспорт
	Возврат МетаданныеИмяСервер();
КонецФункции

&НаКлиенте
Процедура ПодготовитьСценарийКВыполнению() Экспорт
	Если ЭтоLinux Тогда
		Разделитель = ""/"";
	Иначе
		Разделитель = ""\"";
	КонецЕсли;
	 
	ИмяВременногоFeature = ПолучитьИмяВременногоФайла(""feature"");
	ВременныйФайл = Новый Файл(ИмяВременногоFeature);
	КаталогВременногоFeature = ВременныйФайл.Путь + ""vanessa-behavior"";
	
	УдалитьКаталогКомандаСистемы(КаталогВременногоFeature);
	СоздатьКаталогКомандаСистемы(КаталогВременногоFeature);	
	
	ИмяВременногоFeature = КаталогВременногоFeature + Разделитель + ""temp.feature"";
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоFeature, КодировкаТекста.UTF8, , Истина); 
	Если Лев(СокрЛ(Объект.СгенерированныйСценарий),1) <> ""#"" Тогда
		// надо дописать заголовок сценария
		Если Объект.ЯзыкГенератораGherkin = ""en"" Тогда
			СтрокаЗаголовка = ""#language: en
			|
			|@tree
			|
			|Functionality: <description features>
			|
			|As <Role>
			|I want <functional description>
			|To <business effect>
			|
			|Scenario: <description of the scenario>
			|
			|"";
		Иначе	
			СтрокаЗаголовка = ""#language: ru
			|
			|@tree
			|
			|Функционал: <описание фичи>
			|
			|Как <Роль> я хочу
			|<описание функционала> 
			|чтобы <бизнес-эфект> 
			|
			|Сценарий: <описание сценария> 
			|
			|"";
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(СтрокаЗаголовка);
	КонецЕсли;	 
	ЗТ.ЗаписатьСтроку(Объект.СгенерированныйСценарий);
	ЗТ.Закрыть();
	
	Объект.КаталогФич = ИмяВременногоFeature;
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	ЗагрузитьФичи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуСнятиеБрейкпоинта() Экспорт
	ТекущаяСтрокаДереваИдСтроки = Неопределено;
	Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаДереваИдСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки;
	КонецЕсли;	 
	
	Если ТекущаяСтрокаДереваИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	
	
	Если НЕ ЭтуСтрокуМожноИсполнить(Элементы.ДеревоТестов.ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт = Не Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт;
	Брейкпоинт                                     = Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт;
	
	Элементы.ДеревоТестовБрейкпоинт.Заголовок = "" "";
	
	Если Брейкпоинт Тогда
		ДобавитьБрейкПоинт(Элементы.ДеревоТестов.ТекущиеДанные.ПолныйПуть);
	Иначе	
		УдалитьБрейкПоинт(Элементы.ДеревоТестов.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПодключенияTestClient() Экспорт
	ВозниклаОшибкаПодключенияTestClient = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТаблицуGherkinИзМакета(Макет) Экспорт
	Если Ложь Тогда
		Макет = Новый ТабличныйДокумент;
	КонецЕсли;	 
	
	ТаблицаGherkin = Новый Массив;
	
	Для Ккк = 1 По Макет.ВысотаТаблицы Цикл
		СтрокаТаблицы = Новый Структура;
		Для Ррр = 1 По Макет.ШиринаТаблицы Цикл
			СтрокаТаблицы.Вставить(""Кол"" + Формат(Ррр, ""ЧГ=; ЧН=0""),Макет.Область(Ккк,Ррр,Ккк,Ррр).Текст);
		КонецЦикла;	
		
		ТаблицаGherkin.Добавить(СтрокаТаблицы);
	КонецЦикла;	
	
	Возврат ТаблицаGherkin; 
КонецФункции	 

#КонецОбласти

#Область ПереводТекста

// Переводит текст с русского языка на Объект.ЯзыкГенератораGherkin
&НаКлиенте
Функция ПеревестиТекст(Текст) Экспорт
	ДанныеПеревода = Новый Структура;
	ДанныеПеревода.Вставить(""ЯзыкПеревода"",Объект.ЯзыкГенератораGherkin);
	Если КешДанныеПеревода.ТаблицаПеревода = Неопределено Тогда
		ДанныеПеревода.Вставить(""ДвоичныеДанныеФайлПеревода"",ПолучитьФайлыПеревода());
	Иначе	
		ДанныеПеревода.Вставить(""ДвоичныеДанныеФайлПеревода"",Неопределено);
	КонецЕсли;	 
	ДанныеПеревода.Вставить(""ТекстДляПеревода"",Текст);
	ДанныеПеревода.Вставить(""КешДанныеПеревода"",КешДанныеПеревода);
	ДвДанныеvbFeatureReader = Неопределено;
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		Если НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
			ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
		КонецЕсли;	 
	КонецЕсли;	 
	ДанныеПеревода.Вставить(""ДвДанныеvbFeatureReader"",ДвДанныеvbFeatureReader);
	ДанныеПеревода.Вставить(""Перевод"",Неопределено);
	ДанныеПеревода.Вставить(""СтруктураПараметров"",СлужебныеДанныеДляПарсераФич());
	
	СделатьПереводСгенерированногоТекстаGherkinСервер(ДанныеПеревода);
	Если ДанныеПеревода.Перевод <> Неопределено Тогда
		КешДанныеПеревода.Вставить(""Язык"",Объект.ЯзыкГенератораGherkin);
		КешДанныеПеревода.Вставить(""ТаблицаПеревода"",ДанныеПеревода.ТаблицаПеревода);
		КешСнипетов = ДанныеПеревода.СтруктураПараметров.КешСнипетов;
		
		Возврат ДанныеПеревода.Перевод;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ДанныеПереводаСообщенийПользователю() Экспорт
	Возврат Объект.ТекстСообщенийПользователю; 
КонецФункции	 

#КонецОбласти

#Область SikuliXСервер

//Сбрасывает флаг подключения SikuliXServer
&НаКлиенте
Функция СброситьФлагЗапускаSikuliXServer() Экспорт
	SikuliXСеверЗапущен = Ложь;
КонецФункции	 

//Вызывает скрипт SikuliX для перемещения курсора к картинке
&НаКлиенте
Функция ПереместитьКурсорМышкиККартинке(ПутьКФайлу) Экспорт
	Возврат ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов
	    + ""\tools\Sikuli\MoveMouseToPicture.sikuli --args """""" + ПутьКФайлу + """""""" , -1, Истина);
	КонецФункции
	
//Вызывает скрипт SikuliX для эмуляции клика по картинке
&НаКлиенте
Функция КликЛевойКнопкойМышкиПоКартинке(ПутьКФайлу) Экспорт
	Возврат ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов
	    + ""\tools\Sikuli\ClickOnPicture.sikuli --args """""" + ПутьКФайлу + """""""" , -1, Истина);
КонецФункции

//Перемещает курсор к флагу
&НаКлиенте
Процедура ПереместитьКурсорКФлагу(ПолеРеквизит) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышкиПоСгенерированнойКартинке(ПолеРеквизит.ТекстЗаголовка + "":"", ""MainForm"");
КонецПроцедуры 

//Выбирает значение переключателя
&НаКлиенте
Процедура ВыбратьЗначениеПереключателя(ПолеРеквизит,Значение) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		ПолеРеквизит.ВыбратьВариант(Значение);
		Возврат;
	КонецЕсли;	
	
	КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Значение,""MainForm"");
КонецПроцедуры 

//Активизирует закладку
&НаКлиенте
Процедура АктивизироватьЗакладку(ПолеЗакладка) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		ПолеЗакладка.Активизировать();
		Возврат;
	КонецЕсли;	
	
	КликЛевойКнопкойМышкиПоСгенерированнойКартинке(ПолеЗакладка.ТекстЗаголовка,""MainForm"");
КонецПроцедуры 

//Нажимает на кнопку КИ
&НаКлиенте
Процедура НажатьНаКнопкуКИ(Кнопка) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Кнопка.Нажать();
		Возврат;
	КонецЕсли;	
	
	КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Кнопка.ТекстЗаголовка,""CommandInterface"");
КонецПроцедуры 

//Нажимает на кнопку формы
&НаКлиенте
Процедура НажатьНаКнопкуФормы(Кнопка) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Кнопка.Нажать();
		Возврат;
	КонецЕсли;	
	
	Текст = ТекстДляГенерацииКартинкиПоКнопке(Кнопка.ТекстЗаголовка);
	
	КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Текст,""MainForm"");
КонецПроцедуры 

//Перемещает курсор мышки к элементу КИ
&НаКлиенте
Процедура ПереместитьКурсорМышкиКЭлементуКИ(ИмяКнопки) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышкиПоСгенерированнойКартинке(ИмяКнопки,""CommandInterface"");
КонецПроцедуры

//Перемещает курсор мышки к элементу КИ
&НаКлиенте
Процедура ПереместитьКурсорМышкиКЭлементуФормы(ИмяКнопки) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышкиПоСгенерированнойКартинке(ИмяКнопки, ""MainForm"");
КонецПроцедуры

//Устанавливат профиль поиска картинки с текстом по имени профиля
&НаКлиенте
Процедура УстановитьПрофильПоискаКартинкиСТекстом(ИмяПрофиля,ДанныеПрофиля) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Имя"", ИмяПрофиля);
	
	НайденныеСтроки = ПрофилиПоискаКартинокСТекстом.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаПрофилиПоискаКартинокСТекстом = НайденныеСтроки[0];
	Иначе	
		СтрокаПрофилиПоискаКартинокСТекстом = ПрофилиПоискаКартинокСТекстом.Добавить();
		СтрокаПрофилиПоискаКартинокСТекстом.Имя = ИмяПрофиля;
	КонецЕсли;	 
	
	СтрокаПрофилиПоискаКартинокСТекстом.Шрифт = ДанныеПрофиля.Шрифт;
	СтрокаПрофилиПоискаКартинокСТекстом.ЦветФона = ДанныеПрофиля.ЦветФона;
	СтрокаПрофилиПоискаКартинокСТекстом.ЦветШрифта = ДанныеПрофиля.ЦветШрифта;
	СтрокаПрофилиПоискаКартинокСТекстом.Размер = ДанныеПрофиля.Размер;
КонецПроцедуры 

//Возвращает данные профиля из таблицы ПрофилиПоискаКартинокСТекстом
&НаКлиенте
Функция ДанныеПрофиляПоискаКартинкиСТекстом(ИмяПрофиля) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Имя"", ИмяПрофиля);
	
	НайденныеСтроки = ПрофилиПоискаКартинокСТекстом.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаПрофилиПоискаКартинокСТекстом = НайденныеСтроки[0];
		ДанныеПрофиля = Новый Структура;
		ДанныеПрофиля.Вставить(""Имя"",ИмяПрофиля);
		ДанныеПрофиля.Вставить(""Шрифт"",СтрокаПрофилиПоискаКартинокСТекстом.Шрифт);
		ДанныеПрофиля.Вставить(""ЦветФона"",СтрокаПрофилиПоискаКартинокСТекстом.ЦветФона);
		ДанныеПрофиля.Вставить(""ЦветШрифта"",СтрокаПрофилиПоискаКартинокСТекстом.ЦветШрифта);
		ДанныеПрофиля.Вставить(""Размер"",СтрокаПрофилиПоискаКартинокСТекстом.Размер);
		
		Возврат ДанныеПрофиля;
	Иначе
		ТекстСообщения = Локализовать(""Не найден профиль поиска картинки с текстом <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ИмяПрофиля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции	 

// Запускает SikuliX сервер
// ДопПараметры - структура, в которой будут заполнены переменные для вызова SikuliX сервера
&НаКлиенте
Процедура ЗапуститьSikuliXСевер(ДопПараметры = Неопределено) Экспорт
	Если SikuliXСеверЗапущен = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	ДопПараметры.Вставить(""SikuliXСеверЗапущен"",Ложь);
	ПолучитьМодульSikuliXСевер().ЗапуститьSikuliXСевер(ЭтаФорма,ДопПараметры);
	
	Если ДопПараметры.SikuliXСеверЗапущен <> Истина Тогда
		ТекстСообщения = Локализовать(""Не получилось запустить Sikulix сервер."");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	ИмяУправляющиегоФайлаSikuliXСервер = ДопПараметры.ИмяУправляющиегоФайла;
	ИмяФайлаОтветаSikuliXСевер         = ДопПараметры.ИмяФайлаОтвета;
	SikuliXСеверЗапущен                = ДопПараметры.SikuliXСеверЗапущен;
	ИмяФайлаВыводаКонсолиSikuliXСервер = ДопПараметры.ИмяФайлаВыводаКонсолиSikuliXСервер;
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьСервисныеУтилитыЗавершение(Результат, ДополнительныеПараметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;	

	НомерРелиза = ""1.05"";
	АдресРесурса = ""//github.com/"";
	
	Адрес = ""//github.com/Pr-Mex/UItoolsFor1C/releases/download/%НомерРелиза%/UItoolsFor1C.zip"";
	Адрес = СтрЗаменить(Адрес, ""%НомерРелиза%"", НомерРелиза);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""zip"");
	
	Соединение = Новый HTTPСоединение(АдресРесурса,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Запрос.Заголовки.Вставить(""Accept-Charset"", ""utf-8"");
	
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 302 Тогда
		ПутьКФайлу = Ответ.Заголовки[""Location""];
		ПутьКФайлу = СтрЗаменить(ПутьКФайлу, ""https:"", """");
		Запрос = Новый HTTPЗапрос(ПутьКФайлу, Заголовки);
		Ответ = Соединение.Получить(Запрос, ИмяВременногоФайла);				
	КонецЕсли;
	
	Файл = Новый Файл(ИмяВременногоФайла);
	
	Если Файл.Существует() Тогда
		КаталогИнструментов = ОбъединитьПути(Объект.КаталогИнструментов, ""tools"", ""VideoTools""); 
		Архив = Новый ЧтениеZipФайла(ИмяВременногоФайла);
		Попытка
			Архив.ИзвлечьВсе(КаталогИнструментов);
			ТекстСообщения = Локализовать(""Сервисные утилиты установлены."");	
		Исключение
			ТекстСообщения = Локализовать(""Не удалось установить сервисные утилиты. Выролните действие вручную."");
		КонецПопытки;
		
		ПоказатьОповещениеПользователя(,, ТекстСообщения);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаГлобальныхПеременныхИзФайлаНастроек

&НаКлиенте
Процедура ЗагрузитьПеременныеКонтекстаИзФайлаНастроек()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	Если НРег(Объект.ПоставщикПользовательскихНастроек) = ""file"" И Объект.АдресПользовательскихНастроек = """" Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ПустаяСтрока(Объект.ПоставщикПользовательскихНастроек) Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗагрузчикНастроек = Плагин(""ЗагрузчикПользовательскихНастроек"");
	
	Объект.Плагины.Вставить(""ЗагрузчикПользовательскихНастроек"", ""ЗагрузчикПользовательскихНастроек"");
	КэшФормПлагинов.Вставить(""ЗагрузчикПользовательскихНастроек"", Истина);

	Попытка
		ЗагрузчикНастроек.ЗагрузитьНастройки(Объект.ПоставщикПользовательскихНастроек, Объект.АдресПользовательскихНастроек);
	Исключение
		СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьПутьК_EPF_Фичи(ИмяФайлаФичи)
	ФайлФичи = Новый Файл(ИмяФайлаФичи);
	Возврат ФайлФичи.Путь + ""step_definitions"" + ?(ЭтоLinux, ""/"", ""\"") + ФайлФичи.ИмяБезРасширения + "".epf"";
КонецФункции	 

&НаКлиенте
Процедура ВыполнитьПроцедуруШагПродолжение(ОбработкаТеста, ТекШаг)
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	
	СписокАргументов = ТекШаг.ЗначенияПараметров;
	МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);
	
	
	ИмяПроцедуры = ТекШаг.ИмяПроцедуры;
	ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
КонецПроцедуры 

&НаКлиенте
Функция СтрокаПробелов()
	Результат = Новый Соответствие;
	Стр = """";
	Для Счетчик = 1 По 120 Цикл
		Стр = Стр + "" "";
		Результат.Вставить(Счетчик,Стр);
	КонецЦикла;	
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Функция ТекущийШагЭтоШагКонтекста()
	СостояниеVA = ПолучитьСостояниеVanessaAutomation();
	
	Если СостояниеVA.ТекущийШаг.ЭтоШагКонтекста Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция НужноЭмулироватьДействияМышки()
	Если НЕ Объект.ИспользоватьSikuliXСервер Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ Объект.ЗаписьВидеоЭмулироватьДвиженияМышки Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ТекущийШагЭтоШагКонтекста() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ВТекущемШагеЕстьКомментарий(""#[DoNotMoveMouse]"") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Функция ТекстДляГенерацииКартинкиПоКнопке(Текст)
	Если Текст = ""Создать"" Тогда
		Возврат ""Создать   "";
	ИначеЕсли Текст = ""Записать"" Тогда
		Возврат ""Записать   "";
	КонецЕсли;	 
	
	Возврат Текст;
КонецФункции	 

&НаКлиенте
Процедура ПереместитьКурсорМышкиПоСгенерированнойКартинке(Текст, ИмяПрофиля)
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеПрофиля = ДанныеПрофиляПоискаКартинкиСТекстом(ИмяПрофиля);
	ФайлКартинки = ПолучитьФайлКартинкиИзТекста(Текст,ДанныеПрофиля);
	Рез = ПереместитьКурсорМышкиККартинке(ФайлКартинки.ПолноеИмя);
	Если Рез <> 0 Тогда
		ТекстСообщения = Локализовать(""Не получилось переместить курсор мышки к картинке <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ФайлКартинки.ПолноеИмя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Текст, ИмяПрофиля)
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеПрофиля = ДанныеПрофиляПоискаКартинкиСТекстом(ИмяПрофиля);
	ФайлКартинки = ПолучитьФайлКартинкиИзТекста(Текст,ДанныеПрофиля);
	Рез = КликЛевойКнопкойМышкиПоКартинке(ФайлКартинки.ПолноеИмя);
	Если Рез <> 0 Тогда
		ТекстСообщения = Локализовать(""Не получилось переместить курсор мышки к картинке <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ФайлКартинки.ПолноеИмя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ВТекущемШагеЕстьТег(Тег)
	СостояниеVA = ПолучитьСостояниеVanessaAutomation();
	
	МассивТеговШага = СостояниеVA.ТекущийШаг.МассивТеговШага;
	ЕстьТег = ВМассивеЕстьСтрока(МассивТеговШага,Тег);
	Если ЕстьТег Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ВТекущемШагеЕстьКомментарий(Тег)
	СостояниеVA = ПолучитьСостояниеVanessaAutomation();
	
	МассивКомментариевШага = СостояниеVA.ТекущийШаг.МассивКомментариевШага;
	ЕстьТег = ВМассивеЕстьСтрока(МассивКомментариевШага,Тег);
	Если ЕстьТег Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ВМассивеЕстьСтрока(МассивТегов,Тег)
	Для Каждого Элем Из МассивТегов Цикл
		Если НРег(Элем) = НРег(Тег) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	 

&НаСервере
Процедура ЗаполнитьТиповыеПрофилиЦветовСервер()
	ПрофилиЦветовСервер = РеквизитФормыВЗначение(""ПрофилиПоискаКартинокСТекстом"");
	
	СтрокаCommandInterface = ПрофилиЦветовСервер.Найти(""CommandInterface"",""Имя"");
	Если СтрокаCommandInterface = Неопределено Тогда
		СтрокаCommandInterface = ПрофилиЦветовСервер.Добавить();
		СтрокаCommandInterface.Имя = ""CommandInterface"";
		СтрокаCommandInterface.Шрифт = ""arial"";
		СтрокаCommandInterface.ЦветФона = ""#FBED9E"";
		СтрокаCommandInterface.ЦветШрифта = ""black"";
		СтрокаCommandInterface.Размер = 13;
	КонецЕсли;	 
	
	СтрокаMainForm = ПрофилиЦветовСервер.Найти(""MainForm"",""Имя"");
	Если СтрокаMainForm = Неопределено Тогда
		СтрокаMainForm = ПрофилиЦветовСервер.Добавить();
		СтрокаMainForm.Имя = ""MainForm"";
		СтрокаMainForm.Шрифт = ""arial"";
		СтрокаMainForm.ЦветФона = ""white"";
		СтрокаMainForm.ЦветШрифта = ""black"";
		СтрокаMainForm.Размер = 13;
	КонецЕсли;	 
	
	ЗначениеВРеквизитФормы(ПрофилиЦветовСервер,""ПрофилиПоискаКартинокСТекстом"");
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуИзвестныхШагов(АктивизироватьСтрокуШага)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ТаблицаИзвестныхStepDefinition"", ТаблицаИзвестныхStepDefinition);
	ПараметрыФормы.Вставить(""ТаблицаУжеСуществующихСценариев"", ТаблицаУжеСуществующихСценариев);
	ПараметрыФормы.Вставить(""ЯзыкГенератораGherkin"", Объект.ЯзыкГенератораGherkin);
	ПараметрыФормы.Вставить(""КаталогИнструментов"", Объект.КаталогИнструментов);
	ПараметрыФормы.Вставить(""МакетШаблонПеревода"", МакетШаблонПеревода);
	ПараметрыФормы.Вставить(""ДвоичныеДанныеФайлПеревода"", ПолучитьФайлыПеревода());
	ПараметрыФормы.Вставить(""Снипет"", Неопределено);
	ПараметрыФормы.Вставить(""СтрокаРеальнойПроцедуры"", Неопределено);
	
	Если АктивизироватьСтрокуШага И Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить(""Снипет"", Элементы.ДеревоТестов.ТекущиеДанные.Снипет);
		ПараметрыФормы.Вставить(""СтрокаРеальнойПроцедуры"", Элементы.ДеревоТестов.ТекущиеДанные.СтрокаРеальнойПроцедуры);
	КонецЕсли;	 
	
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + "".Форма.ВыборИзвестногоШага"", ПараметрыФормы,ЭтаФорма);
КонецПроцедуры 

&НаКлиенте
Функция ТабличныйДокументДляСостоянияФормы()
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Область(1,1,1,1).Текст = ""Имя"";
	ТабДок.Область(1,1,1,1).ШиринаКолонки = 40;
	ТабДок.Область(1,2,1,2).Текст = ""Заголовок"";
	ТабДок.Область(1,2,1,2).ШиринаКолонки = 30;
	ТабДок.Область(1,3,1,3).Текст = ""Тип"";
	ТабДок.Область(1,3,1,3).ШиринаКолонки = 32;
	ТабДок.Область(1,4,1,4).Текст = ""Вид"";
	ТабДок.Область(1,4,1,4).ШиринаКолонки = 30;
	ТабДок.Область(1,5,1,5).Текст = ""ПредставлениеДанных"";
	ТабДок.Область(1,5,1,5).ШиринаКолонки = 30;
	ТабДок.Область(1,6,1,6).Текст = ""ОтображаемыйТекст"";
	ТабДок.Область(1,6,1,6).ШиринаКолонки = 30;
	
	ТабДок.Область(1,1,1,6).Шрифт = Новый Шрифт(,10,Истина);
	
	
	Возврат ТабДок;
КонецФункции	 

&НаКлиенте
Процедура ВывестиДанныеЭлементаформыВМакет(ЭлементОкна,ТабДок,НомерСтроки)
	//Имя
	Попытка
		Если ТипЗнч(ЭлементОкна) = Тип(""ТестируемаяФорма"") Тогда
			ТабДок.Область(НомерСтроки,1,НомерСтроки,1).Текст = ЭлементОкна.ИмяФормы;
		Иначе	
			ТабДок.Область(НомерСтроки,1,НомерСтроки,1).Текст = ЭлементОкна.Имя;
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	//Синоним
	Попытка
		ТабДок.Область(НомерСтроки,2,НомерСтроки,2).Текст = ЭлементОкна.ТекстЗаголовка;
	Исключение
	КонецПопытки;
	
	//Тип
	Попытка
		ТабДок.Область(НомерСтроки,3,НомерСтроки,3).Текст = Строка(ТипЗнч(ЭлементОкна));
	Исключение
	КонецПопытки;
	
	//Вид
	Попытка
		ТабДок.Область(НомерСтроки,4,НомерСтроки,4).Текст = ЭлементОкна.Вид;
	Исключение
	КонецПопытки;
	
	//ПредставлениеДанных
	Попытка
		Если ТипЗнч(ЭлементОкна) = Тип(""ТестируемоеПолеФормы"") Тогда
			Если Найти(ЭлементОкна.Имя,""УсловноеОформление"") = 0 Тогда
				ТабДок.Область(НомерСтроки,5,НомерСтроки,5).Текст = ЭлементОкна.ПолучитьПредставлениеДанных();
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	//ОтображаемыйТекст
	Попытка
		ТабДок.Область(НомерСтроки,6,НомерСтроки,6).Текст = ЭлементОкна.ПолучитьОтображаемыйТекст();
	Исключение
	КонецПопытки;
КонецПроцедуры 

// получает состояние всех форм в виде макета
&НаКлиенте
Функция СостояниеВсехФормВВидеМакета()
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		АктивныеОкна = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если АктивныеОкна = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТабДок = ТабличныйДокументДляСостоянияФормы();
	
	НомерСтроки = 1;
	
	Для Каждого АктивноеОкно Из АктивныеОкна Цикл
		НомерСтроки = НомерСтроки + 1;
		
		ТабДок.Область(НомерСтроки,2,НомерСтроки,2).Текст = АктивноеОкно.Заголовок;
		ТабДок.Область(НомерСтроки,2,НомерСтроки,2).Шрифт = Новый Шрифт(,12);
		ТабДок.Область(НомерСтроки,3,НомерСтроки,3).Текст = Строка(ТипЗнч(АктивноеОкно));
		
		НомерСтроки = НомерСтроки + 1;
		ТабДок.Область(НомерСтроки,2,НомерСтроки,2).Текст = ""Окно сообщений"";
		
		Попытка
			ТекстОкноСообщений = МассивВСтроку(АктивноеОкно.ПолучитьТекстыСообщенийПользователю());
		Исключение
			ТекстОкноСообщений = Локализовать(""Окно сообщений пустое."");
		КонецПопытки;
		ТабДок.Область(НомерСтроки,5,НомерСтроки,5).Текст = ТекстОкноСообщений;
		
		
		ЭлементыОкна = АктивноеОкно.НайтиОбъекты();
		Для Каждого ЭлементОкна Из ЭлементыОкна Цикл
			НомерСтроки = НомерСтроки + 1;
			ВывестиДанныеЭлементаформыВМакет(ЭлементОкна,ТабДок,НомерСтроки);
		КонецЦикла;	 
		
		// чтобы раздедить окна
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	 
	
	ТабДок.ФиксацияСверху = 1;
	Возврат ТабДок;
КонецФункции	 

// получает данные активной формы в виде макета
&НаКлиенте
Функция СостояниеФормыВВидеМакета()
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если АктивноеОкно = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТабДок = ТабличныйДокументДляСостоянияФормы();	
	
	НомерСтроки = 1;
	ЭлементыОкна = АктивноеОкно.НайтиОбъекты();
	
	НомерСтроки = НомерСтроки + 1;
	ТабДок.Область(НомерСтроки,2,НомерСтроки,2).Текст = АктивноеОкно.Заголовок;
	ТабДок.Область(НомерСтроки,2,НомерСтроки,2).Шрифт = Новый Шрифт(,12);
	ТабДок.Область(НомерСтроки,3,НомерСтроки,3).Текст = Строка(ТипЗнч(АктивноеОкно));
	
	НомерСтроки = НомерСтроки + 1;
	ТабДок.Область(НомерСтроки,2,НомерСтроки,2).Текст = ""Окно сообщений"";
	
	Попытка
		ТекстОкноСообщений = МассивВСтроку(АктивноеОкно.ПолучитьТекстыСообщенийПользователю());
	Исключение
		ТекстОкноСообщений = Локализовать(""Окно сообщений пустое."");
	КонецПопытки;
	ТабДок.Область(НомерСтроки,5,НомерСтроки,5).Текст = ТекстОкноСообщений;
	
	Для Каждого ЭлементОкна Из ЭлементыОкна Цикл
		НомерСтроки = НомерСтроки + 1;
		ВывестиДанныеЭлементаформыВМакет(ЭлементОкна,ТабДок,НомерСтроки);
	КонецЦикла;	 
	
	ТабДок.ФиксацияСверху = 1;
	Возврат ТабДок;
КонецФункции	 

// Позволяет сделать поиск в строке ""ПроверяемаяСтрока"" подстроки ""Шаблон""
// при этом подстрока ""Шаблон"" может содержать символы *
// например СтрокаСоответствуетШаблону(""Привет"",""*вет"")
&НаСервереБезКонтекста
Функция СтрокаСоответствуетШаблонуСервер(Знач ПроверяемаяСтрока, Знач Шаблон) Экспорт
	Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон);
	
	Если ЭтоLinuxСервер() Тогда
		Возврат ПроверитьСтрокуRexExpLinux(ПроверяемаяСтрока,Шаблон);
	Иначе	
		Регулярка = Новый COMОбъект(""VBScript.RegExp"");
		Регулярка.Global = Истина;
		Регулярка.Multiline = Истина;
		// для VBScript.RegExp явно указываем что есть начало и конец строки
		Шаблон            = ""^"" + Шаблон + ""$"";
		Регулярка.Pattern = Шаблон;
		Результат = Регулярка.Test(ПроверяемаяСтрока);
		Регулярка = Неопределено;
		Возврат Результат;
	КонецЕсли;	 
КонецФункции 

&НаСервереБезКонтекста
Функция ПоискВхожденияСтроки(ТЗБыло, СтрокаТЗБыло, Построитель, ИдКолонкиПропуск)
	ИдКолонки = -1;
	Для каждого Колонка Из ТЗБыло.Колонки Цикл
		ИдКолонки = ИдКолонки + 1;
		Если ИдКолонки = ИдКолонкиПропуск Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗначениеПоиска = СтрокаТЗБыло[Колонка.Имя];
		Если ЗначениеПоиска = Неопределено ИЛИ СокрЛП(ЗначениеПоиска) = ""*"" Тогда
			Продолжить;
		КонецЕсли;
		
		тОтбор = Построитель.Отбор.Добавить(Колонка.Имя);
		тОтбор.Использование = Истина;
		Если Сред(ЗначениеПоиска, СтрДлина(ЗначениеПоиска), 1) = ""*"" Тогда
			тОтбор.Значение     = Сред(ЗначениеПоиска, 1, СтрДлина(ЗначениеПоиска) - 1);
			тОтбор.ВидСравнения = ВидСравнения.Содержит;
		Иначе
			тОтбор.Значение     = ЗначениеПоиска;
			тОтбор.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;
	КонецЦикла;
	
	Построитель.Выполнить();
	ТабРезультат = Построитель.Результат.Выгрузить();		
	
	Возврат ТабРезультат;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПоискВхожденияСтрокиПоШаблону(ЗначениеТЧ,ЗначениеСтроки)
	Для Каждого СтрокаЗначениеТЧ Из ЗначениеТЧ Цикл
		СтрокаСовпала = Истина;
		Для Каждого Элем Из ЗначениеСтроки Цикл
			ЗначениеИскомойСтроки  = Элем.Значение;
			ЗначениеВСтрокеТаблицы = СтрокаЗначениеТЧ[Элем.Ключ];
			Если НЕ СтрокаСоответствуетШаблонуСервер(ЗначениеВСтрокеТаблицы,ЗначениеИскомойСтроки) Тогда
				СтрокаСовпала = Ложь;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
		
		Если СтрокаСовпала Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Ложь;
КонецФункции	 

&НаСервереБезКонтекста
Процедура УбратьИзИмениКолонокСпецСимволы(Массив)
	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Если Лев(Массив[Ккк],1) = ""_"" Тогда
			Массив[Ккк] = Сред(Массив[Ккк],2);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьМассивКолонокКоторыеЕстьТолькоВБыло(ТЗБыло,ТЗСтало)
	Массив = Новый Массив;
	
	Для Каждого Колонка Из ТЗБыло.Колонки Цикл
		Если ТЗСтало.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Массив.Добавить(Колонка.Имя);
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

&НаСервереБезКонтекста
Функция УбратьВсеЗапрещенныеСимволы(Знач Стр)
	
	Стр = СтрЗаменить(Стр,"""""""","""");
	Стр = СтрЗаменить(Стр,Символы.ПС,"""");
	Стр = СтрЗаменить(Стр,Символы.ВК,"""");
	ЗапрещенныеСимволы = "" <>.,\/|':;!№%?*()@#$%^&*+-`~↓↑"";
	
	Для НомерСимвола = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		ЗапрещенныйСимвол = Сред(ЗапрещенныеСимволы, НомерСимвола, 1);
		Стр = СтрЗаменить(Стр, ЗапрещенныйСимвол, ""_"");
	КонецЦикла;
	
	Если Стр = """" Тогда
		Стр = ""_"";
	КонецЕсли;	 
	
	// Чтобы экранировать служебные слова построителя запросов, т.к. колонки таблицы могут назвать с их использованием
	Стр = ""_"" + Стр;
	
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗПроверяемыхДанных(ТабПарам,ДопПараметры)

	СтрокаШапки = ТабПарам[0];
	
	ТЗБыло = Новый ТаблицаЗначений;
	Для каждого Колонка Из СтрокаШапки Цикл
		ИмяКолонкиСтарое = УбратьВсеЗапрещенныеСимволы(СтрокаШапки[Колонка.Ключ]);
		
		Попытка
			ТЗБыло.Колонки.Добавить(ИмяКолонкиСтарое, Новый ОписаниеТипов(""Строка""));
		Исключение
			ТекстСообщения = ТекстСообщенияПользователюВызовСервера(""В эталонной таблице существуют две колонки с одинаковым заголовком: %1"",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаШапки[Колонка.Ключ]);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	Для СтрокаБыло = 1 По ТабПарам.Количество()-1 Цикл //в первой строке шапка
		СтрокаТЗБыло = ТЗБыло.Добавить();
		Для каждого Колонка Из СтрокаШапки Цикл
			ИмяКолонкиСтарое = УбратьВсеЗапрещенныеСимволы(СтрокаШапки[Колонка.Ключ]);
			ЗначениеБыло = Неопределено;
			ТабПарам[СтрокаБыло].Свойство(Колонка.Ключ, ЗначениеБыло);
			СтрокаТЗБыло[ИмяКолонкиСтарое] = ЗначениеБыло;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗБыло;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗТекущихДанных(ЗначениеТЧ,ДопПараметры)
	
	ТЗСтало = Новый ТаблицаЗначений;
	
	Если ТЗСтало = Неопределено Тогда
		ВызватьИсключение ТекстСообщенияПользователюВызовСервера(""Не смог получить строки таблицы."",ДопПараметры.ТекстСообщенийПользователю);
	КонецЕсли;	 
	
	// создаем колонки
	Для каждого Колонка Из ЗначениеТЧ[0] Цикл
		Попытка
			ТЗСтало.Колонки.Добавить(УбратьВсеЗапрещенныеСимволы(Колонка.Ключ), Новый ОписаниеТипов(""Строка"", , Новый КвалификаторыСтроки(1000)));
		Исключение
			ТекстСообщения = ТекстСообщенияПользователюВызовСервера(""В результирующей таблице существуют две колонки с одинаковым заголовком: %1"",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Колонка.Ключ);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	// создаем строки
	Для каждого СтрокаКолонки Из ЗначениеТЧ Цикл
		СтрокаТЗСтало = ТЗСтало.Добавить();
		Для каждого Колонка Из СтрокаКолонки Цикл
			СтрокаТЗСтало[УбратьВсеЗапрещенныеСимволы(Колонка.Ключ)] = Колонка.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗСтало;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроизвестиСравнениеТаблицНаВхождениеСтрокНаСервере(ИмяТаблицы, ТабПарам, ЗначениеТЧ,МассивОшибок,ДопПараметры)
	Отказ = Ложь;
	ПоШаблону = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""ПоШаблону"") Тогда
			ПоШаблону = ДопПараметры.ПоШаблону;
		КонецЕсли;	 
	КонецЕсли;	 
	
	// преобразовать в Таблицу Значений
	ТЗБыло  = ПолучитьТЗПроверяемыхДанных(ТабПарам,ДопПараметры);
	ТЗСтало = ПолучитьТЗТекущихДанных(ЗначениеТЧ,ДопПараметры);
	
	МассивКолонокКоторыеЕстьТолькоВБыло = ПолучитьМассивКолонокКоторыеЕстьТолькоВБыло(ТЗБыло,ТЗСтало);
	Если МассивКолонокКоторыеЕстьТолькоВБыло.Количество() > 0 Тогда
		Стр = ""В таблице <"" + ИмяТаблицы + ""> нет колонок: "";
		УбратьИзИмениКолонокСпецСимволы(МассивКолонокКоторыеЕстьТолькоВБыло);
		Для Каждого Элем Из МассивКолонокКоторыеЕстьТолькоВБыло Цикл
			Стр = Стр + Элем + "", "";
		КонецЦикла;
		
		Стр = Лев(Стр,СтрДлина(Стр)-2);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	// начинаем сравнение	
	Для НомерСтроки = 0 По ТЗБыло.Количество()-1 Цикл
		СтрокаТЗБыло = ТЗБыло[НомерСтроки];
		Построитель = Новый ПостроительЗапроса;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗСтало);
		Если ПоШаблону Тогда
			Сч = 0;
			ЗначениеСтроки = Новый Соответствие;
			Для Каждого Элем Из ТабПарам[0] Цикл
				Сч = Сч + 1;
				ИдКолонки = Элем.Ключ;
				ИмяКолонки = Элем.Значение;
				ЗначениеКолонки = ТабПарам[НомерСтроки+1][ИдКолонки];
				ЗначениеСтроки.Вставить(ИмяКолонки,ЗначениеКолонки);
			КонецЦикла;	 
			Результат = ПоискВхожденияСтрокиПоШаблону(ЗначениеТЧ,ЗначениеСтроки);
			Если НЕ Результат Тогда
				Стр = """";
				Для Каждого Элем Из ЗначениеСтроки Цикл
					Стр = Стр + ""| ' "" + Элем.Значение + ""' "";
				КонецЦикла;	 
				Стр = Стр + ""|"";
				
				МассивОшибок.Добавить(Стр);
				Отказ = Истина;
			КонецЕсли;	 
		Иначе	
			ТабРезультат = ПоискВхожденияСтроки(ТЗБыло,СтрокаТЗБыло,Построитель,Неопределено);
			Если ТабРезультат.Количество() = 0 Тогда
				Стр = ""|"";
				Для каждого Колонка Из ТЗБыло.Колонки Цикл
					Стр = Стр + "" '"" + СтрокаТЗБыло[Колонка.Имя] + ""' |"";
				КонецЦикла;	
				
				ИдКолонки = -1;
				ТекстСообщения = """";
				КоличествоРешений = 0;
				Если ТЗБыло.Колонки.Количество() > 1 Тогда
					Для каждого Колонка Из ТЗБыло.Колонки Цикл
						ИдКолонки = ИдКолонки + 1;
						Построитель = Новый ПостроительЗапроса;
						Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗСтало);
						ТабРезультат = ПоискВхожденияСтроки(ТЗБыло,СтрокаТЗБыло,Построитель,ИдКолонки);
						
						Если ТабРезультат.Количество() <> 0 Тогда
							// значит нашли проблемную колонку
							Попытка
								ИмяКолонки      = ТабПарам[0][XMLСтрока(""Кол"" + (ИдКолонки+1))];
								ЗначениеКолонки = СтрокаТЗБыло[Колонка.Имя];
								ЗначениеКолонки = СтрЗаменить(ЗначениеКолонки,Символы.ПС,""\n"");
							Исключение
								// не получилось получить имя колонки
								Прервать;
							КонецПопытки;
							
							ТекстСообщения = ТекстСообщенияПользователюВызовСервера(""Не найдено значение <%1> из колонки <%2>."",ДопПараметры.ТекстСообщенийПользователю);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ЗначениеКолонки); 
							ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ИмяКолонки); 
							КоличествоРешений = КоличествоРешений + 1;
						КонецЕсли;	 
						
					КонецЦикла;	
				КонецЕсли;	 
				
				Если ЗначениеЗаполнено(ТекстСообщения) И КоличествоРешений = 1 Тогда
					Стр = Стр + Символы.ПС + ТекстСообщения;
				КонецЕсли;	 
				
				МассивОшибок.Добавить(Стр);
				Отказ = Истина;
		КонецЕсли;	 
		
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗначениеКонстантыСервер(ИмяКонстанты,Значение)
	Константы[ИмяКонстанты].Установить(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаВидеоИнструкции()
	Если НЕ Объект.ЗаписьВидеоФормироватьИнструкциюТипВидео
	И    НЕ Объект.ЗаписьВидеоФормироватьИнструкциюТипHTML
	И    НЕ Объект.ЗаписьВидеоФормироватьИнструкциюТипMarkdown
	Тогда
		Объект.ЗаписьВидеоФормироватьИнструкциюТипВидео = Истина;
	КонецЕсли;	 
КонецПроцедуры 

// Функция - Получить строку вызова Sikuli
//
// Параметры:
//  ЗапускЧерезСкрипт	 - Булево	 - флаг способа запуска Sikuli-скриптов:
//									   Ложь	 - устаревший способ запуска для Windows,
//											   используется по умолчанию для совместимости
//									   Истина	 - запуск через скрипт runsikulix
// Возвращаемое значение:
//  Строка - строка для запуска Sikuli-скриптов
//
&НаКлиенте
Функция ПолучитьСтрокуВызоваSikuli(ЗапускЧерезСкрипт = Ложь)
	
	Если ЗапускЧерезСкрипт Тогда
		Если ЭтоLinux Тогда
			Возврат ""runsikulix -r "";
		Иначе
			Возврат ""call runsikulix -r "";
		КонецЕсли;
	Иначе
		Возврат """"""C:\Program Files (x86)\Java\jre6\bin\java.exe"""" -Xms64M -Xmx512M -Dfile.encoding=UTF-8 -Dpython.path=""""C:\Program Files (x86)\Sikuli X\sikuli-script.jar/"""" -jar """"C:\Program Files (x86)\Sikuli X\sikuli-ide.jar"""" -r "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьWshShell()

	Если WshShell = Неопределено Тогда
		Попытка
			WshShell = Новый COMОбъект(""WScript.Shell"");
		Исключение
			ВызватьИсключение Локализовать(""Не удалось подключить COM объект <WScript.Shell>"");
		КонецПопытки;
	КонецЕсли;
	
	Возврат WshShell;

КонецФункции

&НаКлиенте
Функция СкопироватьСтруктуру(Оригинал)
	Результат = Новый Структура();
	Для каждого Элем Из Оригинал Цикл
		Результат.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРПередВыполнениемШагаСервер(ИмяШага)
	ЗаписьЖурналаРегистрации(""VanessaAutomation.ПередВыполнениемШага"", УровеньЖурналаРегистрации.Информация, , , ИмяШага);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРОшибка(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Стр);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРИнформация(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации(""VanessaAutomation."" + ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстИнформация(ИмяСобытия, Стр)
	ТекстСообщения = Символы.Таб + Символы.Таб + ?(ЗначениеЗаполнено(ИмяСобытия),ИмяСобытия + "":"","""") + Стр;
	ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВЛогТаблицу(МассивСтрок)
	Для Каждого ТекстСообщения Из МассивСтрок Цикл
		ЗаписатьСтрокуВТекстовыйЛог(Символы.Таб + Символы.Таб + Символы.Таб + ТекстСообщения);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаписатьЛогВЖРПередВыполнениемШага(ИмяШага)
	ЗаписатьЛогВЖРПередВыполнениемШагаСервер(ИмяШага);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФормыИзПоследнегоАктивногоОкна()
	Если ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Если ОбъектКонтекст.Свойство(""АктивноеОкно"") Тогда
			Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
				Попытка
					АктивноеОкно = ОбъектКонтекст.АктивноеОкно;
					Если ЭтоЗаголовокОкнаМодальногоДиалога(АктивноеОкно.Заголовок) Тогда
						Если ОбъектКонтекст.Свойство(""ПредыдущееАктивноеОкно"") Тогда
							АктивноеОкно = ОбъектКонтекст.ПредыдущееАктивноеОкно;
						КонецЕсли;	 
					КонецЕсли;	 
					
					ТестируемаяФорма = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяФорма""));
					Если ТестируемаяФорма <> Неопределено Тогда
						Возврат ТестируемаяФорма.ИмяФормы;
					КонецЕсли;	 
				Исключение
					
				КонецПопытки;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
		
		// находим ближайшее окно к модальному диалогу
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.НачальнаяСтраница Тогда
				Продолжить;
			ИначеЕсли ТекущееОкно.Основное Тогда
				Продолжить;
			ИначеЕсли ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
				Продолжить;
			КонецЕсли;	 	
			
			АктивноеОкно = ТекущееОкно;
			ТестируемаяФорма = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяФорма""));
			Если ТестируемаяФорма <> Неопределено Тогда
				Возврат ТестируемаяФорма.ИмяФормы;
			КонецЕсли;	 
		КонецЦикла;	
		
		// находим начальную страницу
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.НачальнаяСтраница Тогда
				ТестируемаяФорма = ТекущееОкно.НайтиОбъект(Тип(""ТестируемаяФорма""));
				Если ТестируемаяФорма <> Неопределено Тогда
					Возврат ""НачальнаяСтраница"";
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
		
		// находим основное окно
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.Основное Тогда
				Возврат ""ОсновноеОкноПриложения"";
			КонецЕсли;	 
		КонецЦикла;	
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция ДеталиОшибки(ТекстОшибки)
	СтрокаПоиска = Локализовать(""ДеталиОшибки:"");
	Поз = Найти(ТекстОшибки,СтрокаПоиска);
	Если Поз > 0 Тогда
		Возврат СокрЛП(Сред(ТекстОшибки,Поз + СтрДлина(СтрокаПоиска))); 
	КонецЕсли;	 
	
	Возврат ТекстОшибки;
КонецФункции	  

&НаКлиенте
Процедура ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,ТекстОшибки,ИнфоОбОшибке,ОписаниеОшибкиШага)
	Если Не Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяКаталогаЛогОшибок) Тогда
		ВызватьИсключение Локализовать(""Не указано имя файла лога в параметре <ИмяКаталогаЛогОшибок>"");
	КонецЕсли;	 
	
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.ИмяКаталогаЛогОшибок) Тогда
		СоздатьКаталогЕслиЕгоНет(Объект.ИмяКаталогаЛогОшибок);
	КонецЕсли;	 
	
	
	ЭтоПример          = Ложь;
	ЭтоШагКонтекста    = Ложь;
	СтрокаРодителяШага = Неопределено;
	Если СтрокаШага <> Неопределено Тогда
		СтрокаРодителяШага = НайтиСтрокуСценарияЧерезРодителя(СтрокаШага, ЭтоПример,ЭтоШагКонтекста);
	КонецЕсли;	 
	
	ТекущаяУниверсальнаяДатаСтрока = СтрЗаменить(ТекущаяУниверсальнаяДатаВМиллисекундах(),Символы.НПП,"""");
	ВтораяЧастьФайла = ""Ошибка_"" + ТекущаяУниверсальнаяДатаСтрока + "".json"";
	ВтораяЧастьФайла = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ВтораяЧастьФайла);	
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ВтораяЧастьФайла;
		
	ЗаписьJson = Вычислить(""Новый ЗаписьJson()"");
	ЗаписьJson.ОткрытьФайл(ИмяФайла);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства(""ИмяСценария"");
	Если СтрокаСценария <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(СтрокаСценария.Имя);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение(Локализовать(""Сценарий не определён.""));
	КонецЕсли;	 
	
	Если СтрокаШага <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства(""ИмяШага"");
		ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.Имя);
		
		ЗаписьJSON.ЗаписатьИмяСвойства(""НомерСтрокиВФиче"");
		ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.НомерСтрокиВФиче);
		
		ЗаписьJSON.ЗаписатьИмяСвойства(""СтрокаДерева"");
		ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.ИдСтроки);
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства(""ИмяШага"");
		ЗаписьJSON.ЗаписатьЗначение(Локализовать(""Шаг не определён.""));
		
		ЗаписьJSON.ЗаписатьИмяСвойства(""НомерСтрокиВФиче"");
		ЗаписьJSON.ЗаписатьЗначение(0);
		
		ЗаписьJSON.ЗаписатьИмяСвойства(""СтрокаДерева"");
		ЗаписьJSON.ЗаписатьЗначение(0);
	КонецЕсли;	 
	
	Если ЭтоТекстИсключенияПлатформы(ТекстОшибки) И ИнфоОбОшибке = Неопределено Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства(""ТекстОшибки"");
		ЗаписьJSON.ЗаписатьЗначение(ДеталиОшибки(ТекстОшибки));
	ИначеЕсли ИнфоОбОшибке = Неопределено Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства(""ТекстОшибки"");
		ЗаписьJSON.ЗаписатьЗначение(ТекстОшибки);
	Иначе
		ЗаписьJSON.ЗаписатьИмяСвойства(""ТекстОшибки"");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ВывестиВСообщениеТекстОшибки(ИнфоОбОшибке)));
	КонецЕсли;	 
	
	
	ЗаписьJSON.ЗаписатьИмяСвойства(""ОписаниеОшибкиШага"");
	ЗаписьJSON.ЗаписатьЗначение(ОписаниеОшибкиШага);
	
	ЗаписьJSON.ЗаписатьИмяСвойства(""ЭтоШагКонтекста"");
	ЗаписьJSON.ЗаписатьЗначение(ЭтоШагКонтекста);
	
	Если Объект.СобиратьДанныеОСостоянииАктивнойФормыПриОшибке Тогда
		Попытка
			МакетСостояниеФормы = СостояниеФормыВВидеМакета();
		Исключение
			МакетСостояниеФормы = Неопределено;
		КонецПопытки;
		
		Если МакетСостояниеФормы <> Неопределено И СтрокаРодителяШага <> Неопределено Тогда
			Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) <>  Тип(""Структура"") Тогда
				СтрокаРодителяШага.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			ПроизвольныеЗначения = СтрокаРодителяШага.ПроизвольныеЗначения;
			
			Если НЕ ПроизвольныеЗначения.Свойство(""ПрикрепленныеМакеты"") Тогда
				ПроизвольныеЗначения.Вставить(""ПрикрепленныеМакеты"",Новый Массив);
			КонецЕсли;	 
			
			ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить(""Имя"",""СостояниеАктивнойФормы"");
			ДанныеФайла.Вставить(""Макет"",МакетСостояниеФормы);
			ПрикрепленныеМакеты.Добавить(ДанныеФайла);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.СобиратьДанныеОСостоянииВсехФормПриОшибке Тогда
		Попытка
			МакетСостояниеВсехФорм = СостояниеВсехФормВВидеМакета();
		Исключение
			МакетСостояниеВсехФорм = Неопределено;
		КонецПопытки;
		
		Если МакетСостояниеВсехФорм <> Неопределено Тогда
			Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) <>  Тип(""Структура"") Тогда
				СтрокаРодителяШага.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			ПроизвольныеЗначения = СтрокаРодителяШага.ПроизвольныеЗначения;
			
			Если НЕ ПроизвольныеЗначения.Свойство(""ПрикрепленныеМакеты"") Тогда
				ПроизвольныеЗначения.Вставить(""ПрикрепленныеМакеты"",Новый Массив);
			КонецЕсли;	 
			
			ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить(""Имя"",""СостояниеВсехФорм"");
			ДанныеФайла.Вставить(""Макет"",МакетСостояниеВсехФорм);
			ПрикрепленныеМакеты.Добавить(ДанныеФайла);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗаписьJSON.ЗаписатьИмяСвойства(""МассивФайлов"");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Если СтрокаРодителяШага <> Неопределено И ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) = Тип(""Структура"") Тогда
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство(""ПрикрепленныеМакеты"") Тогда
			ПрикрепленныеМакеты = СтрокаРодителяШага.ПроизвольныеЗначения.ПрикрепленныеМакеты;
			Для Каждого ДанныеФайла Из ПрикрепленныеМакеты Цикл
				ИмяМакета = ДанныеФайла.Имя + ""_"" + ТекущаяУниверсальнаяДатаСтрока;
				ИмяМакета = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяМакета);
				
				ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ИмяМакета + "".mxl"";
				ЗаписьJSON.ЗаписатьЗначение(ИмяПрикрепленногоФайла);
				
				Попытка
					ДанныеФайла.Макет.Записать(ИмяПрикрепленногоФайла);
					ДобавитьИмяФайлаВРезультатВыполненияСценария(ИмяПрикрепленногоФайла);
				Исключение
					СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;	 
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство(""ПрикрепленныеФайлы"") Тогда
			ПрикрепленныеФайлы = СтрокаРодителяШага.ПроизвольныеЗначения.ПрикрепленныеФайлы;
			Для Каждого ДанныеФайла Из ПрикрепленныеФайлы Цикл
				ИмяФайла = ДанныеФайла.ИмяФайла;
				ИмяФайла = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФайла);
				ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ИмяФайла;
				Если ДанныеФайла.УникальностьИмени Тогда
					Файл = Новый Файл(ИмяПрикрепленногоФайла);
					ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + Файл.ИмяБезРасширения + ""_"" + ТекущаяУниверсальнаяДатаСтрока + Файл.Расширение;
				КонецЕсли;	 
				
				ЗаписьJSON.ЗаписатьЗначение(ИмяПрикрепленногоФайла);
				
				Попытка
					ДанныеФайла.ДвоичныеДанныеФайла.Записать(ИмяПрикрепленногоФайла);
					ДобавитьИмяФайлаВРезультатВыполненияСценария(ИмяПрикрепленногоФайла);
				Исключение
					СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ТекИмяФормы = ПолучитьИмяФормыИзПоследнегоАктивногоОкна();
	Если ТекИмяФормы = Неопределено Тогда
		ТекИмяФормы = """";
	КонецЕсли;	 
	ЗаписьJSON.ЗаписатьИмяСвойства(""ФормаВКоторойВозниклоИсключение"");
	ЗаписьJSON.ЗаписатьЗначение(ТекИмяФормы);
	
	БылоВызваноИсключение = НЕ (ИнфоОбОшибке = Неопределено);
	Если НЕ БылоВызваноИсключение Тогда
		Если ЭтоТекстИсключенияПлатформы(ТекстОшибки) Тогда
			БылоВызваноИсключение = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	ЗаписьJSON.ЗаписатьИмяСвойства(""БылоВызваноИсключение"");
	ЗаписьJSON.ЗаписатьЗначение(БылоВызваноИсключение);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();	
	ЗаписьJson.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИмяФайлаВРезультатВыполненияСценария(ИмяФайла)
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	Если НЕ РезультатПрохожденияТестовСценария.Свойство(""МассивФайлов"") Тогда
		РезультатПрохожденияТестовСценария.Вставить(""МассивФайлов"",Новый Массив);
	КонецЕсли;	 
	
	МассивФайлов = РезультатПрохожденияТестовСценария.МассивФайлов;
	МассивФайлов.Добавить(ИмяФайла);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаписатьЛогВТекстПередВыполнениемШага(ИмяШага)
	ТекстСообщения = Локализовать(""ПередВыполнениемШага: %1"");
	ТекстСообщения = Символы.Таб + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяШага);
	ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРПередВыполнениемСценарияСервер(ИмяСценария)
	ЗаписьЖурналаРегистрации(""VanessaAutomation.ПередВыполнениемСценария"", УровеньЖурналаРегистрации.Информация, , ,ИмяСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВЖРПередВыполнениемСценария(ИмяСценария)
	ЗаписатьЛогВЖРПередВыполнениемСценарияСервер(ИмяСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстПередВыполнениемСценария(ИмяСценария)
	ТекстСообщения = Локализовать(""Сценарий: %1"");
	ТекстСообщения = Символы.Таб + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяСценария);
	ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ""."");
	Массив2 = РазложитьСтрокуВМассивПодстрок(""8.3.3.641"", ""."");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьЗащитаОтОпасныхДействий()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ""."");
	Массив2 = РазложитьСтрокуВМассивПодстрок(""8.3.9.2033"", ""."");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиенте
Функция УзнатьРежимСовместимостиКлиент(ЗначениеПоУмолчанию)
	Если Не ЗначениеЗаполнено(КешРежимСовместимости) Тогда
		КешРежимСовместимости = УзнатьРежимСовместимости(ЗначениеПоУмолчанию);
	КонецЕсли;	 
	
	Возврат КешРежимСовместимости;
КонецФункции	

&НаСервереБезКонтекста
Функция УзнатьРежимСовместимости(ЗначениеПоУмолчанию)
	Значение = ЗначениеПоУмолчанию;
	
	Попытка
		Значение = Строка(Метаданные.РежимСовместимости);
	Исключение
		Возврат Значение;
	КонецПопытки;	
	
	Возврат Значение;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЕстьПоддержкаАсинхронныхВызовов()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Версия1БольшеИлиРавно = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения,""8.3.5.1383"");
	
	Рез = Версия1БольшеИлиРавно И Вычислить(""Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент <> Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.Использовать"");
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция УзнатьЕстьПоддержкаНемодальныхФормКлиент()
	Возврат ЕстьПоддержкаНемодальныхФорм();
КонецФункции

&НаКлиенте
Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если Объект.текЗначениеОперации = ""ЗагрузитьФичиИзКаталога"" Тогда
		//Элементы.ПодменюЗагрузитьФичи.Заголовок = ""Загрузить фичи из каталога"";
	ИначеЕсли Объект.текЗначениеОперации = ""ЗагрузитьОднуФичу"" Тогда
		//Элементы.ПодменюЗагрузитьФичи.Заголовок = ""Загрузить одну фичу"";
	ИначеЕсли Объект.текЗначениеОперации = """" Тогда
	Иначе	
		ТекстСообщения = Локализовать(""Ошибка. Неизвестное значение параметра текЗначениеОперации = %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Объект.текЗначениеОперации);
		СообщитьПользователю(ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработатьВыборФайлаЗагрузкаФичи"", ЭтаФорма);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогФич = ДиалогОткрытияФайла.Каталог;
			// очистим кеш при смене фичи
			КешStepDefinition.Очистить();
			ЗагрузитьФичи();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКОбработкеСервер()
	
	Если Не ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		Возврат Объект.КаталогИнструментов;
	КонецЕсли;	 
	
	Если VAОткрытаКакВнешняяОбработка Тогда
		Объект1 = РеквизитФормыВЗначение(""Объект"");
		ИспользуемоеИмяФайла = Объект1.ИспользуемоеИмяФайла;
		
		Если (Лев(НРег(ИспользуемоеИмяФайла), 6) <> ""e1cib/"") И (Лев(НРег(ИспользуемоеИмяФайла), 6) <> ""e1cib\"") Тогда
			Возврат ИспользуемоеИмяФайла;
		Иначе
			Возврат """";
		КонецЕсли;	 
	Иначе
		Возврат """";
	КонецЕсли;
		 
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКОбработкеКлиент() Экспорт
	
	Если Не ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		Возврат Объект.КаталогИнструментов;
	КонецЕсли;	 
	
	Возврат ПолучитьПутьКОбработкеСервер();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки)
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки,Ложь);
	Попытка
		ПараметрыОбработки = Обработка.ПараметрыОбработки();
	Исключение
		// значит параметры не указаны
		Возврат;
	КонецПопытки;
	
	IgnoreOn82 = Ложь;
	ПараметрыОбработки.Свойство(""IgnoreOn82"",IgnoreOn82);
	
	Если IgnoreOn82 Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если Лев(СистемнаяИнформация.ВерсияПриложения,4) = ""8.2."" Тогда
			ИмяОбработки = Неопределено;
		Иначе
			Попытка
				ТекущийРежимСовместимости = Вычислить(""Метаданные.РежимСовместимости"");
				РежимыСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
			Исключение
				Возврат;
			КонецПопытки;
			
			Если ТекущийРежимСовместимости = РежимыСовместимости.Версия8_1 Тогда
				ИмяОбработки = Неопределено;
			ИначеЕсли ТекущийРежимСовместимости = РежимыСовместимости.Версия8_2_13 Тогда
				ИмяОбработки = Неопределено;
			ИначеЕсли ТекущийРежимСовместимости = РежимыСовместимости.Версия8_2_16 Тогда
				ИмяОбработки = Неопределено;
			КонецЕсли;	 

		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки)
	Обработка = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		Если ДополнительныеПараметры.Свойство(""ИмяФайла"") Тогда
			Файл = Новый Файл(ДополнительныеПараметры.ИмяФайла);
			Если Файл.Существует() Тогда
				Обработка = ВнешниеОбработки.Создать(ДополнительныеПараметры.ИмяФайла, Ложь);
				ИмяОбработки = Обработка.Метаданные().Имя;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Обработка; 
КонецФункции	 

&НаСервере
Процедура ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(ИмяФайла, ВерсияФайла)
	ДобавитьСнипетВТаблицуИзвестныхStepDefinitionВызовСКлиента(""ПустойСнипет"" + ИмяФайла, """", ИмяФайла, Новый Массив, НРег(""ПустойСнипет"" + ИмяФайла), """", """", ВерсияФайла, """", """", Неопределено);	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСнипетВТаблицуИзвестныхStepDefinitionВызовСКлиента(ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста, Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	
	СтрТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоиска, ""СтрокаДляПоиска"");
	Если СтрТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
		ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста, Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве);
		ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, ""ТаблицаИзвестныхStepDefinition"");
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста, Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве)
	СтрТаблицаИзвестныхStepDefinition                         = ТзнТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	
	УниверсальноеПолноеИмя = ИмяФайла;

	Попытка
		Файл = Новый Файл(ИмяФайла);		
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл);
	Исключение
	КонецПопытки;

	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = УниверсальноеПолноеИмя;

	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска         = СтрокаДляПоиска;
	СтрТаблицаИзвестныхStepDefinition.ПредставлениеТеста      = ПредставлениеТеста;
	СтрТаблицаИзвестныхStepDefinition.Транзакция              = Транзакция;	
	СтрТаблицаИзвестныхStepDefinition.ВерсияФайла             = ВерсияФайла;	
	СтрТаблицаИзвестныхStepDefinition.ОписаниеШага            = ОписаниеШага;
	СтрТаблицаИзвестныхStepDefinition.ТипШага                 = ТипШага;
	СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве          = ТипШагаВДереве;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьПутиФайлов(Знач Путь1, Знач Путь2)
	
	Возврат УниверсальноеПолноеИмяФайла(Путь1, Истина) = УниверсальноеПолноеИмяФайла(Путь2, Истина);


КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьПутьКФайлуКСтандарту(Знач Путь)

	Возврат УниверсальноеПолноеИмяФайла(Путь);

КонецФункции	

&НаСервереБезКонтекста
Процедура ДобавитьСнипет(Знач Снипет, Знач ИмяФайла, ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition,СтруктураПараметров)
	
	ИмяФайла                = УниверсальноеПолноеИмяФайла(ИмяФайла);
	СтрокаРеальнойПроцедуры = СокрЛП(Снипет.ИмяПроцедуры);
	ID                      = СокрЛП(Снипет.Снипет);
	
	// уберем слово ""Экспорт""
	Если Прав(НРег(СтрокаРеальнойПроцедуры), 7) = ""экспорт"" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры, СтрДлина(СтрокаРеальнойПроцедуры) - 7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры), 9) = ""процедура"" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры, 10));
	КонецЕсли;
	
	Поз = Найти(ID, ""("");
	СтрПараметры = Сред(ID, Поз + 1);
	СтрПараметры = Лев(СтрПараметры, СтрДлина(СтрПараметры) - 1);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, "","");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = ""Строка"";
		Если Найти(НРег(Элем), ""число"") > 0 Тогда
			Тип = ""Число"";
		КонецЕсли;
		Если Найти(НРег(Элем), ""дата"") > 0 Тогда
			Тип = ""Дата"";
		КонецЕсли;
		СтруктураПарам.Вставить(""Тип"", Тип);
		МассивПараметров.Добавить(СтруктураПарам);
	КонецЦикла;
	
	ПромСтр = ТзнТаблицаИзвестныхStepDefinition.Найти(ID, ""ID"");
	Если ПромСтр <> Неопределено Тогда
		Если СравнитьПутиФайлов(ПромСтр.ИмяФайла, ИмяФайла) Тогда // значит этот снипет из того же файла
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		ТекстСообщения = ТекстСообщенияПользователюВызовСервера(""Ошибка в файле %1, снипет %2 уже был в %3"", СтруктураПараметров.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ID);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%3"", ПромСтр.ИмяФайла);
		СообщитьПользователюСеврер(ТекстСообщения); 
		Возврат;
	КонецЕсли;
	
	Если Не Снипет.Свойство(""ОписаниеШага"") Тогда
		ОписаниеШага        = """";
	Иначе	
		ОписаниеШага        = Снипет.ОписаниеШага;
	КонецЕсли;	 
	Если Не Снипет.Свойство(""ТипШага"") Тогда
		ТипШага             = """";
	Иначе	
		ТипШага             = Снипет.ТипШага;
	КонецЕсли;	 
	
	ТипШагаВДереве = Неопределено;
	Если Снипет.Свойство(""ТипШагаВДереве"") Тогда
		ТипШагаВДереве = Снипет.ТипШагаВДереве;
	КонецЕсли;	 
	
	ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, НРег(Лев(ID, Найти(ID, ""("") - 1)), Снипет.ПредставлениеТеста, Снипет.Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСнипетыСерверМассивом(ДанныеДляСнипетов, ДопПараметры)
	Для Каждого Данные Из ДанныеДляСнипетов Цикл
		Если Данные.МассивСнипетовИзОбработки.Количество() = 0 Тогда
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(Данные.ИмяФайла, Данные.ВерсияФайла);
		Иначе	
			БылиОшибки = Ложь;
			ДобавитьСнипетыСервер(Данные.МассивСнипетовИзОбработки, Данные.ИмяФайла, Данные.ВерсияФайла, БылиОшибки, ДопПараметры);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСнипетыСервер(МассивСнипетовИзОбработки, ИмяФайла, ВерсияФайла, БылиОшибки,СтруктураПараметров)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	
	Для каждого ЭлементСодержащийСнипеты Из МассивСнипетовИзОбработки Цикл
		Если ТипЗнч(ЭлементСодержащийСнипеты) = Тип(""Структура"") И ЭлементСодержащийСнипеты.Свойство(""МассивСнипетовИзОбработки"") Тогда
			Для Каждого Снипет Из ЭлементСодержащийСнипеты.МассивСнипетовИзОбработки Цикл
				ДобавитьСнипет(Снипет, ЭлементСодержащийСнипеты.ИмяВнутреннейФормы, ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition,СтруктураПараметров);
			КонецЦикла;	
		Иначе	
			ДобавитьСнипет(ЭлементСодержащийСнипеты, ИмяФайла, ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition,СтруктураПараметров);
		КонецЕсли;	 
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, ""ТаблицаИзвестныхStepDefinition"");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуСервер(ИмяФайла)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	
	Отбор = Новый Структура;
	Отбор.Вставить(""ИмяФайла"", ИмяФайла);
	МассивСтрок = ТзнТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		ТзнТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, ""ТаблицаИзвестныхStepDefinition"");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКонтекстовОбработокНеПодключаяОбработки(Файл)
	СтрТаблицаКонтекстовОбработок = Новый Структура;
	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить(""ИмяФайла"", УниверсальноеПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить(""Обработка"", Неопределено);
	
	ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
	МассивИменКонтекстовОбработок.Добавить(Нрег(УниверсальноеПолноеИмя));
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШагВременныйФичаФайл(ДанныеДляПодключения, Шаги, ДопПараметры)
	
	ПомещаемыеФайлы = Новый Массив;
	ПараметрыЗавершения = Новый Структура;	
	ДанныеФайлов = Новый Соответствие;
	Для Каждого ИмяФайла Из ДанныеДляПодключения Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		Файл = Новый Файл(ИмяФайла); 
		ДанныеФайлов.Вставить(ИмяФайла,Новый Структура(""Имя,ИмяФайла,ВерсияФайла"",Файл.Имя,ИмяФайла,Неопределено));
	КонецЦикла;	 
	
	ПараметрыЗавершения.Вставить(""ДанныеДляПодключения"",ДанныеДляПодключения);
	ПараметрыЗавершения.Вставить(""Шаги"",Шаги);
	
	ПараметрыЗавершения.Вставить(""ДанныеФайлов"",ДанныеФайлов);
	ПараметрыЗавершения.Вставить(""ДопПараметры"",ДопПараметры);
	
	Оповещение = Новый ОписаниеОповещения(
	""ОбработчикКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШагВременныйФичаФайл"", ЭтаФорма, ПараметрыЗавершения);
	
	БылаОшибка = Истина;
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			НачатьПомещениеФайлов(Оповещение,ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Стр = """";
		Для Каждого Элем Из ДанныеДляПодключения Цикл
			Стр = Стр + Элем + Символы.ПС; 
		КонецЦикла;	 
		
		ТекстСообщения = Локализовать(""Не получилось выполнить помещение файлов: <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШаг(ИмяФайла, ТекШаг)
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла);
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить(""ИмяФайла"",ИмяФайла);
	ПараметрыЗавершения.Вставить(""ТекШаг"",ТекШаг);
	
	Файл = Новый Файл(ИмяФайла); 
	
	ДанныеФайлов = Новый Соответствие;
	ДанныеФайлов.Вставить(ИмяФайла,Новый Структура(""Имя,ИмяФайла,ВерсияФайла"",Файл.Имя,ИмяФайла,Неопределено));
	Файл = Неопределено;
	
	ПараметрыЗавершения.Вставить(""ДанныеФайлов"",ДанныеФайлов);
	
	Оповещение = Новый ОписаниеОповещения(
	""ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШаг"", ЭтаФорма, ПараметрыЗавершения);
	
	БылаОшибка = Истина;
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			НачатьПомещениеФайлов(Оповещение,ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ТекстСообщения = Локализовать(""Не получилось выполнить помещение файла <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(МассивФайлов,РезультатПрохожденияШага,ДопПараметры = Неопределено)
	ПомещаемыеФайлы = Новый Массив;
	ДанныеФайлов = Новый Соответствие;
	Для Каждого ИмяФайла Из МассивФайлов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		Файл = Новый Файл(ИмяФайла); 
		ДанныеФайлов.Вставить(ИмяФайла,Новый Структура(""Имя,ИмяФайла,ВерсияФайла"",Файл.Имя,ИмяФайла,Неопределено));
	КонецЦикла;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить(""МассивФайлов"",МассивФайлов);
	ПараметрыЗавершения.Вставить(""РезультатПрохожденияШага"",РезультатПрохожденияШага);
	ПараметрыЗавершения.Вставить(""ДанныеФайлов"",ДанныеФайлов);
	
	ИмяОбработчика = ""ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага"";
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""ИмяОбработчика"") Тогда
			ИмяОбработчика = ДопПараметры.ИмяОбработчика;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Оповещение = Новый ОписаниеОповещения(ИмяОбработчика, ЭтаФорма, ПараметрыЗавершения);
	
	БылаОшибка = Истина;
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			НачатьПомещениеФайлов(Оповещение,ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ТекстСообщения = Локализовать(""Не получилось выполнить помещение файлов: <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить(""ПолучатьСнипеты"",Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	Для Каждого АдресСнипета Из МассивФайлов Цикл
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		Если ИД = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
			ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		КонецЕсли;	 
		
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			Если ОбработкаТеста = Неопределено Тогда
				ТекстСообщения = Локализовать(""Не смог подключить обработку <%1>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",АдресСнипета);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	ВыполнитьШагПродолжение(ДополнительныеПараметры.РезультатПрохожденияШага,ОбработкаТеста);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить(""ПолучатьСнипеты"",Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	Для Каждого АдресСнипета Из МассивФайлов Цикл
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		Если ИД = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
			ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		КонецЕсли;	 
		
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			Если ОбработкаТеста = Неопределено Тогда
				ТекстСообщения = Локализовать(""Не смог подключить обработку <%1>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",АдресСнипета);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	ВыполнитьСценарийАссинхронноТаймерПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШаг(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить(""ПолучатьСнипеты"",Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	
	АдресСнипета = ДополнительныеПараметры.ИмяФайла;
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ОбработкаТеста = Неопределено Тогда
		Если ОбработкаТеста = Неопределено Тогда
			ТекстСообщения = Локализовать(""Не смог подключить обработку <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",АдресСнипета);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Попытка
		ВыполнитьПроцедуруШагПродолжение(ОбработкаТеста, ДополнительныеПараметры.ТекШаг);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШагВременныйФичаФайл(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить(""ПолучатьСнипеты"",Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	
	ДанныеДляПодключения = ДополнительныеПараметры.ДанныеДляПодключения;
	Для Каждого ИмяФайла Из ДанныеДляПодключения Цикл
		АдресСнипета = ИмяФайла;
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		Если ИД = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
			ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		КонецЕсли;	 
		
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			Если ОбработкаТеста = Неопределено Тогда
				ТекстСообщения = Локализовать(""Не смог подключить обработку <%1>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",АдресСнипета);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Попытка
		ВыполнитьМетодШагЧерезВременныйФичаФайлПродолжение(ДополнительныеПараметры.Шаги, ДополнительныеПараметры.ДопПараметры);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
Функция ПодключитьКонтекстОбработкиКлиент(ОбъектСодержащийШаги, ВерсияФайла = Неопределено,ДопПараметры = Неопределено)
	Перем  ФормаОбработки, ИмяОбработки, УниверсальноеПолноеИмя;
	
	ФормаОбработки = Неопределено;
	ЭтоВнутренняяФорма = Ложь;
	Если ЭтоВнутреннийАдресФормы(ОбъектСодержащийШаги) Тогда
		ЭтоВнутренняяФорма = Истина;
		Файл = Неопределено;
	Иначе
		Файл = Новый Файл(ОбъектСодержащийШаги);
	КонецЕсли;	 
	
	Если ЭтоВнутренняяФорма Тогда
		ФормаОбработки         = ПолучитьФорму(ОбъектСодержащийШаги);
		УниверсальноеПолноеИмя = ОбъектСодержащийШаги;
	Иначе	
		Попытка
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить(""ИмяФайла"",Файл.ПолноеИмя);
			Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
				Если ДопПараметры.Свойство(""АдресХранилища"") Тогда
					ДополнительныеПараметры.Вставить(""АдресХранилища"",ДопПараметры.АдресХранилища);
				КонецЕсли;	 
			КонецЕсли;	 
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(Файл.ПолноеИмя,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметры);
			Если ИмяОбработки = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;	 
			
			ФормаОбработки = ПолучитьФорму(""ВнешняяОбработка."" + ИмяОбработки + "".Форма.Форма"");
			Если ФормаОбработки = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли; 
		Исключение
			Отладка(""Не смог получить список шагов в обработке: "" + Файл.ПолноеИмя);
			Отладка(""ПолучитьУжеСуществующиеСнипетыИзОбработок:"" + ОписаниеОшибки());
			
			Если ВерсияФайла = Неопределено Тогда
				Возврат Ложь;//значит просто не получилось подключить обработку
			Иначе
				// Значит передали ВерсиюФайла, тогда добавим обработку в кеш, чтобы она не пыталась загрузиться в следующий раз.
			КонецЕсли;	 
			
		КонецПопытки;
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
	КонецЕсли;	 
	
	СтрТаблицаКонтекстовОбработок = Новый Структура;
	СтрТаблицаКонтекстовОбработок.Вставить(""ИмяФайла"", УниверсальноеПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить(""Обработка"", ФормаОбработки);
	
	ИД = МассивИменКонтекстовОбработок.Найти(Нрег(УниверсальноеПолноеИмя));
	Если ИД = Неопределено Тогда
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		МассивИменКонтекстовОбработок.Добавить(Нрег(УниверсальноеПолноеИмя));
	Иначе
		ТаблицаКонтекстовОбработок[ИД] = СтрТаблицаКонтекстовОбработок;
	КонецЕсли;	 
	
	// этот вызов нужен чтобы передать контекст vanessa automation внутрь обработки
	Если ФормаОбработки <> Неопределено Тогда
		Попытка
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			ТекстСообщения = Локализовать(""Не смог загрузить снипеты из %1"");
			Если ЭтоВнутренняяФорма Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОбъектСодержащийШаги + "" "" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Иначе	
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Файл.ПолноеИмя + "" "" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			КонецЕсли;	 
			ЗаписатьЛогВЖРОшибка(""VanessaAutomation.ПолучитьСписокТестов"", ТекстСообщения);
			СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Если ЭтоВнутренняяФорма Тогда
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(ОбъектСодержащийШаги, ВерсияФайла);
		Иначе	
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(Файл.ПолноеИмя, ВерсияФайла);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТаблицаИзвестныхStepDefinitionИзМакетаСервер()
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	
	ТекстовыйДокумент = ОбъектСервер.ПолучитьМакет(""МакетСлужебныйКеш"");
	СлужебнаяСтрока   = ТекстовыйДокумент.ПолучитьТекст();
	Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
		Возврат 0;
	КонецЕсли;	
	
	ДанныеСлужебногоКеша = ЗначениеИзСтрокиВнутр(СлужебнаяСтрока);
	ТаблицаКешStepDefinition = ДанныеСлужебногоКеша.КешStepDefinition;
	Для Каждого СтрокаМакетСлужебныйКеш Из ТаблицаКешStepDefinition Цикл
		СтрокаДляПоиска = СтрокаМакетСлужебныйКеш.СтрокаДляПоиска;
		СтрокаТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоиска,""СтрокаДляПоиска"");
		Если СтрокаТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
			СтрокаТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТзнТаблицаИзвестныхStepDefinition,СтрокаМакетСлужебныйКеш);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НЕ VAОткрытаКакВнешняяОбработка Тогда
		Для Каждого СтрТзнТаблицаИзвестныхStepDefinition Из ТзнТаблицаИзвестныхStepDefinition Цикл
			СтрТзнТаблицаИзвестныхStepDefinition.ИмяФайла 
			    = СтрЗаменить(СтрТзнТаблицаИзвестныхStepDefinition.ИмяФайла,""ВнешняяОбработка."",""Обработка."");
		КонецЦикла;	 
	КонецЕсли;		
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition,""ТаблицаИзвестныхStepDefinition"");
	
	Возврат ТаблицаКешStepDefinition.Количество(); 
КонецФункции

&НаКлиенте
Процедура ПодключитьСнипетыИзВнутреннихФорм(МассивФорм, ВерсияФайла, БылиОшибки,СтруктураПараметров,
	  МассивИменФайловКоторыеСовпалиСКеш,МассивИменКонтекстовОбработок,ТаблицаКонтекстовОбработок,КаталогФич)
	  
	  
	Если ТаблицаИзвестныхStepDefinition.Количество() = 0 Тогда
		КоличествоИзвестныхШагов = ЗагрузитьТаблицаИзвестныхStepDefinitionИзМакетаСервер();  
	Иначе
		КоличествоИзвестныхШагов = ТаблицаИзвестныхStepDefinition.Количество();
	КонецЕсли;	 
	  
	МассивВсехСнипетов = Новый Массив;
	НомерФормы = 0;
	ВсегоФорм = МассивФорм.Количество();
	Для Каждого ИмяВнутреннейФормы Из МассивФорм Цикл
		НомерФормы = НомерФормы + 1;
		Если КоличествоИзвестныхШагов = 0 Тогда
			Состояние(""Встроенная форма №"" + НомерФормы + "" из "" + ВсегоФорм, Окр((НомерФормы / ВсегоФорм)*100), СокрЛП(КаталогФич));
		КонецЕсли;	 
		
		МассивИменФайловКоторыеСовпалиСКеш.Добавить(ИмяВнутреннейФормы);
		МассивИменКонтекстовОбработок.Добавить(УниверсальноеПолноеИмяФайла(ИмяВнутреннейФормы,Истина));
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить(""ИмяФайла"", ИмяВнутреннейФормы);
		СтрТаблицаКонтекстовОбработок.Вставить(""Обработка"", Неопределено);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		
		Если КоличествоИзвестныхШагов > 0 Тогда
			// значит загрузили шаги из предрасчитанного кеша
			Продолжить;
		КонецЕсли;	 
		
		
		Попытка
			ПараметрыФормы = Новый Структура;
			ФормаОбработки = ПолучитьФорму(ИмяВнутреннейФормы, ПараметрыФормы);
			СтрТаблицаКонтекстовОбработок.Вставить(""Обработка"", ФормаОбработки);
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			ТекстСообщения = Локализовать(""Не смог загрузить снипеты из %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяВнутреннейФормы);
			СообщитьПользователю(ТекстСообщения);
			
			ТекстСообщения = Локализовать(""ПолучитьУжеСуществующиеСнипетыИзОбработок:%1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки());
			СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если МассивСнипетовИзОбработки.Количество() = 0 Тогда
			// добавим пустой снипет, чтобы обработка попала в кэш
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(ИмяВнутреннейФормы, ВерсияФайла);
			Продолжить;
		КонецЕсли;	
		
		
		Структура = Новый Структура;
		Структура.Вставить(""МассивСнипетовИзОбработки"",МассивСнипетовИзОбработки);
		Структура.Вставить(""ИмяВнутреннейФормы"",ИмяВнутреннейФормы);
		
		МассивВсехСнипетов.Добавить(Структура);
	КонецЦикла;	
	
	Если КоличествоИзвестныхШагов > 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ТекстСообщенийПользователю"",Объект.ТекстСообщенийПользователю);
	ДобавитьСнипетыСервер(МассивВсехСнипетов, ИмяВнутреннейФормы, ВерсияФайла, БылиОшибки,ДопПараметры)	
КонецПроцедуры

// Подключает обработку и получает из неё снипеты
// Файл - Тип: Файл
&НаКлиенте
Процедура ПодключитьСнипетыИзОбработкиКлиент(Файл, ВерсияФайла, БылиОшибки, ДанныеДляСнипетов, АдресХранилища, ПолучатьСнипеты = Истина)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""АдресХранилища"",АдресХранилища);
	
	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя, Истина);
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмя);
	Если ИД = Неопределено Тогда
		БылиОшибки = Ложь;
		Если НЕ ПодключитьКонтекстОбработкиКлиент(Файл.ПолноеИмя, ВерсияФайла, ДопПараметры) Тогда
			Возврат;
		КонецЕсли;	 
		
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмя);
	КонецЕсли;	 
	
	
	ФормаОбработки = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ФормаОбработки = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(Файл.ПолноеИмя,,ДопПараметры);
		ФормаОбработки = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;	 
	
	Если НЕ ПолучатьСнипеты Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ФормаОбработки = Неопределено Тогда
		ТекстСообщения = Локализовать(""Не смог загрузить снипеты из %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Файл.ПолноеИмя);		
		СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщения = Локализовать(""ПолучитьУжеСуществующиеСнипетыИзОбработок:%1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	 
	
	Попытка
		МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
	Исключение
		ТекстСообщения = Локализовать(""Не смог загрузить снипеты из %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Файл.ПолноеИмя);		
		СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщения = Локализовать(""ПолучитьУжеСуществующиеСнипетыИзОбработок:%1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	ДанныеОбработки = Новый Структура;
	ДанныеОбработки.Вставить(""МассивСнипетовИзОбработки"",МассивСнипетовИзОбработки);
	ДанныеОбработки.Вставить(""ИмяФайла"",Файл.ПолноеИмя);
	ДанныеОбработки.Вставить(""ВерсияФайла"",ВерсияФайла);
	ДанныеДляСнипетов.Добавить(ДанныеОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич,ДанныеДляПолученияСнипетов,
	                                                ДополнительныеПараметры = Неопределено,
	                                                МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Неопределено,
	                                                МассивИменФайловИзТаблицаИзвестныхStepDefinition = Неопределено,
	                                                МассивИменФайловКоторыеСовпалиСКеш = Неопределено)
	
	Файл = Новый Файл(КаталогФич);
	
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = "".feature"" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка(Локализовать(""Ищу снипеты в каталоге"") + "" "" + КаталогПоиска);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, КаталогФич, ""НайденныеФайлы""); //это файлы по данной библиотеке
		Если МассивФайлов = Неопределено Тогда
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""ПоискEPF"", ""НайденныеФайлы"");
		КонецЕсли;	 
	Иначе	
		МассивФайлов = НайтиФайлы(КаталогПоиска, ""*.epf"", Истина);
	КонецЕсли;	 

	НомерФайла  = 0;
	Для Каждого ОбъектФайл Из МассивФайлов Цикл
		
		Если Не ЕстьПоддержкаАсинхронныхВызовов Тогда
			Файл = ОбъектФайл;
		Иначе
			Файл = ОбъектФайл.Файл;
		КонецЕсли;	 
		
		НомерФайла = НомерФайла + 1;
	
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВерсияФайла = Файл.ПолучитьВремяИзменения();
		Иначе
			ВерсияФайла = ОбъектФайл.ВерсияФайла;
		КонецЕсли; 
			
		Если МассивИменФайловКоторыеСовпалиСКеш <> Неопределено Тогда
			Если МассивИменФайловКоторыеСовпалиСКеш.Найти(ПреобразоватьПутьКФайлуКСтандарту(Файл.ПолноеИмя)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
		Если МассивИменФайловИзТаблицаИзвестныхStepDefinition <> Неопределено Тогда
			ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition = МассивИменФайловИзТаблицаИзвестныхStepDefinition.Найти(УниверсальноеПолноеИмя);
			Если ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition <> Неопределено Тогда
				// значит сравним версию файла
				Если МассивВерсийФайловИзТаблицаИзвестныхStepDefinition[ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition] <> ВерсияФайла Тогда
					// значит в кеше уже есть нужные снипеты обработок
					УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуСервер(УниверсальноеПолноеИмя);
					
					ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(Нрег(УниверсальноеПолноеИмя));
					Если ИДМассивИменКонтекстовОбработок <> Неопределено Тогда
						МассивИменКонтекстовОбработок.Удалить(ИДМассивИменКонтекстовОбработок);
						ТаблицаКонтекстовОбработок[ИДМассивИменКонтекстовОбработок].Обработка = Неопределено;
						ТаблицаКонтекстовОбработок.Удалить(ИДМассивИменКонтекстовОбработок);
					КонецЕсли;	 
					
					Отладка(Локализовать(""Загрузил новую версию"") + "": "" + Файл.ПолноеИмя);
				Иначе	
					Отладка(Локализовать(""Загрузил снипеты из кеш"") + "": "" + Файл.ПолноеИмя);
					МассивИменФайловКоторыеСовпалиСКеш.Добавить(УниверсальноеПолноеИмя);
					
					ЗаполнитьТаблицуКонтекстовОбработокНеПодключаяОбработки(Файл);
					
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
				
		Данные = Новый Структура;
		Данные.Вставить(""ИмяФайла"",Файл.ПолноеИмя);
		Данные.Вставить(""Имя"",Файл.Имя);
		Данные.Вставить(""ВерсияФайла"",ВерсияФайла);
		ДанныеДляПолученияСнипетов.Добавить(Данные);
		
		Если МассивИменФайловКоторыеСовпалиСКеш <> Неопределено Тогда
			МассивИменФайловКоторыеСовпалиСКеш.Добавить(УниверсальноеПолноеИмя);
		КонецЕсли;	 
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключенияБиблиотекШагов(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		Если ДополнительныеПараметры.Свойство(""ДополнительныеПараметры"") Тогда
			глСтруктураПараметров.Вставить(""ДополнительныеПараметры"",ДополнительныеПараметры.ДополнительныеПараметры);
		КонецЕсли;	 
	КонецЕсли;	 
	ЗаполнитьДеревоФичПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ОбходКаталогов(ПутьКаталога, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ТекРодитель, КолЭлементовДобавлено)
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ФайлПутьКаталога = Новый Файл(ПутьКаталога);
		Если НРег(ФайлПутьКаталога.Расширение) = "".feature"" Тогда
			НайденныеФайлы = Новый Массив; // вернём одну фичу
			НайденныеФайлы.Добавить(ФайлПутьКаталога);
			ТекРодитель = НайденныеФайлы[0].Путь;
		Иначе	
			НайденныеФайлы = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""ПоискFeature"", ""НайденныеФайлы"");
			Если ТекРодитель = Неопределено Тогда
				Если НайденныеФайлы.Количество() > 0 Тогда
					Если ТипЗнч(НайденныеФайлы[0]) = Тип(""Структура"") Тогда
						ТекРодитель = НайденныеФайлы[0].Файл.Путь;
					Иначе	
						ТекРодитель = НайденныеФайлы[0].Путь;
					КонецЕсли;	 
					
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	Иначе	
		ФайлПутьКаталога = Новый Файл(ПутьКаталога);
		Если ФайлПутьКаталога.ЭтоКаталог() Тогда
			НайденныеФайлы = НайтиФайлы(ПутьКаталога, ""*"");
		Иначе
			НайденныеФайлы = Новый Массив; // вернём одну фичу
			НайденныеФайлы.Добавить(ФайлПутьКаталога);
		КонецЕсли;	 
	КонецЕсли;	 
		
	Для каждого ОбъектФайл Из НайденныеФайлы Цикл
		Ф = ОбъектФайл;
		Если ТипЗнч(ф) = Тип(""Структура"") Тогда
			Ф = ОбъектФайл.Файл;//т.к. для режима запрета синхронных вызовов там будет структура
		КонецЕсли;	 
		
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Если ф.Путь <> ТекРодитель Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;  
		
		Если Не ЕстьПоддержкаАсинхронныхВызовов Тогда
			ЭтоКаталог = ф.ЭтоКаталог();
		Иначе
			ЭтоКаталог = Ложь;
			Если ф.Расширение = """" Тогда
				ЭтоКаталог = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ЭтоКаталог Тогда //это каталог
			СтруктураФайла = Новый Структура;
			СтруктураФайла.Вставить(""Уровень"", Уровень);
			СтруктураФайла.Вставить(""Каталог"", Истина);
			СтруктураФайла.Вставить(""Фича"", Ложь);
			СтруктураФайла.Вставить(""Имя"", ф.Имя);
			СтруктураФайла.Вставить(""ПолныйПуть"", ф.ПолноеИмя);
			СтруктураФайла.Вставить(""УниверсальноеИмя"",УниверсальноеПолноеИмяФайла(ф.ПолноеИмя,Истина));
			МассивРезультатОбходаКаталогов.Добавить(СтруктураФайла);
			ТекИД = МассивРезультатОбходаКаталогов.Количество() - 1;
			
			ТекКолЭлементовДобавлено = 0;
			Уровень = Уровень + 1;
			ОбходКаталогов(ДополнитьСлешВПуть(ПутьКаталога) + ф.Имя, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ДополнитьСлешВПуть(ф.ПолноеИмя), ТекКолЭлементовДобавлено);
			Уровень = Уровень - 1;
			
			Если ТекКолЭлементовДобавлено = 0 Тогда
				МассивРезультатОбходаКаталогов.Удалить(ТекИД);
			КонецЕсли;  
			КолЭлементовДобавлено = КолЭлементовДобавлено + ТекКолЭлементовДобавлено;
			
		ИначеЕсли НРег(ф.Расширение) = "".feature"" Тогда
			
			Если ВозможнаОптимизацияРаботыСФайлами Тогда
				ДвоичныеДанные = Неопределено
			Иначе	
				ДвоичныеДанные = Новый ДвоичныеДанные(ф.ПолноеИмя);
			КонецЕсли;	 
			СтруктураФайла = ПолучитьСтруктуруФайлаФичи(Уровень, ф.ИмяБезРасширения, ф.ПолноеИмя, ДвоичныеДанные);
			
			МассивРезультатОбходаКаталогов.Добавить(СтруктураФайла);
			КолЭлементовДобавлено = КолЭлементовДобавлено + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруФайлаФичи(Уровень, ИмяБезРасширения, ПолноеИмя, ДвоичныеДанные)
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить(""Уровень"", Уровень);
	СтруктураФайла.Вставить(""Каталог"", Ложь);
	СтруктураФайла.Вставить(""Фича"", Истина);
	СтруктураФайла.Вставить(""Имя"", ИмяБезРасширения);
	СтруктураФайла.Вставить(""ПолныйПуть"", ПолноеИмя);
	СтруктураФайла.Вставить(""УниверсальноеИмя"",УниверсальноеПолноеИмяФайла(ПолноеИмя,Истина));
	СтруктураФайла.Вставить(""ДвоичныеДанные"", ДвоичныеДанные);
	
	Возврат СтруктураФайла;
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьПустыеКаталогиИзДерева(Дерево)
	КолСтрок = Дерево.Строки.Количество();
	Для Ккк = 0 По КолСтрок - 1 Цикл
		Строка = Дерево.Строки[КолСтрок - 1 - Ккк];
		Если Строка.Тип = ""Каталог"" Тогда
			Если Строка.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Строка);
			Иначе	
				УдалитьПустыеКаталогиИзДерева(Строка);
			КонецЕсли;  
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(ИсходныйМассив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить(""ИмяСценария"");
	Тзн.Колонки.Добавить(""ИмяФайла"");
	Тзн.Колонки.Добавить(""ТаблицаШагов"");
	Тзн.Колонки.Добавить(""ПолноеИмя"");
	Тзн.Колонки.Добавить(""ДвоичныеДанные"");
	Тзн.Колонки.Добавить(""ЭтоСтруктураСценария"");
	Тзн.Колонки.Добавить(""Снипет"",Новый ОписаниеТипов(""Строка""));
	Тзн.Индексы.Добавить(""Снипет"");
	Для каждого Элем Из ИсходныйМассив Цикл
		СтрТзн = Тзн.Добавить();
		
		СтрТзн.ИмяСценария          = Элем.ИмяСценария;
		СтрТзн.ИмяФайла             = Элем.ИмяФайла;
		СтрТзн.ПолноеИмя            = Элем.ПолноеИмя;
		СтрТзн.ТаблицаШагов         = Элем.ТаблицаШагов;
		СтрТзн.ДвоичныеДанные       = Элем.ДвоичныеДанные;
		СтрТзн.ЭтоСтруктураСценария = Элем.ЭтоСтруктураСценария;
		СтрТзн.Снипет               = Элем.Снипет;
	КонецЦикла;
	
	Возврат Тзн;
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьПустыеКаталоги(МассивКаталоговДляПроверкиНаПустоту)
	Массив = Новый Массив;
	
	Для каждого ВеткаСтроки Из МассивКаталоговДляПроверкиНаПустоту Цикл
		Если ВеткаСтроки.Количество() = 0 Тогда
			ВеткаРодитель = ВеткаСтроки.Родитель.Родитель;//так определяется родитель на один уровень вверх, когда в переменной лежат строки дерева
			Если ВеткаРодитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Массив.Найти(ВеткаРодитель) = Неопределено Тогда
				Массив.Добавить(ВеткаРодитель.Строки);
			КонецЕсли;	 
			
			ВеткаРодитель.Строки.Удалить(ВеткаСтроки.Родитель);
		КонецЕсли;	 
	КонецЦикла;
	
	Если Массив.Количество() > 0 Тогда
		УдалитьПустыеКаталоги(Массив);
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция УниверсальныеИменаФайлов(Массив)
	Соответствие = Новый Соответствие;
	Ид = -1;
	Для Каждого Элем Из Массив Цикл
		Ид = Ид + 1;
		Соответствие.Вставить(Элем.УниверсальноеИмя,Ид);
	КонецЦикла;	 
	
	Возврат Соответствие;
КонецФункции	 

&НаСервере
// Нельзя менять директиву на &НаСервереБезКонтекста, т.к. тогда перестанет присваиваться переменная ТекущийЗагружаемыйФичаФайл.
// Также надо понимать, что ЗаполнитьСтрокиДереваФичамиСервер вызывается из ЗаполнитьДеревоЗначенийПоМассивуСервер,
// которая вызывается &НаСервере
Процедура ЗаполнитьСтрокиДереваФичамиСервер(Дерево, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров)
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка Из Дерево.Строки Цикл
		Если Строка.Тип = ""Фича"" Тогда
			СтруктураПараметров.Вставить(""УдалитьСтрокуФичиИзДерева"", Ложь);
			
			ТекущийЗагружаемыйФичаФайл = Строка.ПолныйПуть;
			СтруктураПараметров.Вставить(""ТаблицаИзвестныхStepDefinition"",ТзнТаблицаИзвестныхStepDefinition);
			
			Если СтруктураПараметров.КешЗагрузкиФич = Неопределено Тогда
				СтруктураПараметров.КешЗагрузкиФич = Новый Соответствие;
			ИначеЕсли ТипЗнч(СтруктураПараметров.КешЗагрузкиФич) = Тип(""Строка"") Тогда
				Адрес = СтруктураПараметров.КешЗагрузкиФич;
				СтруктураПараметров.Вставить(""КешЗагрузкиФич"",ПолучитьИзВременногоХранилища(Адрес));
				УдалитьИзВременногоХранилища(Адрес);
			КонецЕсли;	 
			
			Если СтруктураПараметров.КешПараметрыВСтроке = Неопределено Тогда
				СтруктураПараметров.КешПараметрыВСтроке = Новый Соответствие;
			ИначеЕсли ТипЗнч(СтруктураПараметров.КешПараметрыВСтроке) = Тип(""Строка"") Тогда
				Адрес = СтруктураПараметров.КешПараметрыВСтроке;
				СтруктураПараметров.Вставить(""КешПараметрыВСтроке"",ПолучитьИзВременногоХранилища(Адрес));
				УдалитьИзВременногоХранилища(Адрес);
			КонецЕсли;	 
			
			Если СтруктураПараметров.КешОпределенияТипа = Неопределено Тогда
				СтруктураПараметров.КешОпределенияТипа = Новый Соответствие;
			ИначеЕсли ТипЗнч(СтруктураПараметров.КешОпределенияТипа) = Тип(""Строка"") Тогда
				Адрес = СтруктураПараметров.КешОпределенияТипа;
				СтруктураПараметров.Вставить(""КешОпределенияТипа"",ПолучитьИзВременногоХранилища(Адрес));
				УдалитьИзВременногоХранилища(Адрес);
			КонецЕсли;	 
			
			Если СтруктураПараметров.КешПоискаКлючевыхСлов = Неопределено Тогда
				СтруктураПараметров.КешПоискаКлючевыхСлов = Новый Соответствие;
			ИначеЕсли ТипЗнч(СтруктураПараметров.КешПоискаКлючевыхСлов) = Тип(""Строка"") Тогда
				Адрес = СтруктураПараметров.КешПоискаКлючевыхСлов;
				СтруктураПараметров.Вставить(""КешПоискаКлючевыхСлов"",ПолучитьИзВременногоХранилища(Адрес));
				УдалитьИзВременногоХранилища(Адрес);
			КонецЕсли;	 
			                                           
			FeatureReader.ЗагрузитьФичу(Строка.ПолныйПуть, Строка.Строки, СтруктураПараметров);
			СтруктураПараметров.Вставить(""ТаблицаИзвестныхStepDefinition"",Неопределено);
			
			UID = Новый УникальныйИдентификатор;
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешЗагрузкиФич,UID);
			СтруктураПараметров.Вставить(""КешЗагрузкиФич"",АдресВременногоХранилища);
			
			UID = Новый УникальныйИдентификатор;
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешПараметрыВСтроке,UID);
			СтруктураПараметров.Вставить(""КешПараметрыВСтроке"",АдресВременногоХранилища);
			
			UID = Новый УникальныйИдентификатор;
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешОпределенияТипа,UID);
			СтруктураПараметров.Вставить(""КешОпределенияТипа"",АдресВременногоХранилища);
			
			UID = Новый УникальныйИдентификатор;
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешПоискаКлючевыхСлов,UID);
			СтруктураПараметров.Вставить(""КешПоискаКлючевыхСлов"",АдресВременногоХранилища);
			
			Если СтруктураПараметров.УдалитьСтрокуФичиИзДерева Тогда
				СтруктураРодительПотомок = Новый Структура;
				СтруктураРодительПотомок.Вставить(""СтрокиГдеНаходитсяФича"", Дерево.Строки);
				СтруктураРодительПотомок.Вставить(""СтрокаФичи"", Строка);
				МассивСтрокДляУдаления.Добавить(СтруктураРодительПотомок);
			КонецЕсли;	 
		Иначе	
			ЗаполнитьСтрокиДереваФичамиСервер(Строка, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
		КонецЕсли;  
	КонецЦикла;
	
	
	МассивКаталоговДляПроверкиНаПустоту = СтруктураПараметров.МассивКаталоговДляПроверкиНаПустоту;
	Для каждого Элем Из МассивСтрокДляУдаления Цикл
		Элем.СтрокиГдеНаходитсяФича.Удалить(Элем.СтрокаФичи);
		
		Если МассивКаталоговДляПроверкиНаПустоту.Найти(Элем.СтрокиГдеНаходитсяФича) = Неопределено Тогда
			МассивКаталоговДляПроверкиНаПустоту.Добавить(Элем.СтрокиГдеНаходитсяФича);
		КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьОтметкуБрейкпоинтовРекурсивно(Дерево, Брейкпоинты)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Тип = ""Шаг"" Тогда
			Если Брейкпоинты.Найти(СтрокаДерева.ПолныйПуть) <> Неопределено Тогда
				СтрокаДерева.Брейкпоинт = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПроставитьОтметкуБрейкпоинтовРекурсивно(СтрокаДерева, Брейкпоинты);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьОтметкуБрейкпоинтов(Дерево, СтруктураПараметров)
	ПроставитьОтметкуБрейкпоинтовРекурсивно(Дерево, СтруктураПараметров.Брейкпоинты);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьFeatureReader(КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла)
	
	ПутьКОбработке = ОбъединитьПути(КаталогИнструментов, ""lib"", ""FeatureReader"",,, ""vbFeatureReader.epf"");
	ФайлvbFeatureReader = Новый Файл(ПутьКОбработке);
	ВременноеИмяФайла = Неопределено;
	Если Не ФайлvbFeatureReader.Существует() Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла(""epf"");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе	
		FeatureReader = ВнешниеОбработки.Создать(ФайлvbFeatureReader.ПолноеИмя, Ложь);
	КонецЕсли;	 
	
	Возврат FeatureReader;
	
КонецФункции	


&НаСервереБезКонтекста
Процедура ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(Дерево,КоличествоШагов)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Тип = ""Шаг"" Тогда
			КоличествоШагов = КоличествоШагов + 1;
		КонецЕсли;	 
		
		ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(СтрокаДерева,КоличествоШагов);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоШаговИзДереваПоСтроке(Дерево)
	КоличествоШагов = 0;
	ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(Дерево,КоличествоШагов);
	Возврат КоличествоШагов;
КонецФункции	

&НаСервере
Процедура ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров)
	СохранитьИСкопироватьНедавноЗагруженныеФичиВИнтерфейс(СтруктураПараметров.НедавноЗагруженныеФичи, Объект.РежимСамотестирования);
	Если Не Объект.РежимСамотестирования Тогда
		СохранитьНастройкиВХранилище(""КаталогФич"", Объект.КаталогФич, ПараметрыДляСохраненияНастроекСервер());	
	КонецЕсли;	 
	
	КешСнипетовИзХранилищаЗначений(СтруктураПараметров);
	
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	ТзнТаблицаИзвестныхStepDefinition.Сортировать(""СтрокаДляПоиска"");
	ТзнТаблицаИзвестныхStepDefinition.Индексы.Добавить(""СтрокаДляПоиска"");
	
	
	ТзнКешStepDefinition = РеквизитФормыВЗначение(""КешStepDefinition"");
	ТзнКешStepDefinition.Индексы.Добавить(""ИмяШагаБезКлючевогоСлова"");
	СтруктураПараметров.Вставить(""КешStepDefinition"",ТзнКешStepDefinition);
	
	ТолькоДляПолученияСпискаФич = Ложь;
	СтруктураПараметров.Свойство(""ТолькоДляПолученияСпискаФич"",ТолькоДляПолученияСпискаФич);
	Если ТолькоДляПолученияСпискаФич = Истина Тогда
		Дерево = ОбъектСервер.ДеревоТестов.Скопировать();
	Иначе	
		Дерево = ОбъектСервер.ДеревоТестов;
	КонецЕсли;	 
	
	Дерево.Строки.Очистить();
	ТекДерево  = Дерево;
	ТекУровень = 0;
	
	Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
		Если Элем.Уровень > ТекУровень Тогда
			ТекУровень = Элем.Уровень;
			НовСтр     = ТекДерево.Строки.Добавить();
			ТекДерево  = НовСтр;
		ИначеЕсли Элем.Уровень < ТекУровень Тогда
			Разн = ТекУровень - Элем.Уровень;
			Для Ккк = 1 По Разн Цикл
				НовСтр = НовСтр.Родитель;
			КонецЦикла;
			НовСтр     = НовСтр.Родитель.Строки.Добавить();
			ТекУровень = Элем.Уровень;
			ТекДерево  = НовСтр;
		Иначе	
			НовСтр     = ТекДерево.Родитель.Строки.Добавить();
			ТекДерево  = НовСтр;
		КонецЕсли;  
		
		Если Элем.Каталог Тогда
			//НовСтр            = ТекСтроки.Строки.Добавить();
			НовСтр.Тип        = ""Каталог"";
			НовСтр.ПолныйПуть = Элем.ПолныйПуть;
			НовСтр.Имя        = Элем.Имя;
		ИначеЕсли Элем.Фича Тогда
			//НовСтр            = ТекСтроки.Строки.Добавить();
			НовСтр.Тип         = ""Фича"";
			НовСтр.ТипКартинки = 1;
			НовСтр.ПолныйПуть  = Элем.ПолныйПуть;
			НовСтр.Имя         = Элем.Имя;
		КонецЕсли;  
		
	КонецЦикла;
	
	УдалитьПустыеКаталогиИзДерева(Дерево);
	
	Дерево.Строки.Сортировать(""ПолныйПуть"", Истина);
	
	
	
	ВременноеИмяФайла = Неопределено;
	Если ОбъектСервер.ВерсияПоставки = ""standart"" Тогда
		FeatureReader     = СоздатьFeatureReader(Объект.КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе	
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	Если Не СтруктураПараметров.Свойство(""ТаблицаУжеСуществующихСценариев"") Тогда
		ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
		СтруктураПараметров.Вставить(""ТаблицаУжеСуществующихСценариев"", ТаблицаУжеСуществующихСценариевСервер);
	КонецЕсли;	 
	
	МассивКаталоговДляПроверкиНаПустоту = Новый Массив;
	СтруктураПараметров.Вставить(""МассивКаталоговДляПроверкиНаПустоту"", МассивКаталоговДляПроверкиНаПустоту);
	
	СтруктураПараметров.Вставить(""УниверсальныеИменаФайлов"",УниверсальныеИменаФайлов(МассивРезультатОбходаКаталогов));
	ЗаполнитьСтрокиДереваФичамиСервер(Дерево, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
	
	Для Каждого Элем Из СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ Цикл
		СтрокаТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариев.Найти(Элем.ИмяСценария,""ИмяСценария"");
		Если СтрокаТаблицаУжеСуществующихСценариев <> Неопределено Тогда
			// обновим снипеты для сценариев, которые описаны в фича файлах как экспортные
			Элем.Снипет = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
		КонецЕсли;	 
	КонецЦикла;	 
	
	УдалитьПустыеКаталоги(МассивКаталоговДляПроверкиНаПустоту);
	СтруктураПараметров.МассивКаталоговДляПроверкиНаПустоту = Неопределено;
	СтруктураПараметров.ТаблицаУжеСуществующихСценариев = Неопределено;
	Если СтруктураПараметров.Свойство(""КешФич"") Тогда
		СтруктураПараметров.КешФич = Неопределено;
	КонецЕсли;	 
	
	
	
	Если СтруктураПараметров.Брейкпоинты.Количество() > 0 Тогда
		ПроставитьОтметкуБрейкпоинтов(Дерево, СтруктураПараметров);
	КонецЕсли;	 
	
	
	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;	 
	
	
	ЗаполнитьИДСтрокиДереваСервер(СтруктураПараметров, Дерево);	
	
	
	Если ТолькоДляПолученияСпискаФич = Истина Тогда
		ТаблицаФич = Новый ТаблицаЗначений;
		ТаблицаФич.Колонки.Добавить(""Фича"");
		ТаблицаФич.Колонки.Добавить(""КоличествоШагов"");
		ТаблицаФич.Колонки.Добавить(""МассивТегов"");
		СтрокиСФичами = Дерево.Строки.НайтиСтроки(Новый Структура(""Тип"",""Фича""),Истина);
		Для Каждого СтрокаДерева Из СтрокиСФичами Цикл
			СтрокаТаблицаФич                 = ТаблицаФич.Добавить();
			СтрокаТаблицаФич.Фича            = СтрокаДерева.ПолныйПуть;
			СтрокаТаблицаФич.КоличествоШагов = ПолучитьКоличествоШаговИзДереваПоСтроке(СтрокаДерева);
			СтрокаТаблицаФич.МассивТегов     = СтрокаДерева.ПроизвольныеЗначения.МассивТегов;
		КонецЦикла;	
		
		Массив = Новый Массив;
		ТаблицаФич.Сортировать(""КоличествоШагов убыв"");
		Для Каждого СтрокаТаблицаФич Из ТаблицаФич Цикл
			Массив.Добавить(Новый Структура(""Фича,МассивТегов"",СтрокаТаблицаФич.Фича,СтрокаТаблицаФич.ПроизвольныеЗначения.МассивТегов));
		КонецЦикла;	
		СтруктураПараметров.МассивФичДляПослеНаложенияФильтров = Массив;
	Иначе	
		ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, ""ТаблицаИзвестныхStepDefinition"");
		ЗначениеВРеквизитФормы(ТзнКешStepDefinition, ""КешStepDefinition"");
		ЗначениеВРеквизитФормы(ОбъектСервер, ""Объект"");
		
		ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроекСервер();
		СохранитьНастройкиВХранилище(""ТаблицаИзвестныхStepDefinition"",ТаблицаИзвестныхStepDefinition,ПараметрыДляСохраненияНастроек);
		СохранитьНастройкиВХранилище(""КешStepDefinition"",КешStepDefinition,ПараметрыДляСохраненияНастроек);
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить(""КешStepDefinition"",Неопределено);
	СтруктураПараметров.Вставить(""ТаблицаОбластей"",Неопределено);	
	СтруктураПараметров.Вставить(""ТаблицаПеревода"",Неопределено);	
	
	ВывестиСтатистикуНаСервере(Дерево);
	
	КешСнипетовВХранилищаЗначений(СтруктураПараметров);
	
	СтруктураПараметровНовый = Новый Структура;
	СтруктураПараметровНовый.Вставить(""КешДанныеПеревода"",СтруктураПараметров.КешДанныеПеревода);
	СтруктураПараметровНовый.Вставить(""КешСнипетов"",СтруктураПараметров.КешСнипетов);
	СтруктураПараметровНовый.Вставить(""ТаблицаУжеСуществующихСценариевУФ"",СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
	СтруктураПараметровНовый.Вставить(""БылиОшибкиЗагрузкиФич"",СтруктураПараметров.БылиОшибкиЗагрузкиФич);
	СтруктураПараметровНовый.Вставить(""КешЗагрузкиФич"",СтруктураПараметров.КешЗагрузкиФич);
	СтруктураПараметровНовый.Вставить(""КешПараметрыВСтроке"",СтруктураПараметров.КешПараметрыВСтроке);
	СтруктураПараметровНовый.Вставить(""КешОпределенияТипа"",СтруктураПараметров.КешОпределенияТипа);
	СтруктураПараметровНовый.Вставить(""КешПоискаКлючевыхСлов"",СтруктураПараметров.КешПоискаКлючевыхСлов);
	СтруктураПараметровНовый.Вставить(""ОшибкиЗагрузкиФич"",СтруктураПараметров.ОшибкиЗагрузкиФич);
	
	Если СтруктураПараметров.Свойство(""ДляПоискаПеревод"") Тогда
		СтруктураПараметровНовый.Вставить(""ДляПоискаПеревод"",СтруктураПараметров.ДляПоискаПеревод);
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство(""ДляПоискаРусский"") Тогда
		СтруктураПараметровНовый.Вставить(""ДляПоискаРусский"",СтруктураПараметров.ДляПоискаРусский);
	КонецЕсли;	 
	
	СтруктураПараметров = Неопределено;
	СтруктураПараметров = СтруктураПараметровНовый;
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСохраненияНастроекСервер()
	Структура = Новый Структура;
	Структура.Вставить(""ПрефиксИнструментаДляСохраненияНастроек"",ПолучитьПрефиксИнструмента());
	Структура.Вставить(""ИДДляОбщегоСохраненияНастроек"",ПолучитьИДСохраненияОбщихНастроек());
	
	Возврат Структура; 
КонецФункции	 

&НаКлиенте
Функция ПараметрыДляСохраненияНастроек()
	Структура = Новый Структура;
	Структура.Вставить(""ПрефиксИнструментаДляСохраненияНастроек"",ПрефиксИнструментаДляСохраненияНастроек);
	Структура.Вставить(""ИДДляОбщегоСохраненияНастроек"",ИДДляОбщегоСохраненияНастроек);
	
	Возврат Структура; 
КонецФункции	 

&НаКлиенте
Функция ОпределитьВозможнаОптимизацияЗагрузкиФичи(ДанныеТекущейФичи, ДанныеИзмененныхСтрок, МассивДействий)
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи.КоличествоИзвестныхШагов <> ТаблицаИзвестныхStepDefinition.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Объект.КаталогФич <> ДанныеВозможнаОптимизацияЗагрузкиФичи.КаталогФич Тогда
		//Изменилась фича
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеТекущейФичи.ТаблицаСтрокФичи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеФичи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеФичи.ТаблицаСтрокФичи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеТекущейФичи.ТаблицаСтрокФичи.Количество() <> ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеФичи.ТаблицаСтрокФичи.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ТекТаблицаСтрокФичи  = ДанныеТекущейФичи.ТаблицаСтрокФичи;
	ПредТаблицаСтрокФичи = ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеФичи.ТаблицаСтрокФичи;
	
	ДанныеИзмененныхСтрок = Новый Массив;
	
	Для Сч = 0 По ДанныеТекущейФичи.ТаблицаСтрокФичи.Количество()-1 Цикл
		ТекСтр  = ТекТаблицаСтрокФичи[Сч];
		ПредСтр = ПредТаблицаСтрокФичи[Сч];
		
		Если ТекСтр <> ПредСтр Тогда
			Если ЭтоЗакомментированнаяСтрокаСценария(ТекСтр) Тогда
				Возврат Ложь;
			КонецЕсли;	 
			
			Если ПустаяСтрока(ТекСтр) Тогда
				Возврат Ложь;
			КонецЕсли;	 
			
			ИзмененнаяСтрока = Новый Структура;
			ИзмененнаяСтрока.Вставить(""ПредыдущаяСтрока"",ПредСтр);
			ИзмененнаяСтрока.Вставить(""ТекущаяСтрока"",ТекСтр);
			ИзмененнаяСтрока.Вставить(""НомерСтрокиВФиче"",Сч+1);
			ИзмененнаяСтрока.Вставить(""Обработана"",Ложь);
			
			ДанныеИзмененныхСтрок.Добавить(ИзмененнаяСтрока);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Каждого ДанныеПодсценария Из ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеПодсценариев Цикл
		ВремяИзмененияФайла = ВремяИзмененияФайлаКомандаСистемы(ДанныеПодсценария.Ключ);
		Если ВремяИзмененияФайла <> ДанныеПодсценария.Значение Тогда
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Процедура ЗаполнитьДанныеВозможнаОптимизацияЗагрузкиФичи(СтруктураПараметров,ДанныеФичи,МассивДействий)
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи = Неопределено Тогда
		ДанныеВозможнаОптимизацияЗагрузкиФичи = Новый Структура;
	КонецЕсли;	 
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить(""КаталогФич"",Объект.КаталогФич);
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить(""ДанныеФичи"",ДанныеФичи);
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить(""КоличествоИзвестныхШагов"",ТаблицаИзвестныхStepDefinition.Количество());
	
	ДанныеПодсценариев = ДанныеПодсценариевПоДереву(МассивДействий);
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить(""ДанныеПодсценариев"",ДанныеПодсценариев);
	
	Если СтруктураПараметров.Свойство(""ДляПоискаПеревод"") Тогда
		ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить(""ДляПоискаПеревод"",СтруктураПараметров.ДляПоискаПеревод);
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство(""ДляПоискаРусский"") Тогда
		ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить(""ДляПоискаРусский"",СтруктураПараметров.ДляПоискаРусский);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьМодульПарсерФич()
	ПараметрыФормы = Новый Структура;
	Возврат ПолучитьФорму(ПолучитьИмяОбработкиVA() + "".Форма.ПарсерФич"", ПараметрыФормы,ЭтаФорма);
КонецФункции	 

&НаКлиенте
Процедура РассчитатьДанныеСтрокиДереваКлиент(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы)
	ДанныеСтрокиФичи.Вставить(""Обработана"",Истина);
	
	Если МодульПарсерФич = Неопределено Тогда
		МодульПарсерФич = ПолучитьМодульПарсерФич();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""ЭтоLinux"",ЭтоLinux);
	СтруктураПараметров.Вставить(""ДанныеВозможнаОптимизацияЗагрузкиФичи"",ДанныеВозможнаОптимизацияЗагрузкиФичи);
	
	МодульПарсерФич.РассчитатьДанныеСтрокиДереваКлиент(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы, ЭтаФорма, СтруктураПараметров);
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДеревоПоИзмененнымСтрокамРекурсивно(ДанныеФичи, СоотДанныеИзмененныхСтрок, ДеревоЭлементы, ДопПараметры)
	Если НЕ ДопПараметры.ВозможнаОптимизацияЗагрузкиФичи Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДеревоЭлементы Из ДеревоЭлементы Цикл
		Если СоотДанныеИзмененныхСтрок[СтрокаДеревоЭлементы.НомерСтрокиВФиче] <> Неопределено Тогда
			Если СтрокаДеревоЭлементы.Тип <> ""Шаг"" И НЕ СтрокаДеревоЭлементы.СтрокаПараметровШагаВВидеТаблицы Тогда
				//Только для шагов
				ДопПараметры.ВозможнаОптимизацияЗагрузкиФичи = Ложь;
				Прервать;
			КонецЕсли;	 
			
			Если СтрокаДеревоЭлементы.ШагСПараметрамиВТаблице Тогда
				//Если есть передача таблицы ниже, тогда надо ещё читать и её.
				ДопПараметры.ВозможнаОптимизацияЗагрузкиФичи = Ложь;
				Прервать;
			КонецЕсли;	 
			
			ДанныеСтрокиФичи = СоотДанныеИзмененныхСтрок[СтрокаДеревоЭлементы.НомерСтрокиВФиче];
			РассчитатьДанныеСтрокиДереваКлиент(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы);
			
		КонецЕсли;	 
		ЗаполнитьДеревоПоИзмененнымСтрокамРекурсивно(ДанныеФичи, СоотДанныеИзмененныхСтрок, СтрокаДеревоЭлементы.ПолучитьЭлементы(), ДопПараметры)
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДеревоПоИзмененнымСтрокам(ДанныеФичи, ДанныеИзмененныхСтрок, ВозможнаОптимизацияЗагрузкиФичи)
	СоотДанныеИзмененныхСтрок = Новый Соответствие;
	Для Каждого Элем Из ДанныеИзмененныхСтрок Цикл
		СоотДанныеИзмененныхСтрок.Вставить(Элем.НомерСтрокиВФиче,Элем);
	КонецЦикла;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ВозможнаОптимизацияЗагрузкиФичи"",ВозможнаОптимизацияЗагрузкиФичи);
	
	ЗаполнитьДеревоПоИзмененнымСтрокамРекурсивно(ДанныеФичи, СоотДанныеИзмененныхСтрок, Объект.ДеревоТестов.ПолучитьЭлементы(), ДопПараметры);
	
	ВозможнаОптимизацияЗагрузкиФичи = ДопПараметры.ВозможнаОптимизацияЗагрузкиФичи;
	Если ВозможнаОптимизацияЗагрузкиФичи Тогда
		Для Каждого Элем Из ДанныеИзмененныхСтрок Цикл
			Если НЕ Элем.Обработана Тогда
				ВозможнаОптимизацияЗагрузкиФичи = Ложь;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДерево(Каталог, ДополнительныеПараметры, СтруктураПараметров)
	Файл = Новый Файл(Каталог);
	МассивРезультатОбходаКаталогов = Новый Массив;
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить(""Каталог"", Истина);
	СтруктураФайла.Вставить(""Имя"", Файл.Имя);
	СтруктураФайла.Вставить(""УниверсальноеИмя"", УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя,Истина));
	СтруктураФайла.Вставить(""ПолныйПуть"", Каталог);
	СтруктураФайла.Вставить(""Уровень"", 1);
	
	
	МассивРезультатОбходаКаталогов.Добавить(СтруктураФайла);
	
	Уровень = 2;
	ТекРодитель = Неопределено;
	КолЭлементовДобавлено = 0;
	ОбходКаталогов(Каталог, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ТекРодитель, КолЭлементовДобавлено);    
	
	ДвДанныеvbFeatureReader = Неопределено;
	Если Объект.ВерсияПоставки = ""standart"" И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить(""МассивРезультатОбходаКаталогов"", МассивРезультатОбходаКаталогов);
	СтруктураПараметров.Вставить(""ВозможнаОптимизацияРаботыСФайлами"",ВозможнаОптимизацияРаботыСФайлами);
	СтруктураПараметров.Вставить(""ТегTreeВключенПоУмолчанию"",Объект.ТегTreeВключенПоУмолчанию);
	СтруктураПараметров.Вставить(""ЗапускИзКоманднойСтроки"",Объект.ЗапускИзКоманднойСтроки);
	СтруктураПараметров.Вставить(""КешДанныеПеревода"",КешДанныеПеревода);
	СтруктураПараметров.Вставить(""БылиОшибкиЗагрузкиФич"",Ложь);
	СтруктураПараметров.Вставить(""ОшибкиЗагрузкиФич"",Новый Массив);
	СтруктураПараметров.Вставить(""КешСнипетов"",КешСнипетов);
	СтруктураПараметров.Вставить(""СтрокаПробелов"",СтрокаПробелов);
	СтруктураПараметров.Вставить(""КешЗагрузкиФич"",КешЗагрузкиФич);
	СтруктураПараметров.Вставить(""КешПараметрыВСтроке"",КешПараметрыВСтроке);
	СтруктураПараметров.Вставить(""КешОпределенияТипа"",КешОпределенияТипа);
	СтруктураПараметров.Вставить(""КешПоискаКлючевыхСлов"",КешПоискаКлючевыхСлов);
	СтруктураПараметров.Вставить(""НедавноЗагруженныеФичи"",НедавноЗагруженныеФичи);
	
	МассивДействий = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") И ДополнительныеПараметры.Свойство(""МассивДействий"") Тогда
		МассивДействий = ДополнительныеПараметры.МассивДействий;
	КонецЕсли;	 

	ДанныеФичи = СтруктураПараметров.ДанныеФичи;
	ДанныеИзмененныхСтрок = Неопределено;
	ВозможнаОптимизацияЗагрузкиФичи = ОпределитьВозможнаОптимизацияЗагрузкиФичи(ДанныеФичи, ДанныеИзмененныхСтрок, МассивДействий);
	СтруктураПараметров.Вставить(""ДанныеФичи"",Неопределено);
	СтруктураПараметров.Вставить(""ДополнительныеПараметры"",Неопределено);
	
	//ВозможнаОптимизацияЗагрузкиФичи = Ложь;
	
	Если ВозможнаОптимизацияЗагрузкиФичи Тогда
		ЗаполнитьДеревоПоИзмененнымСтрокам(ДанныеФичи, ДанныеИзмененныхСтрок, ВозможнаОптимизацияЗагрузкиФичи);
	КонецЕсли;	 
	
	Если Объект.РежимСамотестирования Тогда
		СообщитьПользователю(""ВозможнаОптимизацияЗагрузкиФичи=""+ВозможнаОптимизацияЗагрузкиФичи);
	КонецЕсли;	 
	
	Если НЕ ВозможнаОптимизацияЗагрузкиФичи Тогда
		ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров);
	Иначе
		ВывестиСтатистикуКлиентКоротко();
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить(""ДополнительныеПараметры"",ДополнительныеПараметры);
	
	ЗаполнитьДанныеВозможнаОптимизацияЗагрузкиФичи(СтруктураПараметров,ДанныеФичи,МассивДействий);
	
	КешСнипетов = СтруктураПараметров.КешСнипетов;
	КешЗагрузкиФич = СтруктураПараметров.КешЗагрузкиФич;
	КешПараметрыВСтроке = СтруктураПараметров.КешПараметрыВСтроке;
	КешОпределенияТипа = СтруктураПараметров.КешОпределенияТипа;
	КешПоискаКлючевыхСлов = СтруктураПараметров.КешПоискаКлючевыхСлов;
	
	Если СтруктураПараметров.БылиОшибкиЗагрузкиФич и Объект.ЗапускИзКоманднойСтроки Тогда
		ТекстИсключения = """";
		Для Каждого Элем Из СтруктураПараметров.ОшибкиЗагрузкиФич Цикл
			ТекстИсключения = ТекстИсключения + Элем + Символы.ПС;
		КонецЦикла;	 
		
		ЗаписатьЛогОшибки(Неопределено,Неопределено,ТекстИсключения,Неопределено,"""");
		СтатусЗапускаСценариев = Ложь;
		ВыгрузитьСтатусВыполненияСценариевВФайл(СтатусЗапускаСценариев, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев));
	КонецЕсли;	 
	
	КешДанныеПеревода.Вставить(""СоответствиеПоЯзыкам"",СтруктураПараметров.КешДанныеПеревода.СоответствиеПоЯзыкам);
 
	
	// Обновим снипеты в таблице известных сценариев.
	ИдСтроки = -1;
	Для Каждого СтрокаТаблицаУжеСуществующихСценариев Из СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ Цикл
		ИдСтроки = ИдСтроки + 1;
		ТаблицаУжеСуществующихСценариев[ИдСтроки].Снипет = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
	КонецЦикла;	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВХранилищеКеш(ТаблицаИзвестныхStepDefinition,КешStepDefinition)
	ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроек();
	СохранитьНастройкиВХранилище(""ТаблицаИзвестныхStepDefinition"",ТаблицаИзвестныхStepDefinition,ПараметрыДляСохраненияНастроек);
	СохранитьНастройкиВХранилище(""КешStepDefinition"",КешStepDefinition,ПараметрыДляСохраненияНастроек);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзХранилищаКеш()
	ВосстановитьНастройкиИзХранилища(""ТаблицаИзвестныхStepDefinition"", ""ТаблицаИзвестныхStepDefinition"");
	ВосстановитьНастройкиИзХранилища(""КешStepDefinition"", ""КешStepDefinition"");
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition()
	
	ДанныеПоВерсиямОбработок = Новый Структура;
	
	МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Новый Массив;
	МассивИменФайловИзТаблицаИзвестныхStepDefinition   = Новый Массив;
	
	ТаблицаИзвестныхStepDefinitionСервер = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из ТаблицаИзвестныхStepDefinitionСервер Цикл
		МассивВерсийФайловИзТаблицаИзвестныхStepDefinition.Добавить(СтрТаблицаИзвестныхStepDefinitionСервер.ВерсияФайла);
		МассивИменФайловИзТаблицаИзвестныхStepDefinition.Добавить(СтрТаблицаИзвестныхStepDefinitionСервер.ИмяФайла);
		СтрТаблицаИзвестныхStepDefinitionСервер.СтрокаОбрабатывалась = Ложь;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТаблицаИзвестныхStepDefinitionСервер, ""ТаблицаИзвестныхStepDefinition"");
	
	ДанныеПоВерсиямОбработок.Вставить(""МассивВерсийФайловИзТаблицаИзвестныхStepDefinition"", МассивВерсийФайловИзТаблицаИзвестныхStepDefinition);
	ДанныеПоВерсиямОбработок.Вставить(""МассивИменФайловИзТаблицаИзвестныхStepDefinition"", МассивИменФайловИзТаблицаИзвестныхStepDefinition);
	
	Возврат ДанныеПоВерсиямОбработок;
КонецФункции

&НаКлиенте
Функция ПолучитьТаблицыПоТаблицаИзвестныхStepDefinitionКлиент()
	
	ДанныеПоВерсиямОбработок = Новый Структура;
	
	МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Новый Массив;
	МассивИменФайловИзТаблицаИзвестныхStepDefinition   = Новый Массив;
	
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из ТаблицаИзвестныхStepDefinition Цикл
		МассивВерсийФайловИзТаблицаИзвестныхStepDefinition.Добавить(СтрТаблицаИзвестныхStepDefinitionСервер.ВерсияФайла);
		МассивИменФайловИзТаблицаИзвестныхStepDefinition.Добавить(СтрТаблицаИзвестныхStepDefinitionСервер.ИмяФайла);
		СтрТаблицаИзвестныхStepDefinitionСервер.СтрокаОбрабатывалась = Ложь;
	КонецЦикла;	
	
	ДанныеПоВерсиямОбработок.Вставить(""МассивВерсийФайловИзТаблицаИзвестныхStepDefinition"", МассивВерсийФайловИзТаблицаИзвестныхStepDefinition);
	ДанныеПоВерсиямОбработок.Вставить(""МассивИменФайловИзТаблицаИзвестныхStepDefinition"", МассивИменФайловИзТаблицаИзвестныхStepDefinition);
	
	Возврат ДанныеПоВерсиямОбработок;
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались(МассивИменФайловКоторыеСовпалиСКеш)
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из ТаблицаИзвестныхStepDefinition Цикл
		ИмяФайла = СтрТаблицаИзвестныхStepDefinitionСервер.ИмяФайла;
		Если МассивИменФайловКоторыеСовпалиСКеш.Найти(ПреобразоватьПутьКФайлуКСтандарту(ИмяФайла)) <> Неопределено Тогда
			СтрТаблицаИзвестныхStepDefinitionСервер.СтрокаОбрабатывалась = Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Отбор = Новый Структура();
	Отбор.Вставить(""СтрокаОбрабатывалась"", Ложь);
	СтрокиТаблицы = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
	
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из СтрокиТаблицы Цикл
		ТаблицаИзвестныхStepDefinition.Удалить(СтрТаблицаИзвестныхStepDefinitionСервер);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition()
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	ТзнТаблицаИзвестныхStepDefinition.Свернуть(""ИмяФайла"");
	
	Возврат ТзнТаблицаИзвестныхStepDefinition.ВыгрузитьКолонку(""ИмяФайла"");
КонецФункции	

&НаКлиенте
Функция ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinitionКлиент()
	Массив = Новый Массив;
	Для Каждого СтрокаТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		Если Массив.Найти(СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла) = Неопределено Тогда
			Массив.Добавить(СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла);
		КонецЕсли;	 
	КонецЦикла;	 
	Возврат Массив;
КонецФункции	

&НаСервере
Процедура УдалитьИз_ТаблицаИзвестныхStepDefinition_Файлы(МассивФайловДляОбработки)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	
	Для Каждого ИмяФайла Из МассивФайловДляОбработки Цикл
		МассивСтрок = ТзнТаблицаИзвестныхStepDefinition.НайтиСтроки(Новый Структура(""ИмяФайла"", ИмяФайла));
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТзнТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
		КонецЦикла;	
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, ""ТаблицаИзвестныхStepDefinition"");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеФайлаПоСобраннойРанееИнформации(ИмяФайла, ДополнительныеПараметры)
	ДанныеФайла = Неопределено;
	МассивФайлов = Неопределено;
	Для Каждого ЭлементСписка Из Объект.КаталогиБиблиотек Цикл
		ПутьКаталогаБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементСписка.Значение);
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ПутьКаталогаБиблиотеки, ""НайденныеФайлы""); //это файлы по данной библиотеке
		Если МассивФайлов <> Неопределено Тогда
			Для Каждого ЭлементМассива Из МассивФайлов Цикл
				Если СравнитьПутиФайлов(ЭлементМассива.Файл.ПолноеИмя, ИмяФайла) Тогда
					ДанныеФайла = ЭлементМассива;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЦикла;	
	
	
	Если ДанныеФайла = Неопределено Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""ПоискEPF"", ""НайденныеФайлы"");
		
		Если МассивФайлов <> Неопределено Тогда
			Для Каждого ЭлементМассива Из МассивФайлов Цикл
				Если СравнитьПутиФайлов(ЭлементМассива.Файл.ПолноеИмя, ИмяФайла) Тогда
					ДанныеФайла = ЭлементМассива;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ДанныеФайла;
	
КонецФункции	

&НаКлиенте
Процедура УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(ДанныеПоВерсиямОбработок,
	                                                                                        ДополнительныеПараметры,
																							МассивФайлов)
	МассивФайловДляОбработки = Новый Массив;
	
	//МассивФайлов = ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition();
	Для Каждого ИмяФайла Из МассивФайлов Цикл
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Если Найти(ИмяФайла,""VanessaAutomationsingle."") = 0 Тогда
				МассивФайловДляОбработки.Добавить(ИмяФайла);
			КонецЕсли;	 
		Иначе
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				
				ДанныеФайла = ПолучитьДанныеФайлаПоСобраннойРанееИнформации(ИмяФайла, ДополнительныеПараметры);
				Если ДанныеФайла = Неопределено Тогда
					ТекВерсия = Неопределено;
				Иначе	
					ТекВерсия   = ДанныеФайла.ВерсияФайла;
				КонецЕсли;	 
				
			Иначе	
				ТекВерсия = ВремяИзмененияФайлаКомандаСистемы(ИмяФайла);
			КонецЕсли;	 
			
			
			ИД        = ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition.Найти(ИмяФайла);
			Если ИД <> Неопределено Тогда
				ПрежняяВерсия = ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition[ИД];
				Если ТекВерсия <> ПрежняяВерсия Тогда
					МассивФайловДляОбработки.Добавить(ИмяФайла);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	
	Если МассивФайловДляОбработки.Количество() > 0 Тогда
		УдалитьИз_ТаблицаИзвестныхStepDefinition_Файлы(МассивФайловДляОбработки);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаДоПостроенияДереваСервер(ДанныеПоВерсиямОбработок,МассивФайлов)
	ВосстановитьНастройкиИзХранилищаКеш();
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();
	МассивФайлов = ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоФич(СтруктураПараметров)
	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	МассивСообщений         = СтруктураПараметров.МассивСообщений;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	
	СтруктураПараметров.ДополнительныеПараметры = Неопределено;//они не могут быть сериализованы в поздних версиях платформы
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""КаталогФич"", ""Существует"") Тогда
			Возврат;
		КонецЕсли;	 
	Иначе	
		Если Не ПутьКФичам.Существует() Тогда
			МассивСообщений.Добавить(""Не найден путь "" + КаталогФич);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ТаблицаКонтекстовОбработок = Новый Массив;
		ТаблицаИзвестныхStepDefinition.Очистить();
		МассивИменКонтекстовОбработок.Очистить();
	КонецЕсли;	
	
	Путь = ПутьКФичам.ПолноеИмя;
	СтруктураПараметров.Вставить(""ИдетЗагрузкаИзКаталога"", Истина);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""КаталогФич"", ""ЭтоКаталог"") Тогда //это файл
			Путь = ПутьКФичам.Путь;
			СтруктураПараметров.Вставить(""ИдетЗагрузкаИзКаталога"", Ложь);
		КонецЕсли;	 
	Иначе	
		Если ПутьКФичам.ЭтоФайл() Тогда
			Путь = ПутьКФичам.Путь;
			СтруктураПараметров.Вставить(""ИдетЗагрузкаИзКаталога"", Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	ДанныеПоВерсиямОбработок = Неопределено;
	МассивФайлов             = Неопределено;
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinitionКлиент();
	МассивФайлов = ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinitionКлиент();
	Если Объект.РежимСамотестирования И ХостСистема <> Неопределено Тогда
		//Для режимка, когда VA открывает в этом же сеансе вторую VA.
		ОбработкаДоПостроенияДереваСервер(ДанныеПоВерсиямОбработок,МассивФайлов);
	КонецЕсли;	 
	
	УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(ДанныеПоВерсиямОбработок,
	                                                                                           ДополнительныеПараметры,
																							   МассивФайлов);
	
	МассивИменФайловКоторыеСовпалиСКеш = Новый Массив;
																							   
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ВерсияСнипетов = ТекущаяДата();
		ВстроенныеБиблиотеки = ВстроенныеБиблиотеки();
		БылиОшибки = Ложь;
		
		ПодключитьСнипетыИзВнутреннихФорм(ВстроенныеБиблиотеки, ВерсияСнипетов, БылиОшибки,СтруктураПараметров,
		  МассивИменФайловКоторыеСовпалиСКеш,МассивИменКонтекстовОбработок,ТаблицаКонтекстовОбработок,КаталогФич);
		  
		Если ТаблицаУжеСуществующихСценариев.Количество() = 0 Тогда
			// Если ТаблицаУжеСуществующихСценариев.Количество() > 0, значит встроенные сценарии уже точно загружались
			ПолучитьУжеСуществующиеСценарииИзВстроенныхФич();  
		КонецЕсли;	  
	КонецЕсли;	 																							   
	
	СтруктураПараметров.Вставить(""ДанныеПоВерсиямОбработок"",ДанныеПоВерсиямОбработок);
	СтруктураПараметров.Вставить(""МассивИменФайловКоторыеСовпалиСКеш"",МассивИменФайловКоторыеСовпалиСКеш);
	СтруктураПараметров.Вставить(""Путь"",Путь);
	
	ДанныеДляПолученияСнипетов = Новый Массив;
	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь, ДанныеДляПолученияСнипетов, ДополнительныеПараметры,
	                                          ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition,
											  ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition,
											  МассивИменФайловКоторыеСовпалиСКеш);
											  
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПутьКаталогаБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);

		ПолучитьУжеСуществующиеСнипетыИзОбработок(ПутьКаталогаБиблиотеки, ДанныеДляПолученияСнипетов, ДополнительныеПараметры,
		                                          ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition,
												  ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition,
												  МассивИменФайловКоторыеСовпалиСКеш);
	КонецЦикла;
	
	
	СтруктураПараметров.Вставить(""ДополнительныеПараметры"",ДополнительныеПараметры);
	глСтруктураПараметров = СтруктураПараметров;
	
	
	ДанныеФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого Данные Из ДанныеДляПолученияСнипетов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(Данные.ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ДанныеФайлов.Вставить(Данные.ИмяФайла,Новый Структура(""Имя,ИмяФайла,ВерсияФайла"",Данные.Имя,Данные.ИмяФайла,Данные.ВерсияФайла));
	КонецЦикла;	 
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		ЗаполнитьДеревоФичПродолжение();
		Возврат;
	КонецЕсли;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить(""ДанныеФайлов"",ДанныеФайлов);
	ПараметрыЗавершения.Вставить(""ДополнительныеПараметры"",ДополнительныеПараметры);
	
	БылаОшибка = Истина;
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Выполнить(""НачатьПомещениеФайлов(Новый ОписаниеОповещения(""""ОбработчикПодключенияБиблиотекШагов"""", ЭтаФорма, ПараметрыЗавершения),
				|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)"");
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Стр = """";
		Для Каждого Элем Из ДанныеФайлов Цикл
			Стр = Стр + Элем.ИмяФайла + Символы.ПС; 
		КонецЦикла;	 
		
		ТекстСообщения = Локализовать(""Не получилось выполнить помещение файлов: <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивДляПоискаДублейФайлов(МассивФайлов)
	Массив = Новый Массив;
	
	Для каждого Элем Из МассивФайлов Цикл
		Если ТипЗнч(Элем) = Тип(""Структура"") Тогда
			Массив.Добавить(Элем.Файл.ПолноеИмя);
		Иначе	
			Массив.Добавить(Элем.ПолноеИмя);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	

&НаСервере
Функция ПолучитьТекстStopVideoRec()
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(""StopVideoRec""); 
КонецФункции	 

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСценарииИзВстроенныхФич()
	Если ТекстВстроенныхСценариевСервер = Неопределено Тогда
		ТекстВстроенныхСценариевСервер = ДанныеТекстВстроенныхСценариевСервер;
		ДанныеТекстВстроенныхСценариевСервер = """";
	КонецЕсли;	 
	ТекстФичи = ТекстВстроенныхСценариевСервер;
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(ТекстФичи, Символы.ПС);
	
	ИмяВременнойФичи = ПолучитьИмяВременногоФайла(""feature"");
	ЗТ = Новый ЗаписьТекста(ИмяВременнойФичи,""UTF-8"",,Истина); 
	ЗТ.Записать(ТекстФичи); 
	ЗТ.Закрыть();
	
	Файл = Новый Файл(ИмяВременнойФичи);
	ОбработатьМассивСтрокФичи(МассивСтрок,ИмяВременнойФичи,Файл);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСценарииИзФич(Знач КаталогФич, ДополнительныеПараметры = Неопределено, МассивУжеОбработанныхаФайлов)
	Файл = Новый Файл(КаталогФич);
	
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = "".feature"" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка(Локализовать(""Ищу сценарии в каталоге"") + "" "" + КаталогПоиска);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, КаталогФич, ""НайденныеФайлы""); // это файлы по данной библиотеке
		Если МассивФайлов = Неопределено Тогда
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""ПоискFeature"", ""НайденныеФайлы"");
		КонецЕсли;	 
		
		Для Ном = 1 По Объект.КаталогиБиблиотек.Количество() Цикл
			
			МассивДляПоискаДублейФайлов = ПолучитьМассивДляПоискаДублейФайлов(МассивФайлов);
			
			МассивФайловБиблиотека = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""БиблиотекаФич"" + Ном, ""НайденныеФайлы"");
			Для каждого Элем Из МассивФайловБиблиотека Цикл
				Если МассивДляПоискаДублейФайлов.Найти(Элем.Файл.ПолноеИмя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				МассивФайлов.Добавить(Элем);
			КонецЦикла;
		КонецЦикла;
		
	Иначе	
		МассивФайлов = НайтиФайлы(КаталогПоиска, ""*.feature"", Истина);
	КонецЕсли;	 
	
	Для Каждого ФайлОбъект Из МассивФайлов Цикл
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			Файл = ФайлОбъект;
		Иначе
			Файл = ФайлОбъект.Файл;
		КонецЕсли;	 
		
		Если НРег(Файл.Расширение) <> "".feature"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ИмяФайла = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, ""UTF-8"");
		
		Если МассивУжеОбработанныхаФайлов.Найти(НРег(ИмяФайла)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивУжеОбработанныхаФайлов.Добавить(НРег(ИмяФайла));
		
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВерсияФайла = Файл.ПолучитьВремяИзменения();
			
			ИДВерсииФайла = МассивВерсийFeatureИмяФайла.Найти(ИмяФайла);
			Если ИДВерсииФайла = Неопределено Тогда
				МассивВерсийFeatureИмяФайла.Добавить(ИмяФайла);
				МассивВерсийFeatureВерсия.Добавить(ВерсияФайла);
			Иначе	
				Если МассивВерсийFeatureВерсия[ИДВерсииФайла] <> ВерсияФайла Тогда
					// Значит файл изменился
					// обновляем версию и удаляем старые снипеты
					МассивВерсийFeatureВерсия[ИДВерсииФайла] = ВерсияФайла;
					
					
					МассивИД = Новый Массив;
					Ном = -1;
					Для каждого Элем Из ТаблицаУжеСуществующихСценариев Цикл
						Ном = Ном + 1;
						Если СравнитьПутиФайлов(Элем.ИмяФайла,ИмяФайла) Тогда
							МассивИД.Добавить(Ном);
						КонецЕсли; 
						
					КонецЦикла;
					
					Для Ккк = 0 По МассивИД.Количество() - 1 Цикл
						ИД = МассивИД[МассивИД.Количество() - 1 - Ккк];
						ТаблицаУжеСуществующихСценариев.Удалить(ИД);
					КонецЦикла;
					
					Отладка(""Загрузил новую версию: "" + Файл.ПолноеИмя);
				Иначе
					// значит уже актуальная версия файла загружена
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Текст.Прочитать(), Символы.ПС);
		
		Текст.Закрыть();
		
		ОбработатьМассивСтрокФичи(МассивСтрок,ИмяФайла,Файл);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивСтрокФичи(МассивСтрок,ИмяВладельца,Файл = Неопределено)
	ТипШага  = """";
	Описание = """";
	Пример   = """";
	
	ПолноеИмяФайла = Неопределено;
	Если Файл <> Неопределено  Тогда
		ПолноеИмяФайла = Файл.ПолноеИмя;
	КонецЕсли;
	
	НашлиТегExportScenarios = Ложь;
	ДобавлятьШаги = Ложь;
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Ккк];
		
		Стр = СокрЛП(Стр);
		СтрНРег = НРег(Стр);
		
		Если Стр = """" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрНРег = ""@exportscenarios"" Тогда
			НашлиТегExportScenarios = Истина;
		КонецЕсли;	 
		
		Если Лев(СтрНРег, 1) = ""@"" Тогда
			Если Лев(СтрНРег, 9) = ""@типшага:"" Тогда
				ТипШага = Сред(Стр, 10);
			ИначеЕсли Лев(СтрНРег, 10) = ""@описание:"" Тогда
				Описание = Сред(Стр, 11);
			ИначеЕсли Лев(СтрНРег, 21) = ""@примериспользования:"" Тогда
				ПромСтр = Сред(Стр, 22);
				Если Пример = """" Тогда
					Пример = ПромСтр;
				Иначе
					Пример = Пример + Символы.ПС + ПромСтр;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(СтрНРег, 1) = ""#"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если НашлиТегExportScenarios Тогда
			Если ЭтоОпределениеСценария(СтрНРег) Тогда
				ДобавлятьШаги = Истина;
				ИмяСценария = СокрЛП(Сред(Стр, 10));
				ТаблицаШагов = Новый Массив;
				
				ТаблицаУжеСуществующихСценариев.Добавить(ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяВладельца, ТаблицаШагов, ПолноеИмяФайла, Ложь, ТипШага, Описание, Пример));
				
				ТипШага  = """";
				Описание = """";
				Пример   = """";
				Продолжить;
			ИначеЕсли ЭтоОпределениеСтруктурыСценария(СтрНРег) Тогда
				ДобавлятьШаги = Истина;
				ИмяСценария = СокрЛП(Сред(Стр, 20));
				ТаблицаШагов = Новый Массив;
				ТаблицаУжеСуществующихСценариев.Добавить(ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяВладельца, ТаблицаШагов, ПолноеИмяФайла, Истина, ТипШага, Описание, Пример));
				
				ТипШага  = """";
				Описание = """";
				Пример   = """";
				Продолжить;
			КонецЕсли;	
			
			Если ДобавлятьШаги Тогда
				ТаблицаШагов.Добавить(Стр);
			КонецЕсли;	 
		Иначе
			Если ЭтоОпределениеСценария(СтрНРег) Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяФайла, ТаблицаШагов, ПолноеИмя, ЭтоСтруктураСценария, ТипШага, Описание, Пример)
	Структура = Новый Структура;
	Структура.Вставить(""ИмяСценария"", ИмяСценария);
	Структура.Вставить(""ИмяФайла"", ИмяФайла);
	Структура.Вставить(""ПолноеИмя"", ПолноеИмя);
	Структура.Вставить(""ТаблицаШагов"", ТаблицаШагов);
	Структура.Вставить(""ЭтоСтруктураСценария"", ЭтоСтруктураСценария);
	Если ПолноеИмя <> Неопределено Тогда
		Если ВозможнаОптимизацияРаботыСФайлами Тогда
			Структура.Вставить(""ДвоичныеДанные"", Неопределено);
		Иначе	
			Структура.Вставить(""ДвоичныеДанные"", Новый ДвоичныеДанные(ПолноеИмя));
		КонецЕсли;	 
	Иначе	
		Структура.Вставить(""ДвоичныеДанные"", Неопределено);
	КонецЕсли;	 
	Структура.Вставить(""Снипет"", """");
	
	Структура.Вставить(""ТипШага"", СокрЛП(ТипШага));
	Структура.Вставить(""ОписаниеШага"", СокрЛП(Описание));
	Структура.Вставить(""ПримерИспользования"", СокрЛП(Пример));
	
	Возврат Структура;
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ИмяПараметра, ЗначениеПараметра)
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	Для каждого Элем Из МассивДействий Цикл
		Если Элем.ИмяПараметра = ИмяПараметра Тогда
			Возврат Элем[ЗначениеПараметра];
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	

&НаКлиенте
// Объединяем относительные пути файловой системы в один
// при передаче Путь = ../test/file.txt и ПутьОтносительно=c:\work\ возращаем c:\test\file.txt
// при передаче Путь = ./test/file.txt и ПутьОтносительно=c:\work\ возращаем c:\work\test\file.txt
// если в начале нет точки, считаем этот путь полным. 
Функция ПолучитьПолныйПутьОтносительноКаталогаОбработки(Знач Путь, Знач ПутьОтносительно)
	Перем Результат;
	Результат = Путь;
	Если Лев(СокрЛП(Путь), 1) = ""."" Тогда 
		ФайлОбработки = Новый Файл(ПутьОтносительно);
		КаталогОбработки = ДополнитьСлешВПуть(?(ФайлОбработки.ЭтоКаталог(), ФайлОбработки.ПолноеИмя, ФайлОбработки.Путь));
		ФайлПути = Новый Файл(КаталогОбработки + Путь);
		
		Результат = ФайлПути.ПолноеИмя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьСуществованиеКаталогаИнструментов(ИмяФайла, ДополнительныеПараметры = Неопределено, ПутьКОбработке)
	Перем ПутьФайла;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Возврат ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""КаталогИнструментов"", ""Существует"");
	Иначе	
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(ИмяФайла);
		ФайлПроверкаСуществования = Новый Файл(ПутьФайла);
		Если НЕ ФайлПроверкаСуществования.Существует() Тогда
			ТекстСообщения = Локализовать(""Не найден каталог инструментов: %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла);
			СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;	   
		
	КонецЕсли;	 
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ПроверитьСуществованиеКаталогаБиблиотек(ДополнительныеПараметры = Неопределено, ПутьКОбработке)
	
	Результат = Истина;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		НПП = 0;
		Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
			НПП = НПП + 1;
			Если НЕ ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""КаталогиБиблиотек"" + НПП, ""Существует"") Тогда
				Результат = Ложь;
				ТекстСообщения = Локализовать(""Не найден каталог библиотеки: %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Объект.КаталогиБиблиотек[НПП-1].Значение);
				// TODO: задвоеное сообщение? 
				// Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Поле  = ""КаталогиБиблиотек[%1].Значение"";
				СообщениеПользователю.Поле = СтрЗаменить(СообщениеПользователю.Поле, ""%1"", Формат(НПП, ""ЧГ=; ЧН=0""));
				СообщениеПользователю.ПутьКДанным = ""Объект"";
				СообщениеПользователю.Сообщить();
			КонецЕсли;	  
		КонецЦикла;	
	Иначе	
		НПП = 0;
		Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
			НПП = НПП + 1;
			ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
			ФайлПроверкаСуществования = Новый Файл(ПутьФайла);
			Если НЕ ФайлПроверкаСуществования.Существует() Тогда
				Результат = Ложь;
				ТекстСообщения = Локализовать(""Не найден каталог библиотеки: %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Элем.Значение);
				// TODO: Задвоеное сообщение?
				//Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Поле  = ""КаталогиБиблиотек[%1].Значение"";
				СообщениеПользователю.Поле = СтрЗаменить(СообщениеПользователю.Поле, ""%1"",Формат(НПП, ""ЧГ=; ЧН=0""));
				СообщениеПользователю.ПутьКДанным = ""Объект"";
				СообщениеПользователю.Сообщить();
			КонецЕсли;	   
		КонецЦикла;
		
	КонецЕсли;	 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИДСтрокиДереваСервер(СтруктураПараметров,Дерево)
	МассивИменКонтекстовОбработок = СтруктураПараметров.МассивИменКонтекстовОбработок;
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	МассивСтрокДереваДанныеФормы = Новый Массив;
	ЗаполнитьИДСтрокиВДереве(Дерево, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, Путь, ИмяПараметра, ТипПараметра)
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить(""ИмяФайла"", Путь);
	СтруктураФайла.Вставить(""ИмяПараметра"", ИмяПараметра);
	СтруктураФайла.Вставить(""ТипПараметра"", ТипПараметра);
	
	Массив.Добавить(СтруктураФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСканированиеКаталогов(Массив)
	
	// FIXME: необходимо вынести в реквизит формы.
//	ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, """", ""ПоискEPF"", ""СканированиеКаталогаПоискEPF"");
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, """", ""ПоискFeature"", ""СканированиеКаталогаПоискFeature"");
	Ном = 0;
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Ном = Ном + 1;
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, """", ПутьФайла, ""СканированиеКаталогаПоискEPF"");
		ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, """", ""БиблиотекаФич"" + Ном, ""СканированиеКаталогаПоискFeature"");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМассивСостоянийФайлов(Массив)
	
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогИнструментов), ""КаталогИнструментов"", ""РаботаСФайлом"");
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогИнструментов)) + ""lib/FeatureReader/vbFeatureReader.epf"", ""vbFeatureReader"", ""РаботаСФайлом"");
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиAllure), ""КаталогOutputAllure"", ""РаботаСФайлом"");
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиJUnit), ""КаталогOutputjUnit"", ""РаботаСФайлом"");
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиCucumberJson), ""КаталогOutputCucumberJson"", ""РаботаСФайлом"");
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML), ""КаталогOutputИнструкцияHTML"", ""РаботаСФайлом"");
	ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогФич), ""КаталогФич"", ""РаботаСФайлом"");
	

	Ном = 0;
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Ном = Ном + 1;
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ДобавитьДействиеВМассивАссинхроныхСобытий(Массив, ПутьФайла, ""КаталогиБиблиотек"" + Ном, ""РаботаСФайлом"");
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры)
	ДополнительныеПараметры.ТекИдМассива = ДополнительныеПараметры.ТекИдМассива + 1;
	ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры)
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	НайденныеФайлы = СтруктураФайла.НайденныеФайлы;
	
	СтруктураФайла.ИДФайлаДляОбработки = СтруктураФайла.ИДФайлаДляОбработки + 1;
	Если СтруктураФайла.ИДФайлаДляОбработки > (НайденныеФайлы.Количество() - 1) Тогда
		ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
	Иначе
		Файл = Новый Файл(НайденныеФайлы[СтруктураФайла.ИДФайлаДляОбработки].Файл.ПолноеИмя);
		ОписаниеОповещения = Вычислить(""Новый ОписаниеОповещения(""""ОбработчикНачатьПолучитьВремяИзмененияФайлаМассив"""", ЭтаФорма, ДополнительныеПараметры)"");
		Выполнить(""Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения)"");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы(ДополнительныеПараметры);
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	Если ТекИдМассива > (МассивДействий.Количество() - 1) Тогда
		Если ДополнительныеПараметры.НадоЗагрузитьФичи Тогда
			ЗагрузитьФичиПродолжение(ДополнительныеПараметры);
		КонецЕсли;	 
		Если ДополнительныеПараметры.НадоГенерироватьEPF Тогда
			СоздатьШаблоныОбработокПродолжение(ДополнительныеПараметры);
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	СтруктураФайла = МассивДействий[ТекИдМассива];
	Если СтруктураФайла.ТипПараметра = ""РаботаСФайлом"" Тогда
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Вычислить(""Новый ОписаниеОповещения(""""ОбработчикНачатьПроверкуСуществования"""", ЭтаФорма, ДополнительныеПараметры)"");
		Выполнить(""Файл.НачатьПроверкуСуществования(ОписаниеОповещения)"");
	ИначеЕсли	Найти(СтруктураФайла.ТипПараметра, ""СканированиеКаталогаПоиск"") > 0 Тогда
		Если НЕ ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""КаталогФич"", ""Существует"") Тогда
			ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
			Возврат;
		КонецЕсли;	 
		
		Если (СтруктураФайла.ИмяПараметра = ""ПоискEPF"") ИЛИ (СтруктураФайла.ИмяПараметра = ""ПоискFeature"") ИЛИ (Лев(СтруктураФайла.ИмяПараметра, 13) = ""БиблиотекаФич"") Тогда
			// значит мы ищем родные epf для фич
			ПутьКФичам = Новый Файл(Объект.КаталогФич);
			Путь = ПутьКФичам.ПолноеИмя;
			Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""КаталогФич"", ""ЭтоКаталог"") Тогда //это файл
				Путь = ПутьКФичам.Путь;
			КонецЕсли;	 
			
			
			Если Лев(СтруктураФайла.ИмяПараметра, 13) = ""БиблиотекаФич"" Тогда
				Ном = СтрЗаменить(СтруктураФайла.ИмяПараметра, ""БиблиотекаФич"", """");
				Ном = СтрЗаменить(Ном, Символы.НПП, """");
				Ном = Число(Ном);
				Путь = Объект.КаталогиБиблиотек[Ном - 1].Значение;
			КонецЕсли;
			
			Путь = ПреобразоватьПутьСТочкамиКНормальномуПути(Путь);
			
		Иначе
			Путь = СтруктураФайла.ИмяПараметра;
		КонецЕсли;	 
		
		Маска = ""*."" + НРег(СтрЗаменить(СтруктураФайла.ТипПараметра, ""СканированиеКаталогаПоиск"", """"));
		ОписаниеОповещения = Вычислить(""Новый ОписаниеОповещения(""""ОбработчикНачатьПоискФайлов"""", Этаформа, ДополнительныеПараметры)"");
		
		Если СтруктураФайла.ТипПараметра = ""СканированиеКаталогаПоискFeature"" Тогда
			Маска = ""*"";
		КонецЕсли;	 
		НачатьПоискФайлов(ОписаниеОповещения, Путь, Маска, Истина); 
	Иначе
		ТекстСообщения = Локализовать(""Неивестный ТипПараметра в ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтруктураФайла.ТипПараметра);
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Функция НайтиИДСтрокиСценарияПоИмени(Имя)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	Строки = Дерево.Строки.НайтиСтроки(Новый Структура(""Имя, Тип"", Имя, ""Сценарий""), Истина);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].ИдСтроки;
	КонецЕсли;	 
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьФичиПродолжение(ДополнительныеПараметры = Неопределено)
	КаталогИнструментов = Объект.КаталогИнструментов;
	КаталогФич          = Объект.КаталогФич;
	DebugLog            = Объект.DebugLog;
	КаталогиБиблиотек   = Объект.КаталогиБиблиотек.Скопировать();
	ПутьКОбработке		= ПолучитьПутьКОбработкеКлиент();
	
	Для каждого ЭлементБиблиотеки Из КаталогиБиблиотек  Цикл
		ЭлементБиблиотеки.Значение = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементБиблиотеки.Значение);
	КонецЦикла; 
	
	Если НЕ ПроверитьСуществованиеКаталогаБиблиотек(ДополнительныеПараметры, ПутьКОбработке) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		Если НЕ ПроверитьСуществованиеКаталогаИнструментов(КаталогИнструментов, ДополнительныеПараметры, ПутьКОбработке) Тогда
			СообщитьПользователю(""Не заполнен служебный параметр КаталогИнструментов."");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПарсерФич = """";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""КаталогИнструментов"", КаталогИнструментов);
	СтруктураПараметров.Вставить(""КаталогФич"", КаталогФич);
	СтруктураПараметров.Вставить(""ПутьКОбработке"", ПутьКОбработке);
	
	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить(""МассивСообщений"", МассивСообщений);
	СтруктураПараметров.Вставить(""DebugLog"", DebugLog);
	СтруктураПараметров.Вставить(""КаталогиБиблиотек"", КаталогиБиблиотек);
	СтруктураПараметров.Вставить(""ДополнительныеПараметры"", ДополнительныеПараметры);
	
	СтруктураПараметров.Вставить(""СписокТеговИсключение"", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить(""СписокТеговОтбор"", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить(""Брейкпоинты"", Брейкпоинты);
	СтруктураПараметров.Вставить(""РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов"", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	СтруктураПараметров.Вставить(""МассивИменКонтекстовОбработок"", МассивИменКонтекстовОбработок);
	СтруктураПараметров.Вставить(""ЭтоЗагрузкаФич"", Истина);
	
	СтруктураПараметров.Вставить(""ТекстСообщенийПользователю"", Объект.ТекстСообщенийПользователю);
	ТекущийЗагружаемыйФичаФайл = Неопределено;
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		СтруктураПараметров.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов"", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	КонецЕсли;	 
	
	Попытка
		ЗаполнитьДеревоФич(СтруктураПараметров);
	Исключение
		ФлагСценарииЗагружены = Истина;
		ТекстСообщения = Локализовать(""Ошибка при построении дерева из файла <%1>%2%3"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекущийЗагружаемыйФичаФайл);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",Символы.ПС);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		Возврат;
	КонецПопытки;
	
	Для каждого Элем Из МассивСообщений Цикл
		СообщитьПользователю(Элем);
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		Если ДополнительныеПараметры.Свойство(""ЗапуститьСценарийСоСтрокиПрисланнойИзвне"")
			И ДополнительныеПараметры.ЗапуститьСценарийСоСтрокиПрисланнойИзвне Тогда
				ПодключитьОбработчикОжидания(""ЗапуститьСценарийСоСтрокиПрисланнойИзвне"",0.1,Истина);
				
		ИначеЕсли ДополнительныеПараметры.Свойство(""ПерезагрузитьИВыполнить"")
			И ДополнительныеПараметры.ПерезагрузитьИВыполнить Тогда
				ПерезагрузитьИВыполнить("""");
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеФичи(ИмяФайла)
	ДанныеФичи = Новый Структура;
	ДанныеФичи.Вставить(""ЯзыкФичи"",Неопределено);
	ДанныеФичи.Вставить(""ТаблицаСтрокФичи"",Неопределено);
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		Возврат ДанныеФичи;
	КонецЕсли;	
	
	Если Прав(НРег(ИмяФайла),8) <> "".feature"" Тогда
		Возврат ДанныеФичи;
	КонецЕсли;	 
	
	Попытка
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла,""UTF-8"");
		
		ТаблицаСтрокФичи = РазложитьСтрокуВМассивПодстрокКлиент(Текст.Прочитать(),Символы.ПС);
		Текст.Закрыть();
		
		ДанныеФичи.Вставить(""ТаблицаСтрокФичи"",ТаблицаСтрокФичи);
		
		Для Каждого Стр Из ТаблицаСтрокФичи Цикл
			Стр = СокрЛП(НРег(Стр));
			
			Если Лев(Стр,1) = ""#"" Тогда
				Стр = СокрЛ(Сред(Стр,2));
				
				Если Найти(Стр,""language:"") > 0 Тогда
					ДанныеФичи.Вставить(""ЯзыкФичи"",Прав(Стр,2));
					Прервать;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;	 
			
			Если ЭтоОпределениеСценария(Стр) Тогда
				ДанныеФичи.Вставить(""ЯзыкФичи"",""ru"");
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
		
	Исключение
		Возврат ДанныеФичи;
	КонецПопытки;
	
	Возврат ДанныеФичи;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоФичПродолжение()
	СтруктураПараметров = глСтруктураПараметров;
//	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
//	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	//СтруктураПараметров.Вставить(""ДополнительныеПараметры"",Неопределено);
	МассивИменФайловКоторыеСовпалиСКеш = СтруктураПараметров.МассивИменФайловКоторыеСовпалиСКеш;
	Путь                               = СтруктураПараметров.Путь;
	ПутьКФичам = Новый Файл(КаталогФич);
	
	Состояние(Локализовать(""Построение дерева.""));
	
	УдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались(МассивИменФайловКоторыеСовпалиСКеш);
	
	ТаблицаУжеСуществующихСценариев = Новый Массив;
	МассивВерсийFeatureИмяФайла = Новый Массив;
	МассивВерсийFeatureВерсия   = Новый Массив;
	МассивОбработанныхФайлов    = Новый Массив;
	
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ПолучитьУжеСуществующиеСценарииИзВстроенныхФич();
	КонецЕсли;	 
	
	ДанныеФичи = ДанныеФичи(КаталогФич);
	ЯзыкФичи = ДанныеФичи.ЯзыкФичи;
	
	ПолучитьУжеСуществующиеСценарииИзФич(Путь, ДополнительныеПараметры, МассивОбработанныхФайлов);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСценарииИзФич(Элем.Значение, ДополнительныеПараметры, МассивОбработанныхФайлов);
	КонецЦикла;
	
	СтруктураПараметров.Вставить(""ТаблицаУжеСуществующихСценариевУФ"", ТаблицаУжеСуществующихСценариев);
	СтруктураПараметров.Вставить(""ЭтоLinux"",ЭтоLinux);
	СтруктураПараметров.Вставить(""ЯзыкГенератораGherkin"",Объект.ЯзыкГенератораGherkin);
	СтруктураПараметров.Вставить(""ДвоичныеДанныеФайлПеревода"",ПолучитьФайлыПеревода(ЯзыкФичи));
	СтруктураПараметров.Вставить(""БылиОшибкиЗагрузкиФич"",Ложь);
	СтруктураПараметров.Вставить(""КешСнипетов"",КешСнипетов);
	СтруктураПараметров.Вставить(""СтрокаПробелов"",СтрокаПробелов);
	СтруктураПараметров.Вставить(""ДанныеФичи"",ДанныеФичи);
	
	ТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ;
	
	ЗаполнитьДерево(ПутьКФичам.ПолноеИмя, ДополнительныеПараметры, СтруктураПараметров);
	
	Если НЕ НадоВыполнитьСценарийСоСтрокиПереданнойИзвне И НадоПерейтиКСтрокеДерева = -1 Тогда
		ПодключитьОбработчикОжидания(""РазвернутьДерево"", 0.2, Истина);
	КонецЕсли;	 
	
	Если Объект.ПодключитьВнешниеОбработкиДляОтладки Тогда
		ПодключитьВнешниеОбработкиДляОтладки();
	КонецЕсли; 
	
	Если Брейкпоинты.Количество() > 0 Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Истина;
	КонецЕсли;	 
	
	ПоказатьОповещениеПользователя(Локализовать(""Фичи загружены""));
	
	Если СтруктураПараметров.БылиОшибкиЗагрузкиФич И Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
		ПрекратитьРаботуСистемы();
	ИначеЕсли Объект.ВыполнитьСценарииПослеЗагрузкиФич И НЕ СтруктураПараметров.БылиОшибкиЗагрузкиФич Тогда
		ВыполнитьСценарии();
	ИначеЕсли Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз Тогда
		Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
		МассивИд = Неопределено;
		ДопПараметры = Неопределено;
		Если ЗначениеЗаполнено(ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки) Тогда
			ИдСтроки = НайтиИДСтрокиСценарияПоИмени(ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки);
			ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки = """";
			Если ИдСтроки <> Неопределено Тогда
				МассивИд = Новый Массив;
				МассивИд.Добавить(ИдСтроки);
			КонецЕсли;	 
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить(""ЭтоПример"", СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример);
		КонецЕсли;	 
		
		ВыполнитьСценарии(МассивИд, ДопПараметры);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(""ОбновитьФлагСценарииЗагружены"",0.1,Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьФлагСценарииЗагружены()
	ФлагСценарииЗагружены = Истина;
	Если НадоПерейтиКСтрокеДерева <> -1 Тогда
		НужнаяСтрока = Неопределено;
		НайтиСтрокуДереваПоИдСтроки(НадоПерейтиКСтрокеДерева, Объект.ДеревоТестов.ПолучитьЭлементы(), НужнаяСтрока);
		Если НужнаяСтрока <> Неопределено Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;	 
		НадоПерейтиКСтрокеДерева = -1;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьПутиБиблиотек()
	Для Каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Если Прав(Элем.Значение, 1) = ""\"" ИЛИ Прав(Элем.Значение, 1) = ""/"" Тогда
			Элем.Значение = Лев(Элем.Значение, СтрДлина(Элем.Значение) - 1);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВерсиюОбработкиКлиент()
	Если Не ЗначениеЗаполнено(КешВерсияОбработки) Тогда
		КешВерсияОбработки = ПолучитьВерсиюОбработкиСервер();
	КонецЕсли;	 
	
	Возврат КешВерсияОбработки;
КонецФункции	

&НаСервере
Функция ПолучитьВерсиюОбработкиСервер(ТолькоЦифры = Ложь)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьВерсиюОбработки(Ложь, ТолькоЦифры);
КонецФункции

&НаСервере
Процедура ЗаполнитьКаталогИнструментовЕслиОнПустой()
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	Если СокрЛП(КаталогИнструментов) = """" Тогда
		
		ИспользуемоеИмяФайла = ПолучитьПутьКОбработкеСервер();
		
		Если ЗначениеЗаполнено(ИспользуемоеИмяФайла) И  (Лев(НРег(ИспользуемоеИмяФайла), 6) <> ""e1cib/"") И (Лев(НРег(ИспользуемоеИмяФайла), 6) <> ""e1cib\"") Тогда
			Файл = Новый Файл(ИспользуемоеИмяФайла);
			КаталогИнструментов = Файл.Путь;
		Иначе	
			// Попытаемся восстановить из настроек. Это нужно, когда Vanessa Automation вызвали программно, а затем сразу открыли
			// интерактивно. В этом случае 1С подгружает версию из кеша от первой загрузки на сервере, и
			// Объект().ИспользуемоеИмяФайла возвращает адрес в хранилище, а не имя исходного файла.
			Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДСохраненияОбщихНастроек());
			Если Настройки = Неопределено Тогда
				Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек_Old());
			КонецЕсли;	 
			
			Если ТипЗнч(Настройки) = Тип(""Структура"") Тогда
				Настройки.Свойство(""КаталогИнструментов"", КаталогИнструментов);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;	 
	
	Если Прав(КаталогИнструментов, 1) =  ""\"" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов, СтрДлина(КаталогИнструментов) - 1);
	ИначеЕсли Прав(КаталогИнструментов, 1) =  ""/"" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов, СтрДлина(КаталогИнструментов) - 1);
	КонецЕсли;	 
	
	Объект.КаталогИнструментов = КаталогИнструментов;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогПроектаЕслиОнПустой()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ПараметрЗапуска,""DisableUserSettingsLoader"") > 0 Тогда
		Возврат;
	КонецЕсли;	 

	КаталогПроекта = Объект.КаталогПроекта;
	Если ПустаяСтрока(КаталогПроекта) И Не Объект.РежимСамотестирования Тогда
		ЗагрузчикНастроек = Плагин(Объект.Плагины.ЗагрузчикПользовательскихНастроек);
		Объект.КаталогПроекта = ЗагрузчикНастроек.КаталогРепозитория();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПутьКRunSikulixЕслиОнПустой()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	ПутьКRunSikulix = Объект.КаталогиСкриптовSikuliX;
	Если ПустаяСтрока(ПутьКRunSikulix) И Не Объект.РежимСамотестирования И НЕ ПустаяСтрока(Объект.КаталогПроекта) Тогда
		Объект.КаталогиСкриптовSikuliX = Объект.КаталогПроекта + ""/tools/Sikuli"";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщикаПользовательскихНастроекЕслиОнПустой()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	Если Найти(ПараметрЗапуска,""DisableUserSettingsLoader"") > 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ПоставщикПользовательскихНастроек = Объект.ПоставщикПользовательскихНастроек;
	Если ПустаяСтрока(ПоставщикПользовательскихНастроек) Тогда
		ЗагрузчикНастроек = Плагин(Объект.Плагины.ЗагрузчикПользовательскихНастроек);
		Объект.ПоставщикПользовательскихНастроек = ЗагрузчикНастроек.ИмяПоставщикаFILE();
	КонецЕсли;

КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьКонтекстноеМеню()
	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость = Ложь;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметров(Знач СтрокаПараметров)
	
	Результат = Новый Структура;
	
	МассивПараметров = РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, "";"");
	Для каждого ЭлементМассива Из МассивПараметров Цикл
		Позиция = Найти(ЭлементМассива, ""="");
		Если Позиция > 0 Тогда
			Ключ     = Лев(ЭлементМассива, Позиция - 1);
			Значение = Сред(ЭлементМассива, Позиция + 1);
			Попытка
				Результат.Вставить(Ключ, Значение);
			Исключение
				ТекстСообщения = Локализовать(""Не смог получить значение из строки запуска: %1."");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Ключ);
				СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		Иначе
			Если НЕ ПустаяСтрока(ЭлементМассива) Тогда 
				Попытка
					Результат.Вставить(ЭлементМассива, Истина);
				Исключение
					ТекстСообщения = Локализовать(""Не смог получить значение из строки запуска: %1."");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ЭлементМассива);
					СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеПараметра(СтруктураПараметров, ИмяПараметра)
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		Возврат ЗначениеСтрокиВБулево(СтруктураПараметров[ИмяПараметра]);
	ИначеЕсли СтруктураПараметров.Свойство(ВРег(ИмяПараметра)) Тогда 
		Возврат ЗначениеСтрокиВБулево(СтруктураПараметров[ВРег(ИмяПараметра)]);
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

// Удалить. Настройки
//
&НаКлиенте 
Функция ПрочитатьСтруктуруИзJSONФайлаКлиент(VAParams)
	
	ПараметрыУФ            = Новый Структура;
	VBParamsДвоичныеДанные = Новый ДвоичныеДанные(VAParams);
	ПараметрыУФ.Вставить(""VBParamsДвоичныеДанные"", VBParamsДвоичныеДанные);
	
	Рез = ПрочитатьСтруктуруИзJSONФайлаСервер(VAParams, ПараметрыУФ);
	
	Возврат Рез;
	
КонецФункции

// Удалить. Настройки
//
&НаСервере 
Функция ПрочитатьСтруктуруИзJSONФайлаСервер(VAParams, ПараметрыУФ)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Рез = ОбъектСервер.ПрочитатьСтруктуруИзJSONФайла(VAParams, ПараметрыУФ);
	Возврат Рез;
КонецФункции	

// Удалить. Настройки
//
&НаКлиенте
Функция СтруктураПараметровЗапуска()
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить(""StartFeaturePlayer"", Ложь);
	ПараметрыЗапуска.Вставить(""КаталогФич"", """");
	ПараметрыЗапуска.Вставить(""КаталогиБиблиотек"", Новый Массив);
	ПараметрыЗапуска.Вставить(""СписокТеговИсключение"", Новый Массив);
	ПараметрыЗапуска.Вставить(""СписокТеговОтбор"", Новый Массив);
	ПараметрыЗапуска.Вставить(""ВыгрузитьPIDTestManager"", Ложь);
	ПараметрыЗапуска.Вставить(""КаталогИсполняемогоФайла"", """");
	ПараметрыЗапуска.Вставить(""ИмяФайлаPIDTestManager"", """");
	ПараметрыЗапуска.Вставить(""ИмяФайлаВнешнихКомандФреймворка"", """");
	ПараметрыЗапуска.Вставить(""ПриравниватьPendingКFailed"", Ложь);
	ПараметрыЗапуска.Вставить(""КоличествоСекундПоискаОкна"", """");
	ПараметрыЗапуска.Вставить(""КоличествоПопытокВыполненияДействия"", """");
	ПараметрыЗапуска.Вставить(""ОстановкаПриВозникновенииОшибки"", Ложь);
	ПараметрыЗапуска.Вставить(""ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки"", Ложь);
	ПараметрыЗапуска.Вставить(""ДелатьСообщенияТранслитом"", Ложь);
	ПараметрыЗапуска.Вставить(""СоздаватьИнструкциюHTML"", Ложь);
	ПараметрыЗапуска.Вставить(""СоздаватьИнструкциюMarkdown"", Ложь);
	ПараметрыЗапуска.Вставить(""СоздаватьИнструкциюВидео"", Ложь);
	ПараметрыЗапуска.Вставить(""ДелатьЛогВыполненияСценариевВЖР"", Истина);
	ПараметрыЗапуска.Вставить(""ДелатьЛогВыполненияСценариевВТекстовыйФайл"", Ложь);
	ПараметрыЗапуска.Вставить(""ВыводитьВЛогВыполнениеШагов"", Ложь);
	ПараметрыЗапуска.Вставить(""ДелатьЛогОшибокВТекстовыйФайл"", Ложь);
	ПараметрыЗапуска.Вставить(""СобиратьДанныеОСостоянииАктивнойФормыПриОшибке"", Ложь);
	ПараметрыЗапуска.Вставить(""СобиратьДанныеОСостоянииВсехФормПриОшибке"", Ложь);
	ПараметрыЗапуска.Вставить(""ИмяФайлаЛогВыполненияСценариев"", """");
	ПараметрыЗапуска.Вставить(""ИмяКаталогаЛогОшибок"", """");
	ПараметрыЗапуска.Вставить(""ЗакрытьTestClientПослеЗапускаСценариев"", Ложь);
	ПараметрыЗапуска.Вставить(""КаталогВыгрузкиИнструкцийHTML"", """");
	ПараметрыЗапуска.Вставить(""КаталогВыгрузкиИнструкцийMarkdown"", """");
	ПараметрыЗапуска.Вставить(""КаталогВыгрузкиИнструкцийВидео"", """");
	ПараметрыЗапуска.Вставить(""ДелатьОтчетВоВнутреннемФормате"", Ложь);
	ПараметрыЗапуска.Вставить(""ДелатьОтчетВФорматеАллюр"", Ложь);
	ПараметрыЗапуска.Вставить(""КаталогИнструментов"", """");
	ПараметрыЗапуска.Вставить(""КаталогПроекта"", """");
	ПараметрыЗапуска.Вставить(""КаталогВыгрузкиAllure"", """");
	ПараметрыЗапуска.Вставить(""КаталогВыгрузкиAllureБазовый"", """");
	ПараметрыЗапуска.Вставить(""ДелатьОтчетВФорматеjUnit"", Ложь);
	ПараметрыЗапуска.Вставить(""КаталогВыгрузкиjUnit"", """");
	ПараметрыЗапуска.Вставить(""ДелатьОтчетВФорматеCucumberJson"", Ложь);
	ПараметрыЗапуска.Вставить(""КаталогВыгрузкиCucumberJson"", """");
	ПараметрыЗапуска.Вставить(""ДобавлятьКИмениСценарияУсловияВыгрузки"", Ложь);
	ПараметрыЗапуска.Вставить(""ИмяСборки"", """");
	ПараметрыЗапуска.Вставить(""СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки"", Ложь);
	ПараметрыЗапуска.Вставить(""ВыгружатьСтатусВыполненияСценариевВФайл"", Ложь);
	ПараметрыЗапуска.Вставить(""ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев"", """");
	ПараметрыЗапуска.Вставить(""ВыполнитьСценарии"", Ложь);
	ПараметрыЗапуска.Вставить(""ВыполнитьСценарииСТекущегоШага"", Ложь);
	ПараметрыЗапуска.Вставить(""НомерСтрокиДляЗапускаСТекущегоШагаСценария"", """");
	ПараметрыЗапуска.Вставить(""ЗагрузитьСценарии"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗавершитьРаботуСистемы"", Ложь);
	ПараметрыЗапуска.Вставить(""ДелатьСкриншотПриВозникновенииОшибки"", Ложь);
	ПараметрыЗапуска.Вставить(""СниматьСкриншотКаждогоОкна1С"", Ложь);
	ПараметрыЗапуска.Вставить(""КомандаСделатьСкриншот"", """");
	ПараметрыЗапуска.Вставить(""КаталогВыгрузкиСкриншотов"", """");
	ПараметрыЗапуска.Вставить(""ИспользоватьВнешнююКомпонентуДляСкриншотов"", Ложь);
	ПараметрыЗапуска.Вставить(""СпособСнятияСкриншотовВнешнейКомпонентой"", 0);
	ПараметрыЗапуска.Вставить(""ЗапускатьТестКлиентВРежимеОтладки"", Ложь);
	ПараметрыЗапуска.Вставить(""КлючиОтладки"", """");
	ПараметрыЗапуска.Вставить(""АдресОтладчика"", """");
	ПараметрыЗапуска.Вставить(""ВыполнятьШагиАссинхронно"", Ложь);
	ПараметрыЗапуска.Вставить(""ПриоритетНастроекПользователя"", Ложь);
	
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКомандаНачатьЗаписьВидео"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоФайлКурсораМышки"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКаталогДляВременныхФайлов"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоФайлВодянойЗнак"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКомандаFfmpeg"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКомандаConvert"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКаталогМузыки"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоГромкостьМузыки"", ""0.10"");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоДелатьНаложениеTTS"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоТипОзвучкиTTS"", ""0"");
	
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоYandexTTSЯзык"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоYandexTTSГолос"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоYandexTTSЭмоция"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоYandexTTSСкорость"", ""1.1"");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоYandexTTSИдентификаторКаталога"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоYandexTTSOauthToken"", """");
	
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоAmazonГолос"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоAmazonДвижок"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоAmazonЯзык"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоAmazonКлючДоступа"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоAmazonСекретныйКлюч"", """");
	
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоПутьКДвижкуTTS"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоИмяTTS"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоСловарьЗамен"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоСловарьЗаменСписок"", Неопределено);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоЭкранШирина"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоЭкранВысота"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКоличествоКадров"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоГруппаШаговКакШаг"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоПодсвечиватьНажатияМышки"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоОтключитьСлайдСценария"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоЭмулироватьВводСКлавиатуры"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоСкрытьСлужебныеОкна"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоСкоростьПроизношения"", ""1"");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКэшироватьФайлыTTS"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКэшФайловTTS"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКэшироватьВидеоВставки"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоКэшВидеоВставок"", """");
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоДобавлятьСубтитры"", Истина);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоПроцентУскорения"", 25);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипВидео"", Истина);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипHTML"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипMarkdown"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗаписьВидеоЭмулироватьДвиженияМышки"", Ложь);
	
	ПараметрыЗапуска.Вставить(""ВерсияПлатформыДляГенерацииEPF"", """");
	
	ПараметрыЗапуска.Вставить(""ДополнительныеПараметры"", Неопределено);
	
	ПараметрыЗапуска.Вставить(""КлиентыТестирования"", Неопределено);
	ПараметрыЗапуска.Вставить(""ТаймаутЗапуска1С"", ""25"");
	ПараметрыЗапуска.Вставить(""ДиапазонПортовTestclient"", """");
	
	ПараметрыЗапуска.Вставить(""ТаймаутДляАсинхронныхШагов"", ""0"");
	ПараметрыЗапуска.Вставить(""БезопасноеВыполнениеШагов"", Ложь);
	ПараметрыЗапуска.Вставить(""КомандаОткрытияФичиВТекстовомРедакторе"", """");
	ПараметрыЗапуска.Вставить(""КаталогОтносительноКоторогоНадоСтроитьИерархию"", """");
	ПараметрыЗапуска.Вставить(""УровеньОтчета1"", """");
	ПараметрыЗапуска.Вставить(""УровеньОтчета2"", """");
	ПараметрыЗапуска.Вставить(""УровеньОтчета3"", """");
	ПараметрыЗапуска.Вставить(""ГруппировкаTestSuites"", """");
	
	ПараметрыЗапуска.Вставить(""ИспользоватьSikuliXСервер"", Ложь);
	ПараметрыЗапуска.Вставить(""КаталогиСкриптовSikuliX"", """");
	ПараметрыЗапуска.Вставить(""КаталогДляГенерацииКартинок"", """");
	
	ПараметрыЗапуска.Вставить(""ИскатьЭлементыФормыПоИмени"", Ложь);
	
	ПараметрыЗапуска.Вставить(""ДобавлятьПриНакликиванииМетаИнформацию"", Ложь);
	ПараметрыЗапуска.Вставить(""ЗапускатьКлиентТестированияСМаксимизированнымОкном"", Ложь);
	ПараметрыЗапуска.Вставить(""ОбновлятьСтатистикуВДереве"", Истина);
	ПараметрыЗапуска.Вставить(""ОбновлятьДеревоПриНачалеВыполненияСценария"", Истина);
	ПараметрыЗапуска.Вставить(""ПаузаПриОткрытииОкна"", ""0"");
	ПараметрыЗапуска.Вставить(""ТегTreeВключенПоУмолчанию"", Истина);
	ПараметрыЗапуска.вставить(""ДанныеАллюрМеток"", Неопределено);
	
	ПараметрыЗапуска.Вставить(""ЯзыкГенератораGherkin"", ""ru"");
	
	// Удалить.
	ПараметрыЗапуска.Вставить(""КаталогOutputAllure"", """");
	ПараметрыЗапуска.Вставить(""КаталогOutputAllureБазовый"", """");
	ПараметрыЗапуска.Вставить(""КаталогOutputjUnit"", """");
	ПараметрыЗапуска.Вставить(""КаталогOutputCucumberJson"", """");
	ПараметрыЗапуска.Вставить(""КаталогOutputИнструкцияHTML"", """");
	ПараметрыЗапуска.Вставить(""КаталогOutputИнструкцияMarkdown"", """");
	ПараметрыЗапуска.Вставить(""КаталогOutputИнструкцияВидео"", """");
	ПараметрыЗапуска.Вставить(""КаталогOutputСкриншоты"", """");
	
	// Конец Удалить
	
	Возврат ПараметрыЗапуска;
	
КонецФункции
// Устарела.26
&НаКлиенте
Функция КоллекцияКомандЗапуска()
	
	КоллекцияКоманд = СтруктураПараметровЗапуска();
	КоллекцияКоманд.Вставить(""StartFeaturePlayer"", Новый Структура(""Р, А"", ""StartFeaturePlayer"", ""startfeatureplayer""));
	КоллекцияКоманд.Вставить(""АдресОтладчика"", Новый Структура(""Р, А"", ""АдресОтладчика"", ""testclientdebugaddress""));
	КоллекцияКоманд.Вставить(""БезопасноеВыполнениеШагов"", Новый Структура(""Р, А"", ""БезопасноеВыполнениеШагов"", ""safeexecutionofsteps""));
	КоллекцияКоманд.Вставить(""ВерсияПлатформыДляГенерацииEPF"", Новый Структура(""Р, А"", ""ВерсияПлатформыДляГенерацииEPF"", ""platformversiongenerateepf""));
	КоллекцияКоманд.Вставить(""ВыводитьВЛогВыполнениеШагов"", Новый Структура(""Р, А"", ""ВыводитьВЛогВыполнениеШагов"", ""logstepstotext""));
	КоллекцияКоманд.Вставить(""ВыгружатьСтатусВыполненияСценариевВФайл"", Новый Структура(""Р, А"", ""ВыгружатьСтатусВыполненияСценариевВФайл"", ""createlogs""));
	КоллекцияКоманд.Вставить(""ВыгрузитьPIDTestManager"", Новый Структура(""Р, А"", ""ВыгрузитьPIDTestManager"", ""returnpidoftestmanager""));
	КоллекцияКоманд.Вставить(""ВыполнитьСценарии"", Новый Структура(""Р, А"", ""ВыполнитьСценарии"", ""vanessarun""));
	КоллекцияКоманд.Вставить(""ВыполнитьСценарииСТекущегоШага"", Новый Структура(""Р, А"", ""ВыполнитьСценарииСТекущегоШага"", ""vanessarunfromthisstep""));
	КоллекцияКоманд.Вставить(""ВыполнятьШагиАссинхронно"", Новый Структура(""Р, А"", ""ВыполнятьШагиАссинхронно"", ""makestepsasync""));
	КоллекцияКоманд.Вставить(""ДелатьЛогВыполненияСценариевВЖР"", Новый Структура(""Р, А"", ""ДелатьЛогВыполненияСценариевВЖР"", ""logtogr""));
	КоллекцияКоманд.Вставить(""ДелатьЛогВыполненияСценариевВТекстовыйФайл"", Новый Структура(""Р, А"", ""ДелатьЛогВыполненияСценариевВТекстовыйФайл"", ""logtotext""));
	КоллекцияКоманд.Вставить(""ДелатьЛогОшибокВТекстовыйФайл"", Новый Структура(""Р, А"", ""ДелатьЛогОшибокВТекстовыйФайл"", ""logerrorstotext""));
	КоллекцияКоманд.Вставить(""СобиратьДанныеОСостоянииАктивнойФормыПриОшибке"", Новый Структура(""Р, А"", ""СобиратьДанныеОСостоянииАктивнойФормыПриОшибке"", ""getformdataonerror""));
	КоллекцияКоманд.Вставить(""СобиратьДанныеОСостоянииВсехФормПриОшибке"", Новый Структура(""Р, А"", ""СобиратьДанныеОСостоянииВсехФормПриОшибке"", ""getformdataonerror""));
	КоллекцияКоманд.Вставить(""ДелатьОтчетВоВнутреннемФормате"", Новый Структура(""Р, А"", ""ДелатьОтчетВоВнутреннемФормате"", ""simplereport""));
	КоллекцияКоманд.Вставить(""ДелатьОтчетВФорматеCucumberJson"", Новый Структура(""Р, А"", ""ДелатьОтчетВФорматеCucumberJson"", ""cucumbercreatereport""));
	КоллекцияКоманд.Вставить(""ДелатьОтчетВФорматеjUnit"", Новый Структура(""Р, А"", ""ДелатьОтчетВФорматеjUnit"", ""junitcreatereport""));
	КоллекцияКоманд.Вставить(""ДелатьОтчетВФорматеАллюр"", Новый Структура(""Р, А"", ""ДелатьОтчетВФорматеАллюр"", ""allurecreatereport""));
	КоллекцияКоманд.Вставить(""ДелатьСкриншотПриВозникновенииОшибки"", Новый Структура(""Р, А"", ""ДелатьСкриншотПриВозникновенииОшибки"", ""onerrorscreenshot""));
	КоллекцияКоманд.Вставить(""ДелатьСообщенияТранслитом"", Новый Структура(""Р, А"", ""ДелатьСообщенияТранслитом"", ""translatemassage""));
	КоллекцияКоманд.Вставить(""ДиапазонПортовTestclient"", Новый Структура(""Р, А"", ""ДиапазонПортовTestclient"", ""testclientports""));
	КоллекцияКоманд.Вставить(""ДобавлятьКИмениСценарияУсловияВыгрузки"", Новый Структура(""Р, А"", ""ДобавлятьКИмениСценарияУсловияВыгрузки"", ""addtofeaturefilter""));
	КоллекцияКоманд.Вставить(""ДобавлятьПриНакликиванииМетаИнформацию"", Новый Структура(""Р, А"", ""ДобавлятьПриНакликиванииМетаИнформацию"", ""addmetainformationclicking""));
	КоллекцияКоманд.Вставить(""ДополнительныеПараметры"", Новый Структура(""Р, А"", ""ДополнительныеПараметры"", ""dopparams""));
	КоллекцияКоманд.Вставить(""ЗавершитьРаботуСистемы"", Новый Структура(""Р, А"", ""ЗавершитьРаботуСистемы"", ""vanessashutdown""));
	КоллекцияКоманд.Вставить(""ЗагрузитьСценарии"", Новый Структура(""Р, А"", ""ЗагрузитьСценарии"", ""loadscenarios""));
	КоллекцияКоманд.Вставить(""ЗакрытьTestClientПослеЗапускаСценариев"", Новый Структура(""Р, А"", ""ЗакрытьTestClientПослеЗапускаСценариев"", ""closetestclient""));
	
	КоллекцияКоманд.Вставить(""ЗаписьВидеоYandexTTSOauthToken"", Новый Структура(""Р, А"", ""ЗаписьВидеоYandexTTSOauthToken"", ""yandexttsoauthtoken""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоYandexTTSГолос"", Новый Структура(""Р, А"", ""ЗаписьВидеоYandexTTSГолос"", ""yandexttsvoice""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоYandexTTSИдентификаторКаталога"", Новый Структура(""Р, А"", ""ЗаписьВидеоYandexTTSИдентификаторКаталога"", ""yandexttsfolderId""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоYandexTTSСкорость"", Новый Структура(""Р, А"", ""ЗаписьВидеоYandexTTSСкорость"", ""yandexttsspeed""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоYandexTTSЭмоция"", Новый Структура(""Р, А"", ""ЗаписьВидеоYandexTTSЭмоция"", ""yandexttsemotion""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоYandexTTSЯзык"", Новый Структура(""Р, А"", ""ЗаписьВидеоYandexTTSЯзык"", ""yandexttslanguage""));
	
	КоллекцияКоманд.Вставить(""ЗаписьВидеоAmazonГолос"", Новый Структура(""Р, А"", ""ЗаписьВидеоAmazonГолос"", ""amazonttsvoice""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоAmazonДвижок"", Новый Структура(""Р, А"", ""ЗаписьВидеоAmazonДвижок"", ""amazonttsengine""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоAmazonЯзык"", Новый Структура(""Р, А"", ""ЗаписьВидеоAmazonЯзык"", ""amazonttslanguage""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоAmazonКлючДоступа"", Новый Структура(""Р, А"", ""ЗаписьВидеоAmazonКлючДоступа"", ""amazonttskey""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоAmazonСекретныйКлюч"", Новый Структура(""Р, А"", ""ЗаписьВидеоAmazonСекретныйКлюч"", ""amazonttssecretkey""));
	
	КоллекцияКоманд.Вставить(""ЗаписьВидеоГромкостьМузыки"", Новый Структура(""Р, А"", ""ЗаписьВидеоГромкостьМузыки"", ""musicvolume""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоГруппаШаговКакШаг"", Новый Структура(""Р, А"", ""ЗаписьВидеоГруппаШаговКакШаг"", ""groupofstepsasastep""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоДелатьНаложениеTTS"", Новый Структура(""Р, А"", ""ЗаписьВидеоДелатьНаложениеTTS"", ""dotts""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоДобавлятьСубтитры"", Новый Структура(""Р, А"", ""ЗаписьВидеоДобавлятьСубтитры"", ""addsubtitles""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоИмяTTS"", Новый Структура(""Р, А"", ""ЗаписьВидеоИмяTTS"", ""ttsvoice""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКаталогДляВременныхФайлов"", Новый Структура(""Р, А"", ""ЗаписьВидеоКаталогДляВременныхФайлов"", ""tempfolderforvideo""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКаталогМузыки"", Новый Структура(""Р, А"", ""ЗаписьВидеоКаталогМузыки"", ""musicpath""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКоличествоКадров"", Новый Структура(""Р, А"", ""ЗаписьВидеоКоличествоКадров"", ""fps""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКомандаConvert"", Новый Структура(""Р, А"", ""ЗаписьВидеоКомандаConvert"", ""convertcomand""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКомандаFfmpeg"", Новый Структура(""Р, А"", ""ЗаписьВидеоКомандаFfmpeg"", ""ffmpegcomand""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКомандаНачатьЗаписьВидео"", Новый Структура(""Р, А"", ""ЗаписьВидеоКомандаНачатьЗаписьВидео"", ""comandrecvideo""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКэшВидеоВставок"", Новый Структура(""Р, А"", ""ЗаписьВидеоКэшВидеоВставок"", ""videocachepath""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКэшироватьВидеоВставки"", Новый Структура(""Р, А"", ""ЗаписьВидеоКэшироватьВидеоВставки"", ""cachevideo""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКэшироватьФайлыTTS"", Новый Структура(""Р, А"", ""ЗаписьВидеоКэшироватьФайлыTTS"", ""cachettsfiles""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоКэшФайловTTS"", Новый Структура(""Р, А"", ""ЗаписьВидеоКэшФайловTTS"", ""ttsfilescache""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени"", Новый Структура(""Р, А"", ""ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени"", ""disablescalingofsteps""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи"", Новый Структура(""Р, А"", ""ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи"", ""turnofffeaturetitleslide""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоОтключитьСлайдСценария"", Новый Структура(""Р, А"", ""ЗаписьВидеоОтключитьСлайдСценария"", ""turnoffscenarioslide""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы"", Новый Структура(""Р, А"", ""ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы"", ""movemouse""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм"", Новый Структура(""Р, А"", ""ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм"", ""showframe""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоПодсвечиватьНажатияМышки"", Новый Структура(""Р, А"", ""ЗаписьВидеоПодсвечиватьНажатияМышки"", ""highlightmouseclicks""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоПроцентУскорения"", Новый Структура(""Р, А"", ""ЗаписьВидеоПроцентУскорения"", ""accelerationpercentage""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоПутьКДвижкуTTS"", Новый Структура(""Р, А"", ""ЗаписьВидеоПутьКДвижкуTTS"", ""audioenginetts""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоСкоростьПроизношения"", Новый Структура(""Р, А"", ""ЗаписьВидеоСкоростьПроизношения"", ""speedofspeech""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоСкрытьСлужебныеОкна"", Новый Структура(""Р, А"", ""ЗаписьВидеоСкрытьСлужебныеОкна"", ""hideservicewindows""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоСловарьЗамен"", Новый Структура(""Р, А"", ""ЗаписьВидеоСловарьЗамен"", ""changewordslib""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоСловарьЗаменСписок"", Новый Структура(""Р, А"", ""ЗаписьВидеоСловарьЗаменСписок"", ""changewordsliblist""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоТипОзвучкиTTS"", Новый Структура(""Р, А"", ""ЗаписьВидеоТипОзвучкиTTS"", ""ttstype""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоФайлВодянойЗнак"", Новый Структура(""Р, А"", ""ЗаписьВидеоФайлВодянойЗнак"", ""watermarkfile""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоФайлКурсораМышки"", Новый Структура(""Р, А"", ""ЗаписьВидеоФайлКурсораМышки"", ""mousecurfile""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипHTML"", Новый Структура(""Р, А"", ""ЗаписьВидеоФормироватьИнструкциюТипHTML"", ""instructiontypehtml""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипMarkdown"", Новый Структура(""Р, А"", ""ЗаписьВидеоФормироватьИнструкциюТипMarkdown"", ""instructiontypemarkdown""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоЭмулироватьДвиженияМышки"", Новый Структура(""Р, А"", ""ЗаписьВидеоЭмулироватьДвиженияМышки"", ""emulatemousemovement""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипВидео"", Новый Структура(""Р, А"", ""ЗаписьВидеоФормироватьИнструкциюТипВидео"", ""instructiontypevideo""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоЭкранВысота"", Новый Структура(""Р, А"", ""ЗаписьВидеоЭкранВысота"", ""screenheight""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоЭкранШирина"", Новый Структура(""Р, А"", ""ЗаписьВидеоЭкранШирина"", ""screenwidth""));
	КоллекцияКоманд.Вставить(""ЗаписьВидеоЭмулироватьВводСКлавиатуры"", Новый Структура(""Р, А"", ""ЗаписьВидеоЭмулироватьВводСКлавиатуры"", ""emulatekeyboardinput""));
	КоллекцияКоманд.Вставить(""ЗапускатьКлиентТестированияСМаксимизированнымОкном"", Новый Структура(""Р, А"", ""ЗапускатьКлиентТестированияСМаксимизированнымОкном"", ""runtestclientwithmaximizedwindow""));
	КоллекцияКоманд.Вставить(""ЗапускатьТестКлиентВРежимеОтладки"", Новый Структура(""Р, А"", ""ЗапускатьТестКлиентВРежимеОтладки"", ""testclientdebug""));
	КоллекцияКоманд.Вставить(""ИмяКаталогаЛогОшибок"", Новый Структура(""Р, А"", ""ИмяКаталогаЛогОшибок"", ""texterrorslogname""));
	КоллекцияКоманд.Вставить(""ИмяСборки"", Новый Структура(""Р, А"", ""ИмяСборки"", ""buildname""));
	КоллекцияКоманд.Вставить(""ИмяФайлаPIDTestManager"", Новый Структура(""Р, А"", ""ИмяФайлаPIDTestManager"", ""filenamepidtestmanager""));
	КоллекцияКоманд.Вставить(""ИмяФайлаВнешнихКомандФреймворка"", Новый Структура(""Р, А"", ""ИмяФайлаВнешнихКомандФреймворка"", ""fileofcommand""));
	КоллекцияКоманд.Вставить(""ИмяФайлаЛогВыполненияСценариев"", Новый Структура(""Р, А"", ""ИмяФайлаЛогВыполненияСценариев"", ""textlogname""));
	КоллекцияКоманд.Вставить(""ИскатьЭлементыФормыПоИмени"", Новый Структура(""Р, А"", ""ИскатьЭлементыФормыПоИмени"", ""searchformelementsbyname""));
	КоллекцияКоманд.Вставить(""ИспользоватьSikuliXСервер"", Новый Структура(""Р, А"", ""ИспользоватьSikuliXСервер"", ""usesikulixserver""));
	КоллекцияКоманд.Вставить(""КаталогВыгрузкиAllure"", Новый Структура(""Р, А"", ""КаталогВыгрузкиAllure"", ""allurepath""));
	КоллекцияКоманд.Вставить(""КаталогВыгрузкиAllureБазовый"", Новый Структура(""Р, А"", ""КаталогВыгрузкиAllureБазовый"", ""allurepathbase""));
	КоллекцияКоманд.Вставить(""КаталогВыгрузкиCucumberJson"", Новый Структура(""Р, А"", ""КаталогВыгрузкиCucumberJson"", ""cucumberreportpath""));
	КоллекцияКоманд.Вставить(""КаталогВыгрузкиjUnit"", Новый Структура(""Р, А"", ""КаталогВыгрузкиjUnit"", ""junitpath""));
	КоллекцияКоманд.Вставить(""КаталогВыгрузкиИнструкцийHTML"", Новый Структура(""Р, А"", ""КаталогВыгрузкиИнструкцийHTML"", ""htmlpath""));
	КоллекцияКоманд.Вставить(""КаталогВыгрузкиИнструкцийMarkdown"", Новый Структура(""Р, А"", ""КаталогВыгрузкиИнструкцийMarkdown"", ""markdownpath""));
	КоллекцияКоманд.Вставить(""КаталогВыгрузкиИнструкцийВидео"", Новый Структура(""Р, А"", ""КаталогВыгрузкиИнструкцийВидео"", ""videopath""));
	КоллекцияКоманд.Вставить(""КаталогВыгрузкиСкриншотов"", Новый Структура(""Р, А"", ""КаталогВыгрузкиСкриншотов"", ""outputscreenshot""));
	КоллекцияКоманд.Вставить(""КаталогиБиблиотек"", Новый Структура(""Р, А"", ""КаталогиБиблиотек"", ""librarycatalogs""));
	КоллекцияКоманд.Вставить(""КаталогИнструментов"", Новый Структура(""Р, А"", ""КаталогИнструментов"", ""instrpath""));
	КоллекцияКоманд.Вставить(""КаталогиСкриптовSikuliX"", Новый Структура(""Р, А"", ""КаталогиСкриптовSikuliX"", ""sikulixscriptpath""));
	КоллекцияКоманд.Вставить(""КаталогДляГенерацииКартинок"", Новый Структура(""Р, А"", ""КаталогДляГенерацииКартинок"", ""pathforpicturegeneration""));
	КоллекцияКоманд.Вставить(""КаталогИсполняемогоФайла"", Новый Структура(""Р, А"", ""КаталогИсполняемогоФайла"", ""pathtoplatform""));
	КоллекцияКоманд.Вставить(""КаталогОтносительноКоторогоНадоСтроитьИерархию"", Новый Структура(""Р, А"", ""КаталогОтносительноКоторогоНадоСтроитьИерархию"", ""directorytobuildhierarchy""));
	КоллекцияКоманд.Вставить(""КаталогПроекта"", Новый Структура(""Р, А"", ""КаталогПроекта"", ""projectpath""));
	КоллекцияКоманд.Вставить(""КаталогФич"", Новый Структура(""Р, А"", ""КаталогФич"", ""featurepath""));
	КоллекцияКоманд.Вставить(""КлиентыТестирования"", Новый Структура(""Р, А"", ""КлиентыТестирования"", ""testclienttable""));
	КоллекцияКоманд.Вставить(""КлючиОтладки"", Новый Структура(""Р, А"", ""КлючиОтладки"", ""testclientdebugkeys""));
	КоллекцияКоманд.Вставить(""КоличествоПопытокВыполненияДействия"", Новый Структура(""Р, А"", ""КоличествоПопытокВыполненияДействия"", ""numberofattemptstoperformanaction""));
	КоллекцияКоманд.Вставить(""КоличествоСекундПоискаОкна"", Новый Структура(""Р, А"", ""КоличествоСекундПоискаОкна"", ""timetofindwindow""));
	КоллекцияКоманд.Вставить(""КомандаОткрытияФичиВТекстовомРедакторе"", Новый Структура(""Р, А"", ""КомандаОткрытияФичиВТекстовомРедакторе"", ""commandtoopenfeatureintexteditor""));
	КоллекцияКоманд.Вставить(""КомандаСделатьСкриншот"", Новый Структура(""Р, А"", ""КомандаСделатьСкриншот"", ""commandscreenshot""));
	КоллекцияКоманд.Вставить(""ИспользоватьВнешнююКомпонентуДляСкриншотов"", Новый Структура(""Р, А"", ""ИспользоватьВнешнююКомпонентуДляСкриншотов"", ""useaddinforscreencapture""));
	КоллекцияКоманд.Вставить(""СпособСнятияСкриншотовВнешнейКомпонентой"", Новый Структура(""Р, А"", ""СпособСнятияСкриншотовВнешнейКомпонентой"", ""screencaptureaddinmethod""));
	КоллекцияКоманд.Вставить(""НомерСтрокиДляЗапускаСТекущегоШагаСценария"", Новый Структура(""Р, А"", ""НомерСтрокиДляЗапускаСТекущегоШагаСценария"", ""stepnumber""));
	КоллекцияКоманд.Вставить(""ОбновлятьДеревоПриНачалеВыполненияСценария"", Новый Структура(""Р, А"", ""ОбновлятьДеревоПриНачалеВыполненияСценария"", ""updatetreewhenscenariostarts""));
	КоллекцияКоманд.Вставить(""ОбновлятьСтатистикуВДереве"", Новый Структура(""Р, А"", ""ОбновлятьСтатистикуВДереве"", ""updatestatistics""));
	КоллекцияКоманд.Вставить(""ОстановкаПриВозникновенииОшибки"", Новый Структура(""Р, А"", ""ОстановкаПриВозникновенииОшибки"", ""stoponerror""));
	КоллекцияКоманд.Вставить(""ПаузаПриОткрытииОкна"", Новый Структура(""Р, А"", ""ПаузаПриОткрытииОкна"", ""pauseonwindowopening""));
	КоллекцияКоманд.Вставить(""ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки"", Новый Структура(""Р, А"", ""ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки"", ""showrownumberonerror""));
	КоллекцияКоманд.Вставить(""ПриоритетНастроекПользователя"", Новый Структура(""Р, А"", ""ПриоритетНастроекПользователя"", ""priorityofusersettings""));
	КоллекцияКоманд.Вставить(""ПриравниватьPendingКFailed"", Новый Структура(""Р, А"", ""ПриравниватьPendingКFailed"", ""pendingequalfailed""));
	КоллекцияКоманд.Вставить(""ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев"", Новый Структура(""Р, А"", ""ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев"", ""logpath""));
	КоллекцияКоманд.Вставить(""СниматьСкриншотКаждогоОкна1С"", Новый Структура(""Р, А"", ""СниматьСкриншотКаждогоОкна1С"", ""onerrorscreenshoteverywindow""));
	КоллекцияКоманд.Вставить(""СоздаватьИнструкциюHTML"", Новый Структура(""Р, А"", ""СоздаватьИнструкциюHTML"", ""htmlcreate""));
	КоллекцияКоманд.Вставить(""СоздаватьИнструкциюMarkdown"", Новый Структура(""Р, А"", ""СоздаватьИнструкциюMarkdown"", ""markdowncreate""));
	КоллекцияКоманд.Вставить(""СоздаватьИнструкциюВидео"", Новый Структура(""Р, А"", ""СоздаватьИнструкциюВидео"", ""videcreate""));
	КоллекцияКоманд.Вставить(""СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки"", Новый Структура(""Р, А"", ""СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки"", ""createsubfolderforbuild""));
	КоллекцияКоманд.Вставить(""СписокТеговИсключение"", Новый Структура(""Р, А"", ""СписокТеговИсключение"", ""ignoretags""));
	КоллекцияКоманд.Вставить(""СписокТеговОтбор"", Новый Структура(""Р, А"", ""СписокТеговОтбор"", ""filtertags""));
	КоллекцияКоманд.Вставить(""ТаймаутДляАсинхронныхШагов"", Новый Структура(""Р, А"", ""ТаймаутДляАсинхронныхШагов"", ""timeoutforasynchronoussteps""));
	КоллекцияКоманд.Вставить(""ТаймаутЗапуска1С"", Новый Структура(""Р, А"", ""ТаймаутЗапуска1С"", ""testclienttimeout""));
	КоллекцияКоманд.Вставить(""ТегTreeВключенПоУмолчанию"", Новый Структура(""Р, А"", ""ТегTreeВключенПоУмолчанию"", ""thetreetagisenabledbydefault""));
	КоллекцияКоманд.Вставить(""УровеньОтчета1"", Новый Структура(""Р, А"", ""УровеньОтчета1"", ""reportlevel1""));
	КоллекцияКоманд.Вставить(""УровеньОтчета2"", Новый Структура(""Р, А"", ""УровеньОтчета2"", ""reportlevel2""));
	КоллекцияКоманд.Вставить(""УровеньОтчета3"", Новый Структура(""Р, А"", ""УровеньОтчета3"", ""reportlevel3""));
	КоллекцияКоманд.Вставить(""ГруппировкаTestSuites"", Новый Структура(""Р, А"", ""ГруппировкаTestSuites"", ""testsuites""));
	КоллекцияКоманд.Вставить(""ЯзыкГенератораGherkin"", Новый Структура(""Р, А"", ""ЯзыкГенератораGherkin"", ""gherkinlanguage""));
	
	// Удалить. Обратная совместимость
	КоллекцияКоманд.Вставить(""КаталогOutputAllure"", Новый Структура(""Р, А"", ""КаталогOutputAllure"", ""allurepath""));
	КоллекцияКоманд.Вставить(""КаталогOutputAllureБазовый"", Новый Структура(""Р, А"", ""КаталогOutputAllureБазовый"", ""allurepathbase""));
	КоллекцияКоманд.Вставить(""КаталогOutputCucumberJson"", Новый Структура(""Р, А"", ""КаталогOutputCucumberJson"", ""cucumberreportpath""));
	КоллекцияКоманд.Вставить(""КаталогOutputjUnit"", Новый Структура(""Р, А"", ""КаталогOutputjUnit"", ""junitpath""));
	КоллекцияКоманд.Вставить(""КаталогOutputИнструкцияHTML"", Новый Структура(""Р, А"", ""КаталогOutputИнструкцияHTML"", ""htmlpath""));
	КоллекцияКоманд.Вставить(""КаталогOutputИнструкцияMarkdown"", Новый Структура(""Р, А"", ""КаталогOutputИнструкцияMarkdown"", ""markdownpath""));
	КоллекцияКоманд.Вставить(""КаталогOutputИнструкцияВидео"", Новый Структура(""Р, А"", ""КаталогOutputИнструкцияВидео"", ""videopath""));
	КоллекцияКоманд.Вставить(""КаталогOutputСкриншоты"", Новый Структура(""Р, А"", ""КаталогOutputСкриншоты"", ""outputscreenshot""));
	// Конец Удалить
	
	Возврат КоллекцияКоманд;
	
КонецФункции

&НаКлиенте
Функция НайтиКоманду(КоллекцияКоманды, КомандаЗапускаНРег)
	Если ТипЗнч(КоллекцияКоманды) = Тип(""Структура"") Тогда
		Для каждого КлючЗначение Из КоллекцияКоманды Цикл
			Если НРег(КлючЗначение.Значение) = НРег(КомандаЗапускаНРег) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	 
	Возврат Ложь;
КонецФункции

// Возвращает переменные операционной системы начинающиеся на ""VANESSA_""
// 
// Возвращаемое значение:
//  Структура - 
//
&НаКлиенте
Функция ПрочитатьПеременныеСреды() 
	
	СтруктураПараметров = Новый Структура;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();	
	Попытка
		Если ЭтоLinux Тогда 
			КомандаСистемы(""sh -c 'env > "" + ИмяВременногоФайла + ""'"");
		Иначе 
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(""set > """""" + ИмяВременногоФайла + """""""");
		КонецЕсли;
	Исключение
		ТекстСообщения = Локализовать(""При чтении переменных окружения операционной системы возникло исключение: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	СоответствиеПеременныхПути = Новый Соответствие;
	
	Попытка 
		Чтение = Новый ЧтениеТекста(ИмяВременногоФайла,КодировкаТекста.UTF8);
		Стр = Чтение.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл 
			// Найдем ключ и значение
			Индекс = Найти(Стр, ""="");
			Если Индекс > 0 Тогда 
				Ключ = Нрег(Лев(Стр, Индекс - 1));
				Если ВРег(Лев(Ключ, 8))=""VANESSA_"" Тогда 
					Ключ = Сред(Ключ, 9);
					Значение = Сред(Стр, Индекс + 1);
					СоответствиеПеременныхПути.Вставить(Ключ, Значение);
				КонецЕсли;
			КонецЕсли;
			Стр = Чтение.ПрочитатьСтроку();
		КонецЦикла;
	Исключение 
	КонецПопытки;
	
	Если СоответствиеПеременныхПути.Количество() = 0 Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	КоллекцияКоммандЗапуска = КоллекцияКомандЗапуска();
	
	Для каждого ЭлементСтруктуры Из КоллекцияКоммандЗапуска Цикл 
		Для каждого ЭлементПеременных Из СоответствиеПеременныхПути Цикл 
			Если НайтиКоманду(ЭлементСтруктуры.Значение, ЭлементПеременных.Ключ) Тогда 
				СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементПеременных.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Устарело. Настройки.
// TODO: Тк параметры обрабатываются индивидуально, перенести часть по раборте с путями именно в эти методы.
//
&НаКлиенте
Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров)
	МассивКлючей = Новый Массив;
	
	Для каждого ПараметрСборки Из СтруктураПараметров Цикл
		
		Если Лев(ПараметрСборки.Значение, 1) = ""."" Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		ИначеЕсли Найти(ПараметрСборки.Значение, ""$workspaceRoot"") > 0 ИЛИ Найти(ПараметрСборки.Значение, ""$instrumentsRoot"") > 0 Тогда 
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;	 
	КонецЦикла;
	
	Для каждого Ключ Из МассивКлючей Цикл
		Было  = СтруктураПараметров[Ключ];
		Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(СтруктураПараметров[Ключ]);
		
		СтруктураПараметров.Вставить(Ключ, Стало);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВнешнихКоманд()
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.ИмяФайлаВнешнихКомандФреймворка) Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстКоманды                      = Неопределено;
	НомерСтрокиСценарияПереданныйИзвне = Неопределено;
	
	Файл = Новый Файл(Объект.ИмяФайлаВнешнихКомандФреймворка);
	Расширение = Нрег(Файл.Расширение);
	
	ДанныеНастроек = Неопределено;
	
	Если Расширение = "".json"" Тогда
		ЧтениеJSON = Вычислить(""Новый ЧтениеJSON"");
		ЧтениеJSON.ОткрытьФайл(Объект.ИмяФайлаВнешнихКомандФреймворка);
		
		ДанныеКоманды = ПрочитатьJSON(ЧтениеJSON);
		ТекстКоманды = ДанныеКоманды.ТекстКоманды;
		Если ТекстКоманды = ""ПерезагрузитьИВыполнитьСТекущегоШага"" Тогда
			НомерСтрокиСценарияПереданныйИзвне = ДанныеКоманды.НомерСтрокиДляЗапускаСТекущегоШагаСценария;
		КонецЕсли;	 
		ИмяФайлаНастроек = ДанныеКоманды.ИмяФайлаНастроек;
		
		ЧтениеJSON.Закрыть();
		
		ФайлНастроек = Новый Файл(ИмяФайлаНастроек);
		Если ФайлНастроек.Существует() Тогда
			ЧтениеJSON = Вычислить(""Новый ЧтениеJSON"");
			ЧтениеJSON.ОткрытьФайл(ИмяФайлаНастроек);
			
			ДанныеНастроек = ПрочитатьJSON(ЧтениеJSON);
			Если ДанныеНастроек.Свойство(""КлиентыТестирования"") Тогда
				Для Каждого ПараметрыКлиентаТестирования Из ДанныеНастроек.КлиентыТестирования Цикл
					ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования);
				КонецЦикла;	
			КонецЕсли;	 
			
			ЧтениеJSON.Закрыть();
		КонецЕсли;	 
		
	Иначе	
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Объект.ИмяФайлаВнешнихКомандФреймворка,""UTF-8"");
		
		ДанныеКоманды = Новый Массив;
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			ДанныеКоманды.Добавить(Стр);
		КонецЦикла;	
		
		ТекстКоманды = ДанныеКоманды[0];
		Если ТекстКоманды = ""ПерезагрузитьИВыполнитьСТекущегоШага"" Тогда
			НомерСтрокиСценарияПереданныйИзвне = Число(ДанныеКоманды[1]);
		КонецЕсли;	 
		
		Текст.Закрыть();
	КонецЕсли;	 
	
	НадоПерейтиКСтрокеДерева = -1;
	
	УдалитьФайлыКомандаСистемы(Объект.ИмяФайлаВнешнихКомандФреймворка);
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
	Объект.ВыполнитьСценарииПослеЗагрузкиФич = Ложь;
	
	Если ТекстКоманды = ""ПерезагрузитьИВыполнить"" Тогда
		ПерезагрузитьИВыполнить("""");
	ИначеЕсли ТекстКоманды = ""ПерезагрузитьИВыполнитьСТекущегоШага"" Тогда
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить(""ЗапуститьСценарийСоСтрокиПрисланнойИзвне"",Истина);
		ЗагрузитьФичи(ДопПараметры);
	ИначеЕсли ТекстКоманды = ""Перезагрузить"" Тогда
		ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
		КонецЕсли;	 
		Если ДанныеНастроек <> Неопределено Тогда
			Объект.КаталогФич = ДанныеНастроек.КаталогФич;
		КонецЕсли;	 
		ЗагрузитьФичи();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивныйTestClient(ИмяКлиентаТестирования)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Имя"", ИмяКлиентаТестирования);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
		Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаДанныеКлиентовТестирования.ПолучитьИдентификатор();
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция СоздатьСоответствиеТестовогоКлиентаСАнглийскимЯзыком()
	Рез = Новый Структура();
	Рез.Вставить(""name"", Новый Структура(""Р, А"", ""Имя"", ""name""));
	Рез.Вставить(""pathtoinfobase"", Новый Структура(""Р, А"", ""ПутьКИнфобазе"", ""pathtoinfobase""));
	Рез.Вставить(""additionalparameters"", Новый Структура(""Р, А"", ""ДопПараметры"", ""additionalparameters""));
	Рез.Вставить(""clienttype"", Новый Структура(""Р, А"", ""ТипКлиента"", ""clienttype""));
	Рез.Вставить(""computermame"", Новый Структура(""Р, А"", ""ИмяКомпьютера"", ""computermame""));
	Рез.Вставить(""porttestclient"", Новый Структура(""Р, А"", ""ПортЗапускаТестКлиента"", ""porttestclient""));
	Рез.Вставить(""synonym"", Новый Структура(""Р, А"", ""Синоним"", ""synonym""));
	Рез.Вставить(""activatestring"", Новый Структура(""Р, А"", ""АктивизироватьСтроку"", ""activatestring""));
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования, LangJSON = ""Ru"")
	Если LangJSON = ""En"" Тогда
		ВременнаяСтруктура = Новый Структура();
		СоответствиеСАнглийскимЯзыком = СоздатьСоответствиеТестовогоКлиентаСАнглийскимЯзыком();
		Для каждого ключЗначение Из ПараметрыКлиентаТестирования Цикл 
			АнглийскийАналог = Неопределено;
			СоответствиеСАнглийскимЯзыком.Свойство(ключЗначение.Ключ,АнглийскийАналог);
			Если Не АнглийскийАналог = Неопределено Тогда
			  ВременнаяСтруктура.Вставить(АнглийскийАналог.Р,ключЗначение.Значение);		
		    Иначе
			  ВременнаяСтруктура.Вставить(ключЗначение.Ключ,ключЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		ПараметрыКлиентаТестирования = ВременнаяСтруктура;
	КонецЕсли;


	ИмяКлиентаТестирования = ПараметрыКлиентаТестирования.Имя;
	Если Нрег(ИмяКлиентаТестирования) = ""this client"" Тогда
		ИмяКлиентаТестирования = ЗаменаАнглийскихСловВТестовомКлиенте(""Имя"",ИмяКлиентаТестирования,""Этот клиент"");
	КонецЕсли;	
	
	ТипКлиентаТестирования = ПараметрыКлиентаТестирования.ТипКлиента;
	Если Нрег(ТипКлиентаТестирования) = ""thin"" Тогда
		ТипКлиентаТестирования = ЗаменаАнглийскихСловВТестовомКлиенте(""ТипКлиента"",ТипКлиентаТестирования,""Тонкий"");
	КонецЕсли;	 
	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""Имя"", ИмяКлиентаТестирования);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
	Иначе	
		СтрокаДанныеКлиентовТестирования     = ДанныеКлиентовТестирования.Добавить();
		СтрокаДанныеКлиентовТестирования.Имя = ИмяКлиентаТестирования;
	КонецЕсли;	 
	
	СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе          = ПараметрыКлиентаТестирования.ПутьКИнфобазе;
	СтрокаДанныеКлиентовТестирования.ДопПараметры           = ПараметрыКлиентаТестирования.ДопПараметры;
	СтрокаДанныеКлиентовТестирования.ТипКлиента             = ПараметрыКлиентаТестирования.ТипКлиента;
	СтрокаДанныеКлиентовТестирования.ИмяКомпьютера          = ПараметрыКлиентаТестирования.ИмяКомпьютера;
	Если ПараметрыКлиентаТестирования.Свойство(""ПортЗапускаТестКлиента"") Тогда
		СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента = ПараметрыКлиентаТестирования.ПортЗапускаТестКлиента;
	КонецЕсли;	 
	Если ПараметрыКлиентаТестирования.Свойство(""Синоним"") Тогда
		СтрокаДанныеКлиентовТестирования.Синоним = ПараметрыКлиентаТестирования.Синоним;
	КонецЕсли;	
	
	АктивизироватьСтроку = Истина;
	Если ПараметрыКлиентаТестирования.Свойство(""АктивизироватьСтроку"") Тогда
		АктивизироватьСтроку = ПараметрыКлиентаТестирования.АктивизироватьСтроку;
	КонецЕсли;	 
	
	Если АктивизироватьСтроку Тогда
		Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаДанныеКлиентовТестирования.ПолучитьИдентификатор();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ЗаменаАнглийскихСловВТестовомКлиенте(Поле,ЗначениеПоля,ЗначениеНаКотороеЗаменяем)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(Поле, ЗначениеПоля);
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат ЗначениеНаКотороеЗаменяем;
	Иначе
		Возврат ЗначениеПоля;
	КонецЕсли;	 
	
КонецФункции


&НаСервере
Функция ДанныеСлужебногоКешаСтрокой(МассивФайловTemplateEpfUF)
	ДанныеСлужебногоКеша = Новый Структура;
	ДанныеСлужебногоКеша.Вставить(""КешStepDefinition"",РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition""));
	ДанныеСлужебногоКеша.Вставить(""МассивФайловTemplateEpfUF"",МассивФайловTemplateEpfUF);
	Возврат ЗначениеВСтрокуВнутр(ДанныеСлужебногоКеша);
КонецФункции	 

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрСервер(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение); 
КонецФункции	 

&НаСервереБезКонтекста
Функция ЕстьКонстантаВКонфигурацииСервер(ИмяКонстанты)
	Зн = Метаданные.Константы.Найти(ИмяКонстанты);
	Если Зн = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКонстантыСервер(ИмяКонстанты)
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции	

&НаКлиенте
Процедура УстановитьВидимостьКолонокДерева(ЕстьКонстантаВКонфигурацииПутьКVA)
	Если ЕстьКонстантаВКонфигурацииПутьКVA И Объект.РежимСамотестирования Тогда
		// видимость колонок Дерева тестов
		ПоказатьСкрытьСтрокаРеальнойПроцедуры(""Показать"");
		ПоказатьСкрытьАдресСнипета(""Показать"");
		ПоказатьСкрытьСнипет(""Показать"");
		ПоказатьСкрытьПутьКФайлу(""Показать"");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;

	Если НЕ Элементы.ДеревоТестовПолныйПуть.Видимость  Тогда
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовСнипет.Видимость  Тогда
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовАдресСнипета.Видимость  Тогда
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость  Тогда
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСлужебныхЭлементов(ДопПараметры)
	ЕстьКонстантаВКонфигурацииПутьКVA = ДопПараметры.ЕстьКонстантаВКонфигурацииПутьКVA;
	Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
		Если ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Неопределено Тогда
			ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	Элементы.ПроверкаРаботыVanessaAutomationВРежимеTestClient.Видимость = ЕстьКонстантаВКонфигурацииПутьКVA
	  И (ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Истина);
	Элементы.ГруппаСлужебная.Видимость = Объект.ПроверкаРаботыVanessaAutomationВРежимеTestClient И ЕстьКонстантаВКонфигурацииПутьКVA;
	Элементы.ДеревоТестовСтатус.Видимость = Объект.ПроверкаРаботыVanessaAutomationВРежимеTestClient И ЕстьКонстантаВКонфигурацииПутьКVA;
	УстановитьВидимостьКолонокДерева(ЕстьКонстантаВКонфигурацииПутьКVA);
	
	Попытка
		// При редактировании в конфигураторе старых версий платформы (8.3.6 и раньше) эти флаги слетают
		Элементы.ГруппаЗапускТестов.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаГенерацияEPF.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаКаталогиБиблиотек.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаДополнительно.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаНесколькоКлиентовТестирования.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаНастройки.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаСлужебная.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.КаталогФич.АвтоМаксимальнаяШирина = Ложь;
	Исключение
	КонецПопытки;
	
	Элементы.ФлагСценарииВыполнены.Видимость = Объект.РежимСамотестирования;
	Элементы.ФлагСценарииЗагружены.Видимость = Объект.РежимСамотестирования;
	
	Если НЕ Объект.РежимСамотестирования Тогда
		Элементы.ЧастичноеВыполнениеСценариев.Видимость = Ложь;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимизироватьФорму()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;	 
	
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
	КонецЕсли;
	
    WSHShell.SendKeys(""%"");
    WSHShell.SendKeys(""{LEFT}{LEFT}{ENTER}"");  	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормы()
	
	ТекстСообщенийПользователю = ТекстСообщенийПользователю();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ТекстСообщенийПользователю"",ТекстСообщенийПользователю);
	ДопПараметры.Вставить(""ЕстьКонстантаВКонфигурацииПутьКVA"",ЕстьКонстантаВКонфигурацииПутьКVA);
	ДопПараметры.Вставить(""КешВерсияОбработки"",КешВерсияОбработки);
	ДопПараметры.Вставить(""ЭтоLinux"",ЭтоLinux);
	ДопПараметры.Вставить(""НедавноЗагруженныеФичи"",НедавноЗагруженныеФичи);
	ДопПараметры.Вставить(""ПрефиксИнструментаДляСохраненияНастроек"",ПрефиксИнструментаДляСохраненияНастроек);
	ДопПараметры.Вставить(""ИДДляОбщегоСохраненияНастроек"",ИДДляОбщегоСохраненияНастроек);
	ДопПараметры.Вставить(""ПараметрыДляСохраненияНастроек"",ПараметрыДляСохраненияНастроек());
	ДопПараметры.Вставить(""ПроверкаОптимизацииРаботыСФайлами"",СоздатьФайлПроверкаОптимизацииРаботыСФайлами());
	ДопПараметры.Вставить(""ВозможнаОптимизацияРаботыСФайлами"",ВозможнаОптимизацияРаботыСФайлами);
	
	СерверныеВызовыПриОткрытииФормы(ДопПараметры);
	
	// видимость колонок Дерева тестов
	ПоказатьСкрытьИДСтроки(""Показать"");
		
	УстановитьВидимостьСлужебныхЭлементов(ДопПараметры);	
	КешВерсияОбработки                      = ДопПараметры.КешВерсияОбработки;
	НедавноЗагруженныеФичи                  = ДопПараметры.НедавноЗагруженныеФичи;
	ПрефиксИнструментаДляСохраненияНастроек = ДопПараметры.ПрефиксИнструментаДляСохраненияНастроек;
	ИДДляОбщегоСохраненияНастроек           = ДопПараметры.ИДДляОбщегоСохраненияНастроек;
	ВозможнаОптимизацияРаботыСФайлами       = ДопПараметры.ВозможнаОптимизацияРаботыСФайлами;
	
	МассивСнипетовВидеовставкаИзТекста = ПолучитьМассивСнипетовВидеовставка();
	
	ОбновитьВидимостьЭлементовПослеЗагрузкиНастроек();
	ОбновитьЗаголовокФормы();

	ЗаполнитьДанныеТекущейИнфобазы();
	
	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	Если Объект.ИнтервалВыполненияШага = 0 Тогда
		Объект.ИнтервалВыполненияШага = 0.1;
		Объект.ИнтервалВыполненияШагаЗаданныйПользователем = 0.1;
	КонецЕсли;	 
	
	КаталогФич          = Объект.КаталогФич;
//	КаталогИнструментов = Объект.КаталогИнструментов;
	
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.КаталогиБиблиотек.ТипЗначения     = Новый ОписаниеТипов(""Строка"");
	Объект.СписокТеговИсключение.ТипЗначения = Новый ОписаниеТипов(""Строка"");
	Объект.СписокТеговОтбор.ТипЗначения      = Новый ОписаниеТипов(""Строка"");

	ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно();
	
	ЗаполнитьКаталогПроектаЕслиОнПустой();
	ЗаполнитьПутьКRunSikulixЕслиОнПустой();
	ЗаполнитьПоставщикаПользовательскихНастроекЕслиОнПустой();
	
	Если СохранитьКлиентовТестированияПослеОткрытияФормы = Истина Тогда
		СохранитьКлиентовТестирования();
	КонецЕсли;	 
	
	ФормаVanessaAutomationОткрылась = Истина;
	
	Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
		ЗапускВРежимеКоманднойСтроки();
		Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
			Если Не ПустаяСтрока(КаталогФич) Тогда
				Если Объект.ЗагрузкаФичПриОткрытии = ""Загружать"" Тогда
					ЗагрузитьФичи();
				ИначеЕсли Объект.ЗагрузкаФичПриОткрытии = ""Загружать и выполнять"" Тогда
					Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
						ЗагрузитьФичи();
						ВыполнитьСценарии();
					Иначе
						Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
						ЗагрузитьФичи();
					КонецЕсли;	
				ИначеЕсли Объект.ЗагрузкаФичПриОткрытии = ""Задавать вопрос"" Тогда
					ТекстВопроса = Локализовать(""Загрузить фичи? <%1>"");
						ТекстВопроса = СтрЗаменить(ТекстВопроса, ""%1"", КаталогФич);
					Если ЕстьПоддержкаНемодальныхФорм Тогда
						ОписаниеОповещения = Новый ОписаниеОповещения(""ПослеОтветаНаВопросНадоЛиЗагружатьФичи"", ЭтаФорма);
						ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.ОК);
					Иначе
						Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.ОК);
						ПослеОтветаНаВопросНадоЛиЗагружатьФичи(Ответ, Неопределено);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	
	КонецЕсли;	 
	
	УстановитьУсловноеОформление();
	
	Если Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
		ЗагрузитьФичи();
	ИначеЕсли НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина И НЕ ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен Тогда
		ЗагрузитьФичи();
		ПодключитьОбработчикОжидания(""ЗапуститьСценарийСоСтрокиПрисланнойИзвне"",0.1,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьМаксВерсиюПлатформы(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить(""Версия"");
	Тзн.Колонки.Добавить(""Параметр"");
	
	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.Версия = Элем;
		
		Попытка
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(Элем, ""."");
			СтрТзн.Параметр = Число(МассивСтрок[3]*1000);
		Исключение
			СтрТзн.Параметр = 0;
		КонецПопытки;
	КонецЦикла;	
	
	Тзн.Сортировать(""Параметр"");
	
	Возврат Тзн[Тзн.Количество() - 1].Версия;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия8310ИлиВыше    = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.10.1"");
	Если Версия8310ИлиВыше Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = КаталогПрограммы();
		Возврат;
	КонецЕсли;

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Если ЗначениеЗаполнено(Объект.ВерсияПлатформыДляГенерацииEPF) Тогда
		Возврат;
	КонецЕсли;
		
	Массив = Новый Массив;
	
	Файлы = НайтиФайлы(""C:\Program Files (x86)\1cv8"", ""*.exe"", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.ИмяБезРасширения) <> ""1cv8"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Путь = Файл.Путь;
		ФайлВерсия = Новый Файл(Путь);
		Версия = ФайлВерсия.Путь;
		
		ФайлВерсия = Новый Файл(Версия);
		Версия = ФайлВерсия.Имя;
		
		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия, ""8.3.10.1"") Тогда
			Массив.Добавить(Версия);
		КонецЕсли;
		
	КонецЦикла;

	Файлы = НайтиФайлы(""C:\Program Files\1cv8"", ""*.exe"", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.ИмяБезРасширения) <> ""1cv8"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Путь = Файл.Путь;
		ФайлВерсия = Новый Файл(Путь);
		Версия = ФайлВерсия.Путь;
		
		ФайлВерсия = Новый Файл(Версия);
		Версия = ФайлВерсия.Имя;
		
		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия, ""8.3.10.1"") Тогда
			Массив.Добавить(Версия);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксВерсия = ОпределитьМаксВерсиюПлатформы(Массив);

	Файлы = НайтиФайлы(""C:\Program Files (x86)\1cv8\""+ МаксВерсия +""\bin"", ""*.exe"", Истина);
	Файлы32 = НайтиФайлы(""C:\Program Files\1cv8\""+ МаксВерсия +""\bin"", ""*.exe"", Истина);
	Если Файлы.Количество() > 0 Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = ""C:\Program Files (x86)\1cv8\"" + МаксВерсия + ""\bin"";
	ИначеЕсли Файлы32.Количество() > 0 Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = ""C:\Program Files\1cv8\"" + МаксВерсия + ""\bin"";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиКлиент();
	Если Объект.РежимСамотестирования Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "" autotest"";
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция КаталогИзИмениФайла(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Путь;
КонецФункции	 

&НаКлиенте
Функция КаталогИнструментовИзПутиКФреймворку(ИмяФайла = Неопределено)
	Если ИмяФайла = Неопределено Тогда
		ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	Иначе
		ПутьКОбработке = ИмяФайла;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ПутьКОбработке) Тогда
		Путь = КаталогИзИмениФайла(ПутьКОбработке);
		Если Прав(Путь,1) = ""/"" Тогда
			Стр = Лев(Стр,СтрДлина(Стр)-1);
		ИначеЕсли Прав(Путь,1) = ""\"" Тогда
			Стр = Лев(Стр,СтрДлина(Стр)-1);
		КонецЕсли;	 
		
		Возврат Путь;
	КонецЕсли;	
	
	Возврат """"; 
КонецФункции	 

&НаКлиенте
Процедура ПодключитьБиблиотекуРаботыСВидео()
	Если МодульРаботыСВидео <> Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ПараметрыФормы = Новый Структура;
		МодульРаботыСВидео = ПолучитьФорму(ПолучитьИмяОбработкиVA() + "".Форма.Video_РаботаСВидео"", ПараметрыФормы);
	Иначе	
		
		Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
			Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку();
		КонецЕсли;
		
		ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""lib/Video/РаботаСВидео.epf"";
		Если СокрЛП(Объект.КаталогИнструментов) = """" Тогда
			ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер(""ПутьКVanessaAutomation"");
			Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
				ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер(""ПутьКVanessaAutomation"");
				ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
				ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + ""lib/Video/РаботаСВидео.epf"";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			ТекстСообщения = Локализовать(""Файл <%1> не существует."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла); 
			СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	
		
		МодульРаботыСВидео = ПолучитьФорму(""ВнешняяОбработка.РаботаСВидео.Форма.Форма"");
	КонецЕсли;	 	
	
	Если МодульРаботыСВидео = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""Ванесса"",ЭтаФорма);
	МодульРаботыСВидео.УстановитьСлужебныеПеременные(СтруктураПараметров);
	
	Если ПрофилиПоискаКартинокСТекстом.Количество() = 0 Тогда
		ЗаполнитьТиповыеПрофилиЦветовСервер();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьБиблиотекуСообщенийПользователю()
	ИмяМакета = ТекущийЯзык();
	Если НЕ ЭтоТонкийКлиент Тогда
		Если ТипЗнч(ИмяМакета) = Тип(""ОбъектМетаданных"") Тогда
			ИмяМакета = ИмяМакета.КодЯзыка;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Нрег(ИмяМакета) = ""ru"" Тогда
		//Не нужно подключать обработку для русского языка.
		Возврат; 
	КонецЕсли;	
	
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ПараметрыФормы = Новый Структура;
		МодульСообщенийПользователю = ПолучитьФорму(ПолучитьИмяОбработкиVA() + "".Форма.Локализация_Messages"", ПараметрыФормы);
		Возврат;
	КонецЕсли;	 
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""locales/Messages.epf"";
	
	Если СокрЛП(Объект.КаталогИнструментов) = """" Тогда
		ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер(""ПутьКVanessaAutomation"");
		Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
			ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер(""ПутьКVanessaAutomation"");
			ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
			ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + ""locales/Messages.epf"";
			
			Если Не ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
				// ПутьКVanessaAutomation - это полный путь к epf с именем файла 
				Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку(ПутьКVanessaAutomation);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ТекстСообщения = Локализовать(""Файл <%1> не существует."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	МодульСообщенийПользователю = ПолучитьФорму(""ВнешняяОбработка.Messages.Форма.Форма"");
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьБиблиотекуПереводШагов()
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ПараметрыФормы = Новый Структура;
		МодульПереводШагов = ПолучитьФорму(ПолучитьИмяОбработкиVA() + "".Форма.Локализация_Steps"", ПараметрыФормы);
	Иначе	
		ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""locales/Steps.epf"";
		
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			ТекстСообщения = Локализовать(""Файл <%1> не существует."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла); 
			СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	
		
		МодульПереводШагов = ПолучитьФорму(""ВнешняяОбработка.Steps.Форма.Форма"");
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьОднуФичу()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = ""Выберите feature файл"";
	ДиалогОткрытияФайла.Фильтр = ""Фича файл (*.feature)|*.feature"";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить(""Новый ОписаниеОповещения(""""ОбработатьВыборФайлаЗагрузкаФичи"""", ЭтаФорма)"");
		Выполнить(""ДиалогОткрытияФайла.Показать(ОписаниеОповещения)"");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогФич = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Иначе
			Возврат;
		КонецЕсли;
		
		// очистим кеш при смене фичи
		КешStepDefinition.Очистить();
		ЗагрузитьФичи();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьПараметрКорректным(СтрокаПараметр)
	Если Найти(Прав(СтрокаПараметр, 1), ""\/"") > 0 Тогда
		СтрокаПараметр = Лев(СтрокаПараметр, СтрДлина(СтрокаПараметр) - 1);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СделатьПараметрыКорректными()
	СделатьПараметрКорректным(Объект.КаталогИнструментов);
	СделатьПараметрКорректным(Объект.КаталогВыгрузкиИнструкцийHTML);
	СделатьПараметрКорректным(Объект.КаталогВыгрузкиИнструкцийMarkdown);
	СделатьПараметрКорректным(Объект.КаталогВыгрузкиСкриншотов);
	СделатьПараметрКорректным(Объект.КаталогВыгрузкиИнструкцийВидео);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		СтрСтроки.Статус     = """";
		Если СтрСтроки.Тип = ""Шаг"" Тогда
			СтрСтроки.ТипКартинки = 3;
		ИначеЕсли СтрСтроки.ДопТип = ""Цикл"" Тогда
			СтрСтроки.ТипКартинки = 3;
		ИначеЕсли СтрСтроки.ДопТип = ""Условие"" Тогда
			СтрСтроки.ТипКартинки = 3;
		ИначеЕсли СтрСтроки.ДопТип = ""УсловиеИначеЕсли"" Тогда
			СтрСтроки.ТипКартинки = 3;
		КонецЕсли;	 
		
		ОчиститьПоляВДеревеДляПостроенияОтчетов(СтрСтроки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетовСервер()
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево);
	
	ЗначениеВРеквизитФормы(ОбъектСервер, ""Объект"");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетовРекурсивно(СтрокиДерева)
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Статус     = """";
		Если СтрокаДерева.Тип = ""Шаг"" Тогда
			Если СтрокаДерева.ТипКартинки <> 3 Тогда
				СтрокаДерева.ТипКартинки = 3;
			КонецЕсли;	 
		ИначеЕсли СтрокаДерева.ДопТип = ""Цикл"" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = ""Условие"" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = ""УсловиеИначеЕсли"" Тогда
			СтрокаДерева.ТипКартинки = 3;
		КонецЕсли;	 
		
		ОчиститьПоляВДеревеДляПостроенияОтчетовРекурсивно(СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетовКлиент()
	ОчиститьПоляВДеревеДляПостроенияОтчетовРекурсивно(Объект.ДеревоТестов.ПолучитьЭлементы());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСценарий_SceanrioOutline(СтрокаДерева)
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = ""Примеры"" Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ДалееВДеревеСтрокиУсловийИначе(СтрокаДерева,СтрокиРодителя)
	ИД = СтрокиРодителя.Индекс(СтрокаДерева);
	ДалееТолькоУсловия = Истина;
	
	Пока Истина Цикл
		ИД = ИД + 1;
		Если ИД > СтрокиРодителя.Количество()-1 Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекСтрока = СтрокиРодителя[ИД];
		
		Если (ТекСтрока.ДопТип = ""УсловиеИначеЕсли"") ИЛИ (ТекСтрока.ДопТип = ""УсловиеИначе"") Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДалееТолькоУсловия = Ложь;
		Прервать;
	КонецЦикла;	
	
	Возврат ДалееТолькоУсловия;
КонецФункции	

&НаСервереБезКонтекста
Процедура ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги)
	ЕстьЦиклВышеПоДереву = Ложь;
	ТекСтрокаДерева      = СтрСтроки;
	ТекСтрокиРодителя    = ТекСтрокаДерева.Родитель.Строки;
	ИдЦикла              = Неопределено;
	Пока Истина Цикл
		
		Если ТекСтрокиРодителя.Индекс(ТекСтрокаДерева) <> (ТекСтрокиРодителя.Количество()-1)
			И НЕ ДалееВДеревеСтрокиУсловийИначе(ТекСтрокаДерева,ТекСтрокиРодителя)
			Тогда
			// это должна быть последняя строка в своём уровне
			Прервать;
		КонецЕсли;	 
		
		Если ТекСтрокаДерева.Родитель.Тип = ""Сценарий"" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ТекСтрокаДерева.Родитель.ДопТип = ""Цикл"" Тогда
			ЕстьЦиклВышеПоДереву = Истина;
			ИдСтрокиЦикла        = ТекСтрокаДерева.Родитель.ИдСтроки;
			Прервать;
		КонецЕсли;	 
		
		ТекСтрокаДерева   = ТекСтрокаДерева.Родитель;
		ТекСтрокиРодителя = ТекСтрокаДерева.Родитель.Строки;
	КонецЦикла;	
	
	Если ЕстьЦиклВышеПоДереву Тогда
		СтруктураШага.Вставить(""ИдЦикла"",ИдСтрокиЦикла);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Функция ОпределитьДалееВУсловииНетСтрок(СтрСтроки,СтрокаУсловия)
	ДалееВУсловииНетСтрок = Истина;
	ИдСтроки = СтрСтроки.ИдСтроки;
	СтрокаСоСледующимИД = СтрокаУсловия.Строки.Найти(ИдСтроки+1,""ИдСтроки"",Истина);
	Если СтрокаСоСледующимИД <> Неопределено И СтрокаСоСледующимИД.СтрокаПараметровШагаВВидеТаблицы <> Истина Тогда
		ДалееВУсловииНетСтрок = Ложь;
	КонецЕсли;	 
	
	Если ДалееВУсловииНетСтрок Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить(""Тип"",""Шаг"");
		ШагиВУсловии = СтрокаУсловия.Строки.НайтиСтроки(СтруктураПоиска,Истина);
		Для Каждого ШагВУсловии Из ШагиВУсловии Цикл
			Если ШагВУсловии.ИдСтроки > ИдСтроки Тогда
				ДалееВУсловииНетСтрок = Ложь;
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	Возврат ДалееВУсловииНетСтрок; 
КонецФункции	 

&НаСервере
Функция НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева,ДопПараметры)
	Если СтрокаДерева.Тип = ""Область""  ИЛИ СтрокаДерева.Тип = ""ШагСценарий"" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) И (СтрокаДерева.ДопТип <> ""УсловиеИначе"") Тогда
			Возврат СтрокаДерева;
		Иначе
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева.Строки[0],ДопПараметры);
			Иначе
				Возврат ОпределитьИдСледующейСтроки(СтрокаДерева,СтрокаДерева.Родитель.Строки,ДопПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СтрокаДерева.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда
		ИД = СтрокаДерева.Родитель.Строки.Индекс(СтрокаДерева);
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева.Родитель.Строки[ИД+1],ДопПараметры);
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = ""Сценарий"" Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат СтрокаДерева;
КонецФункции	

&НаСервере
Функция ОпределитьИдСледующейСтроки(СтрокаДерева,СтрокиРодителя,ДопПараметры)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ИдСледующейСтроки = СтрокиРодителя.Индекс(СтрокаДерева)+1;
	Пока (СтрокиРодителя.Количество() - 1) >= ИдСледующейСтроки Цикл
		Если СтрокиРодителя[ИдСледующейСтроки].ДопТип = ""УсловиеИначе"" И НЕ ДопПараметры.МожноВозвращатьИначе Тогда
			ИдСледующейСтроки = ИдСледующейСтроки + 1;
			Продолжить;
		КонецЕсли;	 
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокиРодителя[ИдСледующейСтроки],ДопПараметры);
	КонецЦикла;
	
	Если СтрокаДерева.Тип = ""Сценарий"" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель.Тип = ""Сценарий"" Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если СтрокаДерева.Родитель.Тип = ""Пример"" Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если СтрокаДерева.Родитель.ДопТип = ""Цикл"" Тогда
		Возврат СтрокаДерева.Родитель;
	КонецЕсли;	 
	
	Если ДопПараметры.МассивУсловий.Количество() > 1 Тогда
		ДопПараметры.Вставить(""МожноВозвращатьИначе"",Ложь);
	КонецЕсли;	 
	
	Возврат ОпределитьИдСледующейСтроки(СтрокиРодителя.Родитель,СтрокиРодителя.Родитель.Родитель.Строки,ДопПараметры);
КонецФункции	

&НаСервере
Функция ОпределитьИдСледующейСтрокиУсловиеПустоеИИстинно(СтрокаДерева,СтрокиРодителя,ДопПараметры)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ИдСледующейСтроки = СтрокиРодителя.Индекс(СтрокаДерева)+1;
	Пока (СтрокиРодителя.Количество() - 1) >= ИдСледующейСтроки Цикл
		Если СтрокиРодителя[ИдСледующейСтроки].ДопТип = ""УсловиеИначе"" ИЛИ СтрокиРодителя[ИдСледующейСтроки].ДопТип = ""Иначе"" Тогда
			ИдСледующейСтроки = ИдСледующейСтроки + 1;
			Продолжить;
		КонецЕсли;	 
		
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокиРодителя[ИдСледующейСтроки],ДопПараметры);
	КонецЦикла;
	
	Возврат ОпределитьИдСледующейСтроки(СтрокиРодителя.Родитель,СтрокиРодителя.Родитель.Родитель.Строки,ДопПараметры);
КонецФункции	

&НаСервере
Функция НайтиСледующуюСтрокаКогдаУсловиеИстинно(СтрокаУсловия,ДопПараметры)
	РодительСтроки = СтрокаУсловия.Родитель;
	ИДСтрокиДерева = РодительСтроки.Строки.Индекс(СтрокаУсловия);
	
	Пока Истина Цикл
		ИДСтрокиДерева = ИДСтрокиДерева + 1;
		Если (РодительСтроки.Строки.Количество()-1) >= ИДСтрокиДерева Тогда
			СледующаяСтрока = РодительСтроки.Строки[ИДСтрокиДерева];
			
			Если СледующаяСтрока.ДопТип = ""УсловиеИначеЕсли"" Тогда
				Продолжить;
			ИначеЕсли СледующаяСтрока.ДопТип = ""УсловиеИначе"" Тогда
				Продолжить;
			КонецЕсли;	 
			
			Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СледующаяСтрока,ДопПараметры);
		Иначе
			Если (РодительСтроки.ДопТип = ""Условие"") ИЛИ (РодительСтроки.ДопТип = ""УсловиеИначеЕсли"") ИЛИ (РодительСтроки.ДопТип = ""УсловиеИначе"")  ИЛИ (РодительСтроки.Тип = ""Область"") ИЛИ (РодительСтроки.Тип = ""ШагСценарий"") Тогда
				Возврат НайтиСледующуюСтрокаКогдаУсловиеИстинно(РодительСтроки,ДопПараметры); 
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаСервере
Процедура ПервыйШагВУзлеДереваРекурсивно(СтрокаДерева, Результат)
	Если Результат <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ПодчиненнаяСтрока.Тип = ""Шаг"" Тогда
			Результат = ПодчиненнаяСтрока; 
			Прервать;
		КонецЕсли;	 
		
		ПервыйШагВУзлеДереваРекурсивно(ПодчиненнаяСтрока, Результат)
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Функция ПервыйШагВУзлеДерева(СтрокаДерева)
	Результат = Неопределено;
	
	ПервыйШагВУзлеДереваРекурсивно(СтрокаДерева, Результат);
	
	Возврат Результат;
КонецФункции	 

&НаСервере
Функция ВУзлеДереваЕстьИсполняемыеСтроки(СтрокаДерева)
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ПервыйШагВУзлеДерева = ПервыйШагВУзлеДерева(СтрокаДерева);
	Если ПервыйШагВУзлеДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаСервере
Процедура ДобавитьШагиДляВыполненияСценария(Шаги, ДеревоСтроки, СтрокаДерева, СтрокаСценария,
	                                                                ЭтоШагКонтекста,ДопПараметры)
	Для каждого СтрСтроки Из ДеревоСтроки Цикл
		Если СтрСтроки.Тип = ""Шаг"" Тогда
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста, ДопПараметры);
			
			Если ДопПараметры.ЕстьЦиклы Тогда
				ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги);
			КонецЕсли;	 
			
			РодительСтроки = СтрСтроки.Родитель;
			ИДСтрокиДерева = РодительСтроки.Строки.Индекс(СтрСтроки);
			Если ИДСтрокиДерева = РодительСтроки.Строки.Количество()-1 Тогда
				Если ДопПараметры.МассивУсловий.Количество() > 0 Тогда
					СтрокаУсловия = ДопПараметры.МассивУсловий[ДопПараметры.МассивУсловий.Количество()-1];
					
					ДалееВУсловииНетСтрок = ОпределитьДалееВУсловииНетСтрок(СтрСтроки,СтрокаУсловия);

					Если ДалееВУсловииНетСтрок Тогда
						ДопПараметры.Вставить(""МожноВозвращатьИначе"",Истина);
						СледующаяСтрокаКогдаУсловиеИстинно = НайтиСледующуюСтрокаКогдаУсловиеИстинно(СтрокаУсловия,ДопПараметры);
						Если СледующаяСтрокаКогдаУсловиеИстинно <> Неопределено Тогда
							СтруктураШага.Вставить(""ИдСледующегоШага"", СледующаяСтрокаКогдаУсловиеИстинно.ИдСтроки);
						Иначе	
							Если ДопПараметры.МассивЦиклов.Количество() > 0 Тогда
								// значит это последний шаг в сценарии, но он внутри условия
								ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги);
							Иначе
								СтруктураШага.Вставить(""ИдСледующегоШага"", -1);
							КонецЕсли;	 
							
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Шаги.Добавить(СтруктураШага);
		ИначеЕсли СтрСтроки.Тип = ""ШагСценарий"" Тогда
			
			ДопПараметры.УровеньПодсценария = ДопПараметры.УровеньПодсценария + 1;
			
			Если СтрСтроки.ДопТип = ""СтруктураСценария"" Тогда //это вложенная структура сценария
				СтрокаПримеров = Неопределено;
				Для Каждого СтрокаДереваСтруктурыСценария Из СтрСтроки.Строки Цикл
					Если СтрокаДереваСтруктурыСценария.Тип = ""Примеры"" Тогда
						СтрокаПримеров = СтрокаДереваСтруктурыСценария;
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если СтрокаПримеров = Неопределено Тогда
					ТекстСообщения = ЛокализоватьСервер(""Не найдена строка примеров во вложенной структуре сценария. <%1>"");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаДерева.ПолныйПуть);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				НомерСтрокиПримера = 0;
				Для Каждого СтрокаПримера Из СтрокаПримеров.Строки Цикл
					НомерСтрокиПримера = НомерСтрокиПримера + 1;
					Если НомерСтрокиПримера = 1 Тогда
						Продолжить;//это служебная строка
					КонецЕсли;	 
					
					ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаПримера.Строки, СтрокаПримера, СтрокаСценария, ЭтоШагКонтекста,ДопПараметры)
				КонецЦикла;	
			Иначе	
				ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста,ДопПараметры)
			КонецЕсли;
			
			ДопПараметры.УровеньПодсценария = ДопПараметры.УровеньПодсценария - 1;
			
		ИначеЕсли СтрСтроки.Тип = ""Область"" Тогда
			Если (СтрСтроки.ДопТип = ""Условие"") или (СтрСтроки.ДопТип = ""УсловиеИначеЕсли"")  Тогда
				ДопПараметры.МассивУсловий.Добавить(СтрСтроки);
			ИначеЕсли (СтрСтроки.ДопТип = ""Цикл"") Тогда
				ДопПараметры.МассивЦиклов.Добавить(СтрСтроки);
			КонецЕсли;	 
			
			Если (СтрСтроки.ДопТип = ""Условие"") или (СтрСтроки.ДопТип = ""УсловиеИначеЕсли"")  или (СтрСтроки.ДопТип = ""Цикл"")  Тогда
				СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста, ДопПараметры);
				
				СледующаяСтрока = Неопределено;
								
				Если СледующаяСтрока = Неопределено Тогда
					Если СтрСтроки.ДопТип = ""Цикл"" Тогда
						ДопПараметры.Вставить(""МожноВозвращатьИначе"",Ложь);
					Иначе	
						ДопПараметры.Вставить(""МожноВозвращатьИначе"",Истина);
					КонецЕсли;	 
					
					//Когда условие не истинно
					СледующаяСтрока = ОпределитьИдСледующейСтроки(СтрСтроки,ДеревоСтроки,ДопПараметры);
					
					Если НЕ ВУзлеДереваЕстьИсполняемыеСтроки(СтрСтроки) Тогда
						//Когда условие истинно и оно пустое
						СледующаяСтрокаУсловиеИстинно = ОпределитьИдСледующейСтрокиУсловиеПустоеИИстинно(СтрСтроки,ДеревоСтроки,ДопПараметры);
						
						Если СледующаяСтрокаУсловиеИстинно <> Неопределено Тогда
							СтруктураШага.Вставить(""СледующаяСтрокаУсловиеИстинно"", СледующаяСтрокаУсловиеИстинно.ИдСтроки);
						Иначе	
							СтруктураШага.Вставить(""СледующаяСтрокаУсловиеИстинно"", -1);
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
				Если СледующаяСтрока = Неопределено Тогда
					СтруктураШага.Вставить(""ИдСледующегоШага"", Неопределено);
				Иначе	
					СтруктураШага.Вставить(""ИдСледующегоШага"", СледующаяСтрока.ИдСтроки);
				КонецЕсли;	 
				
				Если СтрСтроки.ДопТип = ""Цикл"" Тогда
					ДопПараметры.Вставить(""ЕстьЦиклы"",Истина);
				КонецЕсли;	 
				
				Если ДопПараметры.ЕстьЦиклы Тогда
					ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги);
				КонецЕсли;	 
				
				Шаги.Добавить(СтруктураШага);
			КонецЕсли;	 
			
			ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста,ДопПараметры);
			
			Если (СтрСтроки.ДопТип = ""Условие"") или (СтрСтроки.ДопТип = ""УсловиеИначеЕсли"") Тогда
				ДопПараметры.МассивУсловий.Удалить(ДопПараметры.МассивУсловий.Количество()-1);
			ИначеЕсли (СтрСтроки.ДопТип = ""Цикл"") Тогда
				ДопПараметры.МассивЦиклов.Удалить(ДопПараметры.МассивЦиклов.Количество()-1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления)
	Для Ккк = 0 По МассивДляУдаления.Количество() - 1 Цикл
		ИД = МассивДляУдаления.Количество() - 1 - Ккк;
		Ном = МассивДляУдаления[ИД];
		Шаги.Удалить(Ном);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьПроизвольныеЗначения(ПроизвольныеЗначения)
	ПроизвольныеЗначения.Вставить(""ПрикрепленныеМакеты"",Новый Массив);
	ПроизвольныеЗначения.Вставить(""ПрикрепленныеФайлы"",Новый Массив);
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСценарийАутлайн(СтрокаДерева, МассивСценариевДляВыполнения, ТекПример = Неопределено, ДопПараметры)
	// получим сами именнованные параметры
	
	ИменаПараметров = Неопределено;
	СтрокаПримеров  = Неопределено;
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = ""Примеры"" Тогда
			ИменаПараметров = СтрСтроки.ИменованныеПараметры;
			СтрокаПримеров = СтрСтроки;
		КонецЕсли; 
	КонецЦикла;
	
	Если ИменаПараметров = Неопределено Тогда
		ТекстСообщения = ЛокализоватьСервер(""Не смог найти у сценария %1 имена изменяемых параметров."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", СтрокаДерева.Имя);
		СообщитьПользователюСеврер(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	СтрокаФичи = НайтиСтрокуФичиЧерезРодителяСервер(СтрокаДерева);
	
	МассивИДСценариев = ДопПараметры.МассивИДСценариев;
	Ном = 0;
	Для каждого СтрСтрокаПримеров Из СтрокаПримеров.Строки Цикл
		Ном = Ном + 1;
		Если Ном = 1 Тогда
			// в первой строке лежат имена параметров
			Продолжить;
		КонецЕсли; 
		
		Если ТекПример <> Неопределено Тогда
			Если СтрСтрокаПримеров <> ТекПример Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ТипЗнч(СтрСтрокаПримеров.ПроизвольныеЗначения) = Тип(""Структура"") Тогда
			ОчиститьПроизвольныеЗначения(СтрСтрокаПримеров.ПроизвольныеЗначения);
		КонецЕсли;	 
		
		Если МассивИДСценариев <> Неопределено Тогда
			Если МассивИДСценариев.Найти(СтрСтрокаПримеров.Родитель.Родитель.ИДСтроки) = Неопределено Тогда //проверка что идёт запуск всей структуры сценария
				Если МассивИДСценариев.Найти(СтрСтрокаПримеров.ИдСтроки) = Неопределено Тогда //проверка что надо запускать конкретный пример
					Если НЕ ДопПараметры.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
						Продолжить;
					Иначе
						Если НЕ ДопПараметры.НашелСценарий Тогда
							Продолжить;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		
		СтруктураПараметровСценария = Новый Структура;
		СтруктураПараметровСценария.Вставить(""Имя"", СтрокаДерева.Имя + "" (Пример №"" + (Ном - 1) + "")"");
		СтруктураПараметровСценария.Вставить(""СтрокаДерева"", СтрСтрокаПримеров.ИДСтроки);
		СтруктураПараметровСценария.Вставить(""ИмяФичи"", ДопПараметры.ИмяФичи);
		СтруктураПараметровСценария.Вставить(""ПолныйПутьКФиче"", ДопПараметры.ПолныйПутьКФиче);
		СтруктураПараметровСценария.Вставить(""НомерСтрокиВФиче"", Неопределено);
		СтруктураПараметровСценария.Вставить(""ФичаИмеетСвоюEPF"", СтрокаФичи.ФичаИмеетСвоюEPF);
		СтруктураПараметровСценария.Вставить(""EPFПодключена"", Ложь);
		СтруктураПараметровСценария.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага"", 
	                  ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага);
		
		
		Шаги = Новый Массив;
		
		Если СтрокаДерева.Родитель.Строки[0].ДопТип = ""Контекст"" Тогда //значит надо добавить шаги контекста к нашим шагам
			ДопПараметры.Вставить(""ЕстьЦиклы"",Ложь);
			ДопПараметры.Вставить(""МассивУсловий"",Новый Массив);
			ДопПараметры.Вставить(""МассивЦиклов"",Новый Массив);
			ДопПараметры.Вставить(""МожноВозвращатьИначе"",Истина);
			ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Родитель.Строки[0].Строки, СтрокаДерева, СтрСтрокаПримеров,
			       Истина,ДопПараметры);
		КонецЕсли;	 
		
		
		ДопПараметры.Вставить(""ЕстьЦиклы"",Ложь);
		ДопПараметры.Вставить(""МассивУсловий"",Новый Массив);
		ДопПараметры.Вставить(""МассивЦиклов"",Новый Массив);
		ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтрокаПримеров.Строки, СтрокаДерева, СтрСтроки.Родитель,
		      Ложь,ДопПараметры);
		
		Если ДопПараметры.РежимВыполненияОдногоШага Тогда
			МассивДляУдаления = Новый Массив;
			Ном = -1;
			Для каждого Шаг Из Шаги Цикл
				Ном = Ном + 1;
				Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
					Продолжить;
				КонецЕсли;	 
				
				МассивДляУдаления.Добавить(Ном);
			КонецЦикла;
			
			УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
		КонецЕсли;	 
		
		
		ДопПараметры.Вставить(""НашелСценарий"", Истина);
		
		
		СтруктураПараметровСценария.Вставить(""Шаги"", Шаги);
		МассивСценариевДляВыполнения.Добавить(СтруктураПараметровСценария);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить(""Имя"", СтрСтроки.Имя);
	СтруктураШага.Вставить(""ЗначенияПараметров"", СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить(""АдресСнипета"", СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить(""СтрокаРеальнойПроцедуры"", СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить(""Снипет"", СтрСтроки.Снипет);
	СтруктураШага.Вставить(""ИмяСценария"", СтрокаДерева.Имя);
	СтруктураШага.Вставить(""СтрокаСценария"", СтрокаСценария.ИДСтроки);
	СтруктураШага.Вставить(""СтрокаШага"", СтрСтроки.ИДСтроки);
	СтруктураШага.Вставить(""НомерСтрокиВФиче"", СтрСтроки.НомерСтрокиВФиче);
	СтруктураШага.Вставить(""ИдСтроки"", СтрСтроки.ИдСтроки);
	СтруктураШага.Вставить(""ШагСчитаетсяУпавшим"", Ложь);
	СтруктураШага.Вставить(""ОписаниеОшибки"", """");
	СтруктураШага.Вставить(""ЭтоШагКонтекста"", ЭтоШагКонтекста);
	Если ДопПараметры.УровеньПодсценария > 0 Тогда
		СтруктураШага.Вставить(""ЭтоШагПодсценария"", Истина);
	Иначе	
		СтруктураШага.Вставить(""ЭтоШагПодсценария"", Ложь);
	КонецЕсли;	 
	СтруктураШага.Вставить(""ШагСПараметрамиВТаблице"", СтрСтроки.ШагСПараметрамиВТаблице);
	СтруктураШага.Вставить(""ДопТип"", СтрСтроки.ДопТип);
	СтруктураШага.Вставить(""ПараметрыТаблицы"", Неопределено);
	СтруктураШага.Вставить(""МасштабироватьВВидео"", Истина);
	СтруктураШага.Вставить(""ТекстИнструкция"", """");
	СтруктураШага.Вставить(""ИдСледующегоШага"", Неопределено);
	СтруктураШага.Вставить(""ИдЦикла"", Неопределено);
	НадоСнятьСкриншотШага = Ложь;
	Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип(""Структура"") Тогда
		СтруктураШага.Вставить(""МассивТеговШага"", СтрСтроки.ПроизвольныеЗначения.МассивТеговШага);
		СтруктураШага.Вставить(""МассивКомментариевШага"", СтрСтроки.ПроизвольныеЗначения.МассивКомментариевШага);
		
		Если СтрСтроки.ПроизвольныеЗначения.МассивТеговШага.Найти(""screenshot"") <> Неопределено Тогда
			НадоСнятьСкриншотШага = Истина;
		КонецЕсли;	 
	КонецЕсли;
	
	СтруктураШага.Вставить(""НадоСнятьСкриншотШага"", НадоСнятьСкриншотШага);
	ЭтоКлиент = Ложь;
	Если ДопПараметры.Свойство(""ЭтоКлиент"") Тогда
		ЭтоКлиент = ДопПараметры.ЭтоКлиент;
	КонецЕсли;	 
	
	Если СтрСтроки.ШагСПараметрамиВТаблице = Истина Тогда
		ПараметрыТаблицы = Новый Массив;
		Если ЭтоКлиент Тогда
			Коллекция = СтрСтроки.ПолучитьЭлементы();
		Иначе	
			Коллекция = СтрСтроки.Строки;
		КонецЕсли;	 
		
		Для каждого ПодчиненнаяСтрока Из Коллекция Цикл
			Если НЕ ПодчиненнаяСтрока.СтрокаПараметровШагаВВидеТаблицы Тогда
				Прервать;
			КонецЕсли;	 
			ПараметрыТаблицы.Добавить(ПодчиненнаяСтрока.Имя);
		КонецЦикла;
		СтруктураШага.Вставить(""ПараметрыТаблицы"", ПараметрыТаблицы);
	КонецЕсли;	 
	
	Возврат СтруктураШага;
КонецФункции

//&НаКлиенте
//Функция ПолучитьСтруктуруШагаКлиент(СтрСтроки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста)
//	СтруктураШага = Новый Структура;
//	СтруктураШага.Вставить(""Имя"", СтрСтроки.Имя);
//	СтруктураШага.Вставить(""ЗначенияПараметров"", СтрСтроки.ЗначенияПараметров);
//	СтруктураШага.Вставить(""АдресСнипета"", СтрСтроки.АдресСнипета);
//	СтруктураШага.Вставить(""СтрокаРеальнойПроцедуры"", СтрСтроки.СтрокаРеальнойПроцедуры);
//	СтруктураШага.Вставить(""Снипет"", СтрСтроки.Снипет);
//	СтруктураШага.Вставить(""ИмяСценария"", СтрокаДерева.Имя);
//	СтруктураШага.Вставить(""СтрокаСценария"", СтрокаСценария.ИДСтроки);
//	СтруктураШага.Вставить(""НомерСтрокиВФиче"", СтрСтроки.НомерСтрокиВФиче);
//	СтруктураШага.Вставить(""ИдСтроки"", СтрСтроки.ИдСтроки);
//	СтруктураШага.Вставить(""СтрокаШага"", СтрСтроки.ИДСтроки);
//	СтруктураШага.Вставить(""ШагСчитаетсяУпавшим"", Ложь);
//	СтруктураШага.Вставить(""ОписаниеОшибки"", """");
//	СтруктураШага.Вставить(""ЭтоШагКонтекста"", ЭтоШагКонтекста);
//	СтруктураШага.Вставить(""ЭтоШагПодсценария"", Ложь);
//	СтруктураШага.Вставить(""ШагСПараметрамиВТаблице"", СтрСтроки.ШагСПараметрамиВТаблице);
//	СтруктураШага.Вставить(""ДопТип"", СтрСтроки.ДопТип);
//	СтруктураШага.Вставить(""ПараметрыТаблицы"", Неопределено);
//	СтруктураШага.Вставить(""МасштабироватьВВидео"", Истина);
//	СтруктураШага.Вставить(""ТекстИнструкция"", """");
//	СтруктураШага.Вставить(""ИдСледующегоШага"", Неопределено);
//	СтруктураШага.Вставить(""ИдЦикла"", Неопределено);
//	НадоСнятьСкриншотШага = Ложь;
//	
//	Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип(""Структура"") Тогда
//		СтруктураШага.Вставить(""МассивТеговШага"", СтрСтроки.ПроизвольныеЗначения.МассивТеговШага);
//		СтруктураШага.Вставить(""МассивКомментариевШага"", СтрСтроки.ПроизвольныеЗначения.МассивКомментариевШага);
//		
//		Если СтрСтроки.ПроизвольныеЗначения.МассивТеговШага.Найти(""screenshot"") <> Неопределено Тогда
//			НадоСнятьСкриншотШага = Истина;
//		КонецЕсли;	 
//	КонецЕсли;
//	
//	СтруктураШага.Вставить(""НадоСнятьСкриншотШага"", НадоСнятьСкриншотШага);
//	
//	Если СтрСтроки.ШагСПараметрамиВТаблице = Истина Тогда
//		ПараметрыТаблицы = Новый Массив;
//		Для каждого ПодчиненнаяСтрока Из СтрСтроки.ПолучитьЭлементы() Цикл
//			ПараметрыТаблицы.Добавить(ПодчиненнаяСтрока.Имя);
//		КонецЦикла;
//		СтруктураШага.Вставить(""ПараметрыТаблицы"", ПараметрыТаблицы);
//	КонецЕсли;	 
//	
//	Возврат СтруктураШага;
//КонецФункции

&НаСервере
Процедура ДобавитьОбычныйСценарий(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры)
	Если СтрокаДерева.ДопТип = ""Контекст"" Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТипЗнч(СтрокаДерева.ПроизвольныеЗначения) = Тип(""Структура"") Тогда
		ОчиститьПроизвольныеЗначения(СтрокаДерева.ПроизвольныеЗначения);
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""Имя"", СтрокаДерева.Имя);
	СтруктураПараметров.Вставить(""СтрокаДерева"", СтрокаДерева.ИдСтроки);
	СтруктураПараметров.Вставить(""ИмяФичи"", ДопПараметры.ИмяФичи);
	СтруктураПараметров.Вставить(""ПолныйПутьКФиче"", ДопПараметры.ПолныйПутьКФиче);
	СтруктураПараметров.Вставить(""ФичаИмеетСвоюEPF"", СтрокаДерева.Родитель.ФичаИмеетСвоюEPF);
	СтруктураПараметров.Вставить(""EPFПодключена"", Ложь);
	СтруктураПараметров.Вставить(""НомерСтрокиВФиче"", СтрокаДерева.НомерСтрокиВФиче);
	СтруктураПараметров.Вставить(""ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага"", 
	                  ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага);
	
	Шаги = Новый Массив;
	
	
	Если СтрокаДерева.Родитель.Строки[0].ДопТип = ""Контекст"" Тогда //значит надо добавить шаги контекста к нашим шагам
		ДопПараметры.Вставить(""ЕстьЦиклы"",Ложь);
		ДопПараметры.Вставить(""МассивУсловий"",Новый Массив);
		ДопПараметры.Вставить(""МассивЦиклов"",Новый Массив);
		ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Родитель.Строки[0].Строки, СтрокаДерева, СтрокаДерева,
		   Истина,ДопПараметры);
	КонецЕсли;	 
	
	ДопПараметры.Вставить(""ЕстьЦиклы"",Ложь);
	ДопПараметры.Вставить(""МассивУсловий"",Новый Массив);
	ДопПараметры.Вставить(""МассивЦиклов"",Новый Массив);
	ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Строки, СтрокаДерева, СтрокаДерева, Ложь,ДопПараметры);
	
	Если ДопПараметры.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		МассивДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого Шаг Из Шаги Цикл
			Ном = Ном + 1;
			Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов Тогда
				Прервать;
			КонецЕсли;	 
			
			МассивДляУдаления.Добавить(Ном);
		КонецЦикла;
		
		УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
	КонецЕсли;	 
	
	Если ДопПараметры.РежимВыполненияОдногоШага Тогда
		МассивДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого Шаг Из Шаги Цикл
			Ном = Ном + 1;
			Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
				Продолжить;
			КонецЕсли;	 
			
			МассивДляУдаления.Добавить(Ном);
		КонецЦикла;
		
		УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
	КонецЕсли;	 
	
	
	СтруктураПараметров.Вставить(""Шаги"", Шаги);
	
	
	МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарийВМассивСценариевДляВыполнения(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры)
	
	ЭтоСценариоАутлайн = ЭтоСценарий_SceanrioOutline(СтрокаДерева);
	Если ЭтоСценариоАутлайн Тогда
		ДобавитьСценарийАутлайн(СтрокаДерева, МассивСценариевДляВыполнения, , ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	ДобавитьОбычныйСценарий(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры)
	Если ТипЗнч(ДеревоСтроки) = Тип(""СтрокаДереваЗначений"") Тогда
		Если ДеревоСтроки.Тип = ""Фича"" Тогда
			ДопПараметры.Вставить(""ИмяФичи"", ДеревоСтроки.Имя);
			ДопПараметры.Вставить(""ПолныйПутьКФиче"", ДеревоСтроки.ПолныйПуть);
		КонецЕсли;	
		
		Если ДеревоСтроки.Тип = ""Сценарий"" Тогда
			ДобавитьСценарийВМассивСценариевДляВыполнения(ДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
		ИначеЕсли ДеревоСтроки.Тип = ""Пример"" Тогда
			ДобавитьСценарийАутлайн(ДеревоСтроки.Родитель.Родитель, МассивСценариевДляВыполнения, ДеревоСтроки, ДопПараметры)
		КонецЕсли; 
	Иначе	
		Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
			Если СтрДеревоСтроки.Тип = ""Фича"" Тогда
				ДопПараметры.Вставить(""ИмяФичи"", СтрДеревоСтроки.Имя);
				ДопПараметры.Вставить(""ПолныйПутьКФиче"", СтрДеревоСтроки.ПолныйПуть);
			КонецЕсли;	
			
			МассивИДСценариев = ДопПараметры.МассивИДСценариев;
			Если СтрДеревоСтроки.Тип = ""Сценарий"" Тогда
				Если МассивИДСценариев <> Неопределено Тогда
					Если МассивИДСценариев.Найти(СтрДеревоСтроки.ИдСтроки) <> Неопределено Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
						ДопПараметры.Вставить(""НашелСценарий"", Истина);
					ИначеЕсли ДопПараметры.ДобавитьСценарииПослеНайденного И ДопПараметры.НашелСценарий Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
					ИначеЕсли ДопПараметры.ЭтоПример И (СтрДеревоСтроки.ДопТип = ""СтруктураСценария"") Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
					КонецЕсли;	 
				Иначе	
					ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
				КонецЕсли;	 
			Иначе	
				ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(СтрДеревоСтроки.Строки, МассивСценариевДляВыполнения, ДопПараметры);
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьИДРекурсивно(ДеревоСтроки, ИД, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок, ТзнТаблицаИзвестныхStepDefinition, ДопПараметры, ЕстьСвояEPFУФичи = Неопределено)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		
		СтрокаДерева.Статус     = """";
		Если СтрокаДерева.Тип = ""Шаг"" Тогда
			Если СтрокаДерева.ТипКартинки <> 3 Тогда
				СтрокаДерева.ТипКартинки = 3;
			КонецЕсли;	 
		ИначеЕсли СтрокаДерева.ДопТип = ""Цикл"" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = ""Условие"" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = ""УсловиеИначеЕсли"" Тогда
			СтрокаДерева.ТипКартинки = 3;
		КонецЕсли;	 
		
		
		Если СтрокаДерева.Тип = ""Фича"" Тогда
			ФайлФичи = Новый Файл(СтрокаДерева.ПолныйПуть);
			ФайлEPF  = ФайлФичи.Путь + ""step_definitions"" + ?(ДопПараметры.ЭтоLinux, ""/"", ""\"") + ФайлФичи.ИмяБезРасширения + "".epf"";
			ФайлEPF = УниверсальноеПолноеИмяФайла(ФайлEPF);
			СтрТзнТаблицаИзвестныхStepDefinition = МассивИменКонтекстовОбработок.Найти(Нрег(ФайлEPF));
			ЕстьСвояEPFУФичи = Истина;
			Если СтрТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
				ЕстьСвояEPFУФичи = Ложь;
			КонецЕсли;  
		КонецЕсли;  
		СтрокаДерева.ФичаИмеетСвоюEPF = ЕстьСвояEPFУФичи;
		
		СтрокаДерева.ИДСтроки = ИД;
		Если ДопПараметры.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
			Если СтрокаДерева.ИДСтроки = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов Тогда
				СтрокаДерева.ВыполнятьСценарийСЭтогоШага = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		МассивСтрокДереваДанныеФормы.Добавить();//просто добавим пустой элемент, заполнение его данными будет в процедуре клиента
		ИД = ИД + 1;
		ПроставитьИДРекурсивно(СтрокаДерева.Строки, ИД, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок,
		                                          ТзнТаблицаИзвестныхStepDefinition, ДопПараметры, ЕстьСвояEPFУФичи);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьИДСтрокиВДереве(Дерево, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок,
	                                                     ТзнТаблицаИзвестныхStepDefinition, ДопПараметры)
	Ид = 0;
	ПроставитьИДРекурсивно(Дерево.Строки, ИД, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок,
	                                                      ТзнТаблицаИзвестныхStepDefinition, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы,
	            ТекИДСценария, МассивИменКонтекстовОбработок, ДопПараметры)
	
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	
	Если Не Объект.РежимВыполненияОдногоШага Тогда
		ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
		ЗаполнитьИДСтрокиВДереве(ОбъектСервер.ДеревоТестов, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок,
		                ТзнТаблицаИзвестныхStepDefinition, ДопПараметры);
	КонецЕсли;	 
	
	ТекСценарий = Неопределено;
	Если ТекСценарий = Неопределено Тогда
		ТекСценарий = ОбъектСервер.ДеревоТестов.Строки;
	КонецЕсли; 
	
	ДопПараметры.Вставить(""МассивИДСценариев"", ТекИДСценария);
	ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ТекСценарий, МассивСценариевДляВыполнения, ДопПараметры);
	
	ЗначениеВРеквизитФормы(ОбъектСервер, ""Объект"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатусСценария(ИД)
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ИД].СтрокаДерева;
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СокрЛП(СтрокаСценария.Статус) <> """" Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СценарийВыполнен = Истина;
	СтрокиСценария = СтрокаСценария.ПолучитьЭлементы();
	Для каждого СтрШаг Из РезультатПрохожденияТестовШагов Цикл
		Если СтрШаг.Статус <> ""Success"" Тогда
			СценарийВыполнен = Ложь;
			Статус = СтрШаг.Статус;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если СценарийВыполнен Тогда
		СтрокаСценария.Статус = ""Success"";
	Иначе	
		СтрокаСценария.Статус = Статус;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьМетод(Обработка, Знач ИмяПроцедуры, МассивАргументов)
	Поз = Найти(ИмяПроцедуры, ""("");
	Если Поз > 0 Тогда
		ИмяПроцедуры = Лев(ИмяПроцедуры, Поз - 1);
	КонецЕсли;	 
	
	Команда = ""Обработка."" + ИмяПроцедуры + ""("";
	
	ЗначенияПараметров = Новый Массив;
	Если МассивАргументов <> Неопределено Тогда
		КолАргументов = МассивАргументов.Количество();
		Для Ккк = 0 По КолАргументов - 1 Цикл
			ЗначенияПараметров.Добавить(МассивАргументов[Ккк]);
			Команда = Команда + ""ЗначенияПараметров["" + Формат(Ккк, ""ЧГ=; ЧН=0"") + ""]"";
			
			Если Ккк < КолАргументов - 1 Тогда
				Команда = Команда + "","";
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;	 
	
	Команда = Команда + "")"";
	
	Если Объект.DebugLog Тогда
		ТекстСообщения = Локализовать(""Выполняю"");
		КомандаОтладка = Команда;
		Если МассивАргументов <> Неопределено Тогда
			Для Ккк = 0 По КолАргументов - 1 Цикл
				КомандаОтладка = СтрЗаменить(КомандаОтладка,
				""ЗначенияПараметров["" + Формат(Ккк, ""ЧГ=; ЧН=0"") + ""]"",
				"""""""" + Строка(МассивАргументов[Ккк]) + """""""");
			КонецЦикла;	
		КонецЕсли;	 
		Отладка(Локализовать(ТекстСообщения) + "": "" + КомандаОтладка);
	КонецЕсли;	 
	
	Выполнить(Команда);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОшибкиИзПричиныОшибки(ПричинаОшибки)
	Стр = """";
	Если ЗначениеЗаполнено(ПричинаОшибки.ИмяМодуля) Тогда
		Стр = Стр + ""                        ПричинаОшибки:"" + Символы.ПС;
	КонецЕсли;         
	Если ЗначениеЗаполнено(ПричинаОшибки.ИмяМодуля) Тогда
		Стр = Стр + ""                        ИмяМодуля: ""      + ПричинаОшибки.ИмяМодуля + Символы.ПС;
	КонецЕсли;         
	Если ЗначениеЗаполнено(ПричинаОшибки.ИсходнаяСтрока) Тогда
		Стр = Стр + ""                        ИсходнаяСтрока: "" + СокрЛП(ПричинаОшибки.ИсходнаяСтрока) + Символы.ПС;
	КонецЕсли;         
	Если ЗначениеЗаполнено(ПричинаОшибки.НомерСтроки) Тогда
		Стр = Стр + ""                        НомерСтроки: ""    + ПричинаОшибки.НомерСтроки + Символы.ПС;
	КонецЕсли;         
	Если ЗначениеЗаполнено(ПричинаОшибки.Описание) Тогда
		Стр = Стр + ""                        Описание: ""       + ПричинаОшибки.Описание;
	КонецЕсли;         
	
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция СформироватьТекстОшибкиРекурсивно(ДанныеОшибки,Отступ)
	Стр = """";
	НужноДобавитьПереводСтроки = Ложь;
	Если    ЗначениеЗаполнено(ДанныеОшибки.ИмяМодуля)
		Или ЗначениеЗаполнено(ДанныеОшибки.ИсходнаяСтрока)
		Или ЗначениеЗаполнено(ДанныеОшибки.НомерСтроки)
		Или ЗначениеЗаполнено(ДанныеОшибки.Описание)
		
		Тогда
		НужноДобавитьПереводСтроки = Истина;
		Стр = Стр + Отступ + ""ДеталиОшибки:""  + Символы.ПС;
		Если ЗначениеЗаполнено(ДанныеОшибки.ИмяМодуля) Тогда
			Стр = Стр + Отступ + ""ИмяМодуля: ""      + ДанныеОшибки.ИмяМодуля + Символы.ПС;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(ДанныеОшибки.ИсходнаяСтрока) Тогда
			Стр = Стр + Отступ + ""ИсходнаяСтрока: "" + СокрЛП(ДанныеОшибки.ИсходнаяСтрока) + Символы.ПС;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(ДанныеОшибки.НомерСтроки) Тогда
			Стр = Стр + Отступ + ""НомерСтроки: ""    + ДанныеОшибки.НомерСтроки + Символы.ПС;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(ДанныеОшибки.Описание) Тогда
			Стр = Стр + Отступ + ""Описание: ""       + ДанныеОшибки.Описание;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеОшибки.Причина <> Неопределено Тогда
		Отступ = ""    "" + Отступ;
		Если НужноДобавитьПереводСтроки Тогда
			Стр = Стр + Символы.ПС + СформироватьТекстОшибкиРекурсивно(ДанныеОшибки.Причина,Отступ);
		Иначе	
			Стр = Стр + СформироватьТекстОшибкиРекурсивно(ДанныеОшибки.Причина,Отступ);
		КонецЕсли;	 
	КонецЕсли;	 
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция ВывестиВСообщениеТекстОшибки(ДанныеОшибки,ТекстОшибкиTestClientБезФорматирования = """")
	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ДанныеОшибки); 
	ТекстОшибкиTestClientБезФорматирования = ПредставлениеОшибки;
	
	Отступ = ""                "";
	Стр = """";
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ПредставлениеОшибки,Символы.ПС);
	Для Каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Отступ + Элем + Символы.ПС;
	КонецЦикла;	 
	
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция ТипАктивногоКлиентаТестирования()
	Если ОбъектКонтекстСохраняемый.Свойство(""ТекущийПрофильTestClient"") Тогда
		Если ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
			ДанныеКлиентаТестирования = ПолучитьДанныеКлиентаТестирования(ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
			Возврат ДанныеКлиентаТестирования.ТипКлиента;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция СтрокаСоединенияАктивногоКлиентаТестирования()
	Если ОбъектКонтекстСохраняемый.Свойство(""ТекущийПрофильTestClient"") Тогда
		Если ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
			ДанныеКлиентаТестирования = ПолучитьДанныеКлиентаТестирования(ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
			Возврат ДанныеКлиентаТестирования.ПутьКИнфобазе;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ЭтоТекстИсключенияПлатформы(Стр)
	Если Найти(Стр,""{("") > 0 И Найти(Стр,"")}:"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""/e1cib/logForm:"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""Преобразование значения к типу Число не может быть выполнено"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""Значение не является значением объектного типа"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""Метод объекта не обнаружен"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""Поле объекта не обнаружено"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""Процедура или функция с указанным именем уже определена"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""Нарушение прав доступа"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""Обращение к процедуре как к функции"") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""Показанные в таблице документы не удалось пометить на удаление"") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция СформироватьОписаниеОшибки(Знач Стр, ИмяФайла, ИмяПроцедуры, ИнфоОбОшибке)
	СисИнфо            = Новый СистемнаяИнформация; 
	ВерсияПриложения   = СисИнфо.ВерсияПриложения;
	РежимСовместимости = УзнатьРежимСовместимостиКлиент(Локализовать(""Не использовать""));
	ТекстИДРаннера     = """";
	Если ЗначениеЗаполнено(Объект.ИДРаннера) Тогда
		ТекстИДРаннера = "", ИДРаннера=""+Объект.ИДРаннера;
	КонецЕсли;	
	
	ТекстОшибкиTestClient = """";
	ТекстОшибкиTestClientБезФорматирования = """";
	Попытка
		ИнфоОбОшибке = Неопределено;
		Если ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
			ИнфоОбОшибке = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьТекущуюИнформациюОбОшибке();
			Если ИнфоОбОшибке <> Неопределено Тогда
				ТекстОшибкиTestClient = ВывестиВСообщениеТекстОшибки(ИнфоОбОшибке,ТекстОшибкиTestClientБезФорматирования);
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	ТекстПредупреждения = """";
	Если ТекстОшибкиTestClient = """" Тогда
		ТекстПредупреждения = ПолучитьТекстПредупреждения();
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			Если ЭтоТекстИсключенияПлатформы(ТекстПредупреждения) Тогда
				ТекстОшибкиTestClient = ТекстПредупреждения;
				ТекстОшибкиTestClientБезФорматирования = ТекстОшибкиTestClient;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(Неопределено);
	ЗаголовокАктивногоОкна = """";
	ИмяАктивнойФормы       = """";
	АктивноеОкно           = Неопределено;
	Попытка
		Если ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
			АктивноеОкно  = ПолучитьАктивноеОкноИзТестовоеПриложение();
			ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
			АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяФорма""));
			ИмяАктивнойФормы = АктивнаяФорма.ИмяФормы;
		КонецЕсли;	 
	Исключение
		АктивноеОкно = Неопределено;
	КонецПопытки;
	
	ИмяФичи = """";
	ИмяСценария = """";
	НомерСтрокиДерева = """";
	НомерСтрокиФичи = """";
	ПолнйПутьКФиче = """";
	Попытка
		СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
		ИмяФичи = СостояниеVanessaAutomation.ТекущаяФича.Имя;
		ИмяСценария = СостояниеVanessaAutomation.ТекущийСценарий.Имя;
		НомерСтрокиДерева = СостояниеVanessaAutomation.ТекущийШаг.ИдСтроки;
		НомерСтрокиФичи = СостояниеVanessaAutomation.ТекущийШаг.НомерСтрокиФичи;
		ПолнйПутьКФиче = СостояниеVanessaAutomation.ТекущаяФича.ПолныйПуть;
	Исключение
	КонецПопытки;
	
	Стр = Стр + Символы.ПС 
	      + Символы.ПС              + Локализовать(""Технические данные"") + "":""
          + Символы.ПС + ""        "" + Локализовать(""ЗаголовокАктивногоОкна"") + "": "" + ЗаголовокАктивногоОкна
          + Символы.ПС + ""        "" + Локализовать(""ИмяАктивнойФормы"") + "": "" + ИмяАктивнойФормы
          + Символы.ПС + ""        "" + Локализовать(""ИмяФичи"") + "": "" + ИмяФичи
          + Символы.ПС + ""        "" + Локализовать(""ИмяСценария"") + "": "" + ИмяСценария
          + Символы.ПС + ""        "" + Локализовать(""НомерСтрокиДерева"") + "": "" + НомерСтрокиДерева
          + Символы.ПС + ""        "" + Локализовать(""НомерСтрокиФичи"") + "": "" + НомерСтрокиФичи
          + Символы.ПС + ""        "" + Локализовать(""ПолнйПутьКФиче"") + "": "" + ПолнйПутьКФиче
          + Символы.ПС + ""        "" + Локализовать(""ИмяФайла"") + "": "" + ИмяФайла
          + Символы.ПС + ""        "" + Локализовать(""ИмяПроцедуры"") + "": "" + ИмяПроцедуры 
          + Символы.ПС + ""        "" + Локализовать(""ИмяРаннера"") + "": "" + ИмяКомпьютера() 
          + Символы.ПС + ""        "" + Локализовать(""ТипКлиентаТестирования"") + "": "" + ТипАктивногоКлиентаТестирования() 
          + Символы.ПС + ""        "" + Локализовать(""СтрокаСоединения"") + "": "" + СтрокаСоединенияАктивногоКлиентаТестирования() 
          + Символы.ПС + ""        "" + Локализовать(""ВерсияVA"") + "": "" + ПолучитьВерсиюОбработкиКлиент() 
          + Символы.ПС + ""        "" + Локализовать(""ВерсияПлатформы"") + "": "" + ВерсияПриложения 
          + Символы.ПС + ""        "" + Локализовать(""РежимСовместимостиTestManager"") + "": "" + РежимСовместимости
          + Символы.ПС + ""        "" + Локализовать(""ДатаВремяОшибки"") + "": "" + ТекущаяДата();
        
	Если ЗначениеЗаполнено(ТекстОшибкиTestClient) Тогда
		//значит было вызвано исключение
		Стр = Стр + Символы.ПС + ""        "" + Локализовать(""ДеталиОшибки"") + "":"" + Символы.ПС + ТекстОшибкиTestClient;
	Иначе
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			Стр = Стр + Символы.ПС + ""Текст модального окна:"" + Символы.ПС 
			  + ""    "" + ТекстПредупреждения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Функция ПолучитьРезультатПрохожденияТестовСценария(ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено  Тогда
		СообщитьПользователю(Локализовать(""Неизвестная ошибка в ПолучитьРезультатПрохожденияТестовСценария.""));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат МассивРезультатПрохожденияТестовСценария[ИД]; 
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьТранзакциюСервер()
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка = Ложь, ОписаниеОшибки = Неопределено,СлужебныеДанныеСценария = Неопределено)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, ""ПередОкончаниемСценария"", , БылаОшибка, ОписаниеОшибки,СлужебныеДанныеСценария);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеИнструментаДляСозданияСкриншотов()
	Если НЕ Объект.СоздаватьИнструкциюHTML И НЕ Объект.ДелатьСкриншотПриВозникновенииОшибки И НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат Истина;
	КонецЕсли;  
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если ПустаяСтрока(Объект.КаталогВыгрузкиИнструкцийHTML) Тогда
			СообщитьПользователю(Локализовать(""КаталогВыгрузкиИнструкцийHTML не задан.""));
			Возврат Ложь;
		КонецЕсли;  
	КонецЕсли;	 
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если ПустаяСтрока(Объект.КаталогВыгрузкиИнструкцийMarkdown) Тогда
			СообщитьПользователю(Локализовать(""КаталогВыгрузкиИнструкцийMarkdown не задан.""));
			Возврат Ложь;
		КонецЕсли;  
	КонецЕсли;	 
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Если ПустаяСтрока(Объект.КаталогВыгрузкиСкриншотов) Тогда
			СообщитьПользователю(Локализовать(""КаталогВыгрузкиСкриншотов не задан.""));
			Возврат Ложь;
		КонецЕсли;  
	КонецЕсли;	 
	Если ЭтоLinux Тогда 
		Возврат Истина;
	Иначе 
		Если Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов Тогда
			Если ВнешняяКомпонентаДляСкриншотов = Неопределено Тогда
				ПодключитьВнешнююКомпоненту (МестоположениеВнешнейКомпонентыДляСкриншотов, ""WindowCaptureComponent"", ТипВнешнейКомпоненты.Native);
				ВнешняяКомпонентаДляСкриншотов = Новый(""AddIn.WindowCaptureComponent.WindowsControl"");
			КонецЕсли;
		КонецЕсли;
		ВременныйФайл = ПолучитьИмяВременногоФайла(""png"");
		СделатьСкриншот(ВременныйФайл);
		Если НЕ ФайлСуществуетКомандаСистемы(ВременныйФайл, ""ПроверитьНаличиеИнструментаДляСозданияСкриншотов"") Тогда
			СообщитьПользователю(Локализовать(""НЕ найден инструмент по созданию скриншотов.""));
			Возврат Ложь;
		КонецЕсли;	 
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СоздатьИмяФайлаДляСкриншота(Каталог)
	Возврат ДополнитьСлешВПуть(Каталог) + ""ScreenShot_"" + ПолучитьОтметкуВремениДляИмениФайла() + "".png"";
КонецФункции	

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLВыполненияШага(СтруткураШага = Неопределено)
	
	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;  
	
	КаталогВыгрузкиИнструкцийHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML);
	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
		Шаги                           = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		СтруткураШага                  = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;	 
	
	ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншота(КаталогВыгрузкиИнструкцийHTML);
	СделатьСкриншот(ИмяФайлаСкриншота);
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);
	ТД.ЗаписатьСтроку(""НачалоШага"");
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + ""\n"" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;	 
	
	ТД.ЗаписатьСтроку(""ИДШага="" + Формат(ТекИД_ШагаВМассиве, ""ЧГ=; ЧН=0""));
	ТД.ЗаписатьСтроку(""Скриншот="" + ИмяФайлаСкриншота);
	ТД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownВыполненияШага(СтруткураШага = Неопределено)
	
	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;  
	
	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
		Шаги                           = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		СтруткураШага                  = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;	 
	
	
	
	
	ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншота(Объект.КаталогВыгрузкиИнструкцийMarkdown);
	СделатьСкриншот(ИмяФайлаСкриншота);
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку(""НачалоШага"");
	
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + ""\n"" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;	 
	
	ТД.ЗаписатьСтроку(""ИДШага="" + Формат(ТекИД_ШагаВМассиве, ""ЧГ=; ЧН=0""));
	ТД.ЗаписатьСтроку(""Скриншот="" + ИмяФайлаСкриншота);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеДляПередачиВМетод(Знач Значение, Тип)
	Если Тип = ""Строка"" Тогда
		Возврат """""""" + СтрЗаменить(Значение, """""""", """""""""""") + """""""";
	ИначеЕсли Тип = ""Число"" Тогда
		Возврат Значение;
	ИначеЕсли Тип = ""Дата"" Тогда
		Возврат ПреобразоватьКДатеСтрокуКакСтроку(Значение);
	Иначе
		ТекстСообщения = Локализовать(""Неизвестный Тип: %1 в ПолучитьЗначениеДляПередачиВМетод"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Тип);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДляПередачиВМетодСервер(Значение, Тип,СтруктураПараметров)
	Если Тип = ""Строка"" Тогда
		Возврат """""""" + СтрЗаменить(Значение, """""""", """""""""""") + """""""";
	ИначеЕсли Тип = ""Число"" Тогда
		Возврат Значение;
	ИначеЕсли Тип = ""Дата"" Тогда
		Возврат ПреобразоватьКДатеСтрокуКакСтрокуСервер(Значение);
	Иначе
		ТекстСообщения = ТекстСообщенияПользователюВызовСервера(""Неизвестный Тип: %1 в ПолучитьЗначениеДляПередачиВМетод"",СтруктураПараметров.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Тип);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции


&НаКлиенте
Процедура ЗапомнитьСостоянияКонтекстовДоВыполненияШага(Контекст, КонтекстСохраняемый, ИдСтроки)
	СостоянияКонтекстовДоВыполненияШага = Новый Структура;
	СостоянияКонтекстовДоВыполненияШага.Вставить(""Контекст"", СкопироватьСтруктуру(Контекст));
	СостоянияКонтекстовДоВыполненияШага.Вставить(""КонтекстСохраняемый"", СкопироватьСтруктуру(КонтекстСохраняемый));
	СостоянияКонтекстовДоВыполненияШага.Вставить(""ИдСтроки"", ИдСтроки);
	
	Ном = -1;
	Для каждого Элем Из МассивСостоянияКонтекстовДоВыполненияШага Цикл
		Ном = Ном + 1;
		Если Элем.ИдСтроки = ИдСтроки Тогда
			МассивСостоянияКонтекстовДоВыполненияШага.Удалить(Ном);
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	МассивСостоянияКонтекстовДоВыполненияШага.Добавить(СостоянияКонтекстовДоВыполненияШага);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостоянияКонтекстовПоИдСтроки(ИдСтроки)
	Для каждого Элем Из МассивСостоянияКонтекстовДоВыполненияШага Цикл
		Если Элем.ИдСтроки = ИдСтроки Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция ПолучитьИдСледующегоШага(ТекШаг)
	ИдСледующегоШага = Неопределено;
	Если ТекШаг.ДопТип = ""Условие"" ИЛИ ТекШаг.ДопТип = ""УсловиеИначеЕсли"" Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура(""Ид,ИскатьПоИдСтроки"",ТекШаг.ИдСледующегоШага,Истина);
		Иначе
			Если ТекШаг.Свойство(""СледующаяСтрокаУсловиеИстинно"") Тогда
				Если ТекШаг.СледующаяСтрокаУсловиеИстинно = -1 Тогда
					ИдСледующегоШага = Новый Структура(""Ид,ИскатьПоИдСтроки"",Неопределено,Истина);
				Иначе	
					ИдСледующегоШага = Новый Структура(""Ид,ИскатьПоИдСтроки"",ТекШаг.СледующаяСтрокаУсловиеИстинно,Истина);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли ТекШаг.ДопТип = ""Цикл"" Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура(""Ид,ИскатьПоИдСтроки"",ТекШаг.ИдСледующегоШага,Истина);
			Если ТекШаг.ИдСледующегоШага = Неопределено Тогда
				ИдСледующегоШага = Новый Структура(""Ид,ИскатьПоИдСтроки"",ТекШаг.ИдЦикла,Истина);
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли ТекШаг.ИдЦикла <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура(""Ид,ИскатьПоИдСтроки"",ТекШаг.ИдЦикла,Истина);
	ИначеЕсли ТекШаг.ИдСледующегоШага = -1 Тогда
		ИдСледующегоШага = Новый Структура(""Ид,ИскатьПоИдСтроки"",Неопределено,Истина);
	ИначеЕсли ТекШаг.ИдСледующегоШага <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура(""Ид,ИскатьПоИдСтроки"",ТекШаг.ИдСледующегоШага,Истина);
	КонецЕсли;	 
	
	Возврат ИдСледующегоШага;
КонецФункции	

&НаКлиенте
Процедура ПоказатьКолонкуСНомеромСтрокиДерева()
	Если Не Элементы.ДеревоТестовИДСтроки.Видимость Тогда
		ПоказатьСкрытьИДСтроки(""Показать"");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СнятьСкриншотШагаЕслиЭтоНеобходимо(Шаг,РезультатПрохожденияТестовСценария)
	Если НЕ Шаг.НадоСнятьСкриншотШага Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Возврат;
	КонецЕсли;	 
	
	ИмяШага = Лев(Шаг.Имя,60);
	
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.КаталогВыгрузкиСкриншотов) Тогда
		СоздатьКаталогКомандаСистемы(Объект.КаталогВыгрузкиСкриншотов);
	КонецЕсли;	 
	
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.КаталогВыгрузкиСкриншотов) Тогда
		ТекстСообщения = Локализовать(""Не найден каталог: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Объект.КаталогВыгрузкиСкриншотов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ИмяФайлаСкриншота = ДополнитьСлешВПуть(Объект.КаталогВыгрузкиСкриншотов)
	    + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), ""ЧГ=; ЧН=0"")
		+  ""_"" + УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяШага) + "".png"";
	   
	СделатьСкриншот(ИмяФайлаСкриншота);
	//ДобавитьСкриншотКСценарию(РезультатПрохожденияТестовСценария,ИмяФайлаСкриншота);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьДанныеПоАссертамВДерево(СтрокаСценария,СтрокаШага)
	СтрокаСценария.ПроизвольныеЗначения.Вставить(""ОшибкаAssert"",Истина);
	СтрокаСценария.ПроизвольныеЗначения.Вставить(""ЗначениеExpected"",ЗначениеExpected);
	СтрокаСценария.ПроизвольныеЗначения.Вставить(""ЗначениеActual"",ЗначениеActual);
	СтрокаШага.ПроизвольныеЗначения.Вставить(""ОшибкаAssert"",Истина);
	СтрокаШага.ПроизвольныеЗначения.Вставить(""ЗначениеExpected"",ЗначениеExpected);
	СтрокаШага.ПроизвольныеЗначения.Вставить(""ЗначениеActual"",ЗначениеActual);
КонецПроцедуры 

&НаКлиенте
Функция СтрокаИсключенияОшибкиСценарияПереданныеИзвне()
	СтрокаИсключения = """";
	Для Ккк = 0 По ОшибкиСценарияПереданныеИзвне.Количество()-1 Цикл
		СтрокаИсключения = СтрокаИсключения + ОшибкиСценарияПереданныеИзвне[Ккк];
		Если Ккк < ОшибкиСценарияПереданныеИзвне.Количество()-1 Тогда
			СтрокаИсключения = СтрокаИсключения + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат СтрокаИсключения;
КонецФункции	 

&НаКлиенте
Процедура ВызватьИсключениеТакКакЕстьОшибкиПереданныеИзвне()
	СтрокаИсключения = СтрокаИсключенияОшибкиСценарияПереданныеИзвне();
	ВызватьИсключение СтрокаИсключения;
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьШагПродолжение(РезультатПрохожденияШага,ОбработкаТеста)
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	АдресСнипета = ТекШаг.АдресСнипета;
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
	
	УстановитьОграничениеНаКоличествоПопытокДействий(Ложь);
	
	// снятие скриншота шага, если указан тег @screenshot
	СнятьСкриншотШагаЕслиЭтоНеобходимо(ТекШаг,РезультатПрохожденияТестовСценария);
	
	
	КонтекстОтладки = ТаблицаОбработокДляОтладки.Получить(ТекШаг.СтрокаРеальнойПроцедуры);
	Если КонтекстОтладки <> Неопределено Тогда 
		ОбработкаТеста = КонтекстОтладки.Обработка;
	КонецЕсли;
	
	ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
	СписокАргументов = ТекШаг.ЗначенияПараметров;
	
	
	МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);
	
	Если СтрокаШага.ШагСПараметрамиВТаблице = Истина Тогда
		ПарамТаблица = Новый Массив;
		МассивПараметров.Добавить(ПарамТаблица);
		
		ПодчиненныеСтроки = СтрокаШага.ПолучитьЭлементы();
		Для каждого СтрокиТаблицы Из ПодчиненныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокиТаблицы.Тип) Тогда
				// значит это уже не строка таблицы
				Прервать;
			КонецЕсли;	 
			
			СтруктураПарамТаблица = Новый Структура;
			
			Если (СтрокиТаблицы.СтрокаПараметровШагаВВидеТаблицы <> Истина) ИЛИ (НЕ ЗначениеЗаполнено(СтрокиТаблицы.Имя)) Тогда
				ПарамТаблица = Новый Массив;
				МассивПараметров.Добавить(ПарамТаблица);
				Продолжить;
			КонецЕсли;	 
			
			НомерКолонки = 0;
			Для каждого Колонка Из СтрокиТаблицы.ПараметрыТаблицы Цикл
				НомерКолонки       = НомерКолонки + 1;
				СтруктураПараметра = Колонка.Значение;
				Если СтруктураПараметра.Тип = ""Строка"" Тогда
					Значение = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(СтруктураПараметра.Значение,Ложь);
				Иначе	
					Значение = ПолучитьЗначениеДляПередачиВМетод(СтруктураПараметра.Значение, СтруктураПараметра.Тип);
					Значение = Вычислить(Значение);
				КонецЕсли;	 
				
				СтруктураПарамТаблица.Вставить(""Кол"" + Формат(НомерКолонки, ""ЧГ=; ЧН=0""), Значение);
			КонецЦикла;
			
			ПарамТаблица.Добавить(СтруктураПарамТаблица);
		КонецЦикла;
		
		Если ПарамТаблица.Количество() = 0 Тогда
			// значит эта таблица пустая, её передавать не надо
			МассивПараметров.Удалить(МассивПараметров.Количество()-1);
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрОшибка       = Неопределено;
	ШагВыполнен     = Ложь;
	ШагНеРеализован = Ложь;
	БылОбновленКешФормы = Ложь;
	Попытка
		
		Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Истина Тогда
			СохраненнаяСтруктура = ПолучитьСостоянияКонтекстовПоИдСтроки(СтрокаШага.ИдСтроки);
			Если СтрокаШага.ВыполнятьСценарийСЭтогоШага = Истина Тогда 
				Если СохраненнаяСтруктура <> Неопределено Тогда
					ОбъектКонтекст            = СкопироватьСтруктуру(СохраненнаяСтруктура.Контекст);
					ОбъектКонтекстСохраняемый = СкопироватьСтруктуру(СохраненнаяСтруктура.КонтекстСохраняемый);
				Иначе	
					ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
				КонецЕсли;	 
			Иначе	
				// Значит в этот раз запустить с этого шага не получится, надо запомнить контекст для последующих запусков
				ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
			КонецЕсли;	 
		ИначеЕсли Объект.СохранятьКонтекстыПередВыполнениемШагов Тогда
			ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
		КонецЕсли;	 
		
		
		ОбработкаТеста.Контекст            = ОбъектКонтекст;
		ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
		
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ЗаписатьЛогВЖРПередВыполнениемШага(ТекШаг.Имя);
		КонецЕсли;	 
		
		
		Если НЕ ЗначениеЗаполнено(Объект.АдресДанныеОбОшибке) Тогда
			Объект.АдресДанныеОбОшибке = ПоместитьВоВременноеХранилище(СтруктураОшибки());
		КонецЕсли;	 
		
		СкриншотСделанВСценарии = Ложь;
		
		// вызов процедуры шага
		ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов + 1;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов - 1;
		
		ОбъектКонтекст            = ОбработкаТеста.Контекст;
		ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
		
		ШагВыполнен = Истина;
		
		Если НЕ ТекШаг.ЭтоШагКонтекста Тогда
			ДобавитьВЛогИнструкцииHTMLВыполненияШага(ТекШаг);
			ДобавитьВЛогИнструкцииMarkdownВыполненияШага(ТекШаг);
		КонецЕсли;	 
		
		Если ОшибкиСценарияПереданныеИзвне.Количество() > 0 Тогда
			ШагВыполнен = Ложь;
			ВызватьИсключениеТакКакЕстьОшибкиПереданныеИзвне();
		КонецЕсли;	 
		
	Исключение
		Отладка(""ОписаниеОшибки()="" + ОписаниеОшибки());
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		ОписаниеОшибкиКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если Не ОшибкаAssert Тогда
			СтруктураОшибки = ПолучитьИзВременногоХранилища(Объект.АдресДанныеОбОшибке);

			Если Найти(ОписаниеОшибкиКратко, ""[AssertError]"") Тогда
				СтруктураОшибки = ОшибкаАссертаOSL(ОписаниеОшибкиКратко);
			КонецЕсли;

			Если ТипЗнч(СтруктураОшибки) = Тип(""Структура"") Тогда
				Если СтруктураОшибки.ОшибкаAssert Тогда
					ОшибкаAssert = Истина;
					ЗначениеExpected = СтруктураОшибки.ЗначениеExpected;
					ЗначениеActual = СтруктураОшибки.ЗначениеActual;
					
					СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
					ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария,ИДСтрокиСценария,Истина);
					БылОбновленКешФормы = Истина;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
			АктивизироватьСтрокуДереваТекущегоШага();
		КонецЕсли;	 
		
		Если Найти(НРег(ОписаниеОшибкиСтр),НРег(""Ошибка сетевого взаимодействия при вызове"")) > 0 Тогда
			// Это нужно, чтобы сообщить вызывающей системе, что было потеряно соединение с TestClient
			Если КоличествоЗапущенныхКлиентовТестирования <= 1 Тогда
				// Если в сценарии запускалось больше одного клиента тестирования, то ошибкой считаем только первый запуск
				ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Найти(ОписаниеОшибкиСтр, ""}: Не реализовано."") > 0 Тогда //тогда это Pending
			ТекстСообщения = Локализовать(""Шаг (%1) не реализован."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекШаг.Имя); 
			
			ОписаниеОшибкиШага = ТекстСообщения;
			СообщитьПользователю(ОписаниеОшибкиШага);
			
			ТекстСообщения = Локализовать(""Не реализовано."");
			СтрОшибка = ТекстСообщения;
			ШагНеРеализован = Истина;
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = Локализовать(""Pending: %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекстСообщения);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			ОстановитьЗаписьВидеоОдногоШага();
			
			Если Объект.ПриравниватьPendingКFailed Тогда
				Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
					ТекстСообщения = Локализовать(""Шаг сценария не реализован."");
					ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,ТекстСообщения,Неопределено,ОписаниеОшибкиШага);
				КонецЕсли;	 
			КонецЕсли;	 
		Иначе
			// значит возникла ошибка
			ОписаниеОшибкиШага = Локализовать(""Шаг"") + "" ("" + ТекШаг.Имя + "") "" + Локализовать(""не выполнен"") +""."";
			СообщитьПользователю(ОписаниеОшибкиШага);
			ИнфоОбОшибке = Неопределено;
			СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибкиСтр, АдресСнипета, ИмяПроцедуры,ИнфоОбОшибке);
			СообщитьПользователю(СтрОшибка);
			
			Если НЕ БылОбновленКешФормы Тогда
				ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено,ИДСтрокиСценария,Истина);
			КонецЕсли;	 
			СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.СтрокаШага);
			
			ЭтоПример          = Ложь;
			ЭтоШагКонтекста    = Ложь;
			СтрокаРодителяШага = НайтиСтрокуСценарияЧерезРодителя(СтрокаШага, ЭтоПример,ЭтоШагКонтекста);
			
			Если ЭтоШагКонтекста Тогда
				ВозниклаОшибкаВШагеКонтекста = Истина;
			КонецЕсли;	 
			
			СтрокаСценария.ТекстОшибки = СтрОшибка;
			СтрокаШага.ТекстОшибки     = СтрОшибка;
			Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
				СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			Если СтрокаШага.ПроизвольныеЗначения = Неопределено Тогда
				СтрокаШага.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			
			СтрокаСценария.ПроизвольныеЗначения.Вставить(""ТекстОшибкиКратко"",ОписаниеОшибкиКратко);
			СтрокаШага.ПроизвольныеЗначения.Вставить(""ТекстОшибкиКратко"",ОписаниеОшибкиКратко);
			
			СтрокаСценария.ПроизвольныеЗначения.Вставить(""ОшибкаAssert"",Ложь);
			СтрокаШага.ПроизвольныеЗначения.Вставить(""ОшибкаAssert"",Ложь);
			
			
			Если ОшибкаAssert Тогда
				ДобавитьДанныеПоАссертамВДерево(СтрокаСценария,СтрокаШага);
			КонецЕсли;	
			
			Объект.АдресДанныеОбОшибке = Неопределено;
			
			Если ГлобальныеЗначенияТаблиц.Свойство(""ТаблицаЭталон"") Тогда
				СтрокаШага.ПроизвольныеЗначения.Вставить(""ТаблицаЭталон"",ГлобальныеЗначенияТаблиц.ТаблицаЭталон);
				СтрокаШага.ПроизвольныеЗначения.Вставить(""ТаблицаТекущееЗначение"",ГлобальныеЗначенияТаблиц.ТаблицаТекущееЗначение);
			КонецЕсли;	 
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = Локализовать(""Шаг (%1) не выполнен. Строка дерева №%2"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекШаг.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",Формат(ТекШаг.ИдСтроки, ""ЧГ=; ЧН=0""));
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
				ТекстСообщения = Локализовать(""Failed: %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрОшибка);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			ОстановитьЗаписьВидеоОдногоШага();
			
			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,СтрОшибка,ИнфоОбОшибке,ОписаниеОшибкиШага);
			КонецЕсли;	 
			
			Если Объект.ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки Тогда
				ПоказатьКолонкуСНомеромСтрокиДерева();
			КонецЕсли;	 
		КонецЕсли;
		
		
	КонецПопытки;
	
	
	ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
	
	Если ШагВыполнен Тогда
		// снятие скриншота шага, если указан тег @screenshot
		СнятьСкриншотШагаЕслиЭтоНеобходимо(ТекШаг,РезультатПрохожденияТестовСценария);
	КонецЕсли;	 
	
	РезультатПрохожденияШага.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
	Если ШагВыполнен Тогда
		Если Не Объект.ОстановитьВыполнениеШагов Тогда
			СтрокаШага.Статус = ""Success"";
			СтрокаШага.ТипКартинки = 4;
			РезультатПрохожденияШага.Вставить(""Статус"", СтрокаШага.Статус);
		КонецЕсли;	 
		
		ПерейтиКВыполнениюСледующегоШага(, , ИдСледующегоШага);
	Иначе	
		
		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		Если НЕ БылОбновленКешФормы Тогда
			ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария,ИДСтрокиСценария);
		КонецЕсли;	 
		
		СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
		
		Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
			АктивизироватьСтрокуДереваТекущегоШага();
		КонецЕсли;	 
		
		Если ШагНеРеализован Тогда
			СтрокаШага.Статус = ""Pending"";
			СтрокаШага.ТипКартинки = 6;
			Если Объект.ПриравниватьPendingКFailed Тогда
				СтатусЗапускаСценариев = Ложь;
			КонецЕсли;	 
		Иначе
			СтатусЗапускаСценариев = Ложь;		
			СтрокаШага.Статус      = ""Failed"";
			СтрокаШага.ТипКартинки = 5;
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли; 
		РезультатПрохожденияШага.Вставить(""ОписаниеОшибки"", СтрОшибка);
		РезультатПрохожденияШага.Вставить(""Статус"", СтрокаШага.Статус);
		РезультатПрохожденияШага.Вставить(""НомерСтрокиВФиче"", СтрокаШага.НомерСтрокиВФиче);
		
		РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", СтрОшибка);
		РезультатПрохожденияТестовСценария.Вставить(""НомерСтрокиВФиче"", СтрокаСценария.НомерСтрокиВФиче);
		
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		
		БылаОшибка     = Ложь;
		ОписаниеОшибки = """";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);

		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;		
			СтрокаСценария.Статус  = ""Failed"";
			РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ЗаписатьСтрокуВТекстовыйЛог(""Ошибка в процедуре ПередОкончаниемСценария()."");
				ТекстСообщения = Локализовать(""Описание ошибки: %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли;
		
		ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги, ТекИД_ШагаВМассиве, РезультатПрохожденияТестовШагов);
		ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
		
		ОстановитьЗаписьВидеоОдногоШага();

		РезультатПрохожденияТестовСценария.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		Если СтрокаСценария.Статус = ""Failed"" И Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Функция ОшибкаАссертаOSL(ОписаниеОшибкиКратко)
	
	СтрДлинаОшибки = СтрДлина(ОписаниеОшибкиКратко);
	СтрПозНачалоExpected = Найти(ОписаниеОшибкиКратко, ""[Expected]"");
	СтрПозКонецExpected = СтрПозНачалоExpected + СтрДлина(""[Expected]"") + 1;
	СтрПозНачалоActual = Найти(ОписаниеОшибкиКратко, ""[Actual]"");
	СтрПозКонецActual = СтрПозНачалоActual + СтрДлина(""[Actual]"") + 1;
	СтрПозНачалоMessage = Найти(ОписаниеОшибкиКратко, ""[Message]"");

	Результат = СтруктураОшибкаАссерта(ОписаниеОшибкиКратко);
	Результат.ОписаниеОшибки = ОписаниеОшибкиКратко;
	
	Если СтрПозНачалоExpected > 0 И СтрПозНачалоActual > СтрПозКонецExpected
		И (СтрПозНачалоMessage = 0 Или СтрПозНачалоMessage > СтрПозКонецActual) Тогда

		Результат.ЗначениеExpected =
			Сред(
				ОписаниеОшибкиКратко,
				СтрПозКонецExpected,
				СтрПозНачалоActual - СтрПозКонецExpected - 1
			);
		Результат.ЗначениеActual =
			Сред(
				ОписаниеОшибкиКратко,
				СтрПозКонецActual,
				?(СтрПозНачалоMessage > 0,
					СтрПозНачалоMessage - СтрПозКонецActual - 1,
					СтрДлинаОшибки
				)
			);
			
		Результат.Вставить(""ОшибкаAssert"", Истина);
	Иначе
		Результат.Вставить(""ОшибкаAssert"", Ложь);
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВыполнитьШаг()
	Если ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий Тогда
		Возврат;
	КонецЕсли; 
	
	ОшибкиАссертов = Неопределено;
	
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	
	Если Объект.ВыводитьВЛогВыполнениеШагов Тогда
		ТекстСообщения = Локализовать(""Шаг"");
		Если ТекШаг.Свойство(""МассивТеговШага"") И ТипЗнч(ТекШаг.МассивТеговШага) = Тип(""Массив"") Тогда
			Для Каждого ЗначениеТега Из ТекШаг.МассивТеговШага Цикл
				ЗаписатьЛогВТекстИнформация("""",""@"" + ЗначениеТега);
			КонецЦикла;	 
		КонецЕсли;	 
		ЗаписатьЛогВТекстИнформация("""" + ТекущаяДата() + "". "" + ТекстСообщения,"" "" + ТекШаг.Имя); 
		Если ТекШаг.ШагСПараметрамиВТаблице Тогда
			ВывестиВЛогТаблицу(ТекШаг.ПараметрыТаблицы); 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
	
	Если СтрокаШага.Брейкпоинт И Не Объект.РежимВыполненияОдногоШага Тогда
		СообщитьПользователю(""Остановка на брейкпоинте."");
		АктивизироватьСтрокуДереваТекущегоШага();
		ПрекратитьВыполнениеВсехСценариев = Истина;
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	
	РезультатПрохожденияТестовСценария.Вставить(""НомерСтрокиВФиче"", СтрокаСценария.НомерСтрокиВФиче);
	
	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить(""Имя"", СтрокаШага.Имя);
	РезультатПрохожденияШага.Вставить(""ВремяНачала"", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить(""НомерСтрокиВФиче"", СтрокаШага.НомерСтрокиВФиче);
	РезультатПрохожденияШага.Вставить(""ИДСтроки"", ИДСтрокиШага);
	РезультатПрохожденияШага.Вставить(""ЭтоШагКонтекста"", ТекШаг.ЭтоШагКонтекста);
	РезультатПрохожденияШага.Вставить(""Статус"", ""Broken"");
	
	РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
	
	Если ПрекратитьВыполнениеДанногоСценария Тогда
		РезультатПрохожденияШага.Вставить(""Статус"", ""Success"");
		РезультатПрохожденияТестовСценария.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		ПрекратитьВыполнениеДанногоСценария = Ложь;
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	
	АдресСнипета = ТекШаг.АдресСнипета;
	Если СокрЛП(АдресСнипета) = """" Тогда
		ОстановитьЗаписьВидеоОдногоШага();
		АктивизироватьСтрокуДереваТекущегоШага();
		
		СтрокаШага.Статус = ""Pending"";
		СтрокаШага.ТипКартинки = 6;
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		ТекстСообщения = Локализовать(""Пустой адрес снипета у шага: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекШаг.Имя);
		ОписаниеОшибки = ТекстСообщения;
		
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ТекстСообщения = Локализовать(""Pending: %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки);
			ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
		КонецЕсли;	 
		
		Если Объект.ПриравниватьPendingКFailed Тогда
			СтатусЗапускаСценариев = Ложь;
			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ТекстСообщения = Локализовать(""Шаг сценария не реализован."");
				ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,ТекстСообщения,Неопределено,ОписаниеОшибки);
			КонецЕсли;	 
		КонецЕсли;	 
		
		РезультатПрохожденияТестовСценария.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить(""Статус"", СтрокаШага.Статус);
		
		СообщитьПользователю(ОписаниеОшибки);
		
		БылаОшибка     = Ложь;
		ОписаниеОшибки = """";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;		
			СтрокаСценария.Статус  = ""Failed"";
			РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = Локализовать(""Failed: %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли;
		
		ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
		
		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			// выполняем следующий сценарий
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
		Возврат;
	КонецЕсли;	 
	
	//ТаблицаКонтекстовОбработок
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ОбработкаТеста = Неопределено Тогда
		Если ЭтоВнутреннийАдресФормы(АдресСнипета) Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);
			ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
			Если ОбработкаТеста = Неопределено Тогда
				ТекстСообщения = Локализовать(""Не смог подключить обработку <%1>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",АдресСнипета);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			ВыполнитьШагПродолжение(РезультатПрохожденияШага,ОбработкаТеста);
			Возврат;
		КонецЕсли;	 
		
		МассивФайлов = Новый Массив;
		Если МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ФичаИмеетСвоюEPF И
			НЕ МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена Тогда
			
			МассивФайлов.Добавить(ПолучитьПутьК_EPF_Фичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче));
			МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена = Истина;
		КонецЕсли;	 
		
		//основная обработка должна быть последней в массиве
		МассивФайлов.Добавить(АдресСнипета);
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(МассивФайлов,РезультатПрохожденияШага);
		Возврат;
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ФичаИмеетСвоюEPF И
		НЕ МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПолучитьПутьК_EPF_Фичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче));
		МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена = Истина;
		
		//основная обработка должна быть последней в массиве
		МассивФайлов.Добавить(АдресСнипета);
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(МассивФайлов,РезультатПрохожденияШага);
		Возврат;
	КонецЕсли;	 
	
	ВыполнитьШагПродолжение(РезультатПрохожденияШага,ОбработкаТеста);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки,ДобавлятьДанныеПоАссертам)
	Если ТекИД_ШагаВМассиве = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		ТекШаг.Вставить(""ШагСчитаетсяУпавшим"", Истина);
		ТекШаг.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
		
		Если ДобавлятьДанныеПоАссертам Тогда
			ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
			ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария,ИДСтрокиСценария,Истина);
			СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.СтрокаШага);
			ДобавитьДанныеПоАссертамВДерево(СтрокаСценария,СтрокаШага);
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТранзакцияАктивнаСервер()
	Возврат ТранзакцияАктивна();
КонецФункции	

// работа с видео - начало

&НаКлиенте
Функция ЗагрузитьФайлВМассив(ИмяФайла)
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, ""UTF-8"");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция ПолучитьПараметрыЗаписиВидео()
	
	ПараметрыВидео = Новый Структура;
	ПараметрыВидео.Вставить(""КаталогВыгрузкиИнструкцийВидео"", Объект.КаталогВыгрузкиИнструкцийВидео);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКомандаНачатьЗаписьВидео"", Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео);
	ПараметрыВидео.Вставить(""ЗаписьВидеоФайлКурсораМышки"", Объект.ЗаписьВидеоФайлКурсораМышки);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКаталогДляВременныхФайлов"", Объект.ЗаписьВидеоКаталогДляВременныхФайлов);
	ПараметрыВидео.Вставить(""ЗаписьВидеоФайлВодянойЗнак"", Объект.ЗаписьВидеоФайлВодянойЗнак);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКомандаFfmpeg"", Объект.ЗаписьВидеоКомандаFFmpeg);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКомандаConvert"", Объект.ЗаписьВидеоКомандаConvert);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКаталогМузыки"", Объект.ЗаписьВидеоКаталогМузыки);
	ПараметрыВидео.Вставить(""ЗаписьВидеоГромкостьМузыки"", Объект.ЗаписьВидеоГромкостьМузыки);
	ПараметрыВидео.Вставить(""ЗаписьВидеоДелатьНаложениеTTS"", Объект.ЗаписьВидеоДелатьНаложениеTTS);
	ПараметрыВидео.Вставить(""ЗаписьВидеоТипОзвучкиTTS"", Объект.ЗаписьВидеоТипОзвучкиTTS);
	
	ПараметрыВидео.Вставить(""ЗаписьВидеоYandexTTSЯзык"", Объект.ЗаписьВидеоYandexTTSЯзык);
	ПараметрыВидео.Вставить(""ЗаписьВидеоYandexTTSГолос"", Объект.ЗаписьВидеоYandexTTSГолос);
	ПараметрыВидео.Вставить(""ЗаписьВидеоYandexTTSЭмоция"", Объект.ЗаписьВидеоYandexTTSЭмоция);
	ПараметрыВидео.Вставить(""ЗаписьВидеоYandexTTSСкорость"", Объект.ЗаписьВидеоYandexTTSСкорость);
	ПараметрыВидео.Вставить(""ЗаписьВидеоYandexTTSИдентификаторКаталога"", Объект.ЗаписьВидеоYandexTTSИдентификаторКаталога);
	ПараметрыВидео.Вставить(""ЗаписьВидеоYandexTTSOauthToken"", Объект.ЗаписьВидеоYandexTTSOauthToken);
	
	ПараметрыВидео.Вставить(""ЗаписьВидеоAmazonГолос"", Объект.ЗаписьВидеоAmazonГолос);
	ПараметрыВидео.Вставить(""ЗаписьВидеоAmazonДвижок"", Объект.ЗаписьВидеоAmazonДвижок);
	ПараметрыВидео.Вставить(""ЗаписьВидеоAmazonЯзык"", Объект.ЗаписьВидеоAmazonЯзык);
	ПараметрыВидео.Вставить(""ЗаписьВидеоAmazonКлючДоступа"", Объект.ЗаписьВидеоAmazonКлючДоступа);
	ПараметрыВидео.Вставить(""ЗаписьВидеоAmazonСекретныйКлюч"", Объект.ЗаписьВидеоAmazonСекретныйКлюч);
	
	ПараметрыВидео.Вставить(""ЗаписьВидеоПутьКДвижкуTTS"", Объект.ЗаписьВидеоПутьКДвижкуTTS);
	ПараметрыВидео.Вставить(""ЗаписьВидеоИмяTTS"", Объект.ЗаписьВидеоИмяTTS);
	ПараметрыВидео.Вставить(""ЗаписьВидеоСловарьЗамен"", Объект.ЗаписьВидеоСловарьЗамен);
	ПараметрыВидео.Вставить(""ЗаписьВидеоЭкранШирина"", Объект.ЗаписьВидеоЭкранШирина);
	ПараметрыВидео.Вставить(""ЗаписьВидеоЭкранВысота"", Объект.ЗаписьВидеоЭкранВысота);
	ПараметрыВидео.Вставить(""ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм"", Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм);
	ПараметрыВидео.Вставить(""ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы"", Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы);
	ПараметрыВидео.Вставить(""ЗаписьВидеоГруппаШаговКакШаг"", Объект.ЗаписьВидеоГруппаШаговКакШаг);
	ПараметрыВидео.Вставить(""ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени"", Объект.ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени);
	ПараметрыВидео.Вставить(""ЗаписьВидеоПодсвечиватьНажатияМышки"", Объект.ЗаписьВидеоПодсвечиватьНажатияМышки);
	ПараметрыВидео.Вставить(""ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи"", Объект.ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи);
	ПараметрыВидео.Вставить(""ЗаписьВидеоОтключитьСлайдСценария"", Объект.ЗаписьВидеоОтключитьСлайдСценария);
	ПараметрыВидео.Вставить(""ЗаписьВидеоОтключитьСлайдФинал"", Объект.ЗаписьВидеоОтключитьСлайдФинал);
	ПараметрыВидео.Вставить(""ЗаписьВидеоЭмулироватьВводСКлавиатуры"", Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры);
	ПараметрыВидео.Вставить(""ЗаписьВидеоСкрытьСлужебныеОкна"", Объект.ЗаписьВидеоСкрытьСлужебныеОкна);
	ПараметрыВидео.Вставить(""ЗаписьВидеоСкоростьПроизношения"", Объект.ЗаписьВидеоСкоростьПроизношения);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКэшироватьФайлыTTS"", Объект.ЗаписьВидеоКэшироватьФайлыTTS);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКэшФайловTTS"", Объект.ЗаписьВидеоКэшФайловTTS);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКэшироватьВидеоВставки"", Объект.ЗаписьВидеоКэшироватьВидеоВставки);
	ПараметрыВидео.Вставить(""ЗаписьВидеоКэшВидеоВставок"", Объект.ЗаписьВидеоКэшВидеоВставок);
	ПараметрыВидео.Вставить(""ЗаписьВидеоДобавлятьСубтитры"", Объект.ЗаписьВидеоДобавлятьСубтитры);
	ПараметрыВидео.Вставить(""ЗаписьВидеоПроцентУскорения"", Объект.ЗаписьВидеоПроцентУскорения);
	ПараметрыВидео.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипВидео"", Объект.ЗаписьВидеоФормироватьИнструкциюТипВидео);
	ПараметрыВидео.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипHTML"", Объект.ЗаписьВидеоФормироватьИнструкциюТипHTML);
	ПараметрыВидео.Вставить(""ЗаписьВидеоФормироватьИнструкциюТипMarkdown"", Объект.ЗаписьВидеоФормироватьИнструкциюТипMarkdown);
	ПараметрыВидео.Вставить(""ЗаписьВидеоЭмулироватьДвиженияМышки"", Объект.ЗаписьВидеоЭмулироватьДвиженияМышки);
	
	ПараметрыВидео.Вставить(""ЗаписьВидеоЗаменитьСлайдЗаголовок"", Объект.ЗаписьВидеоЗаменитьСлайдЗаголовок);
	ПараметрыВидео.Вставить(""ЗаписьВидеоПутьКСлайдуЗаголовок"", Объект.ЗаписьВидеоПутьКСлайдуЗаголовок);
	ПараметрыВидео.Вставить(""ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок"", Объект.ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок);
	ПараметрыВидео.Вставить(""ЗаписьВидеоЗаменитьСлайдФинал"", Объект.ЗаписьВидеоЗаменитьСлайдФинал);
	ПараметрыВидео.Вставить(""ЗаписьВидеоПутьКСлайдуФинал"", Объект.ЗаписьВидеоПутьКСлайдуФинал);
	ПараметрыВидео.Вставить(""ЗаписьВидеоДобавитьМузыкуКСлайдуФинал"", Объект.ЗаписьВидеоДобавитьМузыкуКСлайдуФинал);
	
	ПараметрыВидео.Вставить(""ЗаписьВидеоКоличествоКадров"", Объект.ЗаписьВидеоКоличествоКадров);
	ПараметрыВидео.Вставить(""DebugLog"", Объект.DebugLog);
	ПараметрыВидео.Вставить(""Ванесса"", ЭтаФорма);
	ПараметрыВидео.Вставить(""КаталогИнструментов"", Объект.КаталогИнструментов);
	ПараметрыВидео.Вставить(""ЕстьПоддержкаАсинхронныхВызовов"", ЕстьПоддержкаАсинхронныхВызовов);
	
	ПараметрыВидео.Вставить(""ЭтоИнициализация"", Ложь);
	
	Если НЕ ПараметрыВидео.Свойство(""Файл_StopVideoRec"") Тогда
		ТекстStopVideoRec = ПолучитьТекстStopVideoRec();
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""os"");
		ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,""UTF-8"",,Истина); 
		ЗТ.Записать(ТекстStopVideoRec.ПолучитьТекст()); 
		ЗТ.Закрыть();
		
		ПараметрыВидео.Вставить(""Файл_StopVideoRec"",ИмяВременногоФайла);
	КонецЕсли;	 
	
	
	
	// уменьшим разрешение экрана, если оно указано больше чем реальное
	ИнформацияЭкранаКлиента = Вычислить(""ПолучитьИнформациюЭкрановКлиента()[0]"");
	Ширина = ИнформацияЭкранаКлиента.Ширина;
	Высота = ИнформацияЭкранаКлиента.Высота;
	Если (Ширина % 2) = 1 Тогда //нечетное
		Ширина = Ширина - 1;
	КонецЕсли;	 
	Если (Высота % 2) = 1 Тогда //нечетное
		Высота = Высота - 1;
	КонецЕсли;	 
	
	Если Ширина < Объект.ЗаписьВидеоЭкранШирина Тогда
		ПараметрыВидео.Вставить(""ЗаписьВидеоЭкранШирина"", Ширина);
	КонецЕсли;	 
	Если Высота < Объект.ЗаписьВидеоЭкранВысота Тогда
		ПараметрыВидео.Вставить(""ЗаписьВидеоЭкранВысота"", Высота);
	КонецЕсли;	 
	
	
	Возврат ПараметрыВидео;
КонецФункции	

&НаКлиенте
Процедура ЗавершитьЗаписьВидео()
	Если НЕ Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить(""МассивСценариевДляВыполнения"", МассивСценариевДляВыполнения);
	ПараметрыВидео.Вставить(""МассивСтрокДереваДанныеФормы"", МассивСтрокДереваДанныеФормы);
	
	Если СтатусЗапускаСценариев Тогда //если были упавшие шаги, то делать видео не надо
		ПодключитьБиблиотекуРаботыСВидео();
		МодульРаботыСВидео.ЗавершитьЗаписьВидео(ПараметрыВидео);
	КонецЕсли;	 
	
	Если Объект.ЗаписьВидеоПодсвечиватьНажатияМышки Тогда
		TASKKILL(""MouseClickEvent.exe"");
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьЗаписьВидеоОдногоШага()
	Если Не Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ОстановитьЗаписьВидеоОдногоШага(ПараметрыВидео);
	Объект.ИдетЗаписьВидео = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьВидеоОдногоШага(ТекИД_СценарияВМассиве, ТекИД_ШагаВМассиве, ТекШаг)
	Если Не Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекШаг.Свойство(""ИгнорироватьШагВАвтоинструкции"") Тогда
		Если ТекШаг.ИгнорироватьШагВАвтоинструкции Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить(""ТекИД_СценарияВМассиве"", ТекИД_СценарияВМассиве);
	ПараметрыВидео.Вставить(""ТекИД_ШагаВМассиве"", ТекИД_ШагаВМассиве);
	ПараметрыВидео.Вставить(""ТекШаг"", ТекШаг);
	
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.НачатьЗаписьВидеоОдногоШага(ПараметрыВидео);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодготовкуКЗаписиВидео()
	// проверим разрешение экрана
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить(""ЭтоИнициализация"", Истина);
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.Инициализация(ПараметрыВидео);
	
	ПараметрыВидео.Вставить(""МассивСценариевДляВыполнения"", МассивСценариевДляВыполнения);
	
	Если Объект.ЗаписьВидеоПодсвечиватьНажатияМышки Тогда
		Рез = Новый Массив;
		ЗаполнитьМассивPIDПоИмениПроцесса(""MouseClickEvent.exe"", Рез);
		Если Рез.Количество() = 0 Тогда
			ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""tools\VideoTools\MouseClickEvent.exe"";
			Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
				ТекстСообщения = Локализовать(""Не найден файл <%1>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			КомандаСистемы = ИмяФайла;
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы,0);
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

// работа с видео - окончание

&НаКлиенте
Функция ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(ЭлементДерева)
	ТекРодитель          = ЭлементДерева.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	ЭлементыРодителя     = ТекРодитель.ПолучитьЭлементы();
	ИдВКоллекцииРодителя = ЭлементыРодителя.Индекс(ЭлементДерева);
	
	Если ЭлементыРодителя.Количество()-1 >= (ИдВКоллекцииРодителя+1) Тогда
		// значит это следующая строка
		Возврат ЭлементыРодителя[ИдВКоллекцииРодителя+1].ПолучитьИдентификатор();
	КонецЕсли;	 
	
	Возврат ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(ТекРодитель);
	
КонецФункции	

&НаКлиенте
Процедура ОпределитьСледующуюСтрокуДереваДляВыполнения(ЭлементыДерево)
	Если Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = ""Условие""
		Или Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = ""УсловиеИначеЕсли""
		Или  Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = ""Цикл""	 Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(Элементы.ДеревоТестов.ТекущиеДанные);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекРодитель = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьРодителя();
	Если ТекРодитель.ДопТип = ""Цикл"" Тогда
		ЭлементыРодителя = ТекРодитель.ПолучитьЭлементы();
		ЭлементыСтроки   = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьЭлементы();
		Если ЭлементыРодителя.Индекс(Элементы.ДеревоТестов.ТекущиеДанные) = ЭлементыРодителя.Количество()-1
		И    ЭлементыСтроки.Количество() = 0 	
		Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ТекРодитель.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
			
	Пока Истина Цикл
		ТекНомерСтроки                      = Элементы.ДеревоТестов.ТекущаяСтрока;
		Элементы.ДеревоТестов.ТекущаяСтрока = Элементы.ДеревоТестов.ТекущаяСтрока + 1;
		Если Элементы.ДеревоТестов.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ТекНомерСтроки;
			Прервать;
		КонецЕсли;	 
		Если Элементы.ДеревоТестов.ТекущиеДанные.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда
			Продолжить;
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = ""Область"" Тогда
			Если НЕ ЗначениеЗаполнено(Элементы.ДеревоТестов.ТекущиеДанные.ДопТип) Тогда
				Продолжить;
			КонецЕсли;	 
			
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = ""ШагСценарий"" Тогда
			Продолжить;
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = ""Сценарий"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		РазвернутьСтрокуДерева(Элементы.ДеревоТестов.ТекущиеДанные);
		
		Прервать;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСообщениеВсеСценарииОбработаны()
	Если СтатусЗапускаСценариев Тогда
		СообщитьПользователю(Локализовать(""Выполнение сценариев закончено. Ошибок не было.""));
	Иначе	
		СообщитьПользователю(Локализовать(""Выполнение сценариев закончено. БЫЛИ ОШИБКИ.""));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВыполненияСценариевОбработчикОжидания()
	ФлагСценарииВыполнены = Истина;
	Если ЗначениеЗаполнено(ФайлФлагВыполненияСценариев) Тогда
		ЗТ = Новый ЗаписьТекста(ФайлФлагВыполненияСценариев,""UTF-8"",,Истина); 
		ЗТ.ЗаписатьСтроку(""""); 
		ЗТ.Закрыть();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВыполненияСценариев()
	ПодключитьОбработчикОжидания(""УстановитьФлагиВыполненияСценариевОбработчикОжидания"",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоСценария()
	
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Если Не Объект.РежимВыполненияОдногоШага Тогда
			ВывестиСтатистикуКлиент();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОстановитьЗаписьВидеоОдногоШага();
	
	Если ПрекратитьВыполнениеВсехСценариев Тогда
		СделатьСообщениеВсеСценарииОбработаны();
		Объект.ИдетВыполнениеСценариев = Ложь;
		ОбновитьСтатусыКнопокСценариев();
		УстановитьФлагиВыполненияСценариев();
		Если Объект.ЗапускИзКоманднойСтроки Тогда
			ВыполнитьСценарийАссинхронноТаймер();
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		Если ТекИД_СценарияВМассиве >= 0 Тогда
			Объект.ИдетВыполнениеСценариев = Ложь;
			ОбновитьСтатусыКнопокСценариев();
			ОпределитьСледующуюСтрокуДереваДляВыполнения(Элементы.ДеревоТестов);
			УстановитьФлагиВыполненияСценариев();
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
	
	Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
		ПодключитьОбработчикОжидания(""ВыполнитьСценарийАссинхронноТаймер"", Объект.ИнтервалВыполненияШага, Истина);
	Иначе	
		ВыполнитьСценарийАссинхронноТаймер();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьСтрокуДереваТекущегоШага(ИдСтрокиДерева = Неопределено)
	ИдСтрокиДляАктивации = ИдСтрокиДерева;
	Если ИдСтрокиДляАктивации = Неопределено Тогда
		ИдСтрокиДляАктивации = ТекИД_ШагаВМассиве;
	КонецЕсли;
	
	Если ИдСтрокиДляАктивации = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если (ТекИД_СценарияВМассиве >= 0) И (ТекИД_СценарияВМассиве <= (МассивСценариевДляВыполнения.Количество()-1)) Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		Если (Шаги.Количество() - 1) >= ИдСтрокиДляАктивации Тогда
			Если Объект.РежимВыполненияОдногоШага Тогда
				СтрокаШага = НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиШага);
				Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
			Иначе	
				Если ИдСтрокиДляАктивации >= 0 Тогда
					СтрокаШага = МассивСтрокДереваДанныеФормы[Шаги[ИдСтрокиДляАктивации].СтрокаШага];
					Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЕсли;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоШага(ВыполнитьШагЧерезТаймер = Неопределено, НадоОбновитьСтатусШага = Ложь, ИдСледующегоШага = Неопределено)
	
	Если Объект.ОстановитьВыполнениеШагов Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекИД_СценарияВМассиве = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПрекратитьВыполнениеВсехСценариев Тогда
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", """");
		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить(""НомерСтрокиВФиче"", СтрокаСценария.НомерСтрокиВФиче);
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
		
	Если (ТекИД_СценарияВМассиве <> Неопределено) И (ТекИД_СценарияВМассиве >= 0) И (ТекИД_ШагаВМассиве >= 0) И (ТекИД_СценарияВМассиве <= (МассивСценариевДляВыполнения.Количество() - 1) ) Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		
		Если ТекШаг.ШагСчитаетсяУпавшим Тогда
			СтатусЗапускаСценариев = Ложь;
			
			ИДСтрокиШага                       = ТекШаг.СтрокаШага;
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			
			СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
			СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
			
			СтрокаШага.Статус      = ""Failed"";
			СтрокаШага.ТипКартинки = 5;
			СтрокаСценария.Статус  = СтрокаШага.Статус;
			АдресСнипета           = ТекШаг.АдресСнипета;
			ИмяПроцедуры           = ТекШаг.СтрокаРеальнойПроцедуры;
			
			ТекстСообщения = Локализовать(""Шаг (%1) не выполнен."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекШаг.Имя ); 
			СообщитьПользователю(ТекстСообщения);
			
			Если ЗначениеЗаполнено(ТекШаг.ОписаниеОшибки) Тогда
				ОписаниеОшибки = ТекШаг.ОписаниеОшибки;
			Иначе	
				ОписаниеОшибки = ОписаниеОшибки();
			КонецЕсли;	 
			
			ИнфоОбОшибке = Неопределено;
			ОписаниеОшибки = СформироватьОписаниеОшибки(ОписаниеОшибки, АдресСнипета, ИмяПроцедуры,ИнфоОбОшибке);
			СтрокаСценария.ТекстОшибки = ОписаниеОшибки;
			СтрокаШага.ТекстОшибки     = ОписаниеОшибки;
			
			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
			
			РезультатПрохожденияТестовСценария.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
			РезультатПрохожденияТестовСценария.Вставить(""НомерСтрокиВФиче"", СтрокаСценария.НомерСтрокиВФиче);
			РезультатПрохожденияШага.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияШага.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
			РезультатПрохожденияШага.Вставить(""Статус"", СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить(""НомерСтрокиВФиче"", СтрокаШага.НомерСтрокиВФиче);
			
			СообщитьПользователю(ОписаниеОшибки);
			
			ОписаниеОшибкиШага = Локализовать(""Шаг"") + "" ("" + ТекШаг.Имя + "") "" + Локализовать(""не выполнен"") +""."";
			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,ОписаниеОшибки,ИнфоОбОшибке,ОписаниеОшибкиШага);
			КонецЕсли;	 
			
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = Локализовать(""Failed: %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			БылаОшибка     = Ложь;
			ОписаниеОшибки = """";
			ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
			
			СтрокаСценария.Статус = ""Failed"";
			Если БылаОшибка Тогда
				РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
			КонецЕсли;	 
			ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
			
			ОстановитьЗаписьВидеоОдногоШага();
			
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
			
			Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
				СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
			Иначе	
				ПерейтиКВыполнениюСледующегоСценария();
			КонецЕсли;	 

			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НадоОбновитьСтатусШага Тогда
		Если ТекИД_ШагаВМассиве >= 0 Тогда
			
			Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			ИДСтрокиШага                       = ТекШаг.СтрокаШага;
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			
			СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
			СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
			
			СтрокаШага.Статус = ""Success"";
			СтрокаШага.ТипКартинки = 4;
			
			РезультатПрохожденияТестовСценария.Вставить(""НомерСтрокиВФиче"", СтрокаСценария.НомерСтрокиВФиче);
			
			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
			РезультатПрохожденияШага.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияШага.Вставить(""Статус"", СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить(""НомерСтрокиВФиче"", СтрокаШага.НомерСтрокиВФиче);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТекИД_ШагаВМассиве = -1 Тогда
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	ИначеЕсли 	ТекИД_ШагаВМассиве = ТекИД_ВыполненногоШагаВМассиве Тогда // это надо т.к. в определенных случаях таймер, подключающий следующий шаг может не сработать
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	КонецЕсли;	 
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	Если ИдСледующегоШага <> Неопределено Тогда
		Если ИдСледующегоШага.ИД <> Неопределено Тогда
			// значит явно указано с какого шага надо продолжить
			Если ИдСледующегоШага.ИскатьПоИдСтроки Тогда
				НашлиШаг = Ложь;
				Для Ккк = ТекИД_ШагаВМассиве - 1 По Шаги.Количество() - 1 Цикл
					
					Если ИдСледующегоШага.ИД = Шаги[Ккк].СтрокаШага Тогда
						// нашли нужный ИД
						ТекИД_ШагаВМассиве = Ккк;
						НашлиШаг           = Истина;
						Прервать;
					КонецЕсли;	 
					
					Если ИдСледующегоШага.ИД < Шаги[Ккк].СтрокаШага Тогда
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	
				
				
				Если Не НашлиШаг Тогда
					Пока Истина Цикл
						ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве - 1;
						Если ТекИД_ШагаВМассиве < 0 Тогда
							Прервать;
						КонецЕсли;	 
						
						Если ИдСледующегоШага.ИД = Шаги[ТекИД_ШагаВМассиве].СтрокаШага Тогда
							// нашли нужный ИД
							НашлиШаг           = Истина;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;	
				КонецЕсли;	 
				
				Если Не НашлиШаг Тогда
					ВызватьИсключение Локализовать(""Не смог определить следующий шаг для выполнения."");
				КонецЕсли;	 
				
			Иначе
				ТекИД_ШагаВМассиве = ИдСледующегоШага.ИД;
			КонецЕсли;	 
		ИначеЕсли (ТекИД_ШагаВМассиве-1 >= 0) И Шаги[ТекИД_ШагаВМассиве-1].ЭтоШагКонтекста Тогда
			Для Ккк = ТекИД_ШагаВМассиве По Шаги.Количество() - 1 Цикл
				Если НЕ Шаги[Ккк].ЭтоШагКонтекста Тогда
					ТекИД_ШагаВМассиве = Ккк;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		Иначе
			// Это значит, что далее некуда переходить
			// поэтому ставим ТекИД_ШагаВМассиве таким, чтобы сработало правило, что выполнены все шаги
			ТекИД_ШагаВМассиве = Шаги.Количество();
		КонецЕсли;	 
	КонецЕсли;	 
			
	Если (Шаги.Количество() - 1) < ТекИД_ШагаВМассиве Тогда
		// значит все шаги выполнены, запускаем следующий сценарий
		
		ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		
		БылаОшибка     = Ложь;
		ОписаниеОшибки = """";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
		
		Если БылаОшибка Тогда
			ИДСтрокиСценария      = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			СтрокаСценария        = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
			ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария,ИДСтрокиСценария,Истина);
		КонецЕсли;	 		
		
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить(""НомерСтрокиВФиче"", СтрокаСценария.НомерСтрокиВФиче);
		ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
		
		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;		
			СтрокаСценария.Статус  = ""Failed"";
			РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = Локализовать(""Failed: %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
		КонецЕсли;
		
		ОстановитьЗаписьВидеоОдногоШага();
		
		Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
			АктивизироватьСтрокуДереваТекущегоШага(ТекИД_ШагаВМассиве-1);
		КонецЕсли;	 
		
		Если СтрокаСценария.Статус = ""Failed"" И Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(""ПередОкончаниемСценария"", СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
		Возврат;
	КонецЕсли;
	
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		// логируем выполненный шаг
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
				
		Если НЕ ТекШаг.ЭтоШагКонтекста Тогда
			// Тут надо сделать запись одного шага, плюс записать для каждого шага файл параметров: ИД, строка субтитров, файлTTS
			// если есть
			
			НадоОстановитьЗаписьЭтогоШагаИНачатьСледующий = Истина;
			Если ТекШаг.Свойство(""ВнутриГруппыКотораяРаботаетКакОдинШаг"") Тогда
				Если ТекШаг.ВнутриГруппыКотораяРаботаетКакОдинШаг Тогда
					НадоОстановитьЗаписьЭтогоШагаИНачатьСледующий = Ложь;
					
					Если ТекШаг.ПервыйВГруппеШагов Тогда
						НадоОстановитьЗаписьЭтогоШагаИНачатьСледующий = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НадоОстановитьЗаписьЭтогоШагаИНачатьСледующий Тогда
				ОстановитьЗаписьВидеоОдногоШага();
				НачатьЗаписьВидеоОдногоШага(ТекИД_СценарияВМассиве, ТекИД_ШагаВМассиве, ТекШаг);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ВыполнятьШагиАссинхронно Тогда
		АктивизироватьСтрокуДереваТекущегоШага();
	КонецЕсли;	 
	
	ИнтервалДляВыполненияШага = Объект.ИнтервалВыполненияШага;
	Если Объект.ИдетЗаписьВидео Тогда
		Если ЭтоПрерывающйВидеоШаг(ТекШаг) Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;	 
		
		Если ТекШаг.ЭтоШагКонтекста Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;	 
		
		Если МассивTTS <> Неопределено Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОбработкаПрерыванияПользователя();
	
	Если (ВыполнитьШагЧерезТаймер = Истина) Тогда
		ПодключитьОбработчикОжидания(""ВыполнитьШаг"", ИнтервалДляВыполненияШага, Истина); // вызываем шаг через таймер, чтобы дать всем формам обновиться
	ИначеЕсли (НЕ Объект.ВыполнятьШагиАссинхронно) И (СчетчикШаговБезТаймера >= МаксСчетчикШаговБезТаймера) Тогда 
		АктивизироватьСтрокуДереваТекущегоШага();
		СчетчикШаговБезТаймера = 1;
		ПодключитьОбработчикОжидания(""ВыполнитьШаг"", ИнтервалДляВыполненияШага, Истина); // вызываем шаг через таймер, чтобы дать всем формам обновиться
	ИначеЕсли (НЕ Объект.ВыполнятьШагиАссинхронно) Тогда 
		СчетчикШаговБезТаймера = СчетчикШаговБезТаймера + 1;
		ВыполнитьШаг(); // просто вызываем следующий шаг
	Иначе
		ПодключитьОбработчикОжидания(""ВыполнитьШаг"", ИнтервалДляВыполненияШага, Истина); // вызываем шаг через таймер, чтобы дать всем формам обновиться
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги, ТекИД, РезультатПрохожденияТестовШагов)
	Ид = ТекИД;
	Пока Истина Цикл
		Ид = Ид + 1;
		Если Шаги.Количество() < (Ид + 1) Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекШаг = Шаги[Ид];
		
		РезультатПрохожденияШага = Новый Структура;
		РезультатПрохожденияШага.Вставить(""Имя"", ТекШаг.Имя);
		РезультатПрохожденияШага.Вставить(""ВремяНачала"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить(""ОписаниеОшибки"", ""Пропущен"");
		РезультатПрохожденияШага.Вставить(""Статус"", ""Skipped"");
		РезультатПрохожденияШага.Вставить(""ИДСтроки"", ТекШаг.СтрокаШага);
		РезультатПрохожденияШага.Вставить(""ЭтоШагКонтекста"", ТекШаг.ЭтоШагКонтекста);
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева)
	Если СтрокаДерева.Тип = ""Фича"" Тогда
		Возврат СтрокаДерева.ПолныйПуть;
	КонецЕсли;	 
	
	Возврат ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева.ПолучитьРодителя());
КонецФункции	

&НаКлиенте
Функция ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета)
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		// Скорее всего это обработка не содержащая в себе тесты.
		Возврат Неопределено;
	Иначе
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);
			ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ОбработкаТеста;
КонецФункции	

&НаКлиенте
Процедура ВызватьМетодСценарияЕслиОнЕсть(СтрокаДереваСценария, ИмяПроцедуры, МассивПараметров = Неопределено,
	          БылаОшибка = Ложь, ОписаниеОшибки = Неопределено,СлужебныеДанныеСценария = Неопределено)
			  
			  
	ИмяФичаФайла = Неопределено;
	Если СлужебныеДанныеСценария <> Неопределено Тогда
		СлужебныеДанныеСценария.Свойство(""ИмяФичаФайла"",ИмяФичаФайла);
	КонецЕсли;	 		  
	
	Если ИмяФичаФайла = Неопределено Тогда
		ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДереваСценария);
		Если ИмяФичаФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	
	Если СлужебныеДанныеСценария <> Неопределено Тогда
		СлужебныеДанныеСценария.Вставить(""ИмяФичаФайла"",ИмяФичаФайла);
	КонецЕсли;	 
	
	ИДМассивИменКонтекстовОбработок = Неопределено;
	
	Файл         = Новый Файл(ИмяФичаФайла);
	КаталогФичи  = Файл.Путь;
	АдресСнипета = ДополнитьСлешВПуть(КаталогФичи) + ДополнитьСлешВПуть(""step_definitions"") + Файл.ИмяБезРасширения + "".epf"";
	АдресСнипета = УниверсальноеПолноеИмяФайла(АдресСнипета);
	ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));

	Если ИДМассивИменКонтекстовОбработок = Неопределено И Объект.ВерсияПоставки = ""single""  Тогда
		Файл = Новый Файл(ИмяФичаФайла); 
		ИмяФормыОбработки  = ""Тест_"" + Файл.ИмяБезРасширения;
		АдресСнипета = ""ВнешняяОбработка.VanessaAutomationsingle.Форма."" + ИмяФормыОбработки;
		ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	Если ИДМассивИменКонтекстовОбработок = Неопределено Тогда //значит у фичи нет своей epf
		Возврат;
	КонецЕсли;	 
	
	ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
	Если ОбработкаТеста = Неопределено Тогда
		// Это возможно, если у фичи вообще нет своей обработки и она использует только шаги из других фич
		Возврат;
	КонецЕсли;  
	
	
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	
	Попытка
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	Исключение
		ТекстСообщения = Локализовать(""Ошибка в %1. %2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяПроцедуры);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
		БылаОшибка     = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	ОбъектКонтекст            = ОбработкаТеста.Контекст;
	ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтметкуВремениДляИмениФайла()
	ТекДат     = Формат(ТекущаяДата(),""ДФ=yyyyMMdd"");
	ТекМилиСек = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Стр = ТекДат + ""_"" + ТекМилиСек;
	
	Стр = СтрЗаменить(Стр,""."","""");
	Стр = СтрЗаменить(Стр,"","","""");
	Стр = СтрЗаменить(Стр,"":"","""");
	Стр = СтрЗаменить(Стр,""/"","""");
	Стр = СтрЗаменить(Стр,""\"","""");
	Стр = СтрЗаменить(Стр,Символы.НПП,"""");
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииHTML()
		
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;	
	
	КаталогВыгрузкиИнструкцийHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML);
	
	//ФайлПроверкаСуществования = Новый Файл(Объект.КаталогOutputИнструкцияHTML);
	//Если НЕ ФайлПроверкаСуществования.Существует() Тогда
	Если НЕ ФайлСуществуетКомандаСистемы(КаталогВыгрузкиИнструкцийHTML) Тогда 
		ТекстСообщения = Локализовать(""Файл КаталогВыгрузкиИнструкцияHTML: %1 не существует."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", КаталогВыгрузкиИнструкцийHTML);
		СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Найти(Прав(КаталогВыгрузкиИнструкцийHTML, 1), ""\/"") > 0 Тогда
		КаталогВыгрузкиИнструкцийHTML = Сред(КаталогВыгрузкиИнструкцийHTML, СтрДлина(КаталогВыгрузкиИнструкцийHTML) - 1);
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяФичаИнструкцииHTML <> МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи Тогда
		Если ТекущаяФичаИнструкцииHTML <> """" Тогда
			СоздатьФайлHTMLИнструкции();
		КонецЕсли;  
		ТекущаяФичаИнструкцииHTML = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи;
	Иначе
		Возврат;
	КонецЕсли;  
	
	ИмяФайлаЛогаИнструкцииHTML = СтрЗаменить(ДополнитьСлешВПуть(КаталогВыгрузкиИнструкцийHTML) + ""InstrHTML_"" + ТекущаяФичаИнструкцииHTML + ""_"" +  ПолучитьОтметкуВремениДляИмениФайла() + ""_log.txt"", Символы.НПП, """");
	
	ТД = Новый ТекстовыйДокумент;
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
	Для каждого ТекстСообщения Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(ТекстСообщения);
	КонецЦикла;
	ТД.ЗаписатьСтроку(""--окончание заголовка--"");
	ТД.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьЗаголовокФичи(ИмяФайла)
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, ""UTF-8"");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СокрЛП(Стр) = """" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СокрЛП(Стр);
		
		Если Лев(Стр, 1) = ""@"" Тогда
			Продолжить;
		КонецЕсли;	 
		Если Лев(Стр, 1) = ""#"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(НРег(Стр), ""сценарий:"") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), ""контекст:"") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), ""scenario:"") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), ""background:"") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииMarkdown()
		
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	
	
	КаталогВыгрузкиИнструкцийMarkdown = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийMarkdown);
	
	Если НЕ ФайлСуществуетКомандаСистемы(КаталогВыгрузкиИнструкцийMarkdown) Тогда 
		ТекстСообщения = ""Файл КаталогВыгрузкиИнструкцияMarkdown: %1 не существует."";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", КаталогВыгрузкиИнструкцийMarkdown); 
		СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Найти(Прав(КаталогВыгрузкиИнструкцийMarkdown, 1), ""\/"") > 0 Тогда
		КаталогВыгрузкиИнструкцийMarkdown = Сред(КаталогВыгрузкиИнструкцийMarkdown, СтрДлина(КаталогВыгрузкиИнструкцийMarkdown) - 1);
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяФичаИнструкцииMarkdown <> МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи Тогда
		Если ТекущаяФичаИнструкцииMarkdown <> """" Тогда
			СоздатьФайлMarkdownИнструкции();
		КонецЕсли;  
		ТекущаяФичаИнструкцииMarkdown = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи;
	Иначе
		Возврат;
	КонецЕсли;  
	
	ИмяФайлаЛогаИнструкцииMarkdown = СтрЗаменить(ДополнитьСлешВПуть(КаталогВыгрузкиИнструкцийMarkdown) + ""InstrMarkdown_"" + ТекущаяФичаИнструкцииMarkdown + ""_"" + ПолучитьОтметкуВремениДляИмениФайла() + ""_log.txt"", Символы.НПП, """");
	
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);
	Для каждого ТекстСообщения Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(ТекстСообщения);
	КонецЦикла;
	ТД.ЗаписатьСтроку(""--окончание заголовка--"");
	ТД.Закрыть();
	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетАллюрСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	
	ТзнДанныеАллюрМеток = РеквизитФормыВЗначение(""ДанныеАллюрМеток"");
	СтруктураОФ.вставить(""ДанныеАллюрМеток"",ТзнДанныеАллюрМеток);
	
	ОбъектСервер.СформироватьОтчетАллюр(СтруктураОФ);
	
	СтруктураОФ.Удалить(""ДанныеАллюрМеток"");
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетjUnitСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	ОбъектСервер.СформироватьОтчетjUnit(СтруктураОФ);
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетCucumberJsonСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	ОбъектСервер.СформироватьОтчетCucumberJson(СтруктураОФ);
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетСППРСервер(СтруктураДанных)

	Объект().СформироватьОтчетСППР(СтруктураДанных);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСтатусВыполненияСценариевВФайл(Статус, ПутьКФайлу)
	Если НЕ Объект.ВыгружатьСтатусВыполненияСценариевВФайл Тогда
		Возврат;
	КонецЕсли;	 
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Если Файл.ЭтоКаталог() Тогда
				СообщитьПользователю(""Не могу выгрузить статус сценариев, т.к. был передан каталог, а не файл."");
				Возврат;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	ФайлКаталог = Новый Файл(Файл.Путь);
	Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталог.ПолноеИмя) Тогда
		ТекстСообщения = Локализовать(""Не могу выгрузить статус сценариев, т.к. каталог %1 не существует."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ФайлКаталог.ПолноеИмя); 
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	УдалитьФайлыКомандаСистемы(ПутьКФайлу);
	
	ЗТ = Новый ЗаписьТекста(ПутьКФайлу, ""UTF-8"", , Ложь); 
	Если Статус Тогда
		Стр = ""0"";
	Иначе	
		Если ВозниклаОшибкаВШагеКонтекста ИЛИ ВозниклаОшибкаПодключенияTestClient 
		 ИЛИ ВозниклаОшибкаОшибкаСетевогоВзаимодействия Тогда
			Стр = ""2"";
		Иначе
			Стр = ""1"";
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗТ.Записать(Стр); 
	
	ЗТ.Закрыть();
	
	ТекстСообщения = Локализовать(""Записал файл статуса билда: %1"");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ПутьКФайлу); 
	СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьTestClientЕслиОнПодключен()
	Попытка
		ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
	Исключение
		
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Функция ПолучитьИмяФичиИзПолногоПути(Знач Стр)
	Длина = СтрДлина(Стр);
	Поз   = Длина + 1;
	
	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр, Длина - Ккк + 1, 1);
		Если Символ = "":"" Тогда
			Поз = Длина - Ккк + 1;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	НовСтр = Лев(Стр, Поз - 1);
	
	Возврат СокрЛП(НовСтр);
КонецФункции	

&НаКлиенте
Функция ДобавитьНулей(Парам,КоличествоСимволов)
	Стр = СтрЗаменить(Формат(Парам, ""ЧГ=; ЧН=0""),Символы.НПП,"""");
	
	Пока СтрДлина(Стр) < КоличествоСимволов Цикл
		Стр = ""0"" + Стр;
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Функция НайтиМакетВКаталогеПроектаСлужебный(ИмяМакета,ИмяФайла)
	Нашли = Ложь;
	
	СостояниеVanessaBehavior = ПолучитьСостояниеVanessaAutomation();
	ИдСценария               = СостояниеVanessaBehavior.ТекущийСценарий.ИдСценария;
	
	КаталогСценария = ДобавитьНулей(ИдСценария+1,4);
	ДопКаталог      = """";
	Если ФайлСуществуетКомандаСистемы(Объект.КаталогПроекта + ""\Файлы\"" + КаталогСценария) Тогда
		ДопКаталог = КаталогСценария;
	КонецЕсли;	 
	
	Если Не Нашли Тогда
		ИмяФайла = Объект.КаталогПроекта + ""\Файлы\"" + ?(ДопКаталог = """","""",ДопКаталог + ""\"") + ИмяМакета;
		Если Прав(НРег(ИмяФайла),4) <> "".mxl"" Тогда
			ИмяФайла = ИмяФайла + "".mxl"";
		КонецЕсли;	 
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Нашли = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не Нашли Тогда
		ИмяФайла = Объект.КаталогПроекта + ""\"" + ИмяМакета;
		Если Прав(НРег(ИмяФайла),4) <> "".mxl"" Тогда
			ИмяФайла = ИмяФайла + "".mxl"";
		КонецЕсли;	 
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Нашли = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ Нашли Тогда
		Если ФайлСуществуетКомандаСистемы(Объект.КаталогПроекта) Тогда
			ИмяФайла = ИмяМакета;
			Если Прав(НРег(ИмяФайла),4) <> "".mxl"" Тогда
				ИмяФайла = ИмяФайла + "".mxl"";
			КонецЕсли;	 
			
			СписокКаталогов = Новый СписокЗначений;
			СписокФайлов    = Новый СписокЗначений;
			НайтиФайлыКомандаСистемы(Объект.КаталогПроекта, СписокКаталогов, СписокФайлов, Истина, ИмяФайла);
			
			Если СписокФайлов.Количество() > 0 Тогда
				ИмяФайла = СписокФайлов[0].Значение.ПолноеИмя;
				Нашли = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Нашли;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументНаСервере(АдресВременногоХранилища)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""mxl"");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МаксКолПопыток = 10;
	
	Для КолПопыток = 1 По МаксКолПопыток Цикл
		Попытка
			ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
			Прервать;
		Исключение
			SleepOnServer(1);
		КонецПопытки;
	КонецЦикла;	
	
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат ТабличныйДокумент;
КонецФункции

&НаКлиенте
Функция ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФайлаФичи)
	ФайлФичи  = Новый Файл(ИмяФайлаФичи);
	ФайлEPF   = ФайлФичи.Путь + ""step_definitions"" + ?(ЭтоLinux, ""/"", ""\"") + ФайлФичи.ИмяБезРасширения + "".epf"";
	ФайлEPF   = УниверсальноеПолноеИмяФайла(ФайлEPF);
	ИД        = МассивИменКонтекстовОбработок.Найти(Нрег(ФайлEPF));
	Обработка = ТаблицаКонтекстовОбработок[ИД].Обработка;
	
	Если Обработка = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(ФайлEPF);
		Обработка = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;	 
	
	Возврат Обработка;
КонецФункции

&НаКлиенте
Процедура ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария,ИД,ОбновитьБезПроверки = Ложь)
	Если ОбновитьБезПроверки ИЛИ СтрокаСценария.ПолучитьРодителя() = Неопределено Тогда
		// значит надо обновить кеш строк дерева
		МассивСтрокДереваДанныеФормы.Очистить();
		Если Не Объект.РежимВыполненияОдногоШага Тогда
			ЗапомнитьСтрокиДереваДанныеФормы();
			СтрокаСценария = МассивСтрокДереваДанныеФормы[ИД];
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуДереваПоДаннымПоиска(ДанныеПоиска)
	ТекИдМассива   = -1;
	ЭлементыДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	НужныйЭлемент  = Неопределено;
	Пока Истина Цикл
		ТекИдМассива   = ТекИдМассива + 1;
		
		Если ТекИдМассива > (ДанныеПоиска.Количество()-1) Тогда
			Прервать;
		КонецЕсли;	 
		
		НужныйИдСтроки = ДанныеПоиска[ТекИдМассива]; 
		
		Нашли = Ложь;
		Для Каждого Элем Из ЭлементыДерева Цикл
			Если Элем.ИдСтроки = НужныйИдСтроки Тогда
				НужныйЭлемент  = Элем;
				ЭлементыДерева = Элем.ПолучитьЭлементы();
				Нашли          = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если Не Нашли Тогда
			ВызватьИсключение Локализовать(""Не найден элемент дерева по данным поиска"");
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат НужныйЭлемент;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуСценарияИзДанныхФормы(ИД)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиСценария);
	КонецЕсли;	 
	
	Возврат МассивСтрокДереваДанныеФормы[ИД];
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуШагаИзДанныхФормы(ИД)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиШага);
	КонецЕсли;	 
	
	Возврат МассивСтрокДереваДанныеФормы[ИД];
КонецФункции	

&НаКлиенте
Процедура ВыполнитьСценарийАссинхронноТаймер()
	
	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	
	Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;
	КонецЕсли;	 
	
	Если ТекИД_СценарияВМассиве > 0 Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве - 1);
	КонецЕсли;
	
	ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Ложь;
	Если НЕ Объект.РежимВыполненияОдногоШага Тогда
		ЗафиксированнаяФормаTestClient = Неопределено;
	КонецЕсли;	  
	ГлобальныеЗначенияТаблиц = Новый Структура;
	
	ОшибкиСценарияПереданныеИзвне = Новый Массив;
	
	// сбросим возможные кеши TestClient
	ОчиститьКешАктивнойТаблицыTestClient();
	ЗафиксироватьФормуTestClient(Неопределено);
	
	Если ПрекратитьВыполнениеВсехСценариев ИЛИ ((МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве) Тогда
		// значит все сценарии выполнены
		
		Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
			// Значит не было сценариев для выполнения.
			СтатусЗапускаСценариев = Ложь;
		КонецЕсли;	 
		
		Объект.ИдетВыполнениеСценариев = Ложь;
		ОбновитьСтатусыКнопокСценариев();
		
        ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
		СоздатьФайлHTMLИнструкции();
		СоздатьФайлMarkdownИнструкции();
		ЗавершитьЗаписьВидео();
		ОстановитьSikuliXСервер();
		
		СделатьСообщениеВсеСценарииОбработаны();
		Если Объект.ДелатьОтчетВФорматеАллюр Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить(""МассивРезультатПрохожденияТестовСценария"", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить(""МассивИДСтрокиДерева"", МассивИДСтрокиДерева);
			
			
			Если Объект.ВерсияПоставки = ""single"" Тогда
				ДвоичныеДанные = Неопределено;
			Иначе	
				ДвоичныеДанные = Новый ДвоичныеДанные(Объект.КаталогИнструментов + ""/vendor/allure-framework/allure.xsd"");
			КонецЕсли;	 
			СтруктураОФ.Вставить(""СхемаAllure"", ДвоичныеДанные);
			СтруктураОФ.Вставить(""ЕстьПоддержкаАсинхронныхВызовов"", ЕстьПоддержкаАсинхронныхВызовов);
			
			СформироватьОтчетАллюрСервер(СтруктураОФ);
			
			Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
				Для каждого РезультатПрохожденияТестовСценария Из МассивРезультатПрохожденияТестовСценария Цикл
					Если Не РезультатПрохожденияТестовСценария.Свойство(""МассивСкриншотов"") Тогда
						Продолжить;
					КонецЕсли;	 
					
					Для каждого СтруктураСкриншот Из РезультатПрохожденияТестовСценария.МассивСкриншотов Цикл
						ВременныйФайл = ПолучитьИмяВременногоФайла(""png"");
						СтруктураСкриншот.ДвоичныеДанные.Записать(ВременныйФайл);
						КопироватьФайлКомандаСистемы(ВременныйФайл, ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиAllure)) + СтруктураСкриншот.ИмяФайла);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;	 
			
			Если СтруктураОФ.Свойство(""МассивXMLОтчетаAllure"") Тогда 
				МассивXMLОтчетаAllure = СтруктураОФ.МассивXMLОтчетаAllure;
				Для каждого Элем Из МассивXMLОтчетаAllure Цикл
					ИмяФайлаXML           = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиAllure)) + Элем.РеальноеИмяФайла;
					ФайлXMLДвоичныеДанные = Элем.ФайлXMLДвоичныеДанные;
					ФайлXMLДвоичныеДанные.Записать(ИмяФайлаXML);
					
					ТекстСообщения = Локализовать(""Файл отчета Allure-report (%1) записан."");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайлаXML); 
					СообщитьПользователю(ТекстСообщения);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 	
		
		Если Объект.ДелатьОтчетВФорматеjUnit Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить(""МассивРезультатПрохожденияТестовСценария"", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить(""МассивИДСтрокиДерева"", МассивИДСтрокиДерева);
			СтруктураОФ.Вставить(""ЕстьПоддержкаАсинхронныхВызовов"", ЕстьПоддержкаАсинхронныхВызовов);
			СтруктураОФ.Вставить(""ЭтоОФ"", Ложь);
			СтруктураОФ.Вставить(""СтрокаТехническиеДанные"", Локализовать(""Технические данные:""));
			
			
			СформироватьОтчетjUnitСервер(СтруктураОФ);
			
			Если Объект.ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ИмяСборки = Объект.ИмяТекущейСборки;
				ИмяСборки = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
				ИмяФайлаXML = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиJUnit))
				    + Лев(ИмяСборки,40) + ""-junit.xml"";
			Иначе	
				ИмяФайлаXML = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиjUnit))
				    + ""junit.xml"";
			КонецЕсли;	 
			
			СтруктураОФ.xml.Записать(ИмяФайлаXML);
			ТекстСообщения = Локализовать(""Файл отчета jUnit-report (%1) записан."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайлаXML); 
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
				
		Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить(""МассивРезультатПрохожденияТестовСценария"", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить(""МассивИДСтрокиДерева"", МассивИДСтрокиДерева);
			СтруктураОФ.Вставить(""ЕстьПоддержкаАсинхронныхВызовов"", ЕстьПоддержкаАсинхронныхВызовов);
			СтруктураОФ.Вставить(""ЭтоОФ"", Ложь);
						
			СформироватьОтчетCucumberJsonСервер(СтруктураОФ);
			
			Если Объект.ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ИмяСборки = Объект.ИмяТекущейСборки;
				ИмяСборки = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
				ИмяФайлаJson = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиCucumberJson))
				    + Лев(ИмяСборки,40) + ""-CucumberJson.json"";
			Иначе	
				ИмяФайлаJson = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиCucumberJson))
				    + ""CucumberJson.json"";
			КонецЕсли;	 
			
			СтруктураОФ.json.Записать(ИмяФайлаJson);
			ТекстСообщения = Локализовать(""Файл отчета CucumberJson-report (%1) записан."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайлаJson); 
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		
		Если Объект.ДелатьОтчетВФорматеСППР Тогда
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить(""МассивРезультатПрохожденияТестовСценария"", МассивРезультатПрохожденияТестовСценария);
			СтруктураДанных.Вставить(""МассивИДСтрокиДерева"", МассивИДСтрокиДерева);
			СтруктураДанных.Вставить(""МассивДанныхОшибок"", Новый Массив);
			
			СформироватьОтчетСППРСервер(СтруктураДанных);
			
			Для Каждого ДанныеОшибки Из СтруктураДанных.МассивДанныхОшибок Цикл
				ТекстовыйДокументОшибка = Новый ТекстовыйДокумент;
				ТекстовыйДокументОшибка.УстановитьТекст(ДанныеОшибки.ТекстОшибкиXML);
					
				ИмяXML = ""BDD_Error_%1_%2.xml"";
				ИмяXML = СтрЗаменить(ИмяXML,""%1"",Формат(ТекущаяДата(), ""ДФ=yyyyMMddHHmmss""));
				ИмяXML = СтрЗаменить(ИмяXML,""%2"",Строка(Новый УникальныйИдентификатор()));
					
				ИмяФайлаОшибки = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиСППР))+ ИмяXML;
					
				ТекстовыйДокументОшибка.Записать(ИмяФайлаОшибки);	
			КонецЦикла;	 
			
		КонецЕсли;
		
		Если Объект.ДелатьОтчетВоВнутреннемФормате Тогда
			// Сформируем отчет для показа пользователю. 
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить(""МассивРезультатПрохожденияТестовСценария"", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить(""МассивИДСтрокиДерева"", МассивИДСтрокиДерева);
			
			Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
				ТабличныйДокумент = СформироватьОтчетВоВнутреннемФормате(СтруктураОФ);
				ТабличныйДокумент.Показать();
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если Объект.ВыгружатьСтатусВыполненияСценариевВФайл Тогда
			ВыгрузитьСтатусВыполненияСценариевВФайл(СтатусЗапускаСценариев, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев));
		КонецЕсли;	 
		
		Если Объект.ЗакрытьTestClientПослеЗапускаСценариев Тогда
			// закроем все TestClient которые были запущены
			Для каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
				Попытка
					Шаг(""И я закрываю TestClient """""" + СтрокаДанныеКлиентовТестирования.Имя + """""""");
				Исключение
					// Если не получилось закрыть TestClient, это ещё не означает, что есть ошибка
					// возможно он был закрыт штатно в сценарии
					СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;			
			
		КонецЕсли;	 
		
		
		Если Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
			ПрекратитьРаботуСистемы();
		КонецЕсли;	 
		
		УстановитьФлагиВыполненияСценариев();

		Возврат;
	КонецЕсли;	 
	
	Если ОбъектКонтекст = Неопределено Тогда
		ОбъектКонтекст = Новый Структура;
	ИначеЕсли НЕ Объект.РежимВыполненияОдногоШага 
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
		ОбъектКонтекст = Новый Структура;
	КонецЕсли;	 
		
	ПодготовитьСозданиеИнструкцииHTML();
	ПодготовитьСозданиеИнструкцииMarkdown();
	
	ИДСтроки = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	
	РезультатПрохожденияТестовСценария = Новый Структура;
	РезультатПрохожденияТестовСценария.Вставить(""ИДСтроки"", ИДСтроки);
	РезультатПрохожденияТестовСценария.Вставить(""ВремяНачала"", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовШагов = Новый Массив;
	РезультатПрохожденияТестовСценария.Вставить(""РезультатПрохожденияТестовШагов"", РезультатПрохожденияТестовШагов);
	
	ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария, ИДСтроки);
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария);
			
	Если Не Объект.РежимВыполненияОдногоШага Тогда
		Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаСценария.ПолучитьИдентификатор();
		КонецЕсли;	 
	КонецЕсли;	 
	
	РезультатПрохожденияТестовСценария.Вставить(""НомерСтрокиВФиче"", СтрокаСценария.НомерСтрокиВФиче);
	
	ОбработкаСвязаннаяСИсполняемойФичей = Неопределено;
	
	Если СтрокаСценария.ФичаИмеетСвоюEPF Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
		ОбработкаСвязаннаяСИсполняемойФичей = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(СтрокаФичи.ПолныйПуть);
	КонецЕсли; 
		
	Если НЕ Объект.РежимВыполненияОдногоШага Тогда
		//Сообщить(ПолучитьТекстСообщенияПользователю("" ""));
		СообщитьПользователю(Локализовать(""Работаю по сценарию"") + "": "" + МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;	 
	
	ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаСценария);
	Если НЕ СравнитьПутиФайлов(ТекущийИсполняемыйФичаФайл,ИмяФичаФайла) Тогда
		ТекущийИсполняемыйФичаФайл = ИмяФичаФайла;
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ТекстСообщения = Локализовать(""Фича: %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекущийИсполняемыйФичаФайл);
			ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			Если МассивСценариевДляВыполнения.Количество() > 0 Тогда
				Процент=Цел(ТекИД_СценарияВМассиве/МассивСценариевДляВыполнения.Количество() * 100);
				ТекстСообщения = Формат(Процент,""ЧЦ=3; ЧДЦ=0; ЧН="") + ""% ""; 
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;

		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		ЗаписатьЛогВТекстПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;	 
		
	ДобавитьВЛогИнструкцииHTMLНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	ДобавитьВЛогИнструкцииMarkdownНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
		
	ТекИД_ШагаВМассиве             = -1;
	ТекИД_ВыполненногоШагаВМассиве = -1;
	ВсёЕщёИдётВыполнениеШагов      = 0;
	ОшибкаAssert            = Ложь;
	Объект.АдресДанныеОбОшибке = Неопределено;
		
	Если ТекИД_СценарияВМассиве = 0 Тогда
		Если Объект.РежимВыполненияДанногоСценарияСТекущегоШага ИЛИ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
			Ном = -1;
			Для Каждого Шаг Из МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги Цикл
				Ном = Ном + 1;
				Если Шаг.СтрокаШага = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
					ТекИД_ШагаВМассиве = Ном;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			// тогда надо начать не с первого шага, а с нужного
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ФичаИмеетСвоюEPF И
		НЕ МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПолучитьПутьК_EPF_Фичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче));
		МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена = Истина;
		
		ДопПараметрыПодключения = Новый Структура;
		ДопПараметрыПодключения.Вставить(""ИмяОбработчика"",""ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария"");
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(МассивФайлов,Неопределено,ДопПараметрыПодключения);
		Возврат;
	КонецЕсли;	 	
	
	ВыполнитьСценарийАссинхронноТаймерПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарийАссинхронноТаймерПродолжение()
	БылаОшибка = Ложь;
	ОписаниеОшибки = """";
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если НЕ Объект.РежимВыполненияОдногоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда 
		// Если надо выполнить ПередНачаломСценария и при этом сделать отладку по шагам - надо поставить брейкпоинт на первом
		// шаге сценария
		СлужебныеДанныеСценария = Новый Структура;
		ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, ""ПередНачаломСценария"", , БылаОшибка, ОписаниеОшибки,СлужебныеДанныеСценария);
	КонецЕсли;	 
	
	Если БылаОшибка Тогда
		СтатусЗапускаСценариев = Ложь;		
		
		ИДСтрокиСценария      = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария        = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария,ИДСтрокиСценария,Истина);
		
		СтрокаСценария.Статус = ""Failed"";
		
		ДействияПослеЗавершенияСценария(СтрокаСценария,,,СлужебныеДанныеСценария);
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить(""ВремяОкончания"", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
		ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
		
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ЗаписатьСтрокуВТекстовыйЛог("""");
			ЗаписатьСтрокуВТекстовыйЛог(""Ошибка в процедуре ПередНачаломСценария().""); 
			ТекстСообщения = Локализовать(""Failed: %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки);
			ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
		КонецЕсли;	 
		
		РезультатПрохожденияТестовСценария.Вставить(""НомерСтрокиВФиче"", СтрокаСценария.НомерСтрокиВФиче);
		
		ОстановитьЗаписьВидеоОдногоШага();
		
		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(""ПередНачаломСценария"", СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
		АктивизироватьСтрокуДереваТекущегоШага();
	КонецЕсли;
	
	ПерейтиКВыполнениюСледующегоШага();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;  
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку(""НачалоСценария"");
	ТД.ЗаписатьСтроку(""ИмяСценария="" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку(""ИдСценария="" + Формат(ТекИД_СценарияВМассиве, ""ЧГ=; ЧН=0""));
	ТД.ЗаписатьСтроку(""ИмяФичи="" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;  
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку(""НачалоСценария"");
	ТД.ЗаписатьСтроку(""ИмяСценария="" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку(""ИдСценария="" + Формат(ТекИД_СценарияВМассиве, ""ЧГ=; ЧН=0""));
	ТД.ЗаписатьСтроку(""ИмяФичи="" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария, ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено Тогда
		МассивИДСтрокиДерева.Добавить(ИДСтроки);
		МассивРезультатПрохожденияТестовСценария.Добавить(РезультатПрохожденияТестовСценария);
	Иначе
		МассивРезультатПрохожденияТестовСценария[ИД] = РезультатПрохожденияТестовСценария;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы)
	Для каждого ЭлементДерева Из ДеревоФормы Цикл
		ИДСтроки = ЭлементДерева.ИДСтроки;
		Пока МассивСтрокДереваДанныеФормы.Количество()-1 < ИДСтроки Цикл
			МассивСтрокДереваДанныеФормы.Добавить();
		КонецЦикла;	 
		МассивСтрокДереваДанныеФормы[ИДСтроки] = ЭлементДерева;
		
		ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормы()
	Если Объект.РежимВыполненияОдногоШага Тогда
		// Поиск строки дерева будет происходить по специальной таблице, которая была создана заранее
		Возврат;
	КонецЕсли;	 
	
	ДеревоФормы = Объект.ДеревоТестов.ПолучитьЭлементы();
	ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы);
КонецПроцедуры

&НаСервере
Функция ОпределитьИдСценарияПоСтрокеШага(ИдСтроки, ЭтоПример, ЭтоКонтекст)
	Если ИдСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	
	СтрокаДерева = Дерево.Строки.Найти(ИдСтроки, ""ИдСтроки"", Истина);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТекРодитель = СтрокаДерева.Родитель;
	Пока Истина Цикл
		Если ТекРодитель.ДопТип = ""Контекст"" Тогда
			ЭтоКонтекст = Истина;
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = ""Сценарий"" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = ""Пример"" Тогда
			ЭтоПример = Истина;
			Прервать;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;	
		
	
	Возврат ТекРодитель.ИДСтроки;
КонецФункции	

&НаКлиенте
Функция ОпределитьИдСценарияПоСтрокеШагаКлиент(СтрокаДерева, ЭтоПример, ЭтоКонтекст)
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	ТекРодитель = СтрокаДерева;
	
	Пока Истина Цикл
		Если ТекРодитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если ТекРодитель.ДопТип = ""Контекст"" Тогда
			ЭтоКонтекст = Истина;
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = ""Сценарий"" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = ""Пример"" Тогда
			ЭтоПример = Истина;
			Прервать;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;	
		
	
	Возврат ТекРодитель.ИДСтроки;
КонецФункции	

&НаКлиенте
Процедура ПолучитьМассивСценариевДаннойФичи(Дерево, Массив)
	Для Каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Тип = ""Сценарий"" Тогда
			Массив.Добавить(СтрокаДерева.ИДСтроки);
		КонецЕсли;	 
			
		ПолучитьМассивСценариевДаннойФичи(СтрокаДерева, Массив);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФичу()
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	
	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Массив     = Новый Массив;
	ПолучитьМассивСценариевДаннойФичи(СтрокаФичи, Массив);
	
	ВыполнитьСценарии(Массив);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыКнопокСценариев(ОстановкаВыполнения = Ложь)
	Если ОстановкаВыполнения Тогда
		Элементы.ВыполнитьСценарии.Заголовок = """";
	ИначеЕсли Объект.ИдетВыполнениеСценариев Тогда
		Элементы.ВыполнитьСценарии.Заголовок = Локализовать(""Выполняется..."");
	Иначе                                       
		Элементы.ВыполнитьСценарии.Заголовок = """";
	КонецЕсли;
	
	Если ОстановкаВыполнения Тогда
		Элементы.ОстановитьСценарии.Заголовок = """";
	ИначеЕсли Объект.ОстановитьВыполнениеШагов И НЕ ОстановкаВыполнения Тогда
	    Элементы.ОстановитьСценарии.Заголовок = Локализовать(""Останавливается..."");
	Иначе                                       
		Элементы.ОстановитьСценарии.Заголовок = """";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиПервыйСценарийВДереве()
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Дерево       = ОбъектСервер.ДеревоТестов;
	
	Отбор = Новый Структура;
	Отбор.Вставить(""Тип"", ""Сценарий"");
	
	МассивСтрокДерева = Дерево.Строки.НайтиСтроки(Отбор, Истина);
	Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
		Если СтрокаДерева.ДопТип = ""Контекст"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Возврат СтрокаДерева.ИдСтроки;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция СоздатьДанныеДляПоискаСтрокиШага(СтрокаДерева)
	Массив = Новый Массив;
	
	ТекРодитель = СтрокаДерева;
	Пока ТекРодитель <> Неопределено Цикл
		Массив.Вставить(0,ТекРодитель.ИдСтроки);
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура СоздатьСтруктуруПоискаДляСтрокиДерева(СтрокаДерева)
	СтруктураПоискаСтрокДерева = Новый Структура;
	СтруктураПоискаСтрокДерева.Вставить(""ДанныеПоискаСтрокиШага"",СоздатьДанныеДляПоискаСтрокиШага(СтрокаДерева));
	
	ЭтоПример       = Ложь;
	ЭтоШагКонтекста = Ложь;
	СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева,ЭтоПример,ЭтоШагКонтекста);
	СтруктураПоискаСтрокДерева.Вставить(""ДанныеПоискаСтрокиСценария"",СоздатьДанныеДляПоискаСтрокиШага(СтрокаСценария));
	
	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
	
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить(""Имя"",СтрокаСценария.Имя);
	ДанныеСценария.Вставить(""СтрокаДерева"",СтрокаСценария.ИдСтроки);
	ДанныеСценария.Вставить(""ИмяФичи"",СтрокаФичи.Имя);
	ДанныеСценария.Вставить(""ПолныйПутьКФиче"",СтрокаФичи.ПолныйПуть);
	ДанныеСценария.Вставить(""ФичаИмеетСвоюEPF"", СтрокаФичи.ФичаИмеетСвоюEPF);
	ДанныеСценария.Вставить(""EPFПодключена"", Ложь);
	
	
	Шаги = Новый Массив;
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""УровеньПодсценария"",0);
	ДопПараметры.Вставить(""ЭтоКлиент"",Истина);
	СтруктураШага = ПолучитьСтруктуруШага(СтрокаДерева,СтрокаСценария,СтрокаСценария,ЭтоШагКонтекста, ДопПараметры);
	Шаги.Добавить(СтруктураШага);
	ДанныеСценария.Вставить(""Шаги"",Шаги);
	
	СтруктураПоискаСтрокДерева.Вставить(""ДанныеСценария"",ДанныеСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивСценариевДляВыполненияКлиент(МассивСценариевДляВыполнения)
	СтруктураСценария = Новый Структура;
	СтруктураСценария.Вставить(""Имя"",СтруктураПоискаСтрокДерева.ДанныеСценария.Имя);
	СтруктураСценария.Вставить(""СтрокаДерева"",СтруктураПоискаСтрокДерева.ДанныеСценария.СтрокаДерева);
	СтруктураСценария.Вставить(""ИмяФичи"",СтруктураПоискаСтрокДерева.ДанныеСценария.ИмяФичи);
	СтруктураСценария.Вставить(""ПолныйПутьКФиче"",СтруктураПоискаСтрокДерева.ДанныеСценария.ПолныйПутьКФиче);
	СтруктураСценария.Вставить(""ФичаИмеетСвоюEPF"",СтруктураПоискаСтрокДерева.ДанныеСценария.ФичаИмеетСвоюEPF);
	СтруктураСценария.Вставить(""EPFПодключена"",СтруктураПоискаСтрокДерева.ДанныеСценария.EPFПодключена);
	СтруктураСценария.Вставить(""Шаги"",СтруктураПоискаСтрокДерева.ДанныеСценария.Шаги);
	
	МассивСценариевДляВыполнения.Добавить(СтруктураСценария);
КонецПроцедуры

&НаКлиенте
Функция ЭтуСтрокуМожноИсполнить(СтрокаДерева)
	Если СтрокаДерева.Тип = ""Шаг"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = ""Область"" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Функция ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(СтрокаДерева)
	Если СтрокаДерева.Тип = ""Сценарий"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = ""Шаг"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = ""Область"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = ""ШагСценарий"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Функция ОпределитьИдИсполняемойСтрокиДерева(СтрокаДерева,НужнаяСтрока)
	ТекСтрока = СтрокаДерева;
	
	Если ЭтуСтрокуМожноИсполнить(ТекСтрока) Тогда
		Возврат ТекСтрока.ИдСтроки;
	КонецЕсли;	 
	
	Пока Истина Цикл
		ЭлементыДерева = ТекСтрока.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		ТекСтрока = ЭлементыДерева[0];
		Если ЭтуСтрокуМожноИсполнить(ТекСтрока) Тогда
			НужнаяСтрока = ТекСтрока;
			Возврат ТекСтрока.ИдСтроки;
		КонецЕсли;	 
	КонецЦикла;	
	
КонецФункции	

&НаКлиенте
Функция НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,СтрокаПоиска,НомерСтрокиВФиче,Нашли = Ложь)
	Если НомерСтрокиВФиче = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТекИдМассива = НомерСтрокиВФиче-1-1;
	Пока Истина Цикл
		Если ТекИдМассива < 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Если МассивТекстФичи.Количество()-1 < ТекИдМассива Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивТекстФичи[ТекИдМассива]);
		
		Если Стр = """" Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр,1) <> ""#"" Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = Сред(Стр,2);
		
		Если Лев(НРег(Стр),СтрДлина(СтрокаПоиска)) <> НРег(СтрокаПоиска) Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;	 
		
		// значит нашли нужную строку
		Стр = СокрЛП(Сред(Стр,СтрДлина(СтрокаПоиска)+1));
		Нашли = Истина;
		
		Возврат Стр;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока)
	Стр = """";
	
	НашлиСтрокуДляВычисления = Ложь;
	СтрокаВыражения          = """";
	
	Для Ккк = 1 По СтрДлина(СлужебнаяСтрока) Цикл
		Символ = Сред(СлужебнаяСтрока,Ккк,1);
		Если Символ = ""["" Тогда
			НашлиСтрокуДляВычисления = Истина;
			Продолжить;
		КонецЕсли;	 
		
		Если Символ = ""]"" Тогда
			НашлиСтрокуДляВычисления = Ложь;
			РезультатВыражения = Вычислить(СтрокаВыражения);
			Стр = Стр + РезультатВыражения;
			СтрокаВыражения = """";
			Продолжить;
		КонецЕсли;	 
		
		Если НашлиСтрокуДляВычисления Тогда
			СтрокаВыражения = СтрокаВыражения + Символ;
		Иначе
			Стр = Стр + Символ;
		КонецЕсли;	 
	КонецЦикла;	
	
	СлужебнаяСтрока = Стр;
КонецПроцедуры

&НаКлиенте
Функция ЭтотШагНеНужноИгнорировать(Шаг)
	Если Шаг.МассивКомментариевШага.Найти(""#[autodoc.ignorestep]"") <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Процедура ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(СтрокаДереваГруппа,Параметры,ДопПараметры)
	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();
	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = ""Шаг"" ИЛИ ЭлементГруппы.ДопТип = ""Условие"" ИЛИ ЭлементГруппы.ДопТип = ""Цикл"" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить(""ВнутриГруппыКотораяРаботаетКакОдинШаг"",Истина);
					Шаг.Вставить(""ПервыйВГруппеШагов"",Ложь);
					Шаг.Вставить(""ПоследнийВГруппеШагов"",Ложь);
					
					Если НЕ ДопПараметры.НашлиПервыйШаг И ЭтотШагНеНужноИгнорировать(Шаг) Тогда
						Шаг.Вставить(""ПервыйВГруппеШагов"",Истина);
						Шаг.Вставить(""ТекстИнструкция"",ДопПараметры.ТекстШагаГруппы);
						Шаг.Вставить(""МасштабироватьВВидео"",ДопПараметры.МасштабироватьВВидео);
						ДопПараметры.НашлиПервыйШаг = Истина;
					ИначеЕсли НЕ ДопПараметры.НашлиПервыйШаг Тогда
						Шаг.Вставить(""ИгнорироватьШагВАвтоинструкции"",Истина);
						Шаг.Вставить(""ВнутриГруппыКотораяРаботаетКакОдинШаг"",Ложь);
					КонецЕсли;	 
					
					Если ЭтотШагНеНужноИгнорировать(Шаг) Тогда
						ДопПараметры.ВременныйШаг = Шаг;
					Иначе	
						Шаг.Вставить(""ИгнорироватьШагВАвтоинструкции"",Истина);
						Шаг.Вставить(""ВнутриГруппыКотораяРаботаетКакОдинШаг"",Ложь);
					КонецЕсли;	 
					
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		
		ДопПараметры.Уровень = ДопПараметры.Уровень + 1;
		ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(ЭлементГруппы,Параметры,ДопПараметры);
		ДопПараметры.Уровень = ДопПараметры.Уровень - 1;
	КонецЦикла;	
	
	Если ДопПараметры.Уровень = 0 Тогда
		ДопПараметры.ВременныйШаг.Вставить(""ПоследнийВГруппеШагов"",Истина);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(СтрокаДереваГруппа,Параметры,ДопПараметры)
	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();
	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = ""Шаг"" ИЛИ ЭлементГруппы.ДопТип = ""Условие"" ИЛИ ЭлементГруппы.ДопТип = ""Цикл"" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить(""ИгнорироватьШагВАвтоинструкции"",Истина);
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		
		ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(ЭлементГруппы,Параметры,ДопПараметры);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,Параметры)
	ПредставлениеКвадратнаяСкобкаЛевая  = ""__&КвадратнаяСкобкаЛевая__"";
	ПредставлениеКвадратнаяСкобкаПравая = ""__&КвадратнаяСкобкаПравая__"";
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,""\["",ПредставлениеКвадратнаяСкобкаЛевая);
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,""\]"",ПредставлениеКвадратнаяСкобкаПравая);
	
	Если Параметры.Свойство(""ОбработкаПараметровШага"") Тогда
		Если Параметры.ОбработкаПараметровШага Тогда
			Для Ккк = 1 По Параметры.Шаг.ЗначенияПараметров.Количество() Цикл
				СтрокаЗамены = ""%"" + Формат(Ккк, ""ЧГ=; ЧН=0"");
				СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,СтрокаЗамены,Параметры.Шаг.ЗначенияПараметров[Ккк-1].Значение.Значение);
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.Свойство(""ВычислитьВыражения"") Тогда
		Если Параметры.ВычислитьВыражения Тогда
			ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.Свойство(""СтрокаДереваГруппа"") Тогда
		// Значит этот шаг относится к группе, которая в видео попадёт как один шаг.
		Если (Параметры.Свойство(""ОбработатьГруппыШаговКакОдинШаг"") И Параметры.ОбработатьГруппыШаговКакОдинШаг)
			ИЛИ Объект.ЗаписьВидеоГруппаШаговКакШаг Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить(""Уровень"",0);
			ДопПараметры.Вставить(""НашлиПервыйШаг"",Ложь);
			ДопПараметры.Вставить(""ПоследнийШаг"",Ложь);
			ДопПараметры.Вставить(""ВременныйШаг"",Неопределено);
			ДопПараметры.Вставить(""ТекстШагаГруппы"",СлужебнаяСтрока);
			ДопПараметры.Вставить(""МасштабироватьВВидео"",Ложь);
			Если Параметры.Свойство(""МасштабироватьВВидео"") Тогда
				ДопПараметры.Вставить(""МасштабироватьВВидео"",Параметры.МасштабироватьВВидео);
			КонецЕсли;	 
			ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(Параметры.СтрокаДереваГруппа,Параметры,ДопПараметры);
		КонецЕсли;	 
		
		Если Параметры.Свойство(""ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции"") Тогда
			Если Параметры.ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции Тогда
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить(""Уровень"",0);
				ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(Параметры.СтрокаДереваГруппа,Параметры,ДопПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,ПредставлениеКвадратнаяСкобкаЛевая,""["");	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,ПредставлениеКвадратнаяСкобкаПравая,""]"");	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРодителяВерхнегоУровняДляСтрокиШага(СтрокаШага)
	НайденнаяСтрока = Неопределено;
	ТекРодитель = СтрокаШага;
	Пока Истина Цикл
		РодительШага = ТекРодитель.ПолучитьРодителя();
		Если РодительШага = Неопределено Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = ""Сценарий"" Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = РодительШага;
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	
		
		ТекРодитель = РодительШага;
		НайденнаяСтрока = РодительШага;
	КонецЦикла;	
	
	Возврат НайденнаяСтрока;
КонецФункции	 

&НаКлиенте
Функция ПервыйЭлементРодителяИсключаяСтрокиТаблицыGherkin(ЭлементыРодителя)
	Для Каждого Элем Из ЭлементыРодителя Цикл
		Если Элем.СтрокаПараметровШагаВВидеТаблицы Тогда
			Продолжить;
		КонецЕсли;	 
		Возврат Элем;
	КонецЦикла;	 
	
	Возврат Неопределено;
КонецФункции	  

&НаКлиенте
Функция ЭтотШагСамыйПервыйВГруппеПервогоУровня(СтрокаШага,РодительШага)
	ТекРодитель = СтрокаШага.ПолучитьРодителя();
	ТекСтрокаШага = СтрокаШага;
	Пока Истина Цикл
		ЭлементыРодителя = ТекРодитель.ПолучитьЭлементы();
		ПервыйЭлементРодителя = ПервыйЭлементРодителяИсключаяСтрокиТаблицыGherkin(ЭлементыРодителя);
		Если ПервыйЭлементРодителя = Неопределено Тогда
			ТекстСообщения = Локализовать(""Не получилось определить позицию шага <%1> в группе шагов <%2>."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаШага.Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ТекРодитель.Имя);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Если ЭлементыРодителя.Индекс(ТекСтрокаШага) <> ЭлементыРодителя.Индекс(ПервыйЭлементРодителя) Тогда
			Возврат -1;
		КонецЕсли;	 
		
		ТекСтрокаШага = ТекРодитель;
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
		
		Если ТекРодитель = РодительШага Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат 0;
КонецФункции	 

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивТекстФичи,Шаг,Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	
	РодительШага = ПолучитьРодителяВерхнегоУровняДляСтрокиШага(СтрокаШага);
	
	Если РодительШага = Неопределено Тогда
		ТекстСообщения = Локализовать(""Не получилось определить родителя у шага <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаШага.Имя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если (РодительШага.Тип <> ""Область"") И (РодительШага.Тип <> ""ШагСценарий"") Тогда //только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;	 
	
	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = -1 Тогда
		// надо проверить, что это самый первый шаг в группе первого уровня
		Индекс = ЭтотШагСамыйПервыйВГруппеПервогоУровня(СтрокаШага,РодительШага);
	КонецЕсли;	 
	Если Индекс = 0 Тогда
		// значит этот шаг первый в группе
		
		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,""[autodoc.groupsteps]"",РодительШага.НомерСтрокиВФиче,Нашли);
		
		Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
			// Значит не указан новый текст группы. Оставим прежний.
			СлужебнаяСтрока = РодительШага.Имя;
		КонецЕсли;	 
		
		НашлиДирективуНеМасштабироватьШаг = Ложь;
		НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,""[autodoc.donotscale]"",РодительШага.НомерСтрокиВФиче,НашлиДирективуНеМасштабироватьШаг);
		
		Если Нашли ИЛИ Объект.ЗаписьВидеоГруппаШаговКакШаг Тогда
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить(""ВычислитьВыражения"",Истина);
			ПараметрыОбработки.Вставить(""ОбработатьГруппыШаговКакОдинШаг"",Истина);
			ПараметрыОбработки.Вставить(""Шаг"",Шаг);
			ПараметрыОбработки.Вставить(""Сценарий"",Сценарий);
			ПараметрыОбработки.Вставить(""СтрокаДереваГруппа"",РодительШага);
			ПараметрыОбработки.Вставить(""МасштабироватьВВидео"",Не НашлиДирективуНеМасштабироватьШаг);
			ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
		КонецЕсли;	 
	КонецЕсли;	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоИгнорировать(МассивТекстФичи,Шаг,Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	
	РодительШага = СтрокаШага.ПолучитьРодителя();
	Если (РодительШага.Тип <> ""Область"") И (РодительШага.Тип <> ""ШагСценарий"") Тогда //только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;	 
	
	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = 0 Тогда
		// значит этот шаг первый в группе
		
		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,""[autodoc.ignorestep]"",РодительШага.НомерСтрокиВФиче,Нашли);
		Если НЕ Нашли Тогда
			Возврат;
		КонецЕсли;	 
		
		Если Не Сценарий.Свойство(""ГруппыКоторыеНадоИгнорировать"") Тогда
			Сценарий.Вставить(""ГруппыКоторыеНадоИгнорировать"",Новый Массив);
		КонецЕсли;	 
		
		Сценарий.ГруппыКоторыеНадоИгнорировать.Добавить(РодительШага.ИдСтроки);
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить(""ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции"",Истина);
		ПараметрыОбработки.Вставить(""Шаг"",Шаг);
		ПараметрыОбработки.Вставить(""Сценарий"",Сценарий);
		ПараметрыОбработки.Вставить(""СтрокаДереваГруппа"",РодительШага);
		ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНеНадоМасштабировать(МассивТекстФичи,Шаг,Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,""[autodoc.donotscale]"",Шаг.НомерСтрокиВФиче,Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;	
	
	Шаг.Вставить(""МасштабироватьВВидео"",Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНадоИгнорировать(МассивТекстФичи,Шаг,Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,""[autodoc.ignorestep]"",Шаг.НомерСтрокиВФиче,Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;	
	
	Шаг.Вставить(""ИгнорироватьШагВАвтоинструкции"",Истина);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСценарийНадоИгнорировать(МассивТекстФичи,Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,""[autodoc.ignorescenario]"",Сценарий.НомерСтрокиВФиче,Нашли);
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;	 
	
	Сценарий.Вставить(""ИгнорироватьШагВАвтоинструкции"",Истина);
	
	ПараметрыУстановки = Новый Структура;
	ПараметрыУстановки.Вставить(""Сценарий"",Сценарий);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""Уровень"",0);
	ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(МассивСтрокДереваДанныеФормы[Сценарий.СтрокаДерева],ПараметрыУстановки,ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивТекстФичи,Сценарий)
	Если Объект.ЗаписьВидеоОтключитьСлайдСценария Тогда
		Сценарий.Вставить(""ИгнорироватьСлайдСценарияВАвтоинструкции"",Истина);
		Возврат;
	КонецЕсли;	 
	
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,""[autodoc.ignore.scenarioslide]"",Сценарий.НомерСтрокиВФиче,Нашли);
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;	 
	
	Сценарий.Вставить(""ИгнорироватьСлайдСценарияВАвтоинструкции"",Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИзФичиПараметрыСборкиВидео()
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого Сценарий Из МассивСценариевДляВыполнения Цикл
		МассивФичи = ЗагрузитьФайлВМассив(Сценарий.ПолныйПутьКФиче);
		
		НайтиПризнакЧтоСценарийНадоИгнорировать(МассивФичи,Сценарий);
		НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивФичи,Сценарий);
		
		Шаги       = Сценарий.Шаги;
		Для Каждого Шаг Из Шаги Цикл
			Если Шаг.ЭтоШагКонтекста Тогда
				Продолжить;
			КонецЕсли;	 
			
			НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивФичи,Шаг,Сценарий);
			НайтиГруппыШаговКоторыеНадоИгнорировать(МассивФичи,Шаг,Сценарий);
			
			Если НЕ Шаг.ЭтоШагПодсценария Тогда
				НайтиШагиКоторыеНеНадоМасштабировать(МассивФичи,Шаг,Сценарий);
				НайтиШагиКоторыеНадоИгнорировать(МассивФичи,Шаг,Сценарий);
			КонецЕсли;	 
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСвойстваШага(Шаг,Сценарий,ИДШага)
	СценарийИзДерева = МассивСценариевДляВыполнения[Число(Сценарий.ИдСценария)];
	ШагИзДерева      = СценарийИзДерева.Шаги[Число(Шаг.ИдШага)];
	Для Каждого СвойствоШага Из ШагИзДерева Цикл
		Шаг.Вставить(СвойствоШага.Ключ,СвойствоШага.Значение);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПроставитьСвойстваШагаСУчетомСвойствГруппы(Шаг,СтрокаДереваШаг,Сценарий)
	ШагНадоИгнорировать = Ложь;
	ТекСтрока = СтрокаДереваШаг;
	Пока Истина Цикл
		РодительШага     = ТекСтрока.ПолучитьРодителя();
		ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
		
		Если РодительШага = Неопределено Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = ""Сценарий"" Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = ""Область"" Тогда
			Если ТипЗнч(РодительШага.ПроизвольныеЗначения) = Тип(""Структура"") Тогда
				Для Каждого Комментарий Из РодительШага.ПроизвольныеЗначения.МассивКомментариевШага Цикл
					Если Найти(НРег(Комментарий),""#[autodoc.groupsteps]"") > 0 Тогда
						
						СлужебнаяСтрока = СокрЛП(РодительШага.Имя);
						ПромСтрока = Сред(СокрЛП(Комментарий),22);
						Если ЗначениеЗаполнено(ПромСтрока) Тогда
							СлужебнаяСтрока = ПромСтрока;
						КонецЕсли;	 
						
						Индекс = ЭлементыРодителя.Индекс(СтрокаДереваШаг);
						Если Индекс <> (ЭлементыРодителя.Количество()-1) Тогда
							// вызываем проверку только для одного шага
							ШагНадоИгнорировать = Истина;
							Прервать;
						КонецЕсли;	 
						
						ПараметрыОбработки = Новый Структура;
						ПараметрыОбработки.Вставить(""ВычислитьВыражения"",Истина);
						ПараметрыОбработки.Вставить(""ОбработатьГруппыШаговКакОдинШаг"",Истина);
						ПараметрыОбработки.Вставить(""Шаг"",Шаг);
						ПараметрыОбработки.Вставить(""Сценарий"",Сценарий);
						ПараметрыОбработки.Вставить(""СтрокаДереваГруппа"",РодительШага);
						ПараметрыОбработки.Вставить(""МасштабироватьВВидео"",Ложь);
						
						ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
						
						Шаг.Вставить(""ТекстИнструкция"",СокрЛП(СлужебнаяСтрока));
					ИначеЕсли Найти(НРег(Комментарий),""#[autodoc.ignorestep]"") > 0 Тогда
						ШагНадоИгнорировать = Истина;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		ТекСтрока = РодительШага;
	КонецЦикла;	
	
	Шаг.Вставить(""ИгнорироватьШагВАвтоинструкции"",ШагНадоИгнорировать);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий)
	ИдСтроки = Шаг.ИдСтроки;
	СтрокаДереваШаг = Неопределено;
	НайтиСтрокуДереваПоИдСтроки(ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), СтрокаДереваШаг);
	ПроставитьСвойстваШагаСУчетомСвойствГруппы(Шаг,СтрокаДереваШаг,Сценарий);
	
	МассивСтрокПроизвольногоТекстаMarkdown = Новый Массив;
	НашлиБлокПроизвольногоТекстаMarkdown = Ложь;

	Для Каждого КомментарийШага Из Шаг.МассивКомментариевШага Цикл
		Директива = ""#[autodoc.text]"";
		Поз = Найти(НРег(КомментарийШага),Директива); 
		Если Поз > 0 Тогда
			НашлиБлокПроизвольногоТекстаMarkdown = Ложь;
			СлужебнаяСтрока = СокрЛП(Сред(КомментарийШага,Поз + СтрДлина(Директива)));
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить(""ОбработкаПараметровШага"",Истина);
			ПараметрыОбработки.Вставить(""ВычислитьВыражения"",Истина);
			ПараметрыОбработки.Вставить(""Шаг"",Шаг);
			ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
			
			Шаг.Вставить(""ТекстИнструкция"",СлужебнаяСтрока);
		КонецЕсли;	 
		
		Директива = ""#[autodoc.ignorestep]"";
		Поз = Найти(НРег(КомментарийШага),Директива); 
		Если Поз > 0 Тогда
			НашлиБлокПроизвольногоТекстаMarkdown = Ложь;
			СлужебнаяСтрока = СокрЛП(Сред(КомментарийШага,Поз + СтрДлина(Директива)));
			Шаг.Вставить(""ИгнорироватьШагВАвтоинструкции"",Истина);
		КонецЕсли;	 

		Директива = ""#[autodoc.md]"";
		Если НРег(КомментарийШага) = Директива Тогда
			НашлиБлокПроизвольногоТекстаMarkdown = Истина;
		КонецЕсли;
		
		Директива = ""#!!"";
		Если 
			НашлиБлокПроизвольногоТекстаMarkdown
			И Лев(НРег(КомментарийШага), СтрДлина(Директива)) = Директива
		Тогда
			МассивСтрокПроизвольногоТекстаMarkdown.Добавить(СокрЛП(Прав(КомментарийШага, СтрДлина(КомментарийШага) - СтрДлина(Директива))));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокПроизвольногоТекстаMarkdown.Количество() > 0 Тогда
		Шаг.Вставить(""МассивСтрокПроизвольногоТекстаMarkdown"", МассивСтрокПроизвольногоТекстаMarkdown);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьФайлHTMLИнструкции()
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи = ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииHTML, СтрокаОкончанияЗаголовка);
	
	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
		
	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;			
		КонецЕсли;
		
		Если Стр = ""НачалоСценария"" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			ТекСтруктура.Вставить(""Шаги"", МассивШагов);
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = ""НачалоШага"" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр, ""="");
		Если Поз = 0 Тогда
			ТекстСообщения = Локализовать(""Странный параметр в логе инструкции HTML: %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Стр);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);
		
		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();
		
	КонецЦикла; 
	ТД.Закрыть();
	
	КаталогОбъектов = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML);
	
	ИмяФайлаДляЗаписи = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML))
	    + ""Instr_"" + УбратьВсеЗапрещенныеСимволыИзИмениФайла(ТекущаяФичаИнструкцииHTML) + "".HTML"";
		
	ДокументHTML = Новый ДокументHTML(); 

	УзелHEAD = ДокументHTML.СоздатьЭлемент(""head""); 
	ДокументHTML.ЭлементДокумента.ДобавитьДочерний(УзелHEAD);

	УзелTITLE = ДокументHTML.СоздатьЭлемент(""title""); 
	УзелTITLE.ТекстовоеСодержимое = ТекущаяФичаИнструкцииHTML; 
	УзелHEAD.ДобавитьДочерний(УзелTITLE);

	УзелSTYLE = ДокументHTML.СоздатьЭлемент(""style""); 
	УзелSTYLE.УстановитьАтрибут(""type"", ""text/css""); 
	УзелSTYLE.ТекстовоеСодержимое = ""h1{font-size: 40px} h2{font-size: 35px; align: center} p{font-size: 30px}""; 
	УзелHEAD.ДобавитьДочерний(УзелSTYLE);

	УзелBODY = ДокументHTML.СоздатьЭлемент(""body""); 
	ДокументHTML.ЭлементДокумента.ДобавитьДочерний(УзелBODY);

	ТекстовыйУзел = Неопределено;
	УзелЗаголовок = ДокументHTML.СоздатьЭлемент(""h1""); 
	УзелBODY.ДобавитьДочерний(УзелЗаголовок);
	Для каждого Стр Из ЗаголовокФичи Цикл
		Если ТекстовыйУзел <> Неопределено Тогда
			ПереносСтроки = ДокументHTML.СоздатьЭлемент(""br""); 
			УзелЗаголовок.ДобавитьДочерний(ПереносСтроки);
		КонецЕсли;
		ТекстовыйУзел = ДокументHTML.СоздатьТекстовыйУзел(Стр);
		УзелЗаголовок.ДобавитьДочерний(ТекстовыйУзел);
	КонецЦикла;
	
	ИДСкриншота  = 0;
	Для каждого Сценарий Из МассивСценариев Цикл
		УзелЗаголовок = ДокументHTML.СоздатьЭлемент(""h2""); 
		УзелЗаголовок.ТекстовоеСодержимое = Сценарий.ИмяСценария;
		УзелBODY.ДобавитьДочерний(УзелЗаголовок);

		ИмяФичи = Сценарий.ИмяФичи;
		ИмяФичи = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, "" "", ""_"");
		ИмяСценария = СтрЗаменить(Сценарий.ИмяСценария, "" "", ""_"");
		ИмяСценария = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);

		КаталогФичи = ДополнитьСлешВПуть(КаталогОбъектов) + ИмяФичи;
		ФайлКаталогФичи = Новый Файл(КаталогФичи);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталогФичи.ПолноеИмя) Тогда
			СоздатьКаталогКомандаСистемы(КаталогФичи);
		КонецЕсли;  

		МассивШагов = Сценарий.Шаги;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			ДополнитьСвойстваШага(Шаг,Сценарий,Шаг.ИДШага);
		КонецЦикла;	
		
		Для каждого Шаг Из МассивШагов Цикл
			ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий);
			
			ИДСкриншота = ИДСкриншота + 1;
			
			Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
				УдалитьФайлыКомандаСистемы(Шаг.Скриншот);
				Продолжить;
			КонецЕсли;	 
		
			НомШага = НомШага + 1;
			
			ТекстШага = Шаг.Имя;
			Если ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
				ТекстШага = Шаг.ТекстИнструкция;
			КонецЕсли;	 
			
			СтрокаШага = СтрЗаменить(ТекстШага, ""\n"", Символы.ПС);
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(СтрокаШага, Символы.ПС);
			Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
				Стр = МассивСтрок[Ккк];
				УзелАбзац = ДокументHTML.СоздатьЭлемент(""p""); 
				Если Ккк = 0 Тогда
					УзелНомер = ДокументHTML.СоздатьЭлемент(""b""); 
					УзелНомер.ТекстовоеСодержимое = ПолучитьФорматированныйНомер(НомШага, 3) + ""."" + Символы.НПП;
					УзелАбзац.ДобавитьДочерний(УзелНомер);
				КонецЕсли;
				ТекстовыйУзел = ДокументHTML.СоздатьТекстовыйУзел(Стр);
				ЕстьВертЧерта = Ложь;
				Если Найти(Стр, ""|"") > 0 Тогда
					ЕстьВертЧерта = Истина;
				КонецЕсли;	 
				Если ЕстьВертЧерта Тогда
					УзелКод = ДокументHTML.СоздатьЭлемент(""pre""); 
					УзелКод.ДобавитьДочерний(ТекстовыйУзел);
					УзелАбзац.ДобавитьДочерний(УзелКод);
				Иначе
					УзелАбзац.ДобавитьДочерний(ТекстовыйУзел);
				КонецЕсли;
				УзелBODY.ДобавитьДочерний(УзелАбзац);
			КонецЦикла;
			ФайлСкриншота = Новый Файл(Шаг.Скриншот);
			НовоеИмяФайлаСкриншота = СтрЗаменить(ИмяФичи + ""_"" + ИДСкриншота + ""_"" + Лев(ИмяСценария, 30) + ""_"" + ПолучитьФорматированныйНомер(НомШага, 3) + ФайлСкриншота.Расширение, "" "", ""_"");
			ИмяФайлаСкриншотаВКаталогеФичи = ФайлСкриншота.Путь + СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, "" "", ""_"");
			ФайлСкриншота = Неопределено;
			
			ПроцедураПереместитьФайл(Шаг.Скриншот, ИмяФайлаСкриншотаВКаталогеФичи);
			СтрСкриншотаДляHTML = СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, "" "", ""_"");
			СтрСкриншотаДляHTML = СтрЗаменить(СтрСкриншотаДляHTML, ""\"", ""/"");
			
			УзелКартинка = ДокументHTML.СоздатьЭлемент(""img""); 
			УзелКартинка.УстановитьАтрибут(""src"", СтрСкриншотаДляHTML); 
			УзелBODY.ДобавитьДочерний(УзелКартинка);
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьHTML = Новый ЗаписьHTML; 
	ЗаписьHTML.ОткрытьФайл(ИмяФайлаДляЗаписи, ""UTF-8""); 

	ЗаписьDOM = Новый ЗаписьDOM; 
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML); 

	ТекстСообщения = Локализовать(""Записываю %1"");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайлаДляЗаписи);
	СообщитьПользователю(ТекстСообщения);
	ЗаписьHTML.Закрыть();

	УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииHTML);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайла, СтрокаОкончанияЗаголовка)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, ""UTF-8"");
	
	ЗаголовокФичи = Новый Массив;
	Ном = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		Ном = Ном + 1;
		
		Если Стр = ""--окончание заголовка--"" Тогда
			СтрокаОкончанияЗаголовка = Ном;
			Прервать;
		КонецЕсли;	 
		
		ЗаголовокФичи.Добавить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗаголовокФичи;
КонецФункции	
 

&НаКлиенте
Процедура СоздатьФайлMarkdownИнструкции()
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи            = ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииMarkdown, СтрокаОкончанияЗаголовка);
	
	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);

	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();	
	Пока Стр <> Неопределено Цикл
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;			
		КонецЕсли; 
		
		
		Если Стр = ""НачалоСценария"" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			
			ТекСтруктура.Вставить(""Шаги"", МассивШагов);
			
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = ""НачалоШага"" Тогда
			ТекСтруктура = Новый Структура;
			
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр, ""="");
		Если Поз = 0 Тогда
			ТекстСообщения = Локализовать(""Странный параметр в логе инструкции Markdown: %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Стр);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);
		
		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();
			
	КонецЦикла; 
	ТД.Закрыть();
	
	КаталогОбъектов = Объект.КаталогВыгрузкиИнструкцийMarkdown;
	
	
	ИмяФайлаДляЗаписи = Объект.КаталогВыгрузкиИнструкцийMarkdown + ""/""
	    + УбратьВсеЗапрещенныеСимволыИзИмениФайла(ТекущаяФичаИнструкцииMarkdown) + "".MD"";
	ЗТ = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, ""Windows-1251"", , Ложь); 
	ЗТ.Закрыть();//убираю BOM, специально для ATOM
	
	Страница = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, ""UTF-8"", , Истина); 
	// записываю заголовок
	Для каждого Стр Из ЗаголовокФичи Цикл
		Стр = СокрЛП(Стр);
		Если Найти(Стр, ""Функционал:"") > 0 Тогда
			Стр = СтрЗаменить(Стр, ""Функционал:"", ""**Функционал:**"");
		ИначеЕсли НРег(Лев(Стр, 3)) = ""как"" Тогда
			Стр =  ""> **Как**"" + Сред(Стр, 4);
			
		ИначеЕсли НРег(Лев(Стр, 4)) = ""хочу"" Тогда
			Стр =  ""> **Хочу**"" + Сред(Стр, 5);
		ИначеЕсли НРег(Лев(Стр, 6)) = ""я хочу"" Тогда
			Стр =  ""> **Я хочу**"" + Сред(Стр, 7);
		ИначеЕсли НРег(Лев(Стр, 5)) = ""чтобы"" Тогда
			Стр =  ""> **Чтобы**"" + Сред(Стр, 6);
		Иначе
			Стр = "" > "" + Стр;
		КонецЕсли;	 
		
		Страница.ЗаписатьСтроку(Стр);
		Страница.ЗаписатьСтроку("""");
	КонецЦикла;
	
	ИДСкриншота  = 0;
	ИДСценария   = 0;
	Для каждого Сценарий Из МассивСценариев Цикл
		ИДСценария = ИДСценария + 1;
		Если ИДСценария > 1 Тогда
			Страница.ЗаписатьСтроку("""");
		КонецЕсли;	 
		Страница.ЗаписатьСтроку("""");
		Страница.ЗаписатьСтроку(""**Сценарий:** "" + Сценарий.ИмяСценария);
		
		
		
		ИмяФичи = Сценарий.ИмяФичи;
		ИмяФичи = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, "" "", ""_"");
		
		ИмяСценария = Сценарий.ИмяСценария;
		ИмяСценария = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);
		ИмяСценария = СтрЗаменить(ИмяСценария, "" "", ""_"");
		
		КаталогФичи = ДополнитьСлешВПуть(КаталогОбъектов) + ИмяФичи;
		
		ФайлКаталогФичи = Новый Файл(КаталогФичи);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталогФичи.ПолноеИмя) Тогда
			СоздатьКаталогКомандаСистемы(КаталогФичи);
		КонецЕсли;  
		
		МассивШагов = Сценарий.Шаги;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			ДополнитьСвойстваШага(Шаг,Сценарий,Шаг.ИДШага);
		КонецЦикла;	
		
		Для каждого Шаг Из МассивШагов Цикл
			ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий);
			
			ИДСкриншота = ИДСкриншота + 1;
			
			Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
				УдалитьФайлыКомандаСистемы(Шаг.Скриншот);
				Продолжить;
			КонецЕсли;	 
			
			НомШага = НомШага + 1;
			Страница.ЗаписатьСтроку("""");
			
			Если
				
				Шаг.Свойство(""МассивСтрокПроизвольногоТекстаMarkdown"")
				И Шаг.МассивСтрокПроизвольногоТекстаMarkdown.Количество() > 0
				
			Тогда
			
				Для Каждого ЭлементМассива Из Шаг.МассивСтрокПроизвольногоТекстаMarkdown Цикл
				
					Страница.ЗаписатьСтроку(ЭлементМассива);
				
				КонецЦикла;

			Иначе
				ТекстШага = Шаг.Имя;
				Если ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
					ТекстШага = Шаг.ТекстИнструкция;
				КонецЕсли;	 
				
				СтрокаШага = СтрЗаменить(ТекстШага, ""\n"", Символы.ПС);
				МассивСтрок = РазложитьСтрокуВМассивПодстрок(СтрокаШага, Символы.ПС);
				Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
					Стр = МассивСтрок[Ккк];
					Если Ккк = 0 Тогда
						Страница.ЗаписатьСтроку(""	"" + ПолучитьФорматированныйНомер(НомШага, 3) + "". "" + Стр);
					Иначе
						ЕстьВертЧерта = Ложь;
						Если Найти(Стр, ""|"") > 0 Тогда
							ЕстьВертЧерта = Истина;
						КонецЕсли;	 
						
						
						Если ЕстьВертЧерта Тогда
							Страница.ЗаписатьСтроку(""	"" + Стр);
						Иначе	
							Страница.ЗаписатьСтроку(""	"" + Стр);
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;
			КонецЕсли;	 
			ФайлСкриншота = Новый Файл(Шаг.Скриншот);
			НовоеИмяФайлаСкриншота = СтрЗаменить(ИмяФичи + ""_"" + ИДСкриншота + ""_"" + Лев(ИмяСценария, 30) + ""_"" + ПолучитьФорматированныйНомер(НомШага, 3) + ФайлСкриншота.Расширение, "" "", ""_"");
			ИмяФайлаСкриншотаВКаталогеФичи = ФайлСкриншота.Путь + СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, "" "", ""_"");
			ФайлСкриншота = Неопределено;
			
			ПроцедураПереместитьФайл(Шаг.Скриншот, ИмяФайлаСкриншотаВКаталогеФичи);
			
			СтрСкриншотаДляMarkdown = СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, "" "", ""_"");
			Страница.ЗаписатьСтроку(""![]("" + СтрЗаменить(СтрСкриншотаДляMarkdown, ""\"", ""/"") + "")"");
		КонецЦикла;
	КонецЦикла;
	
	ТекстСообщения = Локализовать(""Записываю %1"");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайлаДляЗаписи);
	СообщитьПользователю(ТекстСообщения);
	Страница.Закрыть();

	УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииMarkdown);

КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПереместитьФайл(Знач Стр1, Знач Стр2)
	ПереместитьФайлКомандаСистемы(Стр1, Стр2);
КонецПроцедуры

#Область АссертыСлужебное
// Портирован блок ассертов из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
// взят релиз 3.0.0.3
// { МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = """" Тогда
		Возврат """";
	КонецЕсли;
	
	Возврат Символы.ПС + "" <"" + ДопСообщениеОшибки + "">"";
КонецФункции

&НаКлиенте
Функция СтруктураОшибкаАссерта(СообщениеОшибки)
	Возврат Новый Структура(""БылаОшибка,ОписаниеОшибки,ЗначениеExpected,ЗначениеActual"",
	    Истина,СообщениеОшибки,ЗначениеExpected,ЗначениеActual);
КонецФункции	 

&НаКлиенте
Функция ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = ""["" + СтатусыРезультатаТестирования.ОшибкаПроверки + ""]"";
	ТекстСообщения = Префикс + "" "" + СообщениеОшибки;
	Если НЕ Объект.ОстановитьВыполнениеШагов Тогда
		ВызватьИсключение ТекстСообщения;
	Иначе
		Если ОшибкиАссертов = Неопределено Тогда
			ОшибкиАссертов = Новый Массив;
		КонецЕсли;	 
		
		СтруктураОшибкаАссерта = СтруктураОшибкаАссерта(СообщениеОшибки);
		ОшибкиАссертов.Добавить(СтруктураОшибкаАссерта);
		Возврат СтруктураОшибкаАссерта;
	КонецЕсли;	 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСтрокой(Параметры, ИмяПеременной = ""Параметры"")
	
	ПараметрыСтрока = """";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип(""Массив"") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл 
				ПараметрыСтрока = ПараметрыСтрока + "", "" + ИмяПеременной + ""["" + Формат(Индекс, ""ЧН=0; ЧГ=0"") + ""]"";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСтрока;
	
КонецФункции

// Только для внутреннего использования
&НаСервере
Процедура ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки = """")
	Объект().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьКоличествоПередаваемыхТаблиц(СтрокаДерева)
	Если СтрокаДерева.ШагСПараметрамиВТаблице <> Истина Тогда
		Возврат 0;
	КонецЕсли;	 
	
	Количество = 1;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.Имя) Тогда
			Количество = Количество + 1;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Количество;
КонецФункции	

&НаСервере
Функция СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения) 
	Данные = Объект().СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
КонецФункции
// { работа с данными текущего теста

&НаКлиенте
Процедура УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста)
	
	//УстановитьКонтекст(ДанныеТекущегоТеста, ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеТекущегоТеста()
	
	//УдалитьКонтекст(ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Функция ПустыеДанныеТекущегоТеста()
	
	ДанныеТеста = Новый Структура;
	ДанныеТеста.Вставить(""Имя"", """");
	ДанныеТеста.Вставить(""ПолныйПуть"", """");
	ДанныеТеста.Вставить(""СостояниеТеста"", """");
	
	Возврат ДанныеТеста;
	
КонецФункции

Функция ИдентификаторКонтекстаДанныхТекущегоТеста()
	
	Возврат ""xUnitFor1C_ДанныеТекущегоТеста"";
	
КонецФункции

// }
#КонецОбласти

&НаСервереБезКонтекста
Процедура ДобавитьШагиВМассив(ДеревоСтроки, Шаги)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = ""Примеры"" Тогда
			// эти сценарии уже учтены
			Продолжить;
		КонецЕсли; 
		
		Если СтрДеревоСтроки.Тип = ""Шаг"" Тогда
			СтруктураШага = Новый Структура;
			СтруктураШага.Вставить(""Имя"", СтрДеревоСтроки.Имя);
			СтруктураШага.Вставить(""ИмяШагаБезКлючевогоСлова"", СтрДеревоСтроки.ИмяШагаБезКлючевогоСлова);
			СтруктураШага.Вставить(""АдресСнипета"", СтрДеревоСтроки.АдресСнипета);
			СтруктураШага.Вставить(""ШагСПараметрамиВТаблице"", СтрДеревоСтроки.ШагСПараметрамиВТаблице);
			СтруктураШага.Вставить(""КоличествоПередаваемыхТаблиц"", ОпределитьКоличествоПередаваемыхТаблиц(СтрДеревоСтроки));
			Шаги.Добавить(СтруктураШага);
		КонецЕсли;	 
		ДобавитьШагиВМассив(СтрДеревоСтроки.Строки, Шаги);
	КонецЦикла	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьИменаФайловФичИзДереваВМассив(ДеревоСтроки, МассивФич, МассивШагов)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = ""Фича"" Тогда
			МассивФич.Добавить(СтрДеревоСтроки.ПолныйПуть);
			Шаги = Новый Массив;
			ДобавитьШагиВМассив(СтрДеревоСтроки.Строки, Шаги);
			МассивШагов.Добавить(Шаги);
		КонецЕсли;	 
		ДобавитьИменаФайловФичИзДереваВМассив(СтрДеревоСтроки.Строки, МассивФич, МассивШагов);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров, МассивФич, МассивШагов)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Дерево = ОбъектСервер.ДеревоТестов;
	
	ДобавитьИменаФайловФичИзДереваВМассив(Дерево.Строки, МассивФич, МассивШагов);
	
	СтруктураПараметров.Вставить(""КонтекстVanessaBehavoir"", ОбъектСервер);
	
	СтруктураПараметров.КонтекстVanessaBehavoir = """";
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуОС(Стр)
	КомандаСистемы(Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлВерсииИсходников(ИмяФайлаВерсииИсходников, ИмяФайлаОригинала)
	Возврат;
	
	
	ФайлВерсии = Новый Файл(ИмяФайлаВерсииИсходников);
	Если ФайлВерсии.Существует() Тогда
		УдалитьФайлы(ФайлВерсии.ПолноеИмя);
	КонецЕсли;	 
	
	Файл   = Новый Файл(ИмяФайлаОригинала);
	Версия = Строка(Файл.ПолучитьВремяИзменения());
	
	ЗТ = Новый ЗаписьТекста(ИмяФайлаВерсииИсходников, ""UTF-8"", , Истина); 
	ЗТ.ЗаписатьСтроку(""Версия="" + Версия); 
	
	ЗТ.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция РаспаковатьEPF(СтруктураОписанияEpf)
	
	
	ИмяФайла = СтруктураОписанияEpf.ИмяФайлаEPF;
	ФайлEPF = Новый Файл(ИмяФайла);
	
	ГенерироватьУФ      = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	ЭтоУФ               = Истина;
	
	Попытка
		
		ВременныйКаталогБазы = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла(""txt"");
		КомандаСистемы = """""""" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ""1cv8"""" CREATEINFOBASE File=""""""  + ВременныйКаталогБазы +  """""" /out """""" + ИмяФайлаOUT + """""" > """""" + ИмяФайлаЛога + """""""";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
		Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + ""/1Cv8.1CD"") Тогда
			СообщитьПользователю(""Файл EPF не создан. Не смог создать каталог временной базы."");
			ВывестиТекстФайлаЛога(ИмяФайлаЛога);
			ВывестиТекстФайлаЛога(ИмяФайлаOUT);
			
			ТекстСообщения = Локализовать(""Проверьте работу команды <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",КомандаСистемы); 
			СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
		
		
		
		ПутьКИсходникам = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам);
		
		
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла(""txt"");
		
		КомандаСистемы = """""""" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ""1cv8"""" DESIGNER /F """""" + ВременныйКаталогБазы + """""" /DumpExternalDataProcessorOrReportToFiles  """""" + ПутьКИсходникам + """""" """""" + СтруктураОписанияEpf.ИмяФайлаEPF + """""" /out """""" + ИмяФайлаOUT + """""" > """""" + ИмяФайлаЛога + """""""";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
		
		
		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;
		
		НайтиФайлыКомандаСистемы(ПутьКИсходникам, СписокКаталогов, СписокФайлов, Ложь);
		Если СписокФайлов.Количество() <> 1 Тогда
			ТекстСообщения = Локализовать(""В каталоге <%1> должен был быть один файл xml."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ПутьКИсходникам);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ФайлXML = СписокФайлов[0].Значение;
		СтруктураОписанияEpf.Вставить(""РеальноеИмяОбработки"", ФайлXML.ИмяБезРасширения);
		
		СтруктураОписанияEpf.КаталогИсходников = ПутьКИсходникам;
		Если ЭтоУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + ""/"" + ФайлXML.ИмяБезРасширения + ""/Forms/Форма/Ext/Form/Module.bsl""
		Иначе	
			СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + ""/"" + ФайлXML.ИмяБезРасширения + ""/Ext/ObjectModule.bsl""
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
		
		ОчиститьСодержимоеКаталога(ВременныйКаталогБазы);
		
	Исключение
		ТекстСообщения = Локализовать(""Не смог распаковать %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайла); 
		СообщитьПользователю(ТекстСообщения);
		СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция СоздатьПустуюСтруктуруEpf()
	Стр = Новый Структура;
	Стр.Вставить(""ИмяФичи"", """");
	Стр.Вставить(""ИмяФайлаEpf"", """");
	Стр.Вставить(""ВременноеИмяМодуля"", """");
	Стр.Вставить(""ТелоМодуля"", """");//таблица значений
	Стр.Вставить(""ИмяМодуляEpf"", """");
	Стр.Вставить(""КаталогИсходников"", """");
	Стр.Вставить(""ФайлEpfПересоздавался"", Ложь);
	Стр.Вставить(""РеальноеИмяОбработки"", Неопределено);
	
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные, ШагСтрокДляМодуля)
	ПутьКФайлу = ПолучитьИмяВременногоФайла(""txt"");
	
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить(""НомСтр"");
	Тзн.Колонки.Добавить(""Стр"");
	
	НомСтр = 0;
	ПромФайл = Новый Файл(ПутьКФайлу);
	Если Не ПромФайл.Существует() Тогда
		СтрОшибки = ""Файл """""" + ПутьКФайлу + """""" не существует."";
		СообщитьПользователюСеврер(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу, ""UTF-8"");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗначениеВСтрокуВнутр(Тзн);
КонецФункции	

&НаКлиенте
Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	Возврат ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные, ШагСтрокДляМодуля);
КонецФункции

&НаСервере
Процедура ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader, знСоздаватьОбластиПриГенерацииКода)
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла(""epf"");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе	
		ОбъектСервер  = РеквизитФормыВЗначение(""Объект"");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	FeatureReader.ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, Истина, знСоздаватьОбластиПриГенерацииКода);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader, ЗнСоздаватьОбластиПриГенерацииКода)
	ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader, ЗнСоздаватьОбластиПриГенерацииКода);
КонецПроцедуры

&НаКлиенте
Функция НайтиФайлВМассивеФайлов(МассивФайлов, ИмяФайла)
	Для каждого Элем Из МассивФайлов Цикл
		
		Если ТипЗнч(Элем) = Тип(""Структура"") Тогда
			Файл = Элем.Файл;
		Иначе
			Файл = Элем;
		КонецЕсли;	 
		
		Если СравнитьПутиФайлов(Файл.ПолноеИмя,ИмяФайла) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

&НаСервере
Функция ДанныеСлужебныйКешГенерацияEPF()
	ОбъектСервер   = РеквизитФормыВЗначение(""Объект"");
	ТекстовыйМакет = ОбъектСервер.ПолучитьМакет(""МакетСлужебныйКеш"");
	Строка         = ТекстовыйМакет.ПолучитьТекст();
	Возврат ЗначениеИзСтрокиВнутр(Строка).МассивФайловTemplateEpfUF;
КонецФункции	  

&НаКлиенте
Функция СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи, ИмяТекущейФичи, GenerateEpf, ДвДанныеvbFeatureReader, ДополнительныеПараметры)
	КаталогИнструментов = Объект.КаталогИнструментов;
	ГенерироватьУФ      = Объект.ГенерироватьУФ;
	
	СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
	СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
	СтруктураОписанияEpf.ИмяФайлаEpf        = ДополнитьСлешВПуть(ОтносительныйКаталогФичи) + ДополнитьСлешВПуть(""step_definitions"") + ИмяТекущейФичи + "".epf"";
	Если GenerateEpf Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ФайлСуществует = ФайлEpf.Существует();
		Иначе	
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ""ПоискEPF"", ""НайденныеФайлы"");
			ФайлСуществует = НайтиФайлВМассивеФайлов(МассивФайлов, СтруктураОписанияEpf.ИмяФайлаEpf);
		КонецЕсли;	 
		Если ФайлСуществует Тогда //т.е. если мы не первый раз работаем с данной фичей
			Если НЕ Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
				СтруктураОписанияEpf.ИмяМодуляEpf          = РаспаковатьEPF(СтруктураОписанияEpf);
				СтруктураОписанияEpf.ФайлEpfПересоздавался = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ВременныйКаталогИсходников = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ВременныйКаталогИсходников);
		СтруктураОписанияEpf.КаталогИсходников = ВременныйКаталогИсходников;
		
		ПутьКШаблону = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""lib/TemplateEpf"";
		Если ГенерироватьУФ Тогда
			ПутьКШаблону = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""lib/TemplateEpfUF"";
		КонецЕсли;
		
		Если Объект.ВерсияПоставки = ""single"" Тогда
			ПутьКШаблону = ПолучитьИмяВременногоФайла();
			СоздатьКаталогКомандаСистемы(ПутьКШаблону);
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + ""Обработка"");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + ""Обработка\Forms\Форма"");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + ""Обработка\Forms\Форма\Ext"");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + ""Обработка\Forms\Форма\Ext\Form"");
			ДанныеСлужебныйКеш = ДанныеСлужебныйКешГенерацияEPF();
			Для Каждого ДанныеФайлаКеш Из ДанныеСлужебныйКеш Цикл
				Если ДанныеФайлаКеш.Имя = ""Обработка.xml"" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + ""Обработка.xml"";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = ""Форма.xml"" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + ""Обработка\Forms\Форма.xml"";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = ""Form.xml"" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + ""Обработка\Forms\Форма\Ext\Form.xml"";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = ""Module.bsl"" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + ""Обработка\Forms\Форма\Ext\Form\Module.bsl"";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
		
		
		ФайлШаблон = Новый Файл(ПутьКШаблону);
		ПутьКШаблону = ФайлШаблон.ПолноеИмя;
		КопироватьКаталогКомандаСистемы(ПутьКШаблону, ВременныйКаталогИсходников);
	КонецЕсли;
	
	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников) + ""Обработка/Ext/ObjectModule.bsl"";
		Если ГенерироватьУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников) + ""Обработка/Forms/Форма/Ext/Form/Module.bsl"";
		КонецЕсли;
		
		Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		СтруктураОписанияEpf.ВременноеИмяМодуля = Файл.ПолноеИмя;
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, ""UTF-8"", , Ложь); 
		ЗТ.Закрыть();
	КонецЕсли;	 
	
	
	ФайлСуществует = ФайлСуществуетКомандаСистемы(СтруктураОписанияEpf.ИмяМодуляEpf);
	
	СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader, Объект.СоздаватьОбластиПриГенерацииКода);
	КонецЕсли;
	
	Возврат СтруктураОписанияEpf;
КонецФункции

&НаСервере
Функция СнипетыПолучитьСнипетыПоШагам(Шаги, ДвДанныеvbFeatureReader, СтруктураПараметров)
	КешСнипетовИзХранилищаЗначений(СтруктураПараметров);
	
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла(""epf"");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение(""Объект"");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	Снипеты = FeatureReader.СнипетыПолучитьСнипетыПоШагам(Шаги, СтруктураПараметров);
	
	КешСнипетовВХранилищаЗначений(СтруктураПараметров);
	
	Возврат Снипеты;
КонецФункции

&НаСервере
Процедура ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля, Снипеты, ДвДанныеvbFeatureReader, ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур)
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла(""epf"");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение(""Объект"");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля, Снипеты, Истина, ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
КонецПроцедуры

&НаСервере
Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, StepDefinition, Шаг, ШагСтрокДляМодуля, АдресСнипета, ГенерироватьУФ, ДвДанныеvbFeatureReader, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур)
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла(""epf"");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение(""Объект"");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, StepDefinition, Шаг, ШагСтрокДляМодуля, АдресСнипета, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур, ГенерироватьУФ, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелоМодуляВМассивСервер(Стр)
	ТелоМодуля = ЗначениеИзСтрокиВнутр(Стр);
	ТелоМодуля.Сортировать(""НомСтр"");
	Массив = ТелоМодуля.ВыгрузитьКолонку(""Стр"");
	
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура УдалитьИзФайлаМодуляФормыУФТестМодуляФормы(ИмяФайлаФормаУФ)
	Файл = Новый Файл(ИмяФайлаФормаУФ);
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайлаФормаУФ) Тогда
		ТекстСообщения = Локализовать(""Файл <%1> не найден."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайлаФормаУФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла(""txt"");
	
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла, ""UTF-8"", , Истина); 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаФормаУФ, ""UTF-8"");
	
	НачалоМодуля = -1;
	КонецМодуля  = -1;
	
	НашлиМодуль = Ложь;
	
	КолСкобок1  = 0;
	КолСкобок2  = 0;
	НомерСтроки = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомерСтроки = НомерСтроки + 1;
		
		КолСкобок1 = КолСкобок1 + СтрЧислоВхождений(Стр, ""{"");
		КолСкобок2 = КолСкобок2 + СтрЧислоВхождений(Стр, ""}"");
		
		Если (НачалоМодуля > 0) И НЕ НашлиМодуль Тогда
			Если Лев(Стр, 1) = ""{"" Тогда
				КонецМодуля = НомерСтроки;
				ЗТ.ЗаписатьСтроку("""""",""); 
				ЗТ.ЗаписатьСтроку(Стр); 
				НашлиМодуль = Истина;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если (НомерСтроки > 2) И (НачалоМодуля = -1) И НЕ НашлиМодуль Тогда
			// Если (КолСкобок1 - КолСкобок2) = 1 Тогда //значит сейчас начинается модуль
			Поз = Найти(Стр, ""},"""""");
			Если (Поз > 0) И (Прав(Стр, 1) <> "","") Тогда
				НачалоМодуля = НомерСтроки;
				
				НачалоСтроки = Лев(Стр, Поз - 1);
				
				ЗТ.ЗаписатьСтроку(НачалоСтроки + ""},""""//начало текста модуля""); 
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Если (НачалоМодуля > 0) И НЕ НашлиМодуль Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
		
	КонецЦикла;	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	
	Если Не НашлиМодуль Тогда
		ВызватьИсключение Локализовать(""Не смог найти код модуля формы в файле ИмяФайлаФормаУФ."");
	КонецЕсли;	 
	
	
	Отладка(""Копирую файл "" + ВременноеИмяФайла + "" в "" + ИмяФайлаФормаУФ);
	КопироватьФайлКомандаСистемы(ВременноеИмяФайла, ИмяФайлаФормаУФ);
	
КонецПроцедуры

&НаКлиенте
Функция УбратьСпецсимволыИзИмениОбработи(Знач Стр)
	
	Стр = СтрЗаменить(Стр, "" "", ""_"");
	Стр = СтрЗаменить(Стр, ""`"", """");
	Стр = СтрЗаменить(Стр, ""~"", """");
	Стр = СтрЗаменить(Стр, ""'"", """");
	Стр = СтрЗаменить(Стр, ""."", """");
	Стр = СтрЗаменить(Стр, "","", """");
	Стр = СтрЗаменить(Стр, "":"", """");
	Стр = СтрЗаменить(Стр, "";"", """");
	Стр = СтрЗаменить(Стр, ""-"", ""_"");  
	Стр = СтрЗаменить(Стр, ""+"", """");
	Стр = СтрЗаменить(Стр, ""/"", """");
	Стр = СтрЗаменить(Стр, ""\"", """");
	Стр = СтрЗаменить(Стр, ""="", """");
	Стр = СтрЗаменить(Стр, ""!"", """");
	Стр = СтрЗаменить(Стр, ""@"", """");
	Стр = СтрЗаменить(Стр, ""#"", """");
	Стр = СтрЗаменить(Стр, ""$"", """");
	Стр = СтрЗаменить(Стр, ""%"", """");
	Стр = СтрЗаменить(Стр, ""^"", """");
	Стр = СтрЗаменить(Стр, ""&"", """");
	Стр = СтрЗаменить(Стр, ""*"", """");
	Стр = СтрЗаменить(Стр, ""("", """");
	Стр = СтрЗаменить(Стр, "")"", """");
	Стр = СтрЗаменить(Стр, ""№"", """");
	Стр = СтрЗаменить(Стр, ""?"", """");
	Стр = СтрЗаменить(Стр, ""<"", """");
	Стр = СтрЗаменить(Стр, "">"", """");
	
	
	Если Лев(Стр,1) = ""0"" 
		Или Лев(Стр,1) = ""1""
		Или Лев(Стр,1) = ""2""
		Или Лев(Стр,1) = ""3""
		Или Лев(Стр,1) = ""4""
		Или Лев(Стр,1) = ""5""
		Или Лев(Стр,1) = ""6""
		Или Лев(Стр,1) = ""7""
		Или Лев(Стр,1) = ""8""
		Или Лев(Стр,1) = ""9"" Тогда
		Стр = ""_"" + Стр;
	КонецЕсли;	 
	
	Возврат Стр;
	
КонецФункции	

&НаКлиенте
Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки)
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + ""/"" + ИмяОбработки + "".xml""));
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + ""/"" + ИмяОбработки +  ""/Forms/Форма/Ext/Form.xml""));
	
	
	Для Каждого Файл Из МассивФайлов Цикл
		Если НЕ ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, ""UTF-8"");
		
		ВременноеИмяФайла = Файл.ПолноеИмя + ""_Temp"";
		ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла, ""UTF-8"", , Истина); 
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Стр = СтрЗаменить(Стр, ""<Name>Обработка</Name>"", ""<Name>"" + ИмяОбработки + ""</Name>"");
			Стр = СтрЗаменить(Стр, ""<v8:content>Обработка</v8:content>"", ""<v8:content>"" + ИмяОбработки + ""</v8:content>"");
			Стр = СтрЗаменить(Стр, ""ExternalDataProcessor.Обработка."", ""ExternalDataProcessor."" + ИмяОбработки + ""."");
			Стр = СтрЗаменить(Стр, ""ExternalDataProcessorObject.Обработка"", ""ExternalDataProcessorObject."" + ИмяОбработки);
			
			ЗТ.ЗаписатьСтроку(Стр); 
		КонецЦикла;
		
		ЗТ.Закрыть();
		Текст.Закрыть();
		Текст = """";
		
		УдалитьФайлыКомандаСистемы(Файл.ПолноеИмя);
		ПереместитьФайлКомандаСистемы(ВременноеИмяФайла, Файл.ПолноеИмя);
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Если СокрЛП(Путь) = """" Тогда
		ВызватьИсключение Локализовать(""Передан пустой путь в процедуру <СоздатьКаталогЕслиЕгоНет>."");
	КонецЕсли;	 
	СоздатьКаталогКомандаСистемы(Путь);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекстФайлаЛога(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, ""UTF-8"");
	
	СообщитьПользователю(Текст.Прочитать());
	
	Текст.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлыОбработок(БылиОшибки, СтруктураОписанияEpf, ДополнительныеПараметры = Неопределено)
	
	ЭтоУФ = Истина;
	ГенерироватьУФ = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	ТекстМодуля = """";
	
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
	Иначе
		ТелоМодуля.Сортировать(""НомСтр"");
		ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку(""Стр"");
	КонецЕсли;	 
	
	Отладка(""Буду записывать "" + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	УдалитьФайлыКомандаСистемы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, ""UTF-8"", , Ложь); 
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
	КонецЦикла;
	ЗТ.Закрыть();
	Отладка(""Записал "" + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;
	
	ИмяВременногоEPF = ПолучитьИмяВременногоФайла(""epf"");
	
	ИмяОбработки = УбратьСпецсимволыИзИмениОбработи(СтруктураОписанияEpf.ИмяФичи);
	Если ЗначениеЗаполнено(СтруктураОписанияEpf.РеальноеИмяОбработки) Тогда
		ИмяОбработки = СтруктураОписанияEpf.РеальноеИмяОбработки;
	КонецЕсли;	 
	
	
	КорневойФайлОбработки = ПутьКИсходникам + ""/"" + ИмяОбработки + "".xml"";
	
	
	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам + ""/"" + ИмяОбработки);
		КопироватьКаталогКомандаСистемы(ПутьКИсходникам + ""/Обработка"", ПутьКИсходникам + ""/"" + ИмяОбработки);
		ПереместитьФайлКомандаСистемы(ПутьКИсходникам + ""/Обработка.xml"", КорневойФайлОбработки);
		
		ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки);
	КонецЕсли;	 
	
	
	ВременныйКаталогБазы = ПолучитьИмяВременногоФайла();
	СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла(""txt"");
	Если ЭтоLinux Тогда
		СтрокаЗапуска = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ""1cv8 CREATEINFOBASE File=""""""  + ВременныйКаталогБазы +  """""" /out """""" + ИмяФайлаOUT + """""" > """""" + ИмяФайлаЛога + """""""";
		Отладка(СтрокаЗапуска);
		КомандаСистемы(СтрокаЗапуска);
	Иначе
		КомандаСистемы = """""""" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ""1cv8"""" CREATEINFOBASE File=""""""  + ВременныйКаталогБазы +  """""" /out """""" + ИмяФайлаOUT + """""" > """""" + ИмяФайлаЛога + """""""";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
	КонецЕсли;
	Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + ""/1Cv8.1CD"") Тогда
		СообщитьПользователю(""Файл EPF не создан. Не смог создать каталог временной базы."");
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT);
		
		ТекстСообщения = Локализовать(""Проверьте работу команды <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",КомандаСистемы); 
		СообщитьПользователю(ТекстСообщения);
		Возврат ;
	КонецЕсли;	 
	
	
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
	
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла(""txt"");
	
	Если ЭтоLinux Тогда
		СтрокаЗапуска = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ""1cv8 DESIGNER /F"""""" + ВременныйКаталогБазы + """""" /LoadExternalDataProcessorOrReportFromFiles """""" + КорневойФайлОбработки + """""" """""" + ИмяВременногоEPF + """""" /out """""" + ИмяФайлаOUT + """""" > """""" + ИмяФайлаЛога + """""""";
		Отладка(СтрокаЗапуска);
		КомандаСистемы(СтрокаЗапуска);
	Иначе
		СтрокаЗапуска = """""""" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ""1cv8"""" DESIGNER /F """""" + ВременныйКаталогБазы + """""" /LoadExternalDataProcessorOrReportFromFiles """""" + КорневойФайлОбработки + """""" """""" + ИмяВременногоEPF + """""" /out """""" + ИмяФайлаOUT + """""" > """""" + ИмяФайлаЛога + """""""";
		Отладка(СтрокаЗапуска);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапуска);
	КонецЕсли;

	Если ФайлСуществуетКомандаСистемы(ИмяВременногоEPF) Тогда
		ФайлИмяФайлаEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлИмяФайлаEpf.Путь) Тогда
			СоздатьКаталогКомандаСистемы(ФайлИмяФайлаEpf.Путь);
		КонецЕсли;	 
		ПереместитьФайлКомандаСистемы(ИмяВременногоEPF, СтруктураОписанияEpf.ИмяФайлаEpf);
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			ТекстСообщения = Локализовать(""Пересоздан %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтруктураОписанияEpf.ИмяФайлаEpf); 
			СообщитьПользователю(ТекстСообщения);
		Иначе	
			ТекстСообщения = Локализовать(""Создан %1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтруктураОписанияEpf.ИмяФайлаEpf); 
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	 
	Иначе
		СообщитьПользователю(""Файл EPF не создан."");
		ТекстСообщения = Локализовать(""Проверьте работу команды <%1>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаЗапуска); 
		СообщитьПользователю(ТекстСообщения);
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT);
	КонецЕсли;
	
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
	
	ОчиститьСодержимоеКаталога(ВременныйКаталогБазы);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстовыйФайлОднойСтрокой(ИмяФайла)
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла, ""ПолучитьТекстовыйФайлОднойСтрокой"") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, ""UTF-8"");
	Возврат Текст.Прочитать();
КонецФункции	

&НаКлиенте
Процедура УдалитьИсходникиEPF(ИмяФайлаEpf)
	ФайлEpf = Новый Файл(ИмяФайлаEpf);
	Если Не ФайлСуществуетКомандаСистемы(ФайлEpf.ПолноеИмя, ""УдалитьИсходникиEPF"" ) Тогда
		ТекстСообщения = Локализовать(""Файл <%1> не существует."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайлаEpf);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Путь = ФайлEpf.Путь + ""Src"";
	УдалитьКаталогКомандаСистемы(Путь);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpfПродолжение()
	СтруктураПараметров = глСтруктураПараметров;
	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;
	
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;
	
	МассивФич   = СтруктураПараметров.МассивФич;
	МассивШагов = СтруктураПараметров.МассивШагов;
	Ном = 0;
	Для каждого ИмяФайлаФичи Из МассивФич Цикл
		Ном = Ном + 1;
		Шаги = МассивШагов.Получить(Ном - 1);
		
		ФайлФичи       = Новый Файл(ИмяФайлаФичи);
		ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
		ТекстСообщения = Локализовать(""Работаю по фиче: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяФайлаФичи); 
		СообщитьПользователю(ТекстСообщения);
		
		МассивДляСозданияEpf = Новый Массив;
		ОтносительныйКаталогФичи = ФайлФичи.Путь;
		Если Найти(Прав(ОтносительныйКаталогФичи, 1), ""\/"") > 0 Тогда
			ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи, СтрДлина(ОтносительныйКаталогФичи) - 1);
		КонецЕсли;	 
		
		Отладка(""ОтносительныйКаталогФичи="" + ОтносительныйКаталогФичи);
		СтруктураОписанияEpf = СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи, ФайлФичи.ИмяБезРасширения, Истина, ДвДанныеvbFeatureReader, ДополнительныеПараметры);
		
		Снипеты = СнипетыПолучитьСнипетыПоШагам(Шаги, ДвДанныеvbFeatureReader, СлужебныеДанныеДляПарсераФич());
		ЗаполнитьПроцедуруПолучитьСписокТестов(СтруктураОписанияEpf.ТелоМодуля, Снипеты, ДвДанныеvbFeatureReader, ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		Для каждого ЭлемСнипет Из Снипеты Цикл
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, ЭлемСнипет.StepDefinition, ЭлемСнипет.Шаг, ШагСтрокДляМодуля, ЭлемСнипет.АдресСнипета, ГенерироватьУФ, ДвДанныеvbFeatureReader, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		КонецЦикла;
		
		БылиОшибки = Ложь;
		
		Если Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
			ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf);
		Иначе	
			СоздатьФайлыОбработок(БылиОшибки, СтруктураОписанияEpf, ДополнительныеПараметры);
		КонецЕсли;	 
		
	КонецЦикла; 	
	СообщитьПользователю(""Создание epf по фичам закончено."");
	
	
	// откроем каталог созданной epf
	Если НЕ Объект.РежимСамотестирования Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf); 
		Если ФайлСуществуетКомандаСистемы(ФайлEpf.ПолноеИмя) Тогда
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				ОписаниеОповещения = Вычислить(""Новый ОписаниеОповещения(""""ОбработатьОткрытьКаталогСозданнойEPF"""", ЭтаФорма)"");
				Выполнить(""НачатьЗапускПриложения(ОписаниеОповещения, ФайлEpf.Путь)"");
			Иначе	
				ЗапуститьПриложение("""""""" + ФайлEpf.Путь + """""""");
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры)
	ДанныеДляСнипетов = Новый Массив;
	
	ПолучатьСнипеты = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		Если ДополнительныеПараметры.Свойство(""ПолучатьСнипеты"") Тогда
			ПолучатьСнипеты = ДополнительныеПараметры.ПолучатьСнипеты;
		КонецЕсли;	 
	КонецЕсли;	 
	
	НомерФайла  = 0;
	ВсегоФайлов = ПомещенныеФайлы.Количество();
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[ПомещенныйФайл.Имя];
		Если ДанныеФайла = Неопределено Тогда
			ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[ПомещенныйФайл.ПолноеИмя];
		КонецЕсли;	  
		
		Если ДанныеФайла = Неопределено Тогда
			Если ДополнительныеПараметры.Свойство(""ТекШаг"") Тогда
				ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[ДополнительныеПараметры.ТекШаг.ИмяФайла];
			КонецЕсли;	 
		КонецЕсли;	 
		
		Файл = Новый Файл(ДанныеФайла.ИмяФайла);
		ВерсияФайла = ДанныеФайла.ВерсияФайла;
		БылиОшибки = Ложь;
		
		НомерФайла = НомерФайла + 1;
		Если ПолучатьСнипеты Тогда
			Если ВсегоФайлов > 10 Тогда
				Если (НомерФайла % 10) = 0 Тогда
					Состояние(""Файл №"" + НомерФайла + "" из "" + ВсегоФайлов, Окр((НомерФайла / ВсегоФайлов)*100), СокрЛП(ДанныеФайла.Имя));
				КонецЕсли;	 
			Иначе	
				Состояние(""Файл №"" + НомерФайла + "" из "" + ВсегоФайлов, Окр((НомерФайла / ВсегоФайлов)*100), СокрЛП(ДанныеФайла.Имя));
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПодключитьСнипетыИзОбработкиКлиент(Файл, ВерсияФайла, БылиОшибки, ДанныеДляСнипетов, ПомещенныйФайл.Хранение,ПолучатьСнипеты);
	КонецЦикла;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ТекстСообщенийПользователю"",Объект.ТекстСообщенийПользователю);
	ДобавитьСнипетыСерверМассивом(ДанныеДляСнипетов, ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикСделатьGenerateEpf(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	ЗаполнитьДеревоФичПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpf(СтруктураПараметров)
		
	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;
	
	ДополнительныеПараметры = Неопределено;
	Если СтруктураПараметров.Свойство(""ДополнительныеПараметры"") Тогда
		ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	КонецЕсли;	 
	
	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур       = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;
	
	
	МассивИменФайловКоторыеСовпалиСКеш = Новый Массив;
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();
	
	ДанныеДляПолученияСнипетов = Новый Массив;
	ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогФич, ДанныеДляПолученияСнипетов, ДополнительныеПараметры, 
		ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition, 
		ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition, МассивИменФайловКоторыеСовпалиСКеш);
	
	Для каждого Элем Из КаталогиБиблиотек Цикл
		КаталогБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогБиблиотеки, ДанныеДляПолученияСнипетов, ДополнительныеПараметры, 
			ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition, 
			ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition, МассивИменФайловКоторыеСовпалиСКеш);
	КонецЦикла;
	
	
	СтруктураПараметров.Вставить(""ДополнительныеПараметры"",ДополнительныеПараметры);
	СтруктураПараметров.Вставить(""МассивИменФайловКоторыеСовпалиСКеш"",МассивИменФайловКоторыеСовпалиСКеш);
	СтруктураПараметров.Вставить(""Путь"",КаталогФич);
	СтруктураПараметров.Вставить(""СписокТеговИсключение"", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить(""СписокТеговОтбор"", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить(""ИдетЗагрузкаИзКаталога"", Ложь);
	СтруктураПараметров.Вставить(""Брейкпоинты"", Брейкпоинты);
	СтруктураПараметров.Вставить(""МассивИменКонтекстовОбработок"", МассивИменКонтекстовОбработок);
	СтруктураПараметров.Вставить(""РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов"", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	глСтруктураПараметров = СтруктураПараметров;
	
	
	ДанныеФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого Данные Из ДанныеДляПолученияСнипетов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(Данные.ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ДанныеФайлов.Вставить(Данные.ИмяФайла,Новый Структура(""Имя,ИмяФайла,ВерсияФайла"",Данные.Имя,Данные.ИмяФайла,Данные.ВерсияФайла));
	КонецЦикла;	 
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		СделатьGenerateEpfПродолжение();
		Возврат;
	КонецЕсли;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить(""ДанныеФайлов"",ДанныеФайлов);
	Выполнить(""НачатьПомещениеФайлов(Новый ОписаниеОповещения(""""ОбработчикСделатьGenerateEpf"""", ЭтаФорма, ПараметрыЗавершения),
		|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)"");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытьКаталогСозданнойEPF(КодВозврата, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстМодуляИзСтруктураОписанияEpfСервер(ТекстМодуляВнутр)
	Стр = """";
	
	Тзн = ЗначениеИзСтрокиВнутр(ТекстМодуляВнутр);
	
	Для каждого СтрТзн Из Тзн Цикл
		Стр = Стр + СтрТзн.Стр + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf)
	Стр = ПолучитьТекстМодуляИзСтруктураОписанияEpfСервер(СтруктураОписанияEpf.ТелоМодуля);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(Стр);
	ТекстовыйДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьEPFПоМассивуФич(СтруктураПараметров)
	СообщитьПользователю(""Запускаю генерацию epf."");
	СделатьGenerateEpf(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокПродолжение(ДополнительныеПараметры = Неопределено)
	Если Не Объект.РежимСамотестирования Тогда
		ОчиститьСообщения();
	КонецЕсли;  
	СделатьПараметрыКорректными();	
	
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	Иначе	
		ДвДанныеvbFeatureReader = Неопределено;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""КаталогИнструментов"", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить(""КаталогФич"", Объект.КаталогФич);
	СтруктураПараметров.Вставить(""DebugLog"", Объект.DebugLog);
	СтруктураПараметров.Вставить(""ГенерироватьУФ"", Объект.ГенерироватьУФ);
	СтруктураПараметров.Вставить(""СоздаватьОбластиПриГенерацииКода"", Объект.СоздаватьОбластиПриГенерацииКода);
	СтруктураПараметров.Вставить(""ШагСтрокДляМодуля"", ШагСтрокДляМодуля);
	СтруктураПараметров.Вставить(""КаталогиБиблиотек"", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить(""СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур"", Объект.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
	
	МассивФич   = Новый Массив;
	МассивШагов = Новый Массив;
	ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров, МассивФич, МассивШагов);
	
	СтруктураПараметров.Вставить(""МассивФич"", МассивФич);
	СтруктураПараметров.Вставить(""МассивШагов"", МассивШагов);
	СтруктураПараметров.Вставить(""ДвДанныеvbFeatureReader"", ДвДанныеvbFeatureReader);
	СтруктураПараметров.Вставить(""ДополнительныеПараметры"", ДополнительныеПараметры);
	
	СоздатьEPFПоМассивуФич(СтруктураПараметров);
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

// Функция ДополнитьСлешВПуть
//
// Параметры:
//   ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	разделитель = ""\"";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		разделитель = ""/"";
		Каталог = СтрЗаменить(Каталог, ""\"", ""/"");
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

&НаКлиенте
Функция НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева, ЭтоПример,ЭтоШагКонтекста)
	ТекСтрокаДерева = СтрокаДерева;
	
	Пока Истина Цикл
		Если ТекСтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если (ТекСтрокаДерева.Тип = ""Сценарий"") Тогда
			Если ТекСтрокаДерева.ДопТип = ""Контекст"" Тогда
				ЭтоШагКонтекста = Истина;
			КонецЕсли;	 
			Возврат ТекСтрокаДерева;
		КонецЕсли;	 
		Если (ТекСтрокаДерева.Тип = ""Пример"") Тогда
			ЭтоПример = Истина;
			Возврат ТекСтрокаДерева;
		КонецЕсли;	 
		
		ТекСтрокаДерева = ТекСтрокаДерева.ПолучитьРодителя();
	КонецЦикла;
КонецФункции	

&НаКлиенте
Функция ПолучитьМассивСценариевФичи(СтрокаДерева)
	
	Массив = Новый Массив;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Строка Из ПодчиненныеСтроки Цикл
		Если Строка.Тип <> ""Сценарий"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Строка.ДопТип = ""Контекст"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Строка.ИдСтроки);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция НайтиСтрокуФичиЧерезРодителя(Стр)
	СтрокаДерева = Стр;
	Пока Истина Цикл
		Если СтрокаДерева.Тип = ""Фича"" Тогда
			Возврат СтрокаДерева;
		КонецЕсли;	 
		
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиСтрокуФичиЧерезРодителяСервер(Стр)
	СтрокаДерева = Стр;
	Пока Истина Цикл
		Если СтрокаДерева.Тип = ""Фича"" Тогда
			Возврат СтрокаДерева;
		КонецЕсли;	 
		
		СтрокаДерева = СтрокаДерева.Родитель;
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	

&НаКлиенте
Функция ИмяФайлаФичиИзПолногоПути(ПолныйПуть)
	Поз = Найти(НРег(ПолныйПуть),"".feature"");
	
	Если Поз > 0 Тогда
		Возврат СокрЛП(Лев(ПолныйПуть,Поз + СтрДлина("".feature"") - 1));
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция ЭтаФормаTestClientУжеОбрабатывалась(ИмяТекущейФормыTestClient)
	Для каждого Элем Из МассивСостояниеФормTestClient Цикл
		Если Элем.ИмяФормы = ИмяТекущейФормыTestClient Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

// {работа с TestClient

&НаСервереБезКонтекста
Функция СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclientСервер(ОжидаемаяТаблица,ТаблицаTestClient,СтрокаОшибки,СтруктураПараметров)
	
	Таблица1 = Новый ТаблицаЗначений;
	Таблица2 = Новый ТаблицаЗначений;
	Для Каждого Элем Из ОжидаемаяТаблица[0] Цикл
		Таблица1.Колонки.Добавить(Элем.Ключ,,Элем.Значение);
		Таблица2.Колонки.Добавить(Элем.Ключ,,Элем.Значение);
	КонецЦикла;	
	
	// Проверим, что в таблице2 есть все нужные колонки	
	Для Каждого Колонка Из Таблица2.Колонки Цикл
		Попытка
			Значение = ТаблицаTestClient[0][Колонка.Заголовок];
			Если Значение = Неопределено Тогда
				ТекстСообщения = ТекстСообщенияПользователюВызовСервера(""В таблице не найдена колонка <%1>"",СтруктураПараметров.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Колонка.Заголовок);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстСообщения = ТекстСообщенияПользователюВызовСервера(""В таблице не найдена колонка <%1>"",СтруктураПараметров.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Колонка.Заголовок);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;	
	
	// проверим вхождение строк
	НомОжидаемаяТаблица = 0;
	
	Для Каждого СтрокаОжидаемаяТаблица Из ОжидаемаяТаблица Цикл
		НашлиСтроку = Ложь; 
		
		НомОжидаемаяТаблица = НомОжидаемаяТаблица + 1;
		Если НомОжидаемаяТаблица = 1 Тогда
			Продолжить;
		КонецЕсли;	 
				
		Для Каждого СтрокаТаблицаTestClient Из ТаблицаTestClient Цикл
			ВсеКолонкиСовпали = Истина;
			Для Каждого Колонка Из Таблица1.Колонки Цикл
				ЗначениеОжидаемаяТаблица  = СтрокаОжидаемаяТаблица[Колонка.Имя];
				ЗначениеТаблицаTestClient = СтрокаТаблицаTestClient[Колонка.Заголовок];
				
				Если ЗначениеОжидаемаяТаблица <> ЗначениеТаблицаTestClient Тогда
					ВсеКолонкиСовпали = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если ВсеКолонкиСовпали Тогда
				НашлиСтроку = Истина; 
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
		
		Если Не НашлиСтроку Тогда
			ЗначениеСтроки = ""|"";
			Для Каждого Колонка Из Таблица1.Колонки Цикл
				ЗначениеСтроки = "" "" + ЗначениеСтроки + СтрокаОжидаемаяТаблица[Колонка.Имя] + "" |"" 
			КонецЦикла;	
			
			СтрокаОшибки = ""Строка <"" + ЗначениеСтроки + ""> не найдена"";
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ОчиститьМассивИД(МассивИд,МассивЭлементов)
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзМассиваПоляТаблицTestClient(ТекущаяФорма,МассивЭлементов)
	МассивИд = Новый Массив;
	
	ТаблицыФормы = НайтиТаблицыФормыTestClient(ТекущаяФорма);
	Для Каждого ТаблицаФормы Из ТаблицыФормы Цикл
		Ид = -1;
		Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
			Ид = Ид + 1;
			ЭлементТаблицы = ТаблицаФормы.НайтиОбъект(,,ПроверяемыйЭлемент.Имя);
			Если ЭлементТаблицы <> Неопределено Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		КонецЦикла;	
		
		ОчиститьМассивИД(МассивИд,МассивЭлементов);
		МассивИд = Новый Массив;
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Процедура ОставитьВМассивеТолькоПоляГиперссылок(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> ВидПоляФормы.ПолеНадписи
			И ПроверяемыйЭлемент.Вид <> ВидДекорацииФормы.Надпись
			И ПроверяемыйЭлемент.Вид <> ВидДекорацииФормы.Картинка
			Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьГруппыФормыИзМассива(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ТипЗнч(ПроверяемыйЭлемент) = Тип(""ТестируемаяГруппаФормы"") Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзМассиваПоляВКоторыеНеВозможенВводТекстаTestClient(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 	
		
		Попытка
			// попытка нужна, т.к. элемент может не позволить проверить своё состояние
			Если НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяДоступность() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли ПроверяемыйЭлемент.ТекущееТолькоПросмотр() Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов,НужныйВидПоляФормы)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> НужныйВидПоляФормы Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьНевидимыеЭлементыИзМассиваЭлементовTestClient(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Попытка
			// Могут быть объекты, у которых нет метода ТекущаяВидимость()
			Если НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		Исключение
			МассивИд.Добавить(Ид);
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивЭлементов,ДопПараметры) Экспорт
	МассивИд = Новый Массив;
	ИсключитьГруппы = Истина;
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
		Если ДопПараметры.Свойство(""ИсключитьГруппы"") Тогда
			ИсключитьГруппы = ДопПараметры.ИсключитьГруппы;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Попытка
			// попытка нужна, т.к. элемент может не позволить проверить своё состояние
			Если ТипЗнч(ПроверяемыйЭлемент) = Тип(""ТестируемаяГруппаФормы"") И ИсключитьГруппы Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяДоступность() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли ПроверяемыйЭлемент.ТекущееТолькоПросмотр() Тогда
				Если ТипЗнч(ПроверяемыйЭлемент) <> Тип(""ТестируемаяДекорацияФормы"") 
					И ПроверяемыйЭлемент.Вид <> ВидПоляФормы.ПолеНадписи Тогда
					// Если картинка или надпись является гиперссылкой, то по ней можно кликать в режиме ТолькоПросмотр.
					МассивИд.Добавить(Ид);
				КонецЕсли;	 
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОставитьТолькоСтраницыВМассивеЭлементов(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> ВидГруппыФормы.Страница Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиРеквизитВМассивеФорм(МассивФорм,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры)
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени = Неопределено Тогда
			ОпределитьРежимПоискаЭлементаНаФорме(ИмяРеквизита,ИскатьПоИмени);
		КонецЕсли;	 
		
		Попытка
			Если ИскатьПоИмени Тогда
				ЭлементФормы = ТекущаяФорма.НайтиОбъект(ТипПоля, , ИмяРеквизита);
				МассивЭлементов = Новый Массив;
				МассивЭлементов.Добавить(ЭлементФормы);
			Иначе
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты(ТипПоля, ИмяРеквизита);
			КонецЕсли;	 
		Исключение
			// некоторые служебные формы могут вызвать исключение на поиск объектов
			Продолжить;
		КонецПопытки;
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ОбработатьМассивЭлементовTestClient(ТекущаяФорма,МассивЭлементов,ИмяРеквизита,ДопПараметры);
		
		ПолеРеквизит = МассивЭлементов[0];
		Если ДопПараметры <> Неопределено Тогда
			ДопПараметры.Вставить(""ТекущаяФормаЭлемента"",ТекущаяФорма);
		КонецЕсли;	 
		
		Возврат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивЭлементовTestClient(КонтейнерЭлементов,МассивЭлементов,ИмяРеквизита,ДопПараметры)
	Если ТипЗнч(МассивЭлементов) = Тип(""ФиксированныйМассив"") Тогда
		МассивЭлементов = Новый Массив(МассивЭлементов); //преобразуем фиксированный массив в обычный
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1 Тогда
		ИсключатьНевидимыеЭлементы = Истина;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство(""ИсключатьНевидимыеЭлементы"") Тогда
				ИсключатьНевидимыеЭлементы = ДопПараметры.ИсключатьНевидимыеЭлементы;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИсключатьНевидимыеЭлементы Тогда
			УдалитьНевидимыеЭлементыИзМассиваЭлементовTestClient(МассивЭлементов);
		КонецЕсли;	 
	КонецЕсли;
	
	Если МассивЭлементов.Количество() > 1 Тогда
		ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы = Истина;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство(""ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы"") Тогда
				ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы = ДопПараметры.ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы Тогда
			УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивЭлементов,ДопПараметры);
		КонецЕсли;	 
	КонецЕсли;
	
	Если (ДопПараметры <> Неопределено) И (МассивЭлементов.Количество() > 1) Тогда
		Если МассивЭлементов.Количество() > 1 Тогда
			ПоискЗакладки = Ложь;
			Если ДопПараметры.Свойство(""ПоискЗакладки"",ПоискЗакладки) Тогда
				Если ПоискЗакладки = Истина Тогда
					ОставитьТолькоСтраницыВМассивеЭлементов(МассивЭлементов);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ИскатьТолькоПоляВКоторыеВозможенВводТекста = Ложь;
			ДопПараметры.Свойство(""ИскатьТолькоПоляВКоторыеВозможенВводТекста"",ИскатьТолькоПоляВКоторыеВозможенВводТекста);
			Если ИскатьТолькоПоляВКоторыеВозможенВводТекста = Истина Тогда
				УдалитьИзМассиваПоляВКоторыеНеВозможенВводТекстаTestClient(МассивЭлементов);
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ОставитьТолькоФлаги = Ложь;
			ДопПараметры.Свойство(""ОставитьТолькоФлаги"",ОставитьТолькоФлаги);
			Если ОставитьТолькоФлаги = Истина Тогда
				УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов,ВидПоляФормы.ПолеФлажка);
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ОставитьТолькоПереключатели = Ложь;
			ДопПараметры.Свойство(""ОставитьТолькоПереключатели"",ОставитьТолькоПереключатели);
			Если ОставитьТолькоПереключатели = Истина Тогда
				УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов,ВидПоляФормы.ПолеПереключателя);
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ИскатьТолькоПоляГиперссылок = Ложь;
			ДопПараметры.Свойство(""ИскатьТолькоПоляГиперссылок"",ИскатьТолькоПоляГиперссылок);
			Если ИскатьТолькоПоляГиперссылок = Истина Тогда
				ОставитьВМассивеТолькоПоляГиперссылок(МассивЭлементов);
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ИсключитьГруппы = Ложь;
			ДопПараметры.Свойство(""ИсключитьГруппы"",ИсключитьГруппы);
			Если ИсключитьГруппы = Истина Тогда
				ИсключитьГруппыФормыИзМассива(МассивЭлементов);
			КонецЕсли;	 
		КонецЕсли;
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1 Тогда
		// это самое тяжелое по времени действие
		УдалитьИзМассиваПоляТаблицTestClient(КонтейнерЭлементов,МассивЭлементов);
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1  Тогда
		ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
		ТекстСообщения = Локализовать(""Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() = 0 Тогда
		ТекстСообщения = Локализовать(""Реквизит <%1> не найден."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиРеквизитВАктивномОкне(ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры)
	Если ИскатьПоИмени = Неопределено Тогда
		ОпределитьРежимПоискаЭлементаНаФорме(ИмяРеквизита,ИскатьПоИмени);
	КонецЕсли;	 
	
	Если ОбъектКонтекст.Свойство(""АктивноеОкно"") И ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
		ТекущееОкно = ОбъектКонтекст.АктивноеОкно;
	Иначе	
		ТекущееОкно = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	КонецЕсли;	 
	
	Попытка
		Если ИскатьПоИмени Тогда
			МассивЭлементов = Новый Массив();
			МассивЭлементов.Добавить(ТекущееОкно.НайтиОбъект(ТипПоля, , ИмяРеквизита));
		Иначе
			МассивЭлементов = ТекущееОкно.НайтиОбъекты(ТипПоля, ИмяРеквизита);
		КонецЕсли;	 
	Исключение
		// некоторые служебные формы могут вызвать исключение на поиск объектов
		Возврат;
	КонецПопытки;
	
	Если МассивЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ОбработатьМассивЭлементовTestClient(ТекущееОкно,МассивЭлементов,ИмяРеквизита,ДопПараметры);
	
	ПолеРеквизит = МассивЭлементов[0];
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзКонтекста()
	Если ОбъектКонтекст.Свойство(""АктивноеОкно"") Тогда
		Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
			Возврат ОбъектКонтекст.АктивноеОкно;
		КонецЕсли;	 
	КонецЕсли;
	
	Возврат ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции	

&НаКлиенте
Функция ПолучитьТекстЗаголовокРеквизитаРодитель(ТекстЗаголовка, ИмяРодителя)
	Возврат ТекстЗаголовка + ""_"" + ИмяРодителя;
КонецФункции	

&НаКлиенте
Функция ПолучитьСвойстваОбъекта(ЭлементФормы, МассивЗаголовковПолей, МассивЗаголовковКнопок, ИмяРодителя)
	Рез = Новый Структура;
	Рез.Вставить(""Имя"", ЭлементФормы.Имя);
	Рез.Вставить(""ТекстЗаголовка"", ЭлементФормы.ТекстЗаголовка);
	Рез.Вставить(""ИмяРодителя"", ИмяРодителя);
	
	Если ТипЗнч(ЭлементФормы) = Тип(""ТестируемоеПолеФормы"") Тогда
		МассивЗаголовковПолей.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип(""ТестируемаяКнопкаФормы"") Тогда
		МассивЗаголовковКнопок.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип(""ТестируемаяГруппаФормы"") Тогда
		МассивЗаголовковПолей.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип(""ТестируемаяДекорацияФормы"") Тогда
		МассивЗаголовковКнопок.Добавить(ЭлементФормы.ТекстЗаголовка);
	КонецЕсли;	 
	
	Возврат Рез;
КонецФункции	

&НаКлиенте
Функция ПолучитьЭлементыФормыИерархически(Элементформы, МассивЗаголовковПолей, МассивЗаголовковКнопок)
	Рез = Новый Массив;
	
	НайденныеОбъекты = Элементформы.ПолучитьПодчиненныеОбъекты();
	Для каждого Элем Из НайденныеОбъекты Цикл
		
		Если ТипЗнч(Элементформы) = Тип(""ТестируемаяФорма"") Тогда
			СвойстваОбъекта = ПолучитьСвойстваОбъекта(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок, Элементформы.ИмяФормы);
		Иначе	
			СвойстваОбъекта = ПолучитьСвойстваОбъекта(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок, Элементформы.Имя);
		КонецЕсли;	 
		
		Рез.Добавить(СвойстваОбъекта);
		
		ПодчиненныеОбъекты = ПолучитьЭлементыФормыИерархически(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок);
		СвойстваОбъекта.Вставить(""ПодчиненныеОбъекты"", ПодчиненныеОбъекты);
		
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьСостояниеФормыTestclient(ТекущаяФорма)
	СостояниеФормы = Новый Структура;
	СостояниеФормы.Вставить(""ИмяФормы"", ТекущаяФорма.ИмяФормы);
	СостояниеФормы.Вставить(""ТекстЗаголовка"", ТекущаяФорма.ТекстЗаголовка);
	МассивЗаголовковПолей = Новый Массив;
	СостояниеФормы.Вставить(""МассивЗаголовковПолей"", МассивЗаголовковПолей);
	
	МассивЗаголовковКнопок = Новый Массив;
	СостояниеФормы.Вставить(""МассивЗаголовковКнопок"", МассивЗаголовковКнопок);
	
	
	МассивСостояниеФормTestClient.Добавить(СостояниеФормы);
	Попытка		
		МассивОбъектов = ПолучитьЭлементыФормыИерархически(ТекущаяФорма, МассивЗаголовковПолей, МассивЗаголовковКнопок);	
	Исключение
		ТекстСообщения = Локализовать(""ДобавитьСостояниеФормыTestclient: %1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	СостояниеФормы.Вставить(""МассивОбъектов"", МассивОбъектов);
	Отладка(""Запомнил имена реквизитов формы: "" + ТекущаяФорма.ИмяФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостояниеТекущейФормыTestClient()
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	МассивФорм     = ОкноПриложения.НайтиОбъекты(Тип(""ТестируемаяФорма""));
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		ИмяТекущейФормыTestClient = ТекущаяФорма.ИмяФормы;
		
		Если ЭтаФормаTestClientУжеОбрабатывалась(ИмяТекущейФормыTestClient) Тогда
			Возврат;
		КонецЕсли;	 
		
		ДобавитьСостояниеФормыTestclient(ТекущаяФорма);
	КонецЦикла;
	
	
КонецПроцедуры

// }работа с TestClient

&НаКлиенте
Процедура ОпросЭлементовФормTestClient()
	Если ИдетОпросЭлементовФормTestClient Тогда
		Возврат;
	КонецЕсли;	 
	
	ИдетОпросЭлементовФормTestClient = Истина;
	Попытка
		ЗаполнитьСостояниеТекущейФормыTestClient();
	Исключение
		Отладка("""" + ОписаниеОшибки());
	КонецПопытки;
	
	ИдетОпросЭлементовФормTestClient = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюЗаписиДействийПользователя(МоментЗаписи)

	Если МоментЗаписи = ""НачатьЗапись"" Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Видимость        = Ложь;
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина;
		
	ИначеЕсли МоментЗаписи = ""ПриостановитьЗапись"" Тогда
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Ложь;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Истина;

	ИначеЕсли МоментЗаписи = ""ПродолжитьЗапись"" Тогда
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Ложь;
		
	ИначеЕсли МоментЗаписи = ""ЗавершитьЗапись"" Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Видимость        = Истина;
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Ложь;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Ложь;
		
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьКод1СИзUILogToScriptСервер(ДвоичныеДанные, Стр)
	ИмяВременногоEPF = ПолучитьИмяВременногоФайла(""epf"");
	ДвоичныеДанные.Записать(ИмяВременногоEPF);
	
	Обработка                           = ВнешниеОбработки.Создать(ИмяВременногоEPF);
	Обработка.ObjectSearch              = 2;
	Обработка.SplitScriptIntoProcedures = Истина;
	Обработка.MainProcedureName         = ""ВыполнитьДействия"";
	
	Возврат Обработка.Convert(Стр);
	
КонецФункции	

&НаКлиенте
Процедура ОбработатьПолученныйКодUILogToScript(Стр)
	Стр = СтрЗаменить(Стр, ""ТестовоеПриложение.НайтиОбъект"", ""КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект"");
	Стр = СтрЗаменить(Стр, ""ТестовоеПриложение.ПолучитьПодчиненныеОбъекты()"", ""КонтекстСохраняемый.ТестовоеПриложение.ПолучитьПодчиненныеОбъекты()"");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПервоеКлючевоеСлово(СчетчикДействий, ТипДействия = Неопределено)
	СчетчикДействий = СчетчикДействий + 1;
	Если (СчетчикДействий > 1) И (ТипДействия = ""ОткрытиеОкна"") Тогда
		Возврат ""	Тогда"";
	КонецЕсли;	 
	
	Если СчетчикДействий = 1 Тогда
		Возврат ""	Когда"";
	Иначе
		Возврат ""	И"";
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Функция ПолучитьТекстФичиИзКодаUILogToScriptOld(Знач Стр)
	Результат = ""#language: ru
	|
	|Функционал: <описание фичи>
	|
	|Как <Роль> я хочу
	|<описание функционала> 
	|чтобы <бизнес-эфект> 
	|
	|Сценарий: <описание сценария> 
	|
	|"";
	
	
	
	ИмяФайла = ПолучитьИмяВременногоФайла(""txt"");
	ЗТ = Новый ЗаписьТекста(ИмяФайла, ""UTF-8"", , Истина); 
	ЗТ.ЗаписатьСтроку(Стр); 
	ЗТ.Закрыть();
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, ""UTF-8"");
	
	СтрПоиска = """";
	
	ТипДействия = """";
	ИмяОкнаТестируемоеОкноКлиентскогоПриложения = """";
	ИмяТестируемойФормы                         = """";
	ИмяЭлементаФормы                            = """";
	СчетчикДействий                             = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(НРег(Стр), НРег(""ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип(""""ТестируемаяКнопкаКомандногоИнтерфейса"""")"")) > 0 Тогда
			// это нажатие кнопки командного интерфейса
			ТипДействия = ""ТестируемаяКнопкаКомандногоИнтерфейса"";
			Поз = Найти(НРег(Стр), НРег(""ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип(""""ТестируемаяКнопкаКомандногоИнтерфейса"""")""));
			
			ПромСтр = Сред(Стр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, ""ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип(""""ТестируемаяКнопкаКомандногоИнтерфейса""""),"", """");
			
			ПромСтр = СтрЗаменить(ПромСтр, "");"", """");
			ПромСтр = СтрЗаменить(ПромСтр, """""""", """");
			ПромСтр = СокрЛП(ПромСтр);
			
			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" Я нажимаю кнопку командного интерфейса """""" + ПромСтр + """""""" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег(""ТестовоеПриложение.НайтиОбъект(Тип(""""ТестируемоеОкноКлиентскогоПриложения"""")"")) > 0 Тогда
			// это работа с открытым окном
			Поз = Найти(НРег(Стр), НРег(""ТестовоеПриложение.НайтиОбъект(Тип(""""ТестируемоеОкноКлиентскогоПриложения"""")""));
			
			ПромСтр = Сред(Стр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, ""ТестовоеПриложение.НайтиОбъект(Тип(""""ТестируемоеОкноКлиентскогоПриложения""""),"", """");
			
			Поз = Найти(ПромСтр, """""","");
			ПромСтр = Лев(ПромСтр, Поз);
			
			ПромСтр = СтрЗаменить(ПромСтр, """""""", """");
			ПромСтр = СокрЛП(ПромСтр);
			
			ИмяОкнаТестируемоеОкноКлиентскогоПриложения = ПромСтр;
			
		ИначеЕсли Найти(НРег(Стр), НРег("".НайтиОбъект(Тип(""""ТестируемаяФорма"""")"")) > 0 Тогда
			Поз = Найти(НРег(Стр), НРег("".НайтиОбъект(Тип(""""ТестируемаяФорма"""")""));
			
			ПромСтр = Сред(Стр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, "".НайтиОбъект(Тип(""""ТестируемаяФорма""""),"", """");
			ПромСтр = СтрЗаменить(ПромСтр, "");"", """");
			ПромСтр = СтрЗаменить(ПромСтр, """""""", """");
			ПромСтр = СокрЛП(ПромСтр);
			
			ИмяТестируемойФормы = ПромСтр;
		ИначеЕсли Найти(НРег(Стр), НРег(""ТаблицаСписок.Выбрать();"")) > 0 Тогда
			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" В окне """""" + ИмяОкнаТестируемоеОкноКлиентскогоПриложения + """""" в форме списка """""" + ИмяТестируемойФормы + """""" я выбираю текущий элемент."" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег("".НайтиОбъект(Тип(""""ТестируемоеПолеФормы"""")"")) > 0 Тогда
			Массив  = РазложитьСтрокуВМассивПодстрок(Стр, "","");
			ПромСтр = Массив[Массив.Количество() - 1];
			ПромСтр = СтрЗаменить(ПромСтр, "");"", """");
			ПромСтр = СтрЗаменить(ПромСтр, """""""", """");
			ПромСтр = СокрЛП(ПромСтр);
			
			ИмяЭлементаФормы = ПромСтр;
		ИначеЕсли Найти(НРег(Стр), НРег("".ВвестиТекст("")) > 0 Тогда
			ПромСтр = Стр;
			Поз     = Найти(ПромСтр, "".ВвестиТекст("");
			ПромСтр = Сред(ПромСтр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, "".ВвестиТекст("", """");
			ПромСтр = СтрЗаменить(ПромСтр, "");"", """");
			ПромСтр = СтрЗаменить(ПромСтр, """""""", """");
			
			ЗначениеВвода = ПромСтр;
			

			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в поле """""" + ИмяЭлементаФормы + """""" я ввожу значение """""" + ЗначениеВвода + """""""" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег("".ВыполнитьВыборИзСпискаВыбора("")) > 0 Тогда
			ПромСтр = Стр;
			Поз     = Найти(ПромСтр, "".ВыполнитьВыборИзСпискаВыбора("");
			ПромСтр = Сред(ПромСтр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, "".ВыполнитьВыборИзСпискаВыбора("", """");
			ПромСтр = СтрЗаменить(ПромСтр, "");"", """");
			ПромСтр = СтрЗаменить(ПромСтр, """""""", """");
			
			ЗначениеВвода = ПромСтр;
			

			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в выпадающем списке """""" + ИмяЭлементаФормы + """""" я ввожу значение """""" + ЗначениеВвода + """""""" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег("".ВыполнитьВыборИзВыпадающегоСписка("")) > 0 Тогда
			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" у поля """""" + ИмяЭлементаФормы + """""" я открываю форму выбора"" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег("".НайтиОбъект(Тип(""""ТестируемаяКнопкаФормы""""),"")) > 0 Тогда
			
			Поз = Найти(Стр, "".НайтиОбъект(Тип(""""ТестируемаяКнопкаФормы""""),"");
			ПромСтр = Сред(Стр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, "".НайтиОбъект(Тип(""""ТестируемаяКнопкаФормы""""),"", """");
			
			Поз = Найти(ПромСтр, """""", "");
			ПромСтр = Лев(ПромСтр, Поз);
			
			ПромСтр = СтрЗаменить(ПромСтр, "");"", """");
			ПромСтр = СтрЗаменить(ПромСтр, """""""", """");
			ПромСтр = СокрЛП(ПромСтр);
			
			ИмяКнопки = ПромСтр;
			
			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю кнопку """""" + ИмяКнопки + """""""" + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	
	
	Текст.Закрыть();
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, Имя);
	ИдВМассиве                 = ИдВМассиве + 1;
	МассивОбъектов[ИдВМассиве] = Имя;
	МассивСвойств [ИдВМассиве] = Новый Соответствие;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, Имя);
	МассивОбъектов[ИдВМассиве] = Неопределено;
	МассивСвойств [ИдВМассиве] = Неопределено;
	ИдВМассиве                 = ИдВМассиве - 1;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПараметрыВСтрокеПримера(Знач Стр)
	Массив = Новый Массив;
	
	
	Стр = СтрЗаменить(Стр,""\|"",""~ЭкранированиеВертикальнойЧерты~"");
	
	Стр = СокрЛП(Стр);
	Если Лев(Стр, 1) <> ""|"" Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	Если Прав(Стр, 1) <> ""|"" Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	Стр = Сред(Стр, 2);
	Стр = Сред(Стр, 1, СтрДлина(Стр) - 1);
	// убрали символы |
	
	Массив = РазложитьСтрокуВМассивПодстрок(Стр, ""|"");
	
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Массив[Ккк] = СокрЛП(Массив[Ккк]);
		Массив[Ккк] = СтрЗаменить(Массив[Ккк],""~ЭкранированиеВертикальнойЧерты~"",""\|"");
	КонецЦикла;
	
	Спс = Новый СписокЗначений;
	Для каждого Элем Из Массив Цикл
		Спс.Добавить(Элем);
	КонецЦикла;
	
	Возврат  Спс;
КонецФункции

&НаКлиенте
Процедура УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(Текст, Стр1, Стр2)
	СтрокаТекста = Текст.ПолучитьСтроку(Текст.КоличествоСтрок());
	
	Если Найти(СтрокаТекста, Стр1) = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Найти(СтрокаТекста, Стр2) = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивДублирующихсяЗаголовковСервер(МассивЗаголовковПолей)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить(""Заголовок"");
	
	
	Для Н=1 По МассивЗаголовковПолей.Количество() Цикл
		Тзн.Добавить();
	КонецЦикла;	
	
	Тзн.ЗагрузитьКолонку(МассивЗаголовковПолей, ""Заголовок"");
	
	Тзн.Колонки.Добавить(""Кол"");
	
	
	
	Для каждого СтрТзн Из Тзн Цикл
		СтрТзн.Кол = 1;
	КонецЦикла;
	
	
	Тзн.Свернуть(""Заголовок"", ""Кол"");
	
	Рез = Новый Массив;
	Для каждого СтрТзн Из Тзн Цикл
		Если СтрТзн.Кол > 1 Тогда
			Рез.Добавить(СтрТзн.Заголовок);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Рез;
КонецФункции	

&НаКлиенте
Функция ПреобразоватьМассивСостояниеФормTestClient(МассивСостояниеФорм)
	
	Массив = Новый Массив;
	
	Если МассивСостояниеФорм = Неопределено Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	Для каждого СостояниеФормы Из МассивСостояниеФорм Цикл
		Рез = Новый Структура;
		Рез.Вставить(""ИмяФормы"", СостояниеФормы.ИмяФормы);
		Рез.Вставить(""ТекстЗаголовка"", СостояниеФормы.ТекстЗаголовка);
		
		МассивЗаголовковПолей = СостояниеФормы.МассивЗаголовковПолей;
		МассивДублирующихсяЗаголовковПолей = ПолучитьМассивДублирующихсяЗаголовковСервер(МассивЗаголовковПолей);
		Рез.Вставить(""МассивДублирующихсяЗаголовковПолей"", МассивДублирующихсяЗаголовковПолей);
		
		МассивЗаголовковКнопок = СостояниеФормы.МассивЗаголовковКнопок;
		МассивДублирующихсяЗаголовковКнопок = ПолучитьМассивДублирующихсяЗаголовковСервер(МассивЗаголовковКнопок);
		Рез.Вставить(""МассивДублирующихсяЗаголовковКнопок"", МассивДублирующихсяЗаголовковКнопок);
		//Для каждого Элем Из МассивДублирующихсяЗаголовоковПолей Цикл
		//	Сообщить(""Дубль: "" + Элем);
		//КонецЦикла;
		
		Массив.Добавить(Рез);
		
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция СтрокиРавныСУчётомЗвёздочек(Знач Стр1, Знач Стр2)
	// основная строка первая
	Массив1 = РазложитьСтрокуВМассивПодстрок(Стр1, "" "");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Стр2, "" "");
	
	
	Если Массив1.Количество() = (Массив2.Количество() + 1) Тогда
		Если Массив1[Массив1.Количество() - 1] = ""*"" Тогда //значит тут последний символ *
			Массив1.Удалить(Массив1.Количество() - 1);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Массив1.Количество() <> Массив2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		С1 = Массив1[Ккк];
		С2 = Массив2[Ккк];
		Если С1 = С2 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если С1 = ""*"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Возврат Ложь;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Функция ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФормаЗаголовок, ЗаголовокПоля, ТипОбъекта)
	Для каждого СтруктураФормы Из МассивСтруктурФорм Цикл
		Если СтрокиРавныСУчётомЗвёздочек(ТекущаяФормаЗаголовок, СтруктураФормы.ТекстЗаголовка) Тогда
			Если ТипОбъекта = ""ПолеФормы"" Тогда
				Если СтруктураФормы.МассивДублирующихсяЗаголовковПолей.Найти(ЗаголовокПоля) <> Неопределено Тогда
					Отладка(""Поле """""" + ЗаголовокПоля + """""" имеет дубли с таким же заголовком. Поиск будет происходить по имени."");
					Возврат Истина;
				КонецЕсли;	 
			ИначеЕсли ТипОбъекта = ""Кнопка"" Тогда
				Если СтруктураФормы.МассивДублирующихсяЗаголовковКнопок.Найти(ЗаголовокПоля) <> Неопределено Тогда
					Отладка(""Кнопка """""" + ЗаголовокПоля + """""" имеет дубли с таким же заголовком. Поиск будет происходить по имени."");
					Возврат Истина;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		//Сообщить(""Сохранено: "" + СтруктураФормы.ТекстЗаголовка);
	КонецЦикла;
	
	//Сообщить(""Передано "" + ТекущаяФормаЗаголовок);
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Процедура ЗаменитьСимволПереводаСтрокВXML(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,""UTF-8"");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр,""|"",""\|"");
		Стр = СтрЗаменить(Стр,""\n"",""~ЭкранированиеСлешЭн~"");
		
		
		Если Лев(СокрЛП(Стр),1) <> ""<"" Тогда
			// тогда нашли перенос строки
			Если Массив.Количество() > 1 Тогда
				Ид = Массив.Количество()-2+1;
				Массив[Ид] = Массив[Ид] + ""\n"" + Стр;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
	КонецЦикла;	
	Текст.Закрыть();
	
	
	
	ИмяВременногоXML = ПолучитьИмяВременногоФайла(""xml"");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоXML,""UTF-8"",,Истина); 
	Для Каждого Стр Из Массив Цикл
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	ЗТ.Закрыть();
	
	ПереместитьФайлКомандаСистемы(ИмяВременногоXML,ИмяФайла);
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьСтрокуКДатеИзДанныхXML(Стр)
	Стр = СтрЗаменить(Стр,""-"","""");
	Стр = СтрЗаменить(Стр,"":"","""");
	Стр = СтрЗаменить(Стр,""T"","""");
	
	Попытка
		Дат = Дата(Стр);
	Исключение
		Возврат Стр;
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Формат(Дат,""ДФ=dd.MM.yyyy"");
КонецФункции	

&НаКлиенте
Процедура ПолучитьТекстФичиИзДействийПользователя(Результат)
	ИмяВременногоXML = ПолучитьИмяВременногоФайла(""xml"");
	
	МассивСтруктурФорм = ПреобразоватьМассивСостояниеФормTestClient(МассивСостояниеФормTestClient);
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоXML, ""UTF-8"", , Истина); 
	ЗТ.Записать(Результат); 
	ЗТ.Закрыть();
	
	ЗаменитьСимволПереводаСтрокВXML(ИмяВременногоXML);
	
	ТекстРезультат = Новый ТекстовыйДокумент;
	ТекстРезультат.ДобавитьСтроку("""");
	
	XML = Новый ЧтениеXML;
	XML.ОткрытьФайл(ИмяВременногоXML);
	
	МассивОбъектов = Новый Массив(100);
	МассивСвойств  = Новый Массив(МассивОбъектов.Количество());
	ИдВМассиве     = -1;
	
	СчетчикДействий      = 0;
	ТаблицаСвойствСтроки = Неопределено;
	НашлиПанельРазделов  = Ложь;//надо для обхода бага, когда в логе действий пользователя нет нажатия на панель разделов
	
	ФлагРедактированияТекстаМакета = Ложь;
	
	ТекущееОкно          = """";
	ПредыдущееОкно       = """";
	ТекущаяФорма         = """";
	ТекущаяТЧ            = """";
	ДанныеНажатияНаЭлементФормы = Неопределено;
	
	ЗначениеСтрокиinputText = """";
	Пока XML.Прочитать() Цикл
		
		ИмяУзла = XML.Имя;
		Если XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ДобавитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, ИмяУзла);
			Если (ИмяУзла = ""gotoRow"") ИЛИ (ИмяУзла = ""expand"") ИЛИ (ИмяУзла = ""collapse"") Тогда
				ТаблицаСвойствСтроки = Новый Массив();
			ИначеЕсли ИмяУзла = ""Field"" Тогда
				СвойствоСтроки = Новый Соответствие;
			КонецЕсли;	 
			Пока XML.ПрочитатьАтрибут() Цикл
				МассивСвойств[ИдВМассиве].Вставить(XML.Имя, XML.Значение);
				Если XML.Имя = ""name"" Тогда
					ЗначениеСтрокиinputText = """";
				КонецЕсли;	 
				
				Если ИмяУзла = ""Field"" Тогда
					СвойствоСтроки.Вставить(XML.Имя, XML.Значение);
				КонецЕсли;	 
			КонецЦикла;
			
			Если ИмяУзла = ""Form"" Тогда
				ТекущаяФорма = МассивСвойств[ИдВМассиве][""title""];
				ДанныеНажатияНаЭлементФормы = Неопределено;
				Если Объект.ДобавлятьПриНакликиванииМетаИнформацию Тогда
					Для каждого ЭлМассива Из МассивСостояниеФормTestClient Цикл
						Если ТекущаяФорма <> """" И ЭлМассива.ТекстЗаголовка = ТекущаяФорма  Тогда
							ТекстРезультат.ДобавитьСтроку(Символы.Таб + ""//FormName="" + ЭлМассива.ИмяФормы);	
						КонецЕсли;
					КонецЦикла
				КонецЕсли;
			ИначеЕсли ИмяУзла = ""ClientApplicationWindow"" Тогда
				ТекущееОкно = МассивСвойств[ИдВМассиве][""caption""];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			ИначеЕсли ИмяУзла = ""FormTable"" Тогда
				ТекущаяТЧ = МассивСвойств[ИдВМассиве][""name""];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			КонецЕсли;	 
			
			Если ИмяУзла = ""click"" Тогда
				ДанныеНажатияНаЭлементФормы = Неопределено;
				Если МассивОбъектов[ИдВМассиве - 1] = ""CommandInterfaceButton"" Тогда
					Если НРег(МассивСвойств[1][""isMain""]) = ""true"" Тогда
						Если ЭтоПанельРазделов(МассивСвойств[ИдВМассиве - 2][""title""]) Тогда
							Если Объект.ДобавлятьПриНакликиванииМетаИнформацию Тогда
								ТекстРезультат.ДобавитьСтроку(Символы.Таб + ""//SectionPanel="" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]));
							КонецЕсли;
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" В панели разделов я выбираю '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""'"");
							НашлиПанельРазделов = Истина;
						ИначеЕсли ЭтоПанельОткрытых(МассивСвойств[ИдВМассиве - 2][""title""]) Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" В панели открытых я выбираю '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""'"");
						ИначеЕсли ЭтоМенюФункций(МассивСвойств[ИдВМассиве - 2][""title""]) ИЛИ ЭтоМенюФункций(МассивСвойств[ИдВМассиве - 3][""title""]) Тогда
							Если Не НашлиПанельРазделов Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в xml не найдено значение клика в панели разделов. Проверьте xml, который был получен с TestClient."");
							КонецЕсли;	 
							
							ЗаменилиПредыдущуюСтроку = Ложь;
							Если ТекстРезультат.КоличествоСтрок() > 1 Тогда
								ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
								Поз = Найти(НРег(ПредыдущаяСтрока),НРег(""В панели разделов я выбираю""));
								Если Поз > 0 Тогда
									ЗаменилиПредыдущуюСтроку = Истина;
									
									ИмяПанелиРазделов = СокрЛП(Сред(ПредыдущаяСтрока,Поз + СтрДлина(""В панели разделов я выбираю"")));
									
									ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
									Если Объект.ДобавлятьПриНакликиванииМетаИнформацию Тогда
										ТекстРезультат.ДобавитьСтроку(Символы.Таб + ""//FunctionsMenu="" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]));
									КонецЕсли;
									
									ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" В командном интерфейсе я выбираю "" + ИмяПанелиРазделов +  "" '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""'"");
								КонецЕсли;	 
							КонецЕсли;	 
							
							Если НЕ ЗаменилиПредыдущуюСтроку Тогда
								Если Объект.ДобавлятьПриНакликиванииМетаИнформацию Тогда
									ТекстРезультат.ДобавитьСтроку(Символы.Таб + ""//FunctionsMenu="" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]));
								КонецЕсли;
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" В панели функций я выбираю '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""'"");
							КонецЕсли;	 
							
							НашлиПанельРазделов = Ложь;
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" Я нажимаю кнопку командного интерфейса '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""'"");
						КонецЕсли;	 
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" В текущем окне я нажимаю кнопку командного интерфейса '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""'"");
					КонецЕсли;	 
					
				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = ""FormButton"" Тогда	
					
					ЭтоКонтекстноеМеню = Ложь;
					ИдПоискаМеню = 2;
					Пока Истина Цикл
						Если МассивОбъектов[ИдВМассиве - ИдПоискаМеню] <> ""FormGroup"" Тогда
							Прервать;
						КонецЕсли;	 
						
						Если Найти(Нрег(МассивСвойств[ИдВМассиве - ИдПоискаМеню][""name""]),""контекстноеменю"") > 0 Тогда
							ЭтоКонтекстноеМеню = Истина;
						КонецЕсли;	 
						
						Если ЭтоКонтекстноеМеню Тогда
							Если МассивОбъектов[ИдВМассиве - ИдПоискаМеню] = ""FormField"" Тогда
								Прервать;
							КонецЕсли;	 
						КонецЕсли;	 
						
						ИдПоискаМеню = ИдПоискаМеню + 1;
						
						Если ИдПоискаМеню = ИдВМассиве Тогда
							Прервать;
						КонецЕсли;	 
						
					КонецЦикла;	
					
					Если ЭтоКонтекстноеМеню  Тогда
						ЗаголовокОбъекта = МассивСвойств[ИдВМассиве - ИдПоискаМеню][""title""];
						ИмяОбъекта = ""с именем """""" + МассивСвойств[ИдВМассиве - ИдПоискаМеню][""name""] + """""""";
						
						Если ЗначениеЗаполнено(ТекущаяТЧ) Тогда
							ИмяОбъекта = ""с именем """""" + ТекущаяТЧ + """""""";
						КонецЕсли;	 
						
						ЗаголовокКнопки = МассивСвойств[ИдВМассиве - 1][""title""];
						ИмяКнопки       = """""""" + ЗаголовокКнопки + """""""";
						Если НЕ ГенерироватьШагПоискаПоЗаголовку(ЗаголовокКнопки,МассивСтруктурФорм, ТекущаяФорма, ""Кнопка"") Тогда
							ИмяКнопки = ""с именем '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""'"";
						КонецЕсли;	 
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я выбираю пункт контекстного меню "" + ИмяКнопки + "" на элементе формы "" + ИмяОбъекта);
					Иначе	
						
						ЗаголовокОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
						ИмяОбъекта = ""'"" + ЗаголовокОбъекта + ""'"";
						
						Если НЕ ГенерироватьШагПоискаПоЗаголовку(ЗаголовокОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""Кнопка"") Тогда
							ИмяОбъекта = ""с именем '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""'"";
						КонецЕсли;	 
						
						ДобавитьОбычнуюСтроку = Истина;
						Если ТекущаяТЧ = """" Тогда
							ДобавитьОбычнуюСтроку = Истина;
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я нажимаю на кнопку "" + ИмяОбъекта);
							ДобавитьОбычнуюСтроку = Ложь;
						КонецЕсли;	
						
						Если ДобавитьОбычнуюСтроку Тогда
							ДанныеНажатияНаЭлементФормы = Новый Структура;
							ДанныеНажатияНаЭлементФормы.Вставить(""ТекущееОкно"",ТекущееОкно);
							ДанныеНажатияНаЭлементФормы.Вставить(""ИмяКнопки"",ЗаголовокОбъекта);
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю на кнопку "" + ИмяОбъекта);
							
							Если ЗаголовокОбъекта = ""Провести и закрыть""
							Или  ЗаголовокОбъекта = ""Записать и закрыть""
							Или  ЗаголовокОбъекта = ""Post and close""
							Или  ЗаголовокОбъекта = ""Save and close""
							Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я жду закрытия окна '"" + ТекущееОкно + ""' в течение 20 секунд"");
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
					
				ИначеЕсли (МассивОбъектов[ИдВМассиве - 1] = ""FormField"") ИЛИ (МассивОбъектов[ИдВМассиве - 1] = ""FormDecoration"") Тогда	
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""Кнопка"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю на гиперссылку """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю на гиперссылку с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""gotoDate"" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" у поля '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""' я перехожу к дате "" + ПреобразоватьСтрокуКДатеИзДанныхXML(МассивСвойств[ИдВМассиве][""date""]));
			ИначеЕсли ИмяУзла = ""selectAllRows"" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' я выделяю все строки"");
			ИначеЕсли ИмяУзла = ""gotoFirstRow"" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' я перехожу к первой строке"");
			ИначеЕсли ИмяУзла = ""gotoLastRow"" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' я перехожу к последней строке"");
			ИначеЕсли ИмяУзла = ""deleteRow"" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' я удаляю строку"");
			ИначеЕсли ИмяУзла = ""close"" Тогда
				НадоДобавитьДействие = Истина;
				Если ДанныеНажатияНаЭлементФормы <> Неопределено Тогда
					Если ДанныеНажатияНаЭлементФормы.ТекущееОкно = ТекущееОкно Тогда
						Если ДанныеНажатияНаЭлементФормы.ИмяКнопки = ""Провести и закрыть"" Тогда
							НадоДобавитьДействие = Ложь;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
				Если НадоДобавитьДействие Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" Я закрываю окно '"" + МассивСвойств[ИдВМассиве - 1][""caption""] + ""'"");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""choose"" Тогда
				Если ТекущаяТЧ <> """" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я выбираю текущую строку"");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""startChoosing"" Тогда
				Если ТекущаяТЧ <> """" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я нажимаю кнопку выбора у реквизита """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я нажимаю кнопку выбора у реквизита с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				Иначе	
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"")  Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю кнопку выбора у поля """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю кнопку выбора у поля с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""clear"" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
				
				Если ТекущаяТЧ <> """" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я нажимаю кнопку очистить у поля """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я нажимаю кнопку очистить у поля с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				Иначе	
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю кнопку очистить у поля """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю кнопку очистить у поля с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""endEditRow"" Тогда
				//Если МассивОбъектов[ИдВМассиве - 1] = ""FormTable"" Тогда
				Если ТекущаяТЧ <> """" Тогда
					Если МассивСвойств[ИдВМассиве][""cancel""] = ""false"" Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я завершаю редактирование строки"");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""addRow"" Тогда
				//Если МассивОбъектов[ИдВМассиве - 1] = ""FormTable"" Тогда
				Если ТекущаяТЧ <> """" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я добавляю строку"");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""open"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю на кнопку открытия поля """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю на кнопку открытия поля с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""create"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю на кнопку создать поля """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я нажимаю на кнопку создать поля с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""openDropList"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						//ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я открываю выпадающий список """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						//ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я открываю выпадающий список с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""executeChoiceFromChoiceList"" Тогда
				ЗначениеВыбораИзСписка = МассивСвойств[ИдВМассиве][""presentation""];
				ТипВыбораЗначенияИзСписка = ""точное значение"";
				
				ПредыдущаяСтрока = """";
				Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
					ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеСтрокиinputText) Тогда
					// значит раньше в поле был ввод текста
					Если Найти(ПредыдущаяСтрока,""я ввожу текст"") > 0 Тогда
						ВПредыдущейСтрокеСценарияЕстьВВодПоСтроке = Истина;
						ЗначениеВыбораИзСписка = УбратьКавычкиАпострофы(ЗначениеСтрокиinputText);
						ТипВыбораЗначенияИзСписка = ""по строке"";
						Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
							ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
						КонецЕсли;	 
					КонецЕсли;	 
				ИначеЕсли Найти(ПредыдущаяСтрока,""я нажимаю кнопку выбора"") > 0 Тогда
					// для выпадающего списка шаг выбора сам выберет нужное значение
					Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
						ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли
				КонецЕсли;	 
				
				
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					Если ТекущаяТЧ <> """" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" из выпадающего списка """""" + ИмяОбъекта + """""" я выбираю "" + ТипВыбораЗначенияИзСписка + "" '"" + ЗначениеВыбораИзСписка + ""'"");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" из выпадающего списка с именем """""" + ИмяОбъекта + """""" я выбираю "" + ТипВыбораЗначенияИзСписка + "" '"" + ЗначениеВыбораИзСписка + ""'"");
						КонецЕсли;	 
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" из выпадающего списка """""" + ИмяОбъекта + """""" я выбираю "" + ТипВыбораЗначенияИзСписка + "" '"" + ЗначениеВыбораИзСписка + ""'"");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" из выпадающего списка с именем """""" + ИмяОбъекта + """""" я выбираю "" + ТипВыбораЗначенияИзСписка + "" '"" + ЗначениеВыбораИзСписка + ""'"");
						КонецЕсли;	 
					КонецЕсли;	 
				Иначе	
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" из выпадающего списка я выбираю '"" + ЗначениеВыбораИзСписка + ""'"");
				КонецЕсли;	
				
			ИначеЕсли ИмяУзла = ""increaseValue"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					Если ТекущаяТЧ <> """" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" в поле """""" + ИмяОбъекта + """""" я увеличиваю значение"");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" в поле с именем """""" + ИмяОбъекта + """""" я увеличиваю значение"");
						КонецЕсли;	 
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в поле """""" + ИмяОбъекта + """""" я увеличиваю значение"");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в поле с именем """""" + ИмяОбъекта + """""" я увеличиваю значение"");
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	
				
			ИначеЕсли ИмяУзла = ""decreaseValue"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					Если ТекущаяТЧ <> """" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" в поле """""" + ИмяОбъекта + """""" я уменьшаю значение"");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" в поле с именем """""" + ИмяОбъекта + """""" я уменьшаю значение"");
						КонецЕсли;	 
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в поле """""" + ИмяОбъекта + """""" я уменьшаю значение"");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в поле с именем """""" + ИмяОбъекта + """""" я уменьшаю значение"");
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	
				
			ИначеЕсли ИмяУзла = ""executeChoiceFromDropList"" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
				Если ТекущаяТЧ <> """" Тогда	
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я выбираю значение реквизита """""" + ИмяОбъекта + """""" из формы списка"");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я выбираю значение реквизита с именем """""" + ИмяОбъекта + """""" из формы списка"");
					КонецЕсли;	 
				Иначе	
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я выбираю значение реквизита """""" + ИмяОбъекта + """""" из формы списка"");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я выбираю значение реквизита с именем """""" + ИмяОбъекта + """""" из формы списка"");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""clickFormattedStringHyperlink"" Тогда
				ИмяОбъекта     = МассивСвойств[ИдВМассиве - 1][""title""];
				ИмяГиперссылки = МассивСвойств[ИдВМассиве][""title""];
				
				Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" у поля """""" + ИмяОбъекта + """""" я нажимаю гиперссылку '"" + ИмяГиперссылки + ""'"");
				Иначе	
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" у поля с именем """""" + ИмяОбъекта + """""" я нажимаю гиперссылку '"" + ИмяГиперссылки + ""'"");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""activate"" Тогда
				// Для обычных полей форм событие ""activate"" пропускается, чтобы не увеличивать размер сценария
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormGroup"" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					ИмяГруппы   = МассивСвойств[ИдВМассиве - 1][""name""];
					
					Если ИмяГруппы <> ""ГруппаСтраницы"" Тогда
						// это стандартное название для ""Тестируемая группа формы"", Вид = ""Страницы""
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я перехожу к закладке """""" + ИмяОбъекта + """""""");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я перехожу к закладке с именем """""" + ИмяОбъекта + """""""");
						КонецЕсли;	 
					КонецЕсли;	 
					
				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = ""FormField"" И ЗначениеЗаполнено(ТекущаяТЧ) Тогда
					// активировали колонку ТЧ
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я активизирую поле """""" + ИмяОбъекта + """""""");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я активизирую поле с именем """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли ИмяУзла = ""expand"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormGroup"" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если СокрЛП(ИмяОбъекта) = """" ИЛИ Объект.ИскатьЭлементыФормыПоИмени Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, "" я перехожу к закладке"", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я разворачиваю группу с именем """""" + ИмяОбъекта + """""""");
					Иначе	
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, "" я перехожу к закладке"", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я разворачиваю группу """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли ИмяУзла = ""collapse"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormGroup"" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если СокрЛП(ИмяОбъекта) = """" ИЛИ Объект.ИскатьЭлементыФормыПоИмени Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""name""];
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, "" я перехожу к закладке"", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я сворачиваю группу с именем """""" + ИмяОбъекта + """""""");
					Иначе	
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, "" я перехожу к закладке"", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я сворачиваю группу """""" + ИмяОбъекта + """""""");
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли ИмяУзла = ""goOneLevelDown"" Тогда
				Если ТекущаяТЧ <> """" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице  """""" + ТекущаяТЧ + """""" я перехожу на один уровень вниз"");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""gotoPreviousRow"" Тогда
				Если ТекущаяТЧ <> """" Тогда
					switchSelection = Ложь;
					Если МассивСвойств[ИдВМассиве][""switchSelection""] = ""true"" Тогда
						switchSelection = Истина;
					КонецЕсли;	 
					
					Если switchSelection Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице  """""" + ТекущаяТЧ + """""" я перехожу на одну строку вверх с выделением"");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице  """""" + ТекущаяТЧ + """""" я перехожу на одну строку вверх"");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""gotoNextRow"" Тогда
				Если ТекущаяТЧ <> """" Тогда
					switchSelection = Ложь;
					Если МассивСвойств[ИдВМассиве][""switchSelection""] = ""true"" Тогда
						switchSelection = Истина;
					КонецЕсли;	 
					
					Если switchSelection Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице  """""" + ТекущаяТЧ + """""" я перехожу на одну строку вниз с выделением"");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице  """""" + ТекущаяТЧ + """""" я перехожу на одну строку вниз"");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""goOneLevelUp"" Тогда
				Если ТекущаяТЧ <> """" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице  """""" + ТекущаяТЧ + """""" я перехожу на один уровень вверх"");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""selectOption"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"")  Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я меняю значение переключателя '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""' на '"" + МассивСвойств[ИдВМассиве][""presentation""] + ""'"");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я меняю значение переключателя с именем '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' на '"" + МассивСвойств[ИдВМассиве][""presentation""] + ""'"");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""beginEditingCurrentArea"" Тогда
				ФлагРедактированияТекстаМакета = Истина;
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в табличном документе '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' я делаю двойной клик на текущей ячейке"");
			ИначеЕсли ИмяУзла = ""finishEditingCurrentArea"" Тогда
				ФлагРедактированияТекстаМакета = Ложь;
			ИначеЕсли ИмяУзла = ""setCurrentArea"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					ПредыдущаяСтрока = """";
					Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
						ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли;	 
					ТекущаяСтрока = ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в табличном документе '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' я перехожу к ячейке """""" + МассивСвойств[ИдВМассиве][""area""] + """""""";
					Если ТекущаяСтрока <> ПредыдущаяСтрока Тогда
						// чтобы не добавлять одинаковых шагов
						ТекстРезультат.ДобавитьСтроку(ТекущаяСтрока);
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""inputText"" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					
					Если ФлагРедактированияТекстаМакета Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в табличный документ """""" + МассивСвойств[ИдВМассиве - 2][""name""] + """""" я ввожу текст "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + МассивСвойств[ИдВМассиве][""text""] + ""'""));
					Иначе	
						ЗаголовокПоля = МассивСвойств[ИдВМассиве - 1][""title""];
						ИмяОбъекта = ЗаголовокПоля;
						Если ТекущаяТЧ <> """" Тогда	
							Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" в поле '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""' я ввожу текст "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + МассивСвойств[ИдВМассиве][""text""] + ""'""));
							Иначе	
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" в поле с именем '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' я ввожу текст "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + МассивСвойств[ИдВМассиве][""text""] + ""'""));
							КонецЕсли;	 
						Иначе	
							Если ГенерироватьШагПоискаПоЗаголовку(ЗаголовокПоля,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в поле '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""title""]) + ""' я ввожу текст "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + МассивСвойств[ИдВМассиве][""text""] + ""'""));
							Иначе	
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в поле с именем '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""' я ввожу текст "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + МассивСвойств[ИдВМассиве][""text""] + ""'""));
							КонецЕсли;	 
						КонецЕсли; 
					КонецЕсли;	 
					ЗначениеСтрокиinputText = ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(МассивСвойств[ИдВМассиве][""text""]);
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""setCheck"" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
				ИмяРеквизита = МассивСвойств[ИдВМассиве - 1][""name""];
				
				Если МассивОбъектов[ИдВМассиве - 1] = ""FormField"" Тогда
					Действие = ""изменяю"";
					Если ТекущаяТЧ <> """" Тогда		
						
						Попытка
							ТаблицаНаФорме = НайтиТЧПоИмени(ТекущаяТЧ);
							ПолеРеквизит = НайтиРеквизитТаблицы(ТекущаяТЧ,ИмяРеквизита,Истина,ТаблицаНаФорме);
							ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
							Если ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
								Действие = ""устанавливаю"";
							Иначе	
								Действие = ""снимаю"";
							КонецЕсли;	 
						Исключение
							Действие = ""изменяю"";
						КонецПопытки;
						
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1][""title""];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(СтрЗаменить(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я %действие флаг '"" + ЭкранироватьСпецСимволыДляЗначенияШага(ИмяОбъекта) + ""'"",""%действие"",Действие));
						Иначе	
							ТекстРезультат.ДобавитьСтроку(СтрЗаменить(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ТекущаяТЧ + """""" я %действие флаг с именем '"" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) + ""'"",""%действие"",Действие));
						КонецЕсли;	 
					Иначе	
						
						Попытка
							ПолеРеквизит = НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип(""ТестируемоеПолеФормы""));
							ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
							Если ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
								Действие = ""устанавливаю"";
							Иначе	
								Действие = ""снимаю"";
							КонецЕсли;	 
						Исключение
							Действие = ""изменяю"";
						КонецПопытки;
						
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, ""ПолеФормы"") Тогда
							ТекстРезультат.ДобавитьСтроку(СтрЗаменить(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я %действие флаг '"" + ЭкранироватьСпецСимволыДляЗначенияШага(ИмяОбъекта) + ""'"",""%действие"",Действие));
						Иначе	
							ТекстРезультат.ДобавитьСтроку(СтрЗаменить(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я %действие флаг с именем '"" + ЭкранироватьСпецСимволыДляЗначенияШага(ИмяРеквизита) + ""'"",""%действие"",Действие));
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""ClientApplicationWindow"" Тогда
				ИмяОкна = МассивСвойств[ИдВМассиве][""caption""];
				Если ИмяОкна <> Неопределено Тогда
					НужноДобавитьШагОткрытияОкна = Истина;
					
					ПромИмяОкна = ИмяОкна;
					Если Прав(ПромИмяОкна,1) = ""*"" Тогда
						ПромИмяОкна = Сред(ПромИмяОкна,1,СтрДлина(ПромИмяОкна)-1);
						Если СокрП(ПромИмяОкна) = ПредыдущееОкно Тогда
							НужноДобавитьШагОткрытияОкна = Ложь;
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если НужноДобавитьШагОткрытияОкна Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий, ""ОткрытиеОкна"") + "" открылось окно '"" + ИмяОкна + ""'"");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = ""gotoNextItem"" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я перехожу к следующему реквизиту"");
				
			ИначеЕсли ИмяУзла = ""executeChoiceFromMenu"" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве][""presentation""];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в меню формы я выбираю '"" + ЗначениеМеню + ""'"");
			ИначеЕсли ИмяУзла = ""executeChoiceFromList"" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве][""presentation""];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" я выбираю из списка '"" + ЗначениеМеню + ""'"");
			КонецЕсли;
		КонецЕсли;
		
		Если XML.ТипУзла = ТипУзлаXML.Текст Тогда
			//Сообщить(""Текст: "" + XML.Значение); 
		КонецЕсли;
		
		Если XML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			Если ИмяУзла = ""Form"" Тогда
				ТекущаяФорма = """";
			ИначеЕсли ИмяУзла = ""ClientApplicationWindow"" Тогда
				ПредыдущееОкно = ТекущееОкно;
				ТекущееОкно = """";
			ИначеЕсли ИмяУзла = ""FormTable"" Тогда
				ТекущаяТЧ = """";
			КонецЕсли;	 
			
			Если ТекущаяТЧ <> """" Тогда
				Если (ИмяУзла = ""gotoRow"") ИЛИ (ИмяУзла = ""expand"") ИЛИ (ИмяУзла = ""collapse"") Тогда
					ЕстьЗаполненныеЯчейки = Ложь;
					Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
						Если СокрЛП(СвойствоСтроки[""cellText""]) <> """" Тогда
							ЕстьЗаполненныеЯчейки = Истина;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;
					
					Стр1 = ""| "";
					Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
						Если СокрЛП(СвойствоСтроки[""cellText""]) = """" И ЕстьЗаполненныеЯчейки Тогда
							Продолжить;
						КонецЕсли;	 
						Стр1 = Стр1 + "" '"" +  СвойствоСтроки[""title""] + ""' |"";
					КонецЦикла;
					
					Стр2 = ""| "";
					
					Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
						Если СокрЛП(СвойствоСтроки[""cellText""]) = """" И ЕстьЗаполненныеЯчейки Тогда
							Продолжить;
						КонецЕсли;	 
						Стр2 = Стр2 + "" '"" + СвойствоСтроки[""cellText""] + ""' |"";
					КонецЦикла;
					
					МассивТаблицы = Новый Массив();
					МассивТаблицы.Добавить(Стр1);
					МассивТаблицы.Добавить(Стр2);
					
					ФорматироватьТаблицуGherkin(МассивТаблицы);
					
					Стр = ""		"" + МассивТаблицы[0] + Символы.ПС + ""		"" + МассивТаблицы[1];
					
					Если ТаблицаСвойствСтроки.Количество() > 0 Тогда
						Если (ИмяУзла = ""gotoRow"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) +  """""" я перехожу к строке:"");
						ИначеЕсли (ИмяУзла = ""expand"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) +  """""" я разворачиваю строку:"");
						ИначеЕсли (ИмяУзла = ""collapse"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) +  """""" я сворачиваю строку:"");
						КонецЕсли;	 
						ТекстРезультат.ДобавитьСтроку(Стр);
					Иначе	
						Если (ИмяУзла = ""expand"") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + "" в таблице """""" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1][""name""]) +  """""" я разворачиваю текущую строку"");
						КонецЕсли;	
					КонецЕсли;	 
					
				ИначеЕсли ИмяУзла = ""Field"" Тогда
					ТаблицаСвойствСтроки.Добавить(СвойствоСтроки);
				КонецЕсли;	 
			КонецЕсли;	 
			
			УдалитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, XML.Имя);
		КонецЕсли; 
	КонецЦикла; 
	XML.Закрыть();
	
	ТекстРезультатКод = Новый ТекстовыйДокумент;
	
	Для НомерСтроки = 1 По ТекстРезультат.КоличествоСтрок() Цикл
		СтрокаТекста = СокрЛП(ТекстРезультат.ПолучитьСтроку(НомерСтроки));
		СтрокаТекста = СтрЗаменить(СтрокаТекста, """""""", """""""""""");
		ТекстРезультатКод.ДобавитьСтроку(""Ванесса.Шаг("""""" + СтрокаТекста + """""");"");
	КонецЦикла;
	Объект.СгенерированныйСценарийКод = ТекстРезультатКод.ПолучитьТекст();
	
	ТекстРезультат.ВставитьСтроку(1, ""#language: ru
	|
	|Функционал: <описание фичи>
	|
	|Как <Роль>
	|Я хочу <описание функционала> 
	|Чтобы <бизнес-эффект> 
	|
	|Контекст: 
	|	Дано Я запускаю сценарий открытия TestClient или подключаю уже существующий
	|
	|
	|Сценарий: <описание сценария>"");
	
	Объект.СгенерированныйСценарий = ТекстРезультат.ПолучитьТекст();
	
	Объект.СгенерированныйСценарий = СтрЗаменить(Объект.СгенерированныйСценарий,""~ЭкранированиеСлешЭн~"",""\n"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьXMLВUILogToScript(Стр)
	Если Не ЗначениеЗаполнено(Стр) Тогда
		Возврат;
	КонецЕсли;	

	Попытка
		ПутьКОбработке = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""vendor/1C/UILogToScript.epf"";
		ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКОбработке);
		Результат = ПолучитьКод1СИзUILogToScriptСервер(ДвоичныеДанные, Стр);
		
		ОбработатьПолученныйКодUILogToScript(Результат);
		
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат);
		
		Объект.СгенерированныйКод = Текст.ПолучитьТекст();
		
	Исключение
		СообщитьПользователю(Локализовать(""Не смог обработать XML в UILogToScript.""));
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		ПолучитьТекстФичиИзДействийПользователя(Стр);
	Исключение
		СообщитьПользователю(Локализовать(""Ошибка при получении текста фичи:""));
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФичНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИмяФайлаФичи = Объект.КаталогФич;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработатьЗапускПриложения"", ЭтаФорма);
		НачатьЗапускПриложения(ОписаниеОповещения, ИмяФайлаФичи);
	Иначе	
		ЗапуститьПриложение(ИмяФайлаФичи);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьУжеЗапущенныйTestClient(ДанныеЗапускаКлиентаТестирования)
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип(""Структура"") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Попытка
			ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
			ТестовоеПриложение.УстановитьСоединение();
			Попытка
				Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип(""ТестируемоеОкноКлиентскогоПриложения""),,,Объект.ТаймаутЗапуска1С) Тогда
					Возврат Ложь;
				КонецЕсли;	 
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
			НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
			Если НайденДиалогАвторизации Тогда
				ВызватьИсключение Локализовать(""Не удалось авторизоваться в базе."");
			КонецЕсли;	 
			
			ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение,ДанныеЗапускаКлиентаТестирования);
			
			Возврат Истина;
		Исключение
			Возврат Ложь;		
		КонецПопытки;
		
		Возврат Ложь;
	КонецЕсли;	 
	
	ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
	
	Если ТестовоеПриложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ТестовоеПриложение.УстановитьСоединение();
		ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
		Если ГлавноеОкноТестируемого = Неопределено Тогда
			//ВызватьИсключение ПолучитьТекстСообщенияПользователю(""Не смог найти ГлавноеОкноТестируемого у уже подключенного TestClient."");
			Возврат Ложь;
		КонецЕсли;	 
		ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение,ДанныеЗапускаКлиентаТестирования);
	Исключение
		Попытка
			ТестовоеПриложение.РазорватьСоединение();
			ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено;
		Исключение
		
		КонецПопытки;
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Процедура ЗапуститьСеансTestClient(ДанныеЗапускаКлиентаТестирования)
	ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивЗанятыхПортов()

	МассивЗанятыхПортов = Новый Массив;
	Если НЕ ЭтоLinux Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""txt"");
		
		ТекстКоманды = ""netstat -ano > """""" + ИмяВременногоФайла + """"""""; 
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды);
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, ""UTF-8"");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Стр = """" Тогда
				Продолжить;
			КонецЕсли;	 
			
			Порт_ = Сред(Сред(СокрЛП(Стр), 8), 1, Найти(Сред(СокрЛП(Стр), 8), ""  ""));
			Порт = """";
			Для НомерСимвола = 0 По СтрДлина(Порт_) - 1 Цикл
				СимволСтроки = Сред(Порт_, СтрДлина(Порт_) - НомерСимвола, 1);
				Если СимволСтроки = "":"" Тогда
					Прервать;
				КонецЕсли;			
				Если Найти(""0123456789"", СимволСтроки) > 0 Тогда
					Порт = СимволСтроки + Порт;
				КонецЕсли;			
			КонецЦикла;
			
			Попытка
				Если НЕ ПустаяСтрока(Порт) Тогда
					Порт = Число(Порт);
					МассивЗанятыхПортов.Добавить(Порт);
				КонецЕсли;	 
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;	
		Текст.Закрыть();
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""txt"");
		СтрокаЗапуска = ""ss -tuwan4 2>/dev/null | awk '{print $5}' | grep ':' | cut -d """":"""" -f 2 | sort | uniq  > """""" + ИмяВременногоФайла + """""""";// взято из #383
		ВыполнитьКомандуОС(СтрокаЗапуска);
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, ""UTF-8"");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Стр = """" Тогда
				Продолжить;
			КонецЕсли;

			Порт = СокрЛП(Стр);
			Попытка
				Порт = Число(Порт);
				МассивЗанятыхПортов.Добавить(Порт);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;	
		Текст.Закрыть();
	КонецЕсли;
	
	Для каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		МассивЗанятыхПортов.Добавить(СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента);
	КонецЦикла;
	
	Возврат МассивЗанятыхПортов;

КонецФункции // ПолучитьЗанятыеПорты()

&НаКлиенте
Функция ПолучитьКорректноеИмяTesClient(Знач Стр)
	Стр = Транслит(Стр);
	Стр = СтрЗаменить(Стр,"" "","""");
	Стр = СтрЗаменить(Стр,""."","""");
	Стр = СтрЗаменить(Стр,""="","""");
	Стр = СтрЗаменить(Стр,"""""""","""");
	Стр = СтрЗаменить(Стр,"":"","""");
	Стр = СтрЗаменить(Стр,"";"","""");
	Стр = СтрЗаменить(Стр,""?"","""");
	Стр = СтрЗаменить(Стр,""\"","""");
	Стр = СтрЗаменить(Стр,""/"","""");
	Стр = СтрЗаменить(Стр,""*"","""");
	Стр = СтрЗаменить(Стр,""!"","""");
	Стр = СтрЗаменить(Стр,""@"","""");
	Стр = СтрЗаменить(Стр,""#"","""");
	Стр = СтрЗаменить(Стр,""$"","""");
	Стр = СтрЗаменить(Стр,""%"","""");
	Стр = СтрЗаменить(Стр,""-"","""");
	Стр = СтрЗаменить(Стр,""<"","""");
	Стр = СтрЗаменить(Стр,"">"","""");
	Стр = СтрЗаменить(Стр,""+"","""");
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования)
	ИмяКомпьютера = ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера;
	Если Не ЗначениеЗаполнено(ИмяКомпьютера) Тогда
		ИмяКомпьютера = ""localhost"";
	КонецЕсли;	 
	
	Порт = ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента;
	
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ТекстСообщения = Локализовать(""ИмяКомпьютера <%1>; порт <%2>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяКомпьютера); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",Формат(Порт, ""ЧГ=; ЧН=0"")); 
		ЗаписатьЛогВЖРИнформация(""СозданиеОбъектаТестируемоеПриложение"", ТекстСообщения);
	КонецЕсли;	 
	
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = ""Web"" Тогда
		ВтораяЧастьСтроки = "","""""" + ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя) + """""")"";
	Иначе	
		ВтораяЧастьСтроки = "")"";
	КонецЕсли;	 
	ТестовоеПриложение = Вычислить(""Новый ТестируемоеПриложение("""""" + ИмяКомпьютера + """""", "" + Формат(Порт, ""ЧГ=; ЧН=0"")
	                                                                                          + ВтораяЧастьСтроки);
																							  
	ТекущийTestclientЭтоWebКлиент = Ложь;																							  
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = ""Web"" Тогда
		ТекущийTestclientЭтоWebКлиент = Истина;
	КонецЕсли;	 																							  
																							  
	Возврат ТестовоеПриложение;
КонецФункции	

&НаКлиенте
Процедура УстановитьКонектСTestClient(ДанныеЗапускаКлиентаТестирования, ТестовоеПриложение)
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип(""Структура"") Тогда
		ОбъектКонтекстСохраняемый = Новый Структура;
	КонецЕсли;	 
	
	ОбъектКонтекстСохраняемый.Вставить(""ТестовоеПриложение"", ТестовоеПриложение);
	
	МаксДата = ТекущаяДата() + Объект.ТаймаутЗапуска1С;
	Пока Истина Цикл
		Если ТекущаяДата() > МаксДата Тогда
			ТекстСообщения = Локализовать(""Не смог подключить TestClient. Прерывание по таймауту <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Объект.ТаймаутЗапуска1С); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ПолучилосьУстановитьСоединение = Ложь;
		Попытка
			ТестовоеПриложение.УстановитьСоединение();
			ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
			ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение,ДанныеЗапускаКлиентаТестирования);
			ПолучилосьУстановитьСоединение = Истина;
		Исключение
		КонецПопытки;
		
		Если ПолучилосьУстановитьСоединение Тогда
			Прервать;
		КонецЕсли;	 
		
		Sleep(1);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение)
	ГлавноеОкноТестируемого = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ГлавноеОкноТестируемого = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГлавноеОкноТестируемого;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение,ДанныеЗапускаКлиентаТестирования)
	ОбъектКонтекстСохраняемый.Вставить(""ТестовоеПриложение"", ТестовоеПриложение);
	ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
	ОбъектКонтекстСохраняемый.Вставить(""ГлавноеОкноТестируемого"", ГлавноеОкноТестируемого);
	ОбъектКонтекстСохраняемый.Вставить(""ТекущийПрофильTestClient"", ДанныеЗапускаКлиентаТестирования.Имя);
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""ПодключенныеTestClient"") Тогда
		ОбъектКонтекстСохраняемый.Вставить(""ПодключенныеTestClient"", Новый Массив);
	КонецЕсли;	 
	ПодключенныеTestClient = ОбъектКонтекстСохраняемый.ПодключенныеTestClient;
	
	НужныйИД = Неопределено;
	Для Ккк = 0 По ПодключенныеTestClient.Количество()-1 Цикл
		Элем = ПодключенныеTestClient[Ккк];
		Если Элем.Имя = ДанныеЗапускаКлиентаТестирования.Имя Тогда
			НужныйИД = Ккк;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	Если НужныйИД <> Неопределено Тогда
		ПодключенныеTestClient.Удалить(НужныйИД);
	КонецЕсли;	 
	
	ПодключенныеTestClient.Добавить(Новый Структура(""Имя, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого"",
	    ДанныеЗапускаКлиентаТестирования.Имя,
		ДанныеЗапускаКлиентаТестирования.Синоним,
		ТестовоеПриложение, ГлавноеОкноТестируемого));
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования,СтрокаОшибки=Неопределено,ДополнительныеПараметры = Неопределено)
	ПроисходилЗапускTescClient = Ложь;
	
	Если ПодключитьУжеЗапущенныйTestClient(ДанныеЗапускаКлиентаТестирования) Тогда
		ТекстСообщения = Локализовать(""Уже открытый TestClient подключен на %1 порту."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		СообщитьПользователю(ТекстСообщения);
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ТекстСообщения = Локализовать(""порт <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, ""ЧГ=; ЧН=0"")); 
			ЗаписатьЛогВЖРИнформация(""НайденПодключенныйTestClient"",ТекстСообщения);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		Если ДополнительныеПараметры.Свойство(""ЗапускатьКлиентТестирования"") Тогда
			Если НЕ ДополнительныеПараметры.ЗапускатьКлиентТестирования Тогда
				ТекстСообщения = Локализовать(""Не получилось подключиться к ранее запущенному клиенту тестирования <%1>, порт <%2>."");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ДанныеЗапускаКлиентаТестирования.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 

	ТестовоеПриложение = Неопределено;
	Попытка
		ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
	Исключение
		СтрокаОшибки = Локализовать(""Сеанс должен быть запущен с ключом TESTMANAGER."");
		СтрокаОшибки = СтрокаОшибки + ОписаниеОшибки();
		СообщитьПользователю(СтрокаОшибки);
		СообщитьПользователю(Локализовать(""TestClient НЕ подключен.""));
	    Возврат Ложь;
	КонецПопытки;
	
	
	Попытка
		ЗапуститьСеансTestClient(ДанныеЗапускаКлиентаТестирования);
		
		// надо создать ещё один эксземпляр - т.к. возможно сменился порт
		ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
		
		УстановитьКонектСTestClient(ДанныеЗапускаКлиентаТестирования, ТестовоеПриложение);
		
		Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип(""ТестируемоеОкноКлиентскогоПриложения""),,,Объект.ТаймаутЗапуска1С) Тогда
			ТекстСообщения = Локализовать(""Не дождались отображения окна TestClient. Таймаут <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Объект.ТаймаутЗапуска1С);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		
		НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
		Если НайденДиалогАвторизации Тогда
			Sleep(10);
		КонецЕсли;	 
		
		НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
		Если НайденДиалогАвторизации Тогда
			ВызватьИсключение Локализовать(""Не удалось авторизоваться в базе."");
		КонецЕсли;
		
		НаЭкранеОкноПредупреждения = НаЭкранеОкноПредупреждения();
		Если НаЭкранеОкноПредупреждения Тогда
			ТекстПредупреждения = ПолучитьТекстПредупреждения();
			ТекстСообщения = Локализовать(""При подключении TestClient возникло сообщение:"");
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстПредупреждения;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип(""ТестируемоеОкноКлиентскогоПриложения""),,,Объект.ТаймаутЗапуска1С) Тогда
			ТекстСообщения = Локализовать(""Не дождались отображения окна TestClient. Таймаут <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Объект.ТаймаутЗапуска1С);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ТекстСообщения = Локализовать(""TestClient подключен на %1 порту."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		СообщитьПользователю(ТекстСообщения);
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ТекстСообщения = Локализовать(""порт <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, ""ЧГ=; ЧН=0"")); 
			ЗаписатьЛогВЖРИнформация(""ПодключениеTestClient"", ТекстСообщения);
		КонецЕсли;	 
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ТекстСообщения = Локализовать(""порт <%1>"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, ""ЧГ=; ЧН=0"")); 
			ЗаписатьЛогВТекстИнформация(""ПодключениеTestClient"",ТекстСообщения);
		КонецЕсли;	 
		
		ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение,ДанныеЗапускаКлиентаТестирования);
		
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
		СообщитьПользователю(Локализовать(""TestClient НЕ подключен.""));
		СтрокаОшибки = ОписаниеОшибки();
	    Возврат Ложь;
	КонецПопытки;
	
	Если Не ОбъектКонтекстСохраняемый.Свойство(""ПодключенныеTestClient"") Тогда
		ОбъектКонтекстСохраняемый.Вставить(""ПодключенныеTestClient"", Новый Массив);
	КонецЕсли;	 
	
	ПодключенныеTestClient = ОбъектКонтекстСохраняемый.ПодключенныеTestClient;	
	
	ТестовоеПриложение      = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
	ГлавноеОкноТестируемого = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого;
	ИмяTestClient           = ДанныеЗапускаКлиентаТестирования.Имя;
	Синоним                 = ДанныеЗапускаКлиентаТестирования.Синоним;
	
	СохранитьКлиентовТестирования();
	УдалитьИзПолучитьКлиентаТестированияПрофиль(ПодключенныеTestClient,ИмяTestClient);
	
	ПодключенныеTestClient.Добавить(Новый Структура(""Имя, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого"", ИмяTestClient, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого));
	ОбъектКонтекстСохраняемый.Вставить(""ТекущийПрофильTestClient"", ИмяTestClient);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокуДерева(Строка,СвернутьОбласти = Истина)
	ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
	Если СвернутьОбласти И Строка.Тип = ""Область"" Тогда
		Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Истина Тогда
			Элементы.ДеревоТестов.Свернуть(ИдентификаторСтроки);
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Ложь Тогда
		Элементы.ДеревоТестов.Развернуть(ИдентификаторСтроки);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокуДерева(Строка)
	ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
	Элементы.ДеревоТестов.Свернуть(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		РазвернутьСтрокуДерева(Строка);
		
		Если Строка.Тип = ""Область"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			РазвернутьСтрокиДерева(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	РазвернутьСтрокиДерева(ДеревоФормыСтроки);
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетВоВнутреннемФормате(СтруктураОФ) 
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Дерево = ОбъектСервер.ДеревоТестов;
	
	Возврат ОбъектСервер.ВывестиОтчетТестированияВоВнутреннемФормате(Дерево, СтруктураОФ);
КонецФункции

&НаКлиенте
Процедура ПодключитьВнешниеОбработкиДляОтладки() 
	
	МассивФорм = Новый Массив;
		
	Окна = ПолучитьОкна();
	Для каждого Окн Из Окна Цикл
		Если ТипЗнч(Окн) = Тип(""ОкноКлиентскогоПриложения"") Тогда
			Если Найти(НРег(Строка(Окн.Заголовок)), ""тест_"")>0 ИЛИ 
				Найти(НРег(Строка(Окн.Заголовок)), ""test_"")>0 Тогда
				
				МассивФорм.Добавить(Окн.ПолучитьСодержимое());
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивФорм.Количество() > 0 Тогда
		
		Для каждого Форма Из МассивФорм Цикл
			Попытка
				ДобавитьВнешнийСписокПроцедур(Форма.ПолучитьСписокТестов(ЭтаФорма), Форма.УникальныйИдентификатор, Форма);
				ТекстСообщения = Локализовать(""Подключили для отладки форма %1"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Форма.Заголовок);
				СообщитьПользователю(ТекстСообщения);
			Исключение
				ТекстСообщения = Локализовать(""Не удалось подключить форма %1 по причине:%2"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Форма.Заголовок);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ОписаниеОшибки());
				СообщитьПользователю(ТекстСообщения);
			КонецПопытки; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МетаданныеИмяСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмя = ОсновнойОбъект.Метаданные().Имя;
	
	Возврат НайденноеИмя;
КонецФункции

&НаКлиенте
Процедура АктивироватьСоседнююСтрокуДерева(СтрокаДерева)
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	СтрокиДерева   = СтрокаРодитель.ПолучитьЭлементы();
	Для Ккк = 0 По СтрокиДерева.Количество() - 1 Цикл
		ТекСтрока = СтрокиДерева[Ккк];
		
		Если ТекСтрока = СтрокаШагаСКоторогоНадоВыполнятьСценарий Тогда
			Если Ккк < СтрокиДерева.Количество() - 1 Тогда
				НужнаяСтрока = СтрокиДерева[Ккк + 1];
			ИначеЕсли Ккк > 0 Тогда	
				НужнаяСтрока = СтрокиДерева[Ккк - 1];
			Иначе
				Продолжить;
			КонецЕсли;	 
			
			Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
			
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокуДереваПоИдСтроки(ИдСтроки, СтрокиДерева, Результат)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Результат <> Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		
		
		Если ИдСтроки = СтрокаДерева.ИдСтроки Тогда
			Результат = СтрокаДерева;
			Возврат;
		КонецЕсли;	 
		
		ПодчиненныеЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
		НайтиСтрокуДереваПоИдСтроки(ИдСтроки, ПодчиненныеЭлементыСтроки, Результат);
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Функция ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок)
	Для каждого Зн Из СтрокаТабДок Цикл
		Если Зн <> """" Тогда
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Процедура УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок,УдалятьСтрокиСверху = Истина,УдалятьКолонкиСлева = Истина)
	Если ТабДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	Если ТабДок[0].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	
	
	
	
	Если УдалятьСтрокиСверху Тогда
		// пустые строки сверху
		МассивСтрокДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого СтрокаТабДок Из ТабДок Цикл
			Ном = Ном + 1;
			Если ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок) Тогда
				МассивСтрокДляУдаления.Добавить(Ном);
			Иначе
				// значит нашли первую не пустую строку
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
		
		
		Для Ккк = 0 По МассивСтрокДляУдаления.Количество() - 1 Цикл
			ИдМассива = МассивСтрокДляУдаления[МассивСтрокДляУдаления.Количество() - 1 - Ккк];
			ТабДок.Удалить(ИдМассива);
		КонецЦикла;
	КонецЕсли;	 
	
	
	
	// пустые строки снизу
	МассивСтрокДляУдаления = Новый Массив;
	Для Ккк = 0 По ТабДок.Количество() - 1 Цикл
		Ном          = ТабДок.Количество() - 1 - Ккк;
		СтрокаТабДок = ТабДок[Ном];
		Если ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок) Тогда
			МассивСтрокДляУдаления.Добавить(Ном);
		Иначе
			// значит нашли первую не пустую строку
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	
	Для каждого ИдМассива Из МассивСтрокДляУдаления Цикл
	    ТабДок.Удалить(ИдМассива);
	КонецЦикла;
	
	
	
	
	Если ТабДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Если УдалятьКолонкиСлева Тогда
		// пустые колонки слева
		КолКолонок = ТабДок[0].Количество();
		МассивКолонокДляУдаления = Новый Массив;
		Ном = -1;
		Для ИдКолонки = 0 По КолКолонок - 1 Цикл
			КолонкаПустая = Истина;
			Для каждого СтрокаТабДок Из ТабДок Цикл
				Зн = СтрокаТабДок[ИдКолонки];
				Если Зн <> """" Тогда
					КолонкаПустая = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;
			
			Если КолонкаПустая Тогда
				МассивКолонокДляУдаления.Добавить(ИдКолонки);
			Иначе
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;
		
		
		Для Ккк = 0 По МассивКолонокДляУдаления.Количество() - 1 Цикл
			ИдМассива = МассивКолонокДляУдаления[МассивКолонокДляУдаления.Количество() - 1 - Ккк];
			Для каждого СтрокаТабДок Из ТабДок Цикл
				СтрокаТабДок.Удалить(ИдМассива);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	 
	
	
	
	
	
	
	// пустые колонки справа
	КолКолонок = ТабДок[0].Количество();	
	МассивКолонокДляУдаления = Новый Массив;
	Ном = -1;
	Для Ккк = 0 По КолКолонок - 1 Цикл
		ИдКолонки = КолКолонок - 1 - Ккк;
		
		
		КолонкаПустая = Истина;
		Для каждого СтрокаТабДок Из ТабДок Цикл
			Зн = СтрокаТабДок[ИдКолонки];
			Если Зн <> """" Тогда
				КолонкаПустая = Ложь;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
		
		Если КолонкаПустая Тогда
			МассивКолонокДляУдаления.Добавить(ИдКолонки);
		Иначе
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;
	
	
	Для Ккк = 0 По МассивКолонокДляУдаления.Количество() - 1 Цикл
		ИдМассива = МассивКолонокДляУдаления[Ккк];
		Для каждого СтрокаТабДок Из ТабДок Цикл
			СтрокаТабДок.Удалить(ИдМассива);
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры


// считывает табличный документ из TestClient по ячейке
// убирает пустые области по краям макета, если они есть, т.к.
// предполагается, что считанные данные будут испльзованы в шагах, которые в качестве параметра получают таблицу Gherkin
// и пустые области убираются, чтобы улучшить читаемость сценария и не заграмождать его текстом вида
// | ''               | '' | '' | '' | '' |
// | ''               | '' | '' | '' | '' |
// | 'Полезная часть' | '' | '' | '' | '' |
//
&НаКлиенте
Функция МакетTestClientПоЯчейкеКакМассив(ЭлементФормы,ДопПараметры = Неопределено)
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство(""НадоСчитатьОбласть"") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	РазмерОбластиДанныхДокументаПоВертикали   = Неопределено;
	РазмерОбластиДанныхДокументаПоГоризонтали = Неопределено;
	
	ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Истина;
	Если ТекущийTestclientЭтоWebКлиент Тогда
		Если Версия8312ИлиВыше И НЕ Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
		КонецЕсли;	 	
		
		Если Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
			РазмерОбластиДанныхДокументаПоВертикали   = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали();
			РазмерОбластиДанныхДокументаПоГоризонтали = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТабДок        = Новый Массив();
	СчетчикСтрок  = 0;
	ШиринаТаблицы = Неопределено;
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если НадоСчитатьОбласть Тогда
			Если СчетчикСтрок < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		
		Если ТекущийTestclientЭтоWebКлиент И Версия8313ИлиВыше Тогда
			Если СчетчикСтрок > РазмерОбластиДанныхДокументаПоВертикали Тогда
				Прервать;
			КонецЕсли;	 
		ИначеЕсли ТекущийTestclientЭтоWebКлиент И ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
			
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок,1);
			АдресТекущейОбласти = Неопределено;
			Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес) Тогда
				Прервать;
			КонецЕсли;	 
		Иначе
			// надо читать макет по установленным границам чтения
			
			Если СчетчикСтрок < СчитываниеМакетаНачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > (СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1) Тогда
				Прервать;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Пока Истина Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Если НадоСчитатьОбласть Тогда
				Если СчетчикКолонок < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ТекущийTestclientЭтоWebКлиент И Версия8313ИлиВыше Тогда
				Если СчетчикКолонок > РазмерОбластиДанныхДокументаПоГоризонтали Тогда
					Прервать;
				КонецЕсли;	 
			ИначеЕсли НЕ ТекущийTestclientЭтоWebКлиент Или (ТекущийTestclientЭтоWebКлиент И Не ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти) Тогда
				Если СчетчикКолонок < СчитываниеМакетаНачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > (СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1) Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ШиринаТаблицы <> Неопределено Тогда
				Если СчетчикКолонок > ШиринаТаблицы Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок,СчетчикКолонок);
			
			Значение = ЭлементФормы.ПолучитьТекстОбласти(Адрес);
			Значение = СтрЗаменить(Значение, Символы.ПС, ""\n"");
			
			Если НЕ Версия8313ИлиВыше И ШиринаТаблицы = Неопределено Тогда
				// Проверим, что у нас получилось установить область
				// если не получилось, значит мы пытаемся выйти за границу макета
				Если ТекущийTestclientЭтоWebКлиент И ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
					АдресТекущейОбласти = Неопределено;
					Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес) Тогда
						ШиринаТаблицы = СчетчикКолонок - 1;
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтрокаТабДок.Добавить(Значение);
		КонецЦикла;
		
		ТабДок.Добавить(СтрокаТабДок);
	КонецЦикла;
	
	УдалятьПустыеСтрокиИзМакета = Истина;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство(""УдалятьПустыеСтрокиИзМакета"") Тогда
			УдалятьПустыеСтрокиИзМакета = ДопПараметры.УдалятьПустыеСтрокиИзМакета;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если УдалятьПустыеСтрокиИзМакета Тогда
		УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок);
	КонецЕсли;	 
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция ПреобразоватьФайлМакетаВМассив(ФайлМакета,ДопПараметры)
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство(""НадоСчитатьОбласть"") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""mxl"");
	
	ФайлМакета.Записать(ИмяВременногоФайла);
	
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ИмяВременногоФайла);
	
	ТабДок = Новый Массив();
	Для Стр = 1 По ТД.ВысотаТаблицы Цикл
		
		Если НадоСчитатьОбласть Тогда
			Если Стр < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Стр > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		Для Кол = 1 По ТД.ШиринаТаблицы Цикл
			
			Если НадоСчитатьОбласть Тогда
				Если Кол < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если Кол > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			
			Значение = ТД.Область(Стр,Кол,Стр,Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, ""\n"");
			
			СтрокаТабДок.Добавить(Значение);
		КонецЦикла;
		
		ТабДок.Добавить(СтрокаТабДок);
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТабДок;
КонецФункции	

&НаКлиенте
Функция ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес)
	Если АдресТекущейОбласти = Неопределено Тогда
		ЭлементФормы.УстановитьТекущуюОбласть(Адрес);
		АдресТекущейОбласти = ЭлементФормы.ПолучитьАдресТекущейОбласти();
	КонецЕсли;	 
	
	Если Лев(НРег(АдресТекущейОбласти),1) = ""r"" Тогда
		НачСтр1 = -1;
		НачКол1 = -1;
		КолСтр1 = -1;
		КолКол1 = -1;
		ПолучитьПараметрыОбластиМакета(АдресТекущейОбласти,НачСтр1,НачКол1,КолСтр1,КолКол1);
		
		НачСтр2 = -1;
		НачКол2 = -1;
		КолСтр2 = -1;
		КолКол2 = -1;
		ПолучитьПараметрыОбластиМакета(Адрес,НачСтр2,НачКол2,КолСтр2,КолКол2);
		Если НачСтр1 > НачСтр2 Тогда
			Возврат Ложь;//значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если НачКол1 > НачКол2 Тогда
			Возврат Ложь;//значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если КолСтр1 < КолСтр2 Тогда
			Возврат Ложь;//значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если КолКол1 < КолКол2 Тогда
			Возврат Ложь;//значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		
		//Если НРег(Адрес) <> Нрег(АдресТекущейОбласти) Тогда
		//	//значит нельзя перейти к этой строке
		//	Возврат Ложь;
		//КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция СформироватьАдресЯчейки(НомерСтроки, НомерКолонки)
	Возврат ""R"" + Формат(НомерСтроки, ""ЧГ=; ЧН=0"") + ""C"" + Формат(НомерКолонки, ""ЧГ=; ЧН=0""); 
КонецФункции	

&НаКлиенте
Функция ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы,ДопПараметры = Неопределено)
	НадоСчитатьОбласть = Ложь;
	СмещениеСтрок  = 0;
	СмещениеКолонок = 0;
	
	ПолучатьИменаОбластей = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить(""СчитываниеПоЯчейкам"",Истина);
		Если ДопПараметры.Свойство(""ПолучатьИменаОбластей"") Тогда
			ПолучатьИменаОбластей = ДопПараметры.ПолучатьИменаОбластей;
		КонецЕсли;	 
		Если ДопПараметры.Свойство(""НадоСчитатьОбласть"") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
			СмещениеСтрок      = ДопПараметры.НачСтр - 1;
			СмещениеКолонок    = ДопПараметры.НачКол - 1;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ШиринаТаблицы = Неопределено;
	
	РазмерОбластиДанныхДокументаПоВертикали   = Неопределено;
	РазмерОбластиДанныхДокументаПоГоризонтали = Неопределено;
	
	ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Истина;
	Если ТекущийTestclientЭтоWebКлиент Тогда
		Если Версия8312ИлиВыше И НЕ Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
		КонецЕсли;	 
		
		Если Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
			РазмерОбластиДанныхДокументаПоВертикали   = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали();
			РазмерОбластиДанныхДокументаПоГоризонтали = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если НадоСчитатьОбласть Тогда
			Если СчетчикСтрок < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			Если СчетчикСтрок > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
			
		Если ТекущийTestclientЭтоWebКлиент И Версия8313ИлиВыше Тогда
			Если СчетчикСтрок > РазмерОбластиДанныхДокументаПоВертикали Тогда
				Прервать;
			КонецЕсли;	 
		ИначеЕсли ТекущийTestclientЭтоWebКлиент И ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
			// проверим, что мы можем перейти на новую строку
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок,1);
			АдресТекущейОбласти = Неопределено;
			Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес) Тогда
				Прервать;
			КонецЕсли;	 
		Иначе
			// надо читать макет по установленным границам чтения
			
			Если СчетчикСтрок < СчитываниеМакетаНачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > (СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1) Тогда
				Прервать;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Пока Истина Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Если ТекущийTestclientЭтоWebКлиент И Версия8313ИлиВыше Тогда
				Если СчетчикКолонок > РазмерОбластиДанныхДокументаПоГоризонтали Тогда
					Прервать;
				КонецЕсли;	 
			ИначеЕсли НЕ ТекущийTestclientЭтоWebКлиент Или (ТекущийTestclientЭтоWebКлиент И Не ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти) Тогда
				Если СчетчикКолонок < СчитываниеМакетаНачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > (СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1) Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НадоСчитатьОбласть Тогда
				Если СчетчикКолонок < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				Если СчетчикКолонок > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ШиринаТаблицы <> Неопределено Тогда
				Если СчетчикКолонок > ШиринаТаблицы Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Адрес    = СформироватьАдресЯчейки(СчетчикСтрок,СчетчикКолонок);
			Значение = ЭлементФормы.ПолучитьТекстОбласти(Адрес);
						
			ТекОбласть = ТабДок.Область(СчетчикСтрок-СмещениеСтрок,СчетчикКолонок-СмещениеКолонок,СчетчикСтрок-СмещениеСтрок,СчетчикКолонок-СмещениеКолонок);
			ТекОбласть.Текст = Значение;
			
			АдресТекущейОбласти = Неопределено;
			Если ПолучатьИменаОбластей Тогда
				ЭлементФормы.УстановитьТекущуюОбласть(Адрес);
				АдресТекущейОбласти = ЭлементФормы.ПолучитьАдресТекущейОбласти();
				Если Лев(НРег(АдресТекущейОбласти),1) <> ""r"" Тогда
					ТекОбласть.Имя = АдресТекущейОбласти;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НЕ Версия8313ИлиВыше И ШиринаТаблицы = Неопределено Тогда
				// Проверим, что у нас получилось установить область
				// если не получилось, значит мы пытаемся выйти за границу макета
				Если ТекущийTestclientЭтоWebКлиент И ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
					Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес) Тогда
						ШиринаТаблицы = СчетчикКолонок - 1;
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция ТабличныйДокументИзДвоичныхДанных(ФайлМакета)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""mxl"");
	
	ФайлМакета.Записать(ИмяВременногоФайла);
	
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ИмяВременногоФайла);
	
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТД;
КонецФункции	

&НаСервереБезКонтекста
Функция ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ФайлМакета,СчитываниеМакетаНачСтр,СчитываниеМакетаНачКол,СчитываниеМакетаКолСтр,СчитываниеМакетаКолКол)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""mxl"");
	ФайлМакета.Записать(ИмяВременногоФайла);
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ИмяВременногоФайла);
	
	Если СчитываниеМакетаНачСтр = 1 И СчитываниеМакетаНачКол = 1
			И СчитываниеМакетаКолСтр >= ТД.ВысотаТаблицы
			И СчитываниеМакетаКолКол >= ТД.ШиринаТаблицы Тогда
			// Значит можно сразу вернуть макет
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат ТД;
	КонецЕсли;	 
	
	// Если оказались тут, значит надо считать только область в макете
	
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Для Стр = СчитываниеМакетаНачСтр По СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1 Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		СчетчикКолонок = 0;
		Для Кол = СчитываниеМакетаНачКол По СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1 Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Значение = ТД.Область(Стр,Кол,Стр,Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, ""\n"");
			
			ТабДок.Область(СчетчикСтрок,СчетчикКолонок,СчетчикСтрок,СчетчикКолонок).Текст = Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТабДок;
КонецФункции	

&НаКлиенте
Функция ПолучитьСостояниеЭлементаФормыTestClient(ЭлементФормы)
	СтруктураЗначения = Новый Структура;
	СтруктураЗначения.Вставить(""Тип"", ТипЗнч(ЭлементФормы));
	СтруктураЗначения.Вставить(""Имя"", ЭлементФормы.Имя);
	
	Если ТипЗнч(ЭлементФормы) = Тип(""ТестируемаяКнопкаФормы"") Тогда
		СтруктураЗначения.Вставить(""Имя"", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить(""ТекстЗаголовка"", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить(""Вид"", ЭлементФормы.Вид);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип(""ТестируемаяТаблицаФормы"") Тогда
		СтруктураЗначения.Вставить(""Имя"", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить(""ТекстЗаголовка"", ЭлементФормы.ТекстЗаголовка);
		
		Попытка
			ЗначениеТЧ = ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементФормы);
		Исключение
			ЗначениеТЧ = Неопределено;
		КонецПопытки;
		
		СтруктураЗначения.Вставить(""ЗначениеТЧ"", ЗначениеТЧ);
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип(""ТестируемаяГруппаФормы"") Тогда
		СтруктураЗначения.Вставить(""Имя"", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить(""ТекстЗаголовка"", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить(""Вид"", ЭлементФормы.Вид);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип(""ТестируемоеПолеФормы"") Тогда
		СтруктураЗначения.Вставить(""Имя"", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить(""ТекстЗаголовка"", ЭлементФормы.ТекстЗаголовка);
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеТабличногоДокумента Тогда
			СтруктураЗначения.Вставить(""ПредставлениеДанных"", ЭлементФормы.ТекстЗаголовка);
		КонецЕсли;	 
		СтруктураЗначения.Вставить(""Вид"", ЭлементФормы.Вид);
		
		Попытка
			СтруктураЗначения.Вставить(""ТекстРедактирования"", ЭлементФормы.ПолучитьТекстРедактирования());
		Исключение
		КонецПопытки;
		
		Если ЭлементФормы.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
			Попытка
				Если ЭлементФормы.Имя = """" Или ЭлементФормы.ТекущаяДоступность() Тогда
					// Если табличный документ был открыт как отдельное окно как ТабДок.Показать(), тогда у него не работает
					// ТекущаяДоступность() (проверено в 8.3.10)
					ТабДок = ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
					СтруктураЗначения.Вставить(""ТабДок"", ТабДок);
				КонецЕсли;	 
			Исключение
				ТекстСообщения = Локализовать(""Не смог получить значение табличного документа <%1>"");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ЭлементФормы.Имя);
				СообщитьПользователю(ТекстСообщения);
				СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеКартинки Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеГеографическойСхемы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеГрафическойСхемы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДендрограммы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДиаграммы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДиаграммыГанта Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеИндикатора Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеКалендаря Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеПолосыРегулирования Тогда
		Иначе	
			// для остальных надо сохранить представление данных
			Попытка
				СтруктураЗначения.Вставить(""ПредставлениеДанных"", ЭлементФормы.ПолучитьПредставлениеДанных());
			Исключение
				
			КонецПопытки;
		КонецЕсли;	 
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип(""ТестируемаяДекорацияФормы"") Тогда
		СтруктураЗначения.Вставить(""Имя"", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить(""ТекстЗаголовка"", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить(""ПредставлениеДанных"", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить(""Вид"", ЭлементФормы.Вид);
	КонецЕсли;	 
	
	Попытка
		СтруктураЗначения.Вставить(""ТекущаяВидимость"", ЭлементФормы.ТекущаяВидимость());
		СтруктураЗначения.Вставить(""ТекущаяДоступность"", ЭлементФормы.ТекущаяДоступность());
	Исключение
	КонецПопытки;
	
	Возврат СтруктураЗначения;
КонецФункции	

&НаКлиенте
Процедура ДобавитьЭлементыКолонкиТаблицы(ТаблицыФормы,МассивКолонокТаблиц)
	МассивЭлементовТаблицы = ТаблицыФормы.НайтиОбъекты();
	Для Каждого ЭлементТаблицы Из МассивЭлементовТаблицы Цикл
		МассивКолонокТаблиц.Добавить(ЭлементТаблицы.Имя);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостояниеФормыTestClient(ДопПараметры)
	ТолькоАктивныйЭлемент = Ложь;
	Если ДопПараметры.Свойство(""ТолькоАктивныйЭлемент"") Тогда
		ТолькоАктивныйЭлемент = ДопПараметры.ТолькоАктивныйЭлемент;
	КонецЕсли;	 

	Результат       = Новый Структура;
	МассивРезультат = Новый Массив;
	
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип(""Структура"") Тогда
		СообщитьПользователю(Локализовать(""TestClient НЕ подключен.""));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если Не ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		СообщитьПользователю(Локализовать(""TestClient НЕ подключен.""));
		Возврат Неопределено;
	КонецЕсли;	 
		
	Попытка
		// попробуем найти окно предупреждения
		АктивноеОкно = НайтиОкноМодальногоДиалога();
		Если АктивноеОкно = Неопределено Тогда
			АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
		КонецЕсли;	 
		
		ТекущаяФорма = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяФорма""));
		Если ТекущаяФорма = Неопределено Тогда
			СообщитьПользователю(Локализовать(""Активная форма не найдена""));
			Возврат Неопределено;
		КонецЕсли;	 
		
		ДопПараметры.Вставить(""ТекущаяФорма"",ТекущаяФорма);
		
		АктивныйЭлемент = Неопределено;
		Если ТолькоАктивныйЭлемент Тогда
			Если ТекущаяФорма.ИмяФормы = """" Тогда
				// скорее всего это форма, полученная через ТабДок.Показать()
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты();
				Если МассивЭлементов.Количество() > 0 Тогда
					АктивныйЭлемент = МассивЭлементов[0];
				Иначе
					Возврат Неопределено;
				КонецЕсли;	 
			Иначе	
				АктивныйЭлемент = ТекущаяФорма.ПолучитьТекущийЭлемент();
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		ТекстСообщения = Локализовать(""Найдена форма: ТекстЗаголовка=%1, ИмяФормы=%2. Окно <%3>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекущаяФорма.ТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ТекущаяФорма.ИмяФормы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",АктивноеОкно.Заголовок);
		СообщитьПользователю(ТекстСообщения);
	Исключение
//		Сообщить(Локализовать(""Ошибка при получении активной формы.""));
		ТекстСообщения = Локализовать(""ПолучитьСостояниеФормыTestClient:%1"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ОписаниеОшибки());
		СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТолькоАктивныйЭлемент Тогда
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(АктивныйЭлемент);
		
		ТаблицыФормы = Новый Массив;
	Иначе	
		МассивЭлементов = ТекущаяФорма.НайтиОбъекты();
		ТаблицыФормы    = ТекущаяФорма.НайтиОбъекты(Тип(""ТестируемаяТаблицаФормы""));
	КонецЕсли;	 
	
	МассивКолонокТаблиц = Новый Массив;
	Для Каждого ТаблицаФормы Из ТаблицыФормы Цикл
		ДобавитьЭлементыКолонкиТаблицы(ТаблицаФормы,МассивКолонокТаблиц);
	КонецЦикла;	
	
	Для каждого Элем Из МассивЭлементов Цикл
		Если МассивКолонокТаблиц.Найти(Элем.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		СостояниеЭлемента = ПолучитьСостояниеЭлементаФормыTestClient(Элем);
		МассивРезультат.Добавить(СостояниеЭлемента);
	
	КонецЦикла;
	
	Результат.Вставить(""ИмяФормы"", ТекущаяФорма.ИмяФормы);
	Результат.Вставить(""МассивЭлементов"", МассивРезультат);
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Функция ПолучитьЭлементИзСтруктурыПоИмени(Имя, Массив)
	Для каждого Элем Из Массив Цикл
		Если Элем.Имя = Имя Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ДобавитьСтрокуИзменения(Стр,Изменение)
	Если Стр = """" Тогда
		Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
	Иначе	
		Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(Знач Стр)
	Стр = СтрЗаменить(Стр,""\n"",Символы.ПС);
	
	ЭтоМногоСтрочнаяСтрока = Ложь;
	Если Найти(Стр,Символы.ПС) > 0 Тогда
		ЭтоМногоСтрочнаяСтрока = Истина;
	КонецЕсли;	 
	
	Если НЕ ЭтоМногоСтрочнаяСтрока Тогда
		Возврат ""'"" + ЭкранироватьСпецСимволыДляЗначенияШага(УбратьКавычкиАпострофы(Стр)) + ""'"";
	КонецЕсли;	 
	
	Стр = УбратьКавычкиАпострофы(Стр);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр,Символы.ПС);
	
	НоваяСтрока = """";
	
	ПредставлениеЭкранированныйАпостроф = ""__&Апостроф__"";
	
	Для Каждого Элем Из МассивСтрок Цикл
		Элем = СтрЗаменить(Элем,""\'"",ПредставлениеЭкранированныйАпостроф);
		Элем = СтрЗаменить(Элем,""'"",""\'"");
		Элем = СтрЗаменить(Элем,ПредставлениеЭкранированныйАпостроф,""\'"");
		
		НоваяСтрока = НоваяСтрока + Символы.ПС + Символы.Таб + Символы.Таб + ""|'"" + Элем + ""'|"";
	КонецЦикла;	
	
	Возврат НоваяСтрока;	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ЭкранироватьСпецСимволыДляЗначенияШага(Знач Стр)
	Стр = СтрЗаменить(Стр,""\|"",""~ЭкранированиеВертикальнойЧерты~"");
	Стр = СтрЗаменить(Стр,"""""""",""\"""""");
	Стр = СтрЗаменить(Стр,""|"",""\|"");
	Стр = СтрЗаменить(Стр,""~ЭкранированиеВертикальнойЧерты~"",""\|"");
	Возврат СтрЗаменить(Стр,""'"",""\'"");
КонецФункции	

&НаКлиенте
Функция ВывестиИзмененияФормыGherkin(Было, Стало, ДопПараметры)
	Стр = """";
	
	Для каждого ЭлемСтало Из Стало.МассивЭлементов Цикл
		Имя = ЭлемСтало.Имя;
		
		Если Было <> Неопределено Тогда
			ЭлемБыло = ПолучитьЭлементИзСтруктурыПоИмени(Имя, Было.МассивЭлементов);
			Если ЭлемБыло = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Для каждого Свойство Из ЭлемСтало Цикл
			Ключ = Свойство.Ключ;
			
			Если Ключ = ""ПредставлениеДанных"" Тогда
				ПредставлениеДанных = ЭлемСтало.ПредставлениеДанных;
				
				Если Было = Неопределено Тогда
					Изменение = ""элемент формы с именем """""" + ЭлемСтало.Имя + """""" стал равен "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + ЭкранироватьСпецСимволыДляЗначенияШага(ПредставлениеДанных) + ""'"");
					
					Если Стр = """" Тогда
						Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
					Иначе	
						Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
					КонецЕсли;	 
					
					Если ЭлемСтало.Свойство(""ТекстРедактирования"") Тогда
						Если ЭлемСтало.ТекстРедактирования <> ПредставлениеДанных Тогда
							Изменение = ""у элемента формы с именем """""" + ЭлемСтало.Имя + """""" текст редактирования стал равен "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ТекстРедактирования) + ""'"");
							
							Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
						КонецЕсли;	 
					КонецЕсли;	 
					
				Иначе	
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						Изменение = ""элемент формы с именем """""" + ЭлемСтало.Имя + """""" стал равен "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + ЭкранироватьСпецСимволыДляЗначенияШага(ПредставлениеДанных) + ""'"");
						
						Если Стр = """" Тогда
							Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
						Иначе	
							Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если ЭлемСтало.Свойство(""ТекстРедактирования"") Тогда
						Если НЕ ЭлемБыло.Свойство(""ТекстРедактирования"") Тогда
							ЭлемБыло.Вставить(""ТекстРедактирования"",Неопределено);
						КонецЕсли;	 
						
						Если СокрЛП(ЭлемСтало[""ТекстРедактирования""]) <> СокрЛП(ЭлемБыло[""ТекстРедактирования""])
							И ПредставлениеДанных <> ЭлемСтало[""ТекстРедактирования""]
						Тогда
							Изменение = ""у элемента формы с именем """""" + ЭлемСтало.Имя + """""" текст редактирования стал равен "" + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(""'"" + ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ТекстРедактирования) + ""'"");
							
							Если Стр = """" Тогда
								Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
							Иначе	
								Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли Ключ = ""ТекущаяДоступность"" Тогда
				Значение = ""доступен"";
				Если ЭлемСтало[Ключ] = Ложь Тогда
					Значение = ""не доступен"";
				КонецЕсли;	 
				
				Изменение = ""элемент формы с именем """""" + ЭлемСтало.Имя + """""" "" + Значение;
				
				Если Было = Неопределено Тогда
					//ДобавитьСтрокуИзменения(Стр,Изменение);
				Иначе	
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						ДобавитьСтрокуИзменения(Стр,Изменение);
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли Ключ = ""ТекущаяВидимость"" Тогда
				Значение = ""присутствует на форме"";
				Если ЭлемСтало[Ключ] = Ложь Тогда
					Значение = ""отсутствует на форме"";
				КонецЕсли;	 
				
				Изменение = ""элемент формы с именем """""" + ЭлемСтало.Имя + """""" "" + Значение;
				
				Если Было = Неопределено Тогда
					//ДобавитьСтрокуИзменения(Стр,Изменение);
				Иначе	
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						ДобавитьСтрокуИзменения(Стр,Изменение);
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли Ключ = ""ТабДок"" Тогда
				
				//Если Было = Неопределено Тогда
					
					СтрТабДок = ПолучитьСтрокуТабличныйДокументФормаTestClient(ЭлемСтало[Ключ]);
					
					Если СтрТабДок = """" Тогда
						Изменение = ""табличный документ формы с именем """""" + ЭлемСтало.Имя + """""" стал пустым"";
						Если Стр = """" Тогда
							Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
						Иначе	
							Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
						КонецЕсли;	 
					Иначе	
						Изменение = ""табличный документ """""" + ЭлемСтало.Имя + """""" равен:"";
						
						Если Стр = """" Тогда
							Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
						Иначе	
							Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
						КонецЕсли;	 
						
						Стр = Стр + СтрТабДок + Символы.ПС;
					КонецЕсли;	 
					
				//КонецЕсли;	 
				
			ИначеЕсли Ключ = ""ЗначениеТЧ"" Тогда
				Если ЭлемСтало[Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Ложь;
				Если (ЭлемСтало[Ключ].Количество() = 0) И ЭлемБыло <> Неопределено И ЭлемБыло[Ключ].Количество() <> 0 Тогда
					НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Истина;
				ИначеЕсли (ЭлемСтало[Ключ].Количество() = 0) И ЭлемБыло = Неопределено Тогда
					НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Истина;
				КонецЕсли;	 
				
				
				
				Если НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль Тогда
					Стр = Стр + ""	Тогда в таблице """""" + ЭлемСтало.Имя + """""" количество строк """"равно"""" 0"" + Символы.ПС;
					Продолжить;
				КонецЕсли;	 
				
				Если (ЭлемБыло = Неопределено) Или (ЭлемБыло[Ключ] = Неопределено) Тогда
					Изменение = ""таблица """""" + ЭлемСтало.Имя + """""" стала равной:"";
					
					Если Стр = """" Тогда
						Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
					Иначе	
						Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
					КонецЕсли;	 
					
					СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ]);
					
					Стр = Стр + СтрТЧ + Символы.ПС;
				Иначе
					// надо сравнить две ТЧ
					ТЧбыло  = ЭлемБыло[Ключ];
					ТЧстало = ЭлемСтало[Ключ];
					
					Если ТЧстало.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если ТЧбыло.Количество() <> ТЧстало.Количество() Тогда
						// значит изменилось количество строк, просто выводим новую таблицу
						Изменение = ""таблица """""" + ЭлемСтало.Имя + """""" стала равной:"";
						
						Если Стр = """" Тогда
							Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
						Иначе	
							Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
						КонецЕсли;	 
						
						СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ]);
						
						Стр = Стр + СтрТЧ + Символы.ПС;
						
						Продолжить;
					КонецЕсли;	 
					
					ФлагИзмененныеКолонки = Новый Массив;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Для каждого Колонка Из СтрокаСтало Цикл
							ФлагИзмененныеКолонки.Добавить(Ложь);
						КонецЦикла;	
						
						Прервать;
					КонецЦикла;	
					
					Ном = -1;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Ном        = Ном + 1;
						СтрокаБыло = ТЧбыло[Ном];
						
						идКолонки = -1;
						Для каждого Колонка Из СтрокаСтало Цикл
							идКолонки  = идКолонки + 1;
							
							ИмяКолонки = Колонка.Ключ;
							
							ЗначениеБыло  = СтрокаБыло[ИмяКолонки];
							ЗначениеСтало = СтрокаСтало[ИмяКолонки];
							
							Если ЗначениеБыло <> ЗначениеСтало Тогда
								ФлагИзмененныеКолонки[идКолонки] = Истина;
							КонецЕсли;	 
						КонецЦикла;
					
					КонецЦикла;
					
					
					ИзмененныеКолонки = Новый Массив;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Ном = -1;
						Для каждого Колонка Из СтрокаСтало Цикл
							Ном = Ном + 1;
							ИмяКолонки = Колонка.Ключ;
							Если ФлагИзмененныеКолонки[Ном] Тогда
								ИзмененныеКолонки.Добавить(ИмяКолонки);
							КонецЕсли;	 
						КонецЦикла;	
						
						Прервать;
					КонецЦикла;	
					
					
					Если ИзмененныеКолонки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;	 
					
					
					Изменение = ""таблица формы с именем """""" + ЭлемСтало.Имя + """""" стала равной:"";
					Если Стр = """" Тогда
						Стр = Стр + ""	Тогда "" + Изменение + Символы.ПС;
					Иначе	
						Стр = Стр + ""	И     "" + Изменение + Символы.ПС;
					КонецЕсли;	 
					СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ], ИзмененныеКолонки);
					
					Стр = Стр + СтрТЧ + Символы.ПС;
					
					
					
					
				КонецЕсли;	 
				
			КонецЕсли;	 
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ФорматироватьМассивСтрокКакТаблицу(МассивСтрок)
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Стр = СокрЛП(МассивСтрок[0]);
	Стр = Сред(Стр, 2,СтрДлина(Стр) - 2);
	Стр = СтрЗаменить(Стр,""\|"",ПредставлениеВертЧертыВТабДок);
	МассивСтолбцов = РазложитьСтрокуВМассивПодстрок(Стр, ""|"");
	
	КолПараметров = МассивСтолбцов.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивСтолбцов Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	Для каждого Стр Из МассивСтрок Цикл
		Стр = Сред(Стр, 2,СтрДлина(Стр) - 2);
		Стр = СтрЗаменить(Стр,""\|"",ПредставлениеВертЧертыВТабДок);
		МассивСтолбцов = РазложитьСтрокуВМассивПодстрок(Стр, ""|"");
		
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивСтолбцов[Ккк]);
			Зн = СтрЗаменить(Зн, ПредставлениеВертЧертыВТабДок, ""|"");
			
			ДлинаСтроки = СтрДлина(Зн);
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
	Ном = -1;
	Для каждого Стр Из МассивСтрок Цикл
		Ном = Ном + 1;
		Стр = Сред(Стр, 2,СтрДлина(Стр) - 2);
		Стр = СтрЗаменить(Стр,""\|"",ПредставлениеВертЧертыВТабДок);
		МассивСтолбцов = РазложитьСтрокуВМассивПодстрок(Стр, ""|"");
		
		СтрПараметров = ""| "";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивСтолбцов[Ккк]);
			Зн = СтрЗаменить(Зн, ПредставлениеВертЧертыВТабДок, ""\|"");
			
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + "" "";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + "" | "";
		КонецЦикла;
		
		СтрПараметров = СокрЛП(СтрПараметров);
		
		МассивСтрок[Ном] = СтрПараметров;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуТабличныйДокументФормаTestClient(ТабДок)
	МассивСтрок = Новый Массив;
	
	Стр = ""|"";
	
	Для каждого СтрокаТабДок Из ТабДок Цикл
		СтрокаТЧ = ""|"";
		Для каждого КолонкаТабДок Из СтрокаТабДок Цикл
			СтрокаТЧ = СтрокаТЧ + "" '"" + СтрЗаменить(КолонкаТабДок, ""|"", ПредставлениеВертЧертыВТабДок) + ""' |"";
			
		КонецЦикла;
		МассивСтрок.Добавить(СтрокаТЧ);
	КонецЦикла;
	
	
	ФорматироватьМассивСтрокКакТаблицу(МассивСтрок);
	
	
	Стр = """";
	Для каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Символы.Таб + Символы.Таб +  Элем + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуСТЧФормаTestClient(ТЧ, ИзмененныеКолонки = Неопределено)
	МассивСтрок = Новый Массив;
	
	Стр = ""|"";
	
	// шапка ТЧ
	Для каждого СтрТЧ Из ТЧ Цикл
		Для каждого Элем Из СтрТЧ Цикл
			Если ИзмененныеКолонки <> Неопределено Тогда
				// значит выводим только нужные колонки
				Если ИзмененныеКолонки.Найти(Элем.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Стр = Стр + "" '"" + ПолучитьКорректноеЗначениеТаблицыGherkin(Элем.Ключ) + ""' |"";
		КонецЦикла;
		
		Прервать;
	КонецЦикла;
	
	МассивСтрок.Добавить(Стр);
	
	Для каждого СтрТЧ Из ТЧ Цикл
		СтрокаТЧ = ""|"";
		Для каждого Элем Из СтрТЧ Цикл
			Если ИзмененныеКолонки <> Неопределено Тогда
				// значит выводим только нужные колонки
				Если ИзмененныеКолонки.Найти(Элем.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтрокаТЧ = СтрокаТЧ + "" '"" + ПолучитьКорректноеЗначениеТаблицыGherkin(Элем.Значение) + ""' |"";
		КонецЦикла;
		
		МассивСтрок.Добавить(СтрокаТЧ);
	КонецЦикла;
	
	ФорматироватьМассивСтрокКакТаблицу(МассивСтрок);
	
	Стр = """";
	Для каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Символы.Таб + Символы.Таб +  Элем + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ПолучитьИзмененияФормы(Тип,ДопПараметры)
	ТекущаяФорма = Неопределено;
	ТекущееСостояниеФормы = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Если ТекущееСостояниеФормы = Неопределено Тогда
		Возврат;                                                                   
	КонецЕсли;	 
	
	Если СохраненноеСостояниеФормыTestClient <> Неопределено Тогда
		Если СохраненноеСостояниеФормыTestClient.ИмяФормы <> ТекущееСостояниеФормы.ИмяФормы Тогда
			ТекстСообщения = Локализовать(""Изменилось имя формы: было: %1, стало: %2"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СохраненноеСостояниеФормыTestClient.ИмяФормы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ТекущееСостояниеФормы.ИмяФормы);
			СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры.Вставить(""ТекущаяФорма"",ТекущаяФорма);
	
	Если Тип = ""Gherkin"" Тогда
		Изменения = ВывестиИзмененияФормыGherkin(СохраненноеСостояниеФормыTestClient, ТекущееСостояниеФормы,ДопПараметры);
	Иначе
		ВызватьИсключение Локализовать(""Неизвестный тип вывода данных по изменению формы."");
	КонецЕсли;	 
	
	Объект.СгенерированныйСценарий = Изменения;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СгенерированныйСценарий;
	
	СообщитьПользователю(""Изменения формы обработаны."");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВременнуюФичу(Стр)
	ИмяФайла = ПолучитьИмяВременногоФайла(""feature"");
	
	ЗТ = Новый ЗаписьТекста(ИмяФайла, ""UTF-8"", , Истина); 
	ЗТ.ЗаписатьСтроку(""Функционал: Тест""); 
	ЗТ.ЗаписатьСтроку(""Сценарий: Тестовый сценарий""); 
	ЗТ.ЗаписатьСтроку(Стр); 
	
	ЗТ.Закрыть();
	
	Возврат ИмяФайла; 
КонецФункции	

&НаКлиенте
Функция СоздатьСтруктураПараметровДляЗагрузкиШага(ПутьЗагрузки, ДвоичныеДанные)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""DebugLog"", Объект.DebugLog);
	СтруктураПараметров.Вставить(""ДополнительныеПараметры"", Неопределено);
	СтруктураПараметров.Вставить(""ИдетЗагрузкаИзКаталога"", Ложь);
	СтруктураПараметров.Вставить(""КаталогИнструментов"", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить(""КаталогФич"", ПутьЗагрузки);
	СтруктураПараметров.Вставить(""КаталогиБиблиотек"", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить(""ЯзыкГенератораGherkin"", Объект.ЯзыкГенератораGherkin);
	
	МассивРезультатОбходаКаталоговДляОднойФичи = Новый Массив;
	Файл = Новый Файл(ПутьЗагрузки);
	СтруктураФайла = ПолучитьСтруктуруФайлаФичи(1, Файл.ИмяБезРасширения, Файл.ПолноеИмя, ДвоичныеДанные);
	МассивРезультатОбходаКаталоговДляОднойФичи.Добавить(СтруктураФайла);
	
	СтруктураПараметров.Вставить(""МассивРезультатОбходаКаталогов"", МассивРезультатОбходаКаталоговДляОднойФичи);
	СтруктураПараметров.Вставить(""ВозможнаОптимизацияРаботыСФайлами"", ВозможнаОптимизацияРаботыСФайлами);
	СтруктураПараметров.Вставить(""ТегTreeВключенПоУмолчанию"",Объект.ТегTreeВключенПоУмолчанию);
	СтруктураПараметров.Вставить(""ЗапускИзКоманднойСтроки"",Объект.ЗапускИзКоманднойСтроки);
	СтруктураПараметров.Вставить(""КешДанныеПеревода"",КешДанныеПеревода);
	СтруктураПараметров.Вставить(""МассивСообщений"", Новый Массив);
	//СтруктураПараметров.Вставить(""ПутьКОбработке"", Объект.DebugLog);
	СтруктураПараметров.Вставить(""СписокТеговИсключение"", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить(""СписокТеговОтбор"", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить(""УдалитьСтрокуФичиИзДерева"", Ложь);
	СтруктураПараметров.Вставить(""ЭтоЗагрузкаФич"", Истина);
	СтруктураПараметров.Вставить(""КешСнипетов"",КешСнипетов);
	СтруктураПараметров.Вставить(""СтрокаПробелов"",СтрокаПробелов);
	СтруктураПараметров.Вставить(""КешЗагрузкиФич"",Новый Соответствие);
	СтруктураПараметров.Вставить(""КешПараметрыВСтроке"",Новый Соответствие);
	СтруктураПараметров.Вставить(""КешОпределенияТипа"",Новый Соответствие);
	СтруктураПараметров.Вставить(""КешПоискаКлючевыхСлов"",Новый Соответствие);
	
	СтруктураПараметров.Вставить(""ТаблицаУжеСуществующихСценариевУФ"", ТаблицаУжеСуществующихСценариев);
		
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ДвДанныеvbFeatureReader = Неопределено;
	Иначе	
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	СтруктураПараметров.Вставить(""ДвДанныеvbFeatureReader"", ДвДанныеvbFeatureReader);
	
	Возврат СтруктураПараметров;
КонецФункции	

&НаСервере
Процедура ЗагрузитьВременнуюФичуСервер(СтруктураПараметров)
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла(""epf"");
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
		FeatureReader = ОбъектСервер;
	Иначе	
		СтруктураПараметров.ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	КонецЕсли;	 
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	
	Дерево = Новый ДеревоЗначений;
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	ОбъектСервер.СоздатьКолонкиДерева(Дерево);
	
	Если Не СтруктураПараметров.Свойство(""ТаблицаУжеСуществующихСценариев"") Тогда
		ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
		СтруктураПараметров.Вставить(""ТаблицаУжеСуществующихСценариев"", ТаблицаУжеСуществующихСценариевСервер);
	КонецЕсли;	 
	
	ПерваяСтрокаДерева = Дерево.Строки.Добавить();
	ПерваяСтрокаДерева.Имя = ""Фичи"";
	ПерваяСтрокаДерева.ПолныйПуть = """";
	
	СтруктураПараметров.Вставить(""ТаблицаИзвестныхStepDefinition"",ТзнТаблицаИзвестныхStepDefinition);
	СтруктураПараметров.Вставить(""УниверсальныеИменаФайлов"",УниверсальныеИменаФайлов(СтруктураПараметров.МассивРезультатОбходаКаталогов));
	
	КешСнипетовИзХранилищаЗначений(СтруктураПараметров);
	
	FeatureReader.ЗагрузитьФичу(СтруктураПараметров.КаталогФич, ПерваяСтрокаДерева.Строки, СтруктураПараметров);
	СтруктураПараметров.Вставить(""ТаблицаИзвестныхStepDefinition"",Неопределено);
	
	Если СтруктураПараметров.Свойство(""КешФич"") Тогда
		СтруктураПараметров.КешФич = Неопределено;
	КонецЕсли;	 
	
	Если СтруктураПараметров.Свойство(""ТаблицаУжеСуществующихСценариев"") Тогда
		СтруктураПараметров.ТаблицаУжеСуществующихСценариев = Неопределено;
	КонецЕсли;	 
	
	Шаги = Новый Массив;
	ПолучитьШагиИзДерева(Дерево.Строки, Шаги,СтруктураПараметров);
	
	СтруктураПараметров.Вставить(""Шаги"", Шаги);	
	
	СтруктураПараметров.Вставить(""ТаблицаОбластей"",Неопределено);
	СтруктураПараметров.Вставить(""ТаблицаПеревода"",Неопределено);
	СтруктураПараметров.Вставить(""КешЗагрузкиФич"",Неопределено);
	СтруктураПараметров.Вставить(""КешПараметрыВСтроке"",Неопределено);
	СтруктураПараметров.Вставить(""КешОпределенияТипа"",Неопределено);
	СтруктураПараметров.Вставить(""КешПоискаКлючевыхСлов"",Неопределено);
	КешСнипетовВХранилищаЗначений(СтруктураПараметров);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьШагиИзДерева(ДеревоСтроки, Шаги,СтруктураПараметров)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если СтрокаДерева.Тип = ""Шаг"" Тогда
			
			Если СтрокаДерева.Родитель.ДопТип = ""СтруктураСценария"" Тогда
				// Эти шаги не выполняются в структуре сценария.
				Продолжить;
			КонецЕсли;	 
			
			Шаг = Новый Структура;
			Шаг.Вставить(""Имя"", СтрокаДерева.Имя);
			Шаг.Вставить(""СтрокаРеальнойПроцедуры"", СтрокаДерева.СтрокаРеальнойПроцедуры);
			Шаг.Вставить(""ЗначенияПараметров"", СтрокаДерева.ЗначенияПараметров);
			Шаг.Вставить(""АдресСнипета"", СтрокаДерева.АдресСнипета);
			Шаг.Вставить(""ШагСПараметрамиВТаблице"", СтрокаДерева.ШагСПараметрамиВТаблице);
			
			Если СтрокаДерева.ШагСПараметрамиВТаблице = Истина Тогда
				МассивТаблиц = Новый Массив;
				ПарамТаблица = Новый Массив;
				
				МассивТаблиц.Добавить(ПарамТаблица);
				
				ПодчиненныеСтроки = СтрокаДерева.Строки;
				Для каждого СтрокаТаблицы Из ПодчиненныеСтроки Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Имя) Тогда
						ПарамТаблица = Новый Массив;
						МассивТаблиц.Добавить(ПарамТаблица);
						Продолжить;
					КонецЕсли;	 
					
					
					СтрокаПарамТаблица = Новый Структура;
					
					НомерКолонки = 0;
					Для каждого Колонка Из СтрокаТаблицы.ПараметрыТаблицы Цикл
						НомерКолонки       = НомерКолонки + 1;
						СтруктураПараметра = Колонка.Значение;
						Значение           = ПолучитьЗначениеДляПередачиВМетодСервер(СтруктураПараметра.Значение, СтруктураПараметра.Тип,СтруктураПараметров);
						Значение           = Вычислить(Значение);
						
						СтрокаПарамТаблица.Вставить(""Кол"" + Формат(НомерКолонки, ""ЧГ=; ЧН=0""), Значение);
					КонецЦикла;
					
					ПарамТаблица.Добавить(СтрокаПарамТаблица);
				КонецЦикла;
				Шаг.Вставить(""МассивТаблиц"", МассивТаблиц);
			КонецЕсли;	 
			
			
			Шаги.Добавить(Шаг);
		Иначе	
			ПолучитьШагиИзДерева(СтрокаДерева.Строки, Шаги,СтруктураПараметров);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов)
	МассивПараметров = Новый Массив;
	Для Каждого ЭлементМассива Из СписокАргументов Цикл
		Элем = ЭлементМассива.Значение;
		Если Элем.Тип = ""Строка"" Тогда
			Значение = Элем.Значение;
			Если Найти(Значение,""$"") > 0 Тогда
				Значение = СтрЗаменить(Значение,""$КаталогПроекта$"",Объект.КаталогПроекта);
				Значение = СтрЗаменить(Значение,""$КаталогИнструментов$"",Объект.КаталогИнструментов);
			КонецЕсли;	 
			МассивПараметров.Добавить(ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение,Ложь));
		ИначеЕсли Элем.Тип = ""Число"" Тогда
			Попытка
				Зн = Число(Элем.Значение);
			Исключение
				Зн = Элем.Значение;
			КонецПопытки;
			МассивПараметров.Добавить(Зн);
		ИначеЕсли Элем.Тип = ""Дата"" Тогда
			МассивПараметров.Добавить(ПреобразоватьКДатеСтрокуКакДату(Элем.Значение));
		Иначе	
			МассивПараметров.Добавить(Элем.Значение);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат МассивПараметров;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьИВызватьМетод(ТекШаг, ОбработкаТеста, ИмяПроцедуры, МассивПараметров)
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемШага(ТекШаг.Имя);
	КонецЕсли;	 
	
	ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	
	ОбъектКонтекст            = ОбработкаТеста.Контекст;
	ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляВыполненияОдногоШага(Стр, ДвДанныеvbFeatureReader, КаталогИнструментов, СтруктураПараметров)
	КешСнипетовИзХранилищаЗначений(СтруктураПараметров);
	
	ВременноеИмяФайла = Неопределено;
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		FeatureReader = СоздатьFeatureReader(КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе
		FeatureReader = РеквизитФормыВЗначение(""Объект"");
	КонецЕсли;	 
	
	ОписаниеШага               = FeatureReader.ПолучитьОписаниеШагаПоСтроке(Стр, СтруктураПараметров);
	ТзнИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	
	Поз          = Найти(ОписаниеШага.StepDefinition, ""("");
	ИмяПроцедуры = Лев(ОписаниеШага.StepDefinition, Поз - 1);
	ОписаниеШага.Вставить(""ИмяПроцедуры"", ИмяПроцедуры);
	
	СтрокаТзнИзвестныхStepDefinition = ТзнИзвестныхStepDefinition.Найти(НРег(ИмяПроцедуры), ""СтрокаДляПоиска"");
	Если СтрокаТзнИзвестныхStepDefinition = Неопределено Тогда
		ОписаниеШага.Вставить(""ШагНайден"", Ложь);
	Иначе	
		ОписаниеШага.Вставить(""ШагНайден"", Истина);
		ОписаниеШага.Вставить(""ИмяФайла"", СтрокаТзнИзвестныхStepDefinition.ИмяФайла);
	КонецЕсли;	 
	
	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;	 
	
	КешСнипетовВХранилищаЗначений(СтруктураПараметров);
	
	Возврат ОписаниеШага;
КонецФункции	

&НаКлиенте
Процедура ВыполнитьМетодШагЧерезВременныйФичаФайлПродолжение(Шаги, ДопПараметры)
	Для каждого ТекШаг Из Шаги Цикл
		Если Не ЗначениеЗаполнено(ТекШаг.АдресСнипета) Тогда
			ТекстСообщения = Локализовать(""Шаг <%1> не реализован."");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ТекШаг.Имя);
			Если ТипЗнч(ДопПараметры) = Тип(""Структура"") Тогда
				ДопПараметры.Вставить(""ОшибкаПодготовки"",Истина);
			КонецЕсли;	 
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
		СписокАргументов = ТекШаг.ЗначенияПараметров;
		
		МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);
		Если ТекШаг.ШагСПараметрамиВТаблице = Истина Тогда
			Для Каждого ТабПарам Из ТекШаг.МассивТаблиц Цикл
				МассивПараметров.Добавить(ТабПарам);
			КонецЦикла;	
		КонецЕсли;	 
		
		АдресСнипета   = ТекШаг.АдресСнипета;
		ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
		
		ПодготовитьИВызватьМетод(ТекШаг, ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр, ДопПараметры)
	ВременнаяФича = ПолучитьВременнуюФичу(Стр);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВременнаяФича);
	
	СтруктураПараметров = СоздатьСтруктураПараметровДляЗагрузкиШага(ВременнаяФича, ДвоичныеДанные);
	СтруктураПараметров.Вставить(""ЭтоLinux"",ЭтоLinux);
	СтруктураПараметров.Вставить(""ОтборПоТегам"",Ложь);
	ЗагрузитьВременнуюФичуСервер(СтруктураПараметров);
	
	Шаги = СтруктураПараметров.Шаги;
	Если Шаги.Количество() = 0 Тогда
		ТекстСообщения = Локализовать(""Метод Шаг() не выполнен. Не удалось прочитать шаги из временного фича файла <%1>. Исходная строка:%2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ВременнаяФича);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",Символы.ПС + Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ДанныеДляПодключения = Новый Массив;
	Для каждого ТекШаг Из Шаги Цикл
		Если НЕ ПустаяСтрока(ТекШаг.АдресСнипета) Тогда
			ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(ТекШаг.АдресСнипета);
			Если ОбработкаТеста = Неопределено Тогда
				ДанныеДляПодключения.Добавить(ТекШаг.АдресСнипета);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
	
	Если ДанныеДляПодключения.Количество() > 0 Тогда
		ЗапретитьВыполнениеШагов();
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШагВременныйФичаФайл(ДанныеДляПодключения, Шаги, ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	ВыполнитьМетодШагЧерезВременныйФичаФайлПродолжение(Шаги, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ДляСлужебногоОповещения()
	Оповестить(""СлужебноеОповещение"", ""СлужебноеОповещение"");
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита)
	ТекстСообщения = Локализовать(""Обнаружено несколько полей с заголовком <%1>"");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяРеквизита);
	СообщитьПользователю(ТекстСообщения);
	Ном = 0;
	Для каждого Элем Из МассивЭлементов Цикл
		Ном = Ном + 1;
		Попытка
			ПредставлениеДанных = Элем.ПолучитьПредставлениеДанных();
		Исключение
			ПредставлениеДанных = """";
		КонецПопытки;
		
		ТекстСообщения = Локализовать(""№%1. Заголовок=<%2>. Имя=<%3>. ТекстПоля = <%4>"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Ном);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",Элем.ТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%3"",Элем.Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%4"",ПредставлениеДанных);
		СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

// {снятие скриншота
&НаКлиенте
Функция СформироватьИмяФайлаСкриншота()
	
	УИД = Новый УникальныйИдентификатор;
	
	ИмяФайла = """" + УИД + ""-attachment.png"";
	
	Каталог = Объект.КаталогВыгрузкиСкриншотов;
	Если НЕ ФайлСуществуетКомандаСистемы(Каталог, ""СформироватьИмяФайлаСкриншота"") Тогда
		СоздатьКаталогКомандаСистемы(Каталог);
	КонецЕсли;	 
	
	ИмяФайла = ДополнитьСлешВПуть(Каталог) + ИмяФайла;
	
	Возврат ИмяФайла;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьМассивPIDПоИмениПроцесса(ИмяПроцесса, Массив)
	ЛогФайл = ПолучитьИмяВременногоФайла(""txt"");
	Команда = ""tasklist /FI """"IMAGENAME eq "" + ИмяПроцесса +  """""" /nh > """""" + ЛогФайл + """""""";
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ЛогФайл, ""ЗаполнитьМассивPIDПоИмениПроцесса"") Тогда
		СообщитьПользователю(""Ошибка при получении списка процессов 1С."");
		Возврат;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ЛогФайл, ""UTF-8"");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		
		Если СокрЛП(Стр) = """" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = НРег(Стр);
		Стр = СокрЛП(СтрЗаменить(Стр, НРег(ИмяПроцесса), """"));
		Поз = Найти(Стр, "" "");
		PID = Лев(Стр, Поз - 1);
		Если Найти(PID,""info"") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Попытка
			PID = Число(PID);
			Массив.Добавить(PID);
		Исключение
			ТекстСообщения = Локализовать(""Не смог преобразовать к числу PID=%1"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",PID); 
			СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	УдалитьФайлыКомандаСистемы(ЛогФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкно()
	СделатьСкриншотОшибкиТекущегоОкна();
	
	ПодключитьОбработчикОжидания(""СделатьСкриншотыОшибкиКаждогоОкна1С"", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкноSikuliX()
	СообщитьПользователю(""Делаю скриншот."");
	СделатьСкриншотОшибкиТекущегоОкна();
	ПодключитьОбработчикОжидания(""СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX"", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкриншотКСценарию(РезультатПрохожденияТестовСценария,ИмяФайлаСкриншота)
	Если НЕ РезультатПрохожденияТестовСценария.Свойство(""МассивСкриншотов"") Тогда
		МассивСкриншотов = Новый Массив();
		РезультатПрохожденияТестовСценария.Вставить(""МассивСкриншотов"", МассивСкриншотов);
	Иначе
		МассивСкриншотов = РезультатПрохожденияТестовСценария.МассивСкриншотов;
	КонецЕсли;	 
	
	ФайлИмяФайлаСкриншота = Новый Файл(ИмяФайлаСкриншота);
	
	СтруктураСкриншот = Новый Структура;
	СтруктураСкриншот.Вставить(""ИмяФайла"", ФайлИмяФайлаСкриншота.Имя);
	СтруктураСкриншот.Вставить(""ДвоичныеДанные"", Новый ДвоичныеДанные(ИмяФайлаСкриншота));
	МассивСкриншотов.Добавить(СтруктураСкриншот);
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотОшибкиТекущегоОкна()
	ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
	СделатьСкриншот(ИмяФайлаСкриншота);
	
	РезультатПрохожденияТестовСценария = ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияТестовСценария;
	ДобавитьСкриншотКСценарию(РезультатПрохожденияТестовСценария,ИмяФайлаСкриншота);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотыОшибкиКаждогоОкна1С()
	ТекProcessID = ТекProcessID + 1;
	Если ТекProcessID > (МассивPIDОкон1С.Количество() - 1) Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	ProcessID = МассивPIDОкон1С[ТекProcessID];
	
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
	КонецЕсли;	 
	
	Попытка
		WshShell.AppActivate(ProcessID);
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	ПодключитьОбработчикОжидания(""СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкно"", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX()
	ТекProcessID = ТекProcessID + 1;
	Если ТекProcessID > (МассивКоординатОкон1С.Количество() - 1) Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	ТекКоординаты = МассивКоординатОкон1С[ТекProcessID];
	
	ТекстСообщения = Локализовать(""Активирую окно с координатами: %1;%2"");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Формат(ТекКоординаты.x, ""ЧГ=; ЧН=0"")); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", Формат(ТекКоординаты.y, ""ЧГ=; ЧН=0"")); 
	СообщитьПользователю(ТекстСообщения);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""СлужебныйВызов"",Истина);
	ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов + ""\tools\Sikuli\ClickCoordinates.sikuli --args "" + Формат(ТекКоординаты.x, ""ЧГ=; ЧН=0"") + "" "" + Формат(ТекКоординаты.y, ""ЧГ=; ЧН=0"") , -1, Истина,,ДопПараметры);
	
	ПодключитьОбработчикОжидания(""СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкноSikuliX"", 1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СортироватьМассивКоординат(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить(""x"");
	Тзн.Колонки.Добавить(""y"");
	
	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.x = Элем.x;
		СтрТзн.y = Элем.y;
	КонецЦикла;	
	
	Тзн.Сортировать(""x"");
	
	Массив = Новый Массив;
	
	Для Каждого СтрТзн Из Тзн Цикл
		Массив.Добавить(Новый Структура(""x,y"", СтрТзн.x, СтрТзн.y));
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивКоординатОкон1С()
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла(""txt"");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""СлужебныйВызов"",Истина);
	Рез = ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов + ""/tools/Sikuli/GetAll1CWindowsCoordinates.sikuli > """""" + ИмяФайлаЛога + """""""", -1, Истина,,ДопПараметры);
	Если Рез <> 0 Тогда
		СообщитьПользователю(Локализовать(""Не смог выполнить команду по получению координат на экране всех окон 1С в панели задач.""));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайлаЛога) Тогда
		СообщитьПользователю(Локализовать(""Не смог выполнить команду по получению координат на экране всех окон 1С в панели задач.""));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога, ""UTF-8"");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		МассивЗначений = РазложитьСтрокуВМассивПодстрок(Стр, "";"");
		
		Для Ккк = 0 По МассивЗначений.Количество() - 1 Цикл
			МассивЗначений[Ккк] = СокрЛП(МассивЗначений[Ккк]);
		КонецЦикла;
		
		Если МассивЗначений[0] <> ""match"" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Новый Структура(""x,y"", Число(МассивЗначений[1]), Число(МассивЗначений[2])));
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	СортироватьМассивКоординат(Массив);
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура ЗакрытьМодальныйДиалогИСнятьСкриншот()
	Если НЕ ОбъектКонтекстСохраняемый.Свойство(""ТестовоеПриложение"") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ИскатьМодальныйДиалог"",Истина);
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если АктивноеОкно = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтоЗаголовокОкнаМодальногоДиалога(АктивноеОкно.Заголовок) Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		КнопкаОК = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""),""ОК"");
		Если КнопкаОК = Неопределено Тогда
			КнопкаОК = АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""),""OK"");
		КонецЕсли;	 
		Если КнопкаОК = Неопределено Тогда
			АктивноеОкно.Закрыть();
		Иначе	
			КнопкаОК.Нажать();
		КонецЕсли;	  
	Исключение
		// не получилось закрыть модальный диалог
		Возврат;
	КонецПопытки;	
	
	sleep(2);
	
	СделатьСкриншотОшибкиТекущегоОкна();
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотыОшибки()
	Если Объект.СниматьСкриншотКаждогоОкна1С Тогда
		// временное решение через SikuliX скрипт
		СообщитьПользователю(""Делаю скриншоты всех окон 1С."");
		ТекProcessID = -1;
		МассивКоординатОкон1С = ПолучитьМассивКоординатОкон1С();
		Если МассивКоординатОкон1С = Неопределено Тогда
			СделатьСкриншотОшибкиТекущегоОкна();
			ПерейтиКВыполнениюСледующегоСценария();
			Возврат;
		КонецЕсли;	 
		
		
		ТекстСообщения = Локализовать(""Найдено %1 окон."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",МассивКоординатОкон1С.Количество()); 
		СообщитьПользователю(ТекстСообщения);
		
		Если МассивКоординатОкон1С.Количество() = 0 Тогда
			СообщитьПользователю(Локализовать(""Не найдено ни одного окна 1С. Делаю обычный скриншот.""));
			СделатьСкриншотОшибкиТекущегоОкна();
			ПерейтиКВыполнениюСледующегоСценария();
			Возврат;
		КонецЕсли;	 
		
		// Сделаем текущий скриншот - чтобы не получилось ситуации, что активное окно свернулось
		СообщитьПользователю(Локализовать(""Делаю общий скриншот.""));
		СделатьСкриншотОшибкиТекущегоОкна();
		
		СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX();
		Возврат;
	КонецЕсли;	 
	
	СделатьСкриншотОшибкиТекущегоОкна();
	
	// Если на экране модальный диалог - закроем его, сделаем паузу и снимем ещё один скриншот
	// т.к. часто после закрытия диалога можно получить дополнительную информацию об ошибке
	ЗакрытьМодальныйДиалогИСнятьСкриншот();
	
	ПерейтиКВыполнениюСледующегоСценария();
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(ОписаниеШага, СтрокаСценария, РезультатПрохожденияТестовСценария)
	Если Не Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗначениеПараметровДляСнятияСкриншотов = Новый Структура;
	ЗначениеПараметровДляСнятияСкриншотов.Вставить(""ОписаниеШага"", ОписаниеШага);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить(""СтрокаСценария"", СтрокаСценария);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить(""РезультатПрохожденияТестовСценария"", РезультатПрохожденияТестовСценария);
	
	ПодключитьОбработчикОжидания(""СделатьСкриншотыОшибки"", 1, Истина);
	
КонецПроцедуры
// }снятие скриншота

// свёртка дерева до строк фич
&НаКлиенте
Процедура СвернутьДеревоДоФичРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		Если Строка.Тип = ""Фича"" Тогда
			СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоФичРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

// свёртка дерева до строк сценариев
&НаКлиенте
Процедура СвернутьДеревоДоСценариевРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		Если Строка.Тип = ""Фича"" Тогда
			РазвернутьСтрокуДерева(Строка);
		КонецЕсли;	 
		
		Если Строка.Тип = ""Сценарий"" Тогда
			СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоСценариевРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

// свёртка дерева до строк шагов и примеров
&НаКлиенте
Процедура СвернутьДеревоДоШаговРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		
		Если Строка.Тип = ""Фича"" 
			ИЛИ Строка.Тип = ""Сценарий"" 
			ИЛИ Строка.Тип = ""Примеры"" Тогда
				РазвернутьСтрокуДерева(Строка);
		КонецЕсли;	 
			
		Если Строка.Тип = ""ШагСценарий"" 
			ИЛИ Строка.Тип = ""Пример"" 
			ИЛИ Строка.Тип = ""Область"" Тогда
				ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
				Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Истина Тогда
					СвернутьСтрокуДерева(Строка);
				КонецЕсли;	 
			Продолжить;
		КонецЕсли;
		
		Если Строка.СтрокаПараметровШагаВВидеТаблицы Тогда
			СтрокаРодитель = Строка.ПолучитьРодителя();
			ИдентификаторСтроки=СтрокаРодитель.ПолучитьИдентификатор();
			Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Истина Тогда
				СвернутьСтрокуДерева(СтрокаРодитель);
			КонецЕсли;	 
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоШаговРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

// несколько клиентов тестирования {

&НаКлиенте
Процедура СброситьФлагПодключенияКлиентаТестирования()
	Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
		НайденнаяСтрока.Подключен = Ложь;
		НайденнаяСтрока.ДескрипторОкна = 0;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТекущейИнфобазы()
	
	ДанныеТекущейИнфобазы = Новый Структура;
	ДанныеТекущейИнфобазы.Вставить(""Имя"", ""Этот клиент"");
	КаталогБазы = СтрокаСоединенияИнформационнойБазы();
	ДанныеТекущейИнфобазы.Вставить(""ПутьКИнфобазе"", КаталогБазы);
	
	СвободныйПорт = 1538;//надо так, иначе не подключается уже запущенный TestClient, если была переоткрыта VA
	
	Отбор = Новый Структура;
	Отбор.Вставить(""Имя"", ""Этот клиент"");
	СтрокиДанныеКлиентовТестирования = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если СтрокиДанныеКлиентовТестирования.Количество() > 0 Тогда
		СтрокаЭтотКлиент = СтрокиДанныеКлиентовТестирования[0];
		Если ПустаяСтрока(СтрокаЭтотКлиент.ДопПараметры) Тогда
			ДанныеТекущейИнфобазы.Вставить(""ДопПараметры"", ""/N"""""" + ИмяПользователя() + """""""");
		КонецЕсли;	 
	Иначе	
		СтрокаЭтотКлиент = ДанныеКлиентовТестирования.Вставить(0);// этот клиент должен быть первым
			
		ДанныеТекущейИнфобазы.Вставить(""ИмяКомпьютера"",  ""localhost"");
		ДанныеТекущейИнфобазы.Вставить(""ТипКлиента"",     ""Тонкий"");
		ДанныеТекущейИнфобазы.Вставить(""ПутьКИнфобазе"",  КаталогБазы);
		ДанныеТекущейИнфобазы.Вставить(""ПортЗапускаТестКлиента"", СвободныйПорт);	
		ДанныеТекущейИнфобазы.Вставить(""ДопПараметры"", ""/N"""""" + ИмяПользователя() + """""""");
		ДанныеТекущейИнфобазы.Вставить(""ЭтотКлиент"", Истина);
	КонецЕсли;	 
	
	ЗаполнитьЗначенияСвойств(СтрокаЭтотКлиент, ДанныеТекущейИнфобазы);
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьПараметрДляWeb(Знач Стр)
	Стр = СтрЗаменить(Стр, ""%"", ""%25"");
	Стр = СтрЗаменить(Стр, ""?"", ""%3F"");
	Стр = СтрЗаменить(Стр, ""&"", ""%26"");
	Стр = СтрЗаменить(Стр, ""="", ""%3D"");
	Стр = СтрЗаменить(Стр, "" "", ""%20"");
	Стр = СтрЗаменить(Стр, """""""", ""%22"");
	Стр = СтрЗаменить(Стр, ""/"", ""%2F"");
	Стр = СтрЗаменить(Стр, ""\"", ""%5C"");
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ДобавитьПараметрКWeb(Стр,ИмяПараметра,Значение = Неопределено)
	Стр = Стр + ?(Найти(Стр, ""?"") = 0, ""?"", ""&"") + ИмяПараметра;
	Если Значение <> Неопределено Тогда
		Стр = Стр + ""="" + ПреобразоватьПараметрДляWeb(Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция УбратьКавычки(Стр)
	Если Лев(Стр,1) = """""""" И Прав(Стр,1) = """""""" Тогда
		Возврат Сред(Стр,2,СтрДлина(Стр)-2);
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции	

&НаКлиенте
Функция УбратьКавычкиАпострофы(Стр)
	Если Лев(Стр,1) = """""""" И Прав(Стр,1) = """""""" Тогда
		Возврат Сред(Стр,2,СтрДлина(Стр)-2);
	КонецЕсли;	 
	
	Если Лев(Стр,1) = ""'"" И Прав(Стр,1) = ""'"" Тогда
		Возврат Сред(Стр,2,СтрДлина(Стр)-2);
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции	

&НаКлиенте
Функция ПолучитьМассивПараметровЗапуска(Стр,Разделитель)
	Рез = """";
	КавычкаОткрылась = Ложь;
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр,Ккк,1);
		
		Если Символ = """""""" Тогда
			КавычкаОткрылась = Не КавычкаОткрылась;
		КонецЕсли;	 
		
		Если КавычкаОткрылась Тогда
			Если Символ = "" "" Тогда
				Символ = ""~ЭкранированиеПробела~"";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Рез = Рез + Символ;
	КонецЦикла;	
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Рез,Разделитель);
	
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		МассивСтрок[Ккк] = СтрЗаменить(МассивСтрок[Ккк],""~ЭкранированиеПробела~"","" "")
	КонецЦикла;	
	
	Возврат МассивСтрок;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗапускаWebКлиент(ДанныеЗапускаКлиентаТестирования)
	СтрокаЗапуска = СокрЛП(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе);
	Если НРег(Лев(СтрокаЗапуска,3)) = ""ws="" Тогда
		СтрокаЗапуска = Сред(СтрокаЗапуска,4);
		СтрокаЗапуска = УбратьКавычки(СтрокаЗапуска);
	КонецЕсли;	 
	ДобавитьПараметрКWeb(СтрокаЗапуска, ""TESTCLIENT"");
	ДобавитьПараметрКWeb(СтрокаЗапуска, ""TESTCLIENTID"", ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя));
	
	
	МассивДоппараметров = ПолучитьМассивПараметровЗапуска(ДанныеЗапускаКлиентаТестирования.ДопПараметры,"" "");
	Для Каждого Элем Из МассивДоппараметров Цикл
		Если Лев(Элем,2) = ""/N"" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, ""N"", УбратьКавычки(Сред(Элем,3)));
		ИначеЕсли Лев(Элем,2) = ""/P"" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, ""P"", УбратьКавычки(Сред(Элем,3)));
		ИначеЕсли Лев(Элем,2) = ""/L"" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, ""L"", УбратьКавычки(Сред(Элем,3)));
		ИначеЕсли Лев(Элем,3) = ""/VL"" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, ""VL"", УбратьКавычки(Сред(Элем,4)));
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат СтрокаЗапуска;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗапускаDesktopПриложение(ДанныеЗапускаКлиентаТестирования,ДопПараметры)
	ДопПараметры.Вставить(""ТипБазыФайловая"",Ложь);
	КаталогБазы = ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе;
	ДопПараметры.Вставить(""КаталогБазы"",КаталогБазы);
	Если Найти(ВРег(КаталогБазы), ВРег(""File="")) > 0 Тогда
		ДопПараметры.Вставить(""ТипБазыФайловая"",Истина);
		ИмяКаталога = СтрЗаменить(СокрЛП(КаталогБазы), ""File="", """");
		ИмяКаталога = СтрЗаменить(ИмяКаталога,"";"","""");
		ИмяКаталога = УбратьКавычки(ИмяКаталога);
		ДопПараметры.Вставить(""КаталогБазы"",ИмяКаталога);
		
		КаталогБазы = СтрЗаменить(КаталогБазы, ""File="", "" /F"");
	ИначеЕсли Найти(ВРег(КаталогБазы), ВРег(""Srvr="")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, ""Srvr="", ""/S"");
		КаталогБазы = СтрЗаменить(КаталогБазы, """""";Ref="""""", ""\"");
	ИначеЕсли Найти(ВРег(КаталогБазы), ВРег(""ws="")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, ""ws="", "" /WS"");
	Иначе
	КонецЕсли;
	КаталогБазы = СтрЗаменить(КаталогБазы, "";"", """");
	
	Если ЭтоLinux = Истина Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, ""\"", ""/"");
	КонецЕсли;	
	
	ПараметрыОтладчика = """";
	Если Объект.ЗапускатьТестКлиентВРежимеОтладки Тогда
		// /debug -http -attach /debuggerURL ""http://localhost:1560""
		ПараметрыОтладчика = ""/debug "" + Объект.КлючиОтладки + "" /debuggerURL """""" + Объект.АдресОтладчика + """"""""; 
	КонецЕсли;
	
	СтрокаЗапуска = ""ENTERPRISE "" + КаталогБазы + ПараметрыОтладчика + "" /TESTCLIENT "";
	
	СвободныйПорт = ПроверитьПортНаЗанятость(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
	Если СвободныйПорт <> ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента Тогда
		ТекстСообщения = Локализовать(""Порт %1 занят или находится вне указанного диапазона, порт подключения изменен на %2"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, ""ЧГ=; ЧН=0"")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",СвободныйПорт);
		Отладка(ТекстСообщения);
		ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента = СвободныйПорт;
		Отбор = Новый Структура;
		Отбор.Вставить(""Имя"", ДанныеЗапускаКлиентаТестирования.Имя);
		
		НайденныеКлиенты = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
		Если НайденныеКлиенты.Количество() = 1 Тогда
			НайденныеКлиенты[0].ПортЗапускаТестКлиента = ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска + ""-TPort "" + Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, ""ЧГ=; ЧН=0"") + "" "";	
	
	ДопПараметр = ДанныеЗапускаКлиентаТестирования.ДопПараметры + ДопПараметр;
 	Если ЭтоЗапускВРежимеКоманднойСтроки Тогда
		СтрокаЗапуска = СтрокаЗапуска + "" /CTemp "" + ДопПараметр;//добавил /CTemp, чтобы убрать передачу параметра /C в TestClient, с которым был запущен TestManager
 	Иначе
		СтрокаЗапуска = СтрокаЗапуска + ДопПараметр;
	КонецЕсли;
	
	Возврат СтрокаЗапуска;
КонецФункции	

&НаКлиенте
Процедура ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования,СтрокаЗапуска)
	СтрокаЗапуска1с = КаталогПрограммы() + ""1cv8"";
	Если Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), ""тонкий"") > 0 Тогда
		СтрокаЗапуска1с = КаталогПрограммы() + ""1cv8c"";
	КонецЕсли;	 
	Если НЕ ЭтоLinux Тогда
		СтрокаЗапуска1с = СтрокаЗапуска1с + "".exe"";
		Если Объект.ЗапускатьКлиентТестированияСМаксимизированнымОкном Тогда
			СтрокаЗапуска1с = ""start /max """""""" """""" + СтрокаЗапуска1с  + """""" "" + СтрокаЗапуска;
		Иначе	
			СтрокаЗапуска1с = """""""" + СтрокаЗапуска1с  + """""" "" + СтрокаЗапуска;
		КонецЕсли;	 
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапуска1с, 0);	
	Иначе
		ЗапуститьСистему(СтрокаЗапуска);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования, ДопПараметр = """")
	
	НадоЗапускатьПриложение = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) Тогда
		// Значит не указано имя ПК для запуска. Это равносильно указанию localhost
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли НРег(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) = ""localhost"" Тогда
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли НРег(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) = ""127.0.0.1"" Тогда
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли ДанныеЗапускаКлиентаТестирования.ТипКлиента = ""Web"" Тогда
		// браузер мы можем спокойно запускать
		НадоЗапускатьПриложение = Истина;
	КонецЕсли;	 
	
	Если НЕ НадоЗапускатьПриложение Тогда
		Возврат;
	КонецЕсли;	 
	
	ПроисходилЗапускTescClient = Истина;	
	
	ДопПараметрыЗапуска = Новый Структура;
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = ""Web"" Тогда
		СтрокаЗапуска = ПолучитьСтрокуЗапускаWebКлиент(ДанныеЗапускаКлиентаТестирования);
	Иначе	
		СтрокаЗапуска = ПолучитьСтрокуЗапускаDesktopПриложение(ДанныеЗапускаКлиентаТестирования,ДопПараметрыЗапуска);
	КонецЕсли;	 
	
	
	ТекстСообщения = Локализовать(""СтрокаЗапуска=%1"");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",СтрокаЗапуска);
	Отладка(Локализовать(ТекстСообщения));
	
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = ""Web"" Тогда
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(""start """""""" """""" + СтрокаЗапуска + """""""", 0);
		Иначе	
			ЗапуститьПриложение(СтрокаЗапуска);
		КонецЕсли;	 
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеЗапускаКлиентаТестирования.ТипКлиента) Или
		Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), ""тонкий"") > 0 Или 
		ЭтоLinux Тогда
		
		Если ДопПараметрыЗапуска.Свойство(""ТипБазыФайловая"") Тогда
			Если ДопПараметрыЗапуска.ТипБазыФайловая Тогда
				Если НЕ ФайлСуществуетКомандаСистемы(ДопПараметрыЗапуска.КаталогБазы) Тогда
					ТекстСообщения = Локализовать(""Каталог <%1> не найден."");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ДопПараметрыЗапуска.КаталогБазы);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования,СтрокаЗапуска);
	Иначе
		ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования,СтрокаЗапуска);
	КонецЕсли;
	
	Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;	
	ДанныеЗапускаКлиентаТестирования.Подключен = Истина;
	КоличествоЗапущенныхКлиентовТестирования = КоличествоЗапущенныхКлиентовТестирования + 1;
	
КонецПроцедуры
		
&НаКлиенте
// Возвращает строку обернутую кавычками.
Функция ОбернутьВКавычки(Знач Строка) Экспорт
	Если Лев(Строка, 1) = """""""" И Прав(Строка, 1) = """""""" Тогда
		Возврат Строка;
	Иначе
		Возврат """""""" + Строка + """""""";
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиВХранилище(Знач Ключ, Знач Значение, ДопПараметры)
	ПрефиксИнструмента = ДопПараметры.ПрефиксИнструментаДляСохраненияНастроек;
	
	Если ПрефиксИнструмента <> Неопределено Тогда  
		Ключ = ПрефиксИнструмента + Ключ;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип(""ДанныеФормыКоллекция"") Тогда
		ХранилищеОбщихНастроек.Сохранить(ДопПараметры.ИДДляОбщегоСохраненияНастроек, Ключ, Значение.Выгрузить());
	Иначе
		ХранилищеОбщихНастроек.Сохранить(ДопПараметры.ИДДляОбщегоСохраненияНастроек, Ключ, Значение);
	КонецЕсли;
КонецПроцедуры

// }

&НаСервереБезКонтекста
Процедура СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, РежимСамотестирования)
	Если РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	ХранилищеОбщихНастроек.Сохранить(""VanessaBehaviorНедавноЗагруженныеФичи"", , НедавноЗагруженныеФичи);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи)
	НедавноЗагруженныеФичи = ХранилищеОбщихНастроек.Загрузить(""VanessaBehaviorНедавноЗагруженныеФичи"");
	Если НедавноЗагруженныеФичи = Неопределено Тогда
		НедавноЗагруженныеФичи = Новый Массив;
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи)
	КоличествоЭлементовВИнтерфейсе = Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы.Количество();
	Ид = 0;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		Если КоличествоЭлементовВИнтерфейсе < Ид Тогда
			Пункт1=Элементы.Добавить(""МенюЗагрузитьФичи"" + Ид, Тип(""КнопкаФормы""), Элементы.ГруппаКнопокНедавноЗагруженныеФичи);
			Пункт1.Заголовок  = Элем.Представление;
			Пункт1.ИмяКоманды = ""ЗагрузитьНедавнююФичу"" + Ид;
		Иначе
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Заголовок  = Элем.Представление;
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].ИмяКоманды = ""ЗагрузитьНедавнююФичу"" + Ид;
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СохранитьИСкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи, РежимСамотестирования)
	СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, РежимСамотестирования);
	СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьФичуВСписокНедавноЗагруженныхФич(Знач Путь)

	Ид = -1;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		
		Если НРег(Элем.Путь) = НРег(Путь) Тогда
			НедавноЗагруженныеФичи.Удалить(Ид);
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	ЗначениеМассива = Новый Структура;
	ЗначениеМассива.Вставить(""Путь"", Путь);
	ЗначениеМассива.Вставить(""Представление"", ""1. "" + Путь);
	НедавноЗагруженныеФичи.Вставить(0, ЗначениеМассива);
	
	Если НедавноЗагруженныеФичи.Количество() > 9 Тогда
		НедавноЗагруженныеФичи.Удалить(9);
	КонецЕсли;	 
	
	Ид = -1;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		Путь = Элем.Путь;
		Элем.Представление = """" + (Ид + 1) + "". "" + Путь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСценарийСоСтрокиПрисланнойИзвне()
	ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен = Ложь;
	СделатьСтрокуДереваТекущейПоНомеру(НомерСтрокиСценарияПереданныйИзвне);
	ВыполнитьДанныйСценарийСТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоНомеру(Ном)
	СтрокиДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	НадоПрервать = Ложь;
	СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева,Ном,НадоПрервать);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева,Ном,НадоПрервать)
	Если НадоПрервать Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.НомерСтрокиВФиче = Ном Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			НадоПрервать = Истина;
			Возврат;
		КонецЕсли;	 
		
		СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокаДерева.ПолучитьЭлементы(),Ном,НадоПрервать)
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБрейкПоинт(ПолныйПуть)
	Брейкпоинты.Добавить(ПолныйПуть);
	Если НЕ Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость  Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Истина;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБрейкПоинт(ПолныйПуть)
	ИД = Брейкпоинты.Найти(ПолныйПуть);
	Если ИД <> Неопределено Тогда
		Брейкпоинты.Удалить(ИД);
	КонецЕсли;	 
	
	Если Брейкпоинты.Количество() = 0 Тогда
		Если Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость Тогда
			Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Ложь;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуБрейкпоинтаРекурсивно(СтрокиДерева)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Брейкпоинт Тогда
			СтрокаДерева.Брейкпоинт = Ложь;
		КонецЕсли;
		
		СнятьПометкуБрейкпоинтаРекурсивно(СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СброситьКешИзвестныхStepDefinitionСервер()
	ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроекСервер();
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение(""ТаблицаИзвестныхStepDefinition"");
	Копия = ТзнТаблицаИзвестныхStepDefinition.Скопировать();
	Копия.Очистить();
	СохранитьНастройкиВХранилище(""ТаблицаИзвестныхStepDefinition"", Копия, ПараметрыДляСохраненияНастроек);
	
	ТзнКешStepDefinition = РеквизитФормыВЗначение(""КешStepDefinition"");
	Копия = ТзнКешStepDefinition.Скопировать();
	Копия.Очистить();
	СохранитьНастройкиВХранилище(""КешStepDefinition"", Копия, ПараметрыДляСохраненияНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУсловноеОформление()

	Элементы.ПеревестиТекстНаДругойЯзык.Видимость = Объект.ЯзыкГенератораGherkin <> ""ru"";
	
	Элементы.КаталогВыгрузкиИнструкцийВидео.Видимость = Объект.СоздаватьИнструкциюВидео;
	Элементы.ГруппаТипВидеоИнструкций.Видимость = Объект.СоздаватьИнструкциюВидео;
	Элементы.ИмяТекущейСборки.Видимость = Объект.ДобавлятьКИмениСценарияУсловияВыгрузки;	
	
	ПриИзмененииТипаВидеоИнструкции();
		
	Элементы.КаталогВыгрузкиИнструкцийHTML.Видимость = Объект.СоздаватьИнструкциюHTML;	
	Элементы.КаталогВыгрузкиИнструкцийMarkdown.Видимость = Объект.СоздаватьИнструкциюMarkdown;
	
	Элементы.ГруппаСкриншотыНастройки.Видимость = Объект.ДелатьСкриншотПриВозникновенииОшибки;
	Элементы.ГруппаAllureНастройки.Видимость = Объект.ДелатьОтчетВФорматеАллюр;
	Элементы.ГруппаjUnitНастройки.Видимость = Объект.ДелатьОтчетВФорматеjUnit;	
	Элементы.ГруппаCucumberНастройки.Видимость = Объект.ДелатьОтчетВФорматеCucumberJson;	
	Элементы.ГруппаСППРНастройки.Видимость = Объект.ДелатьОтчетВФорматеСППР;
	Элементы.ГруппаЛогТекстНастройки.Видимость = Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл;
	Элементы.ГруппаВидеоНастройки.Видимость = Объект.СоздаватьИнструкциюВидео;	
	
	Элементы.ИмяКаталогаЛогОшибок.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	Элементы.СобиратьДанныеОСостоянииАктивнойФормыПриОшибке.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	Элементы.СобиратьДанныеОСостоянииВсехФормПриОшибке.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	
	Элементы.ГруппаОзвучкаГолосомВнутренняя.Видимость = Объект.ЗаписьВидеоДелатьНаложениеTTS;
	Элементы.ГруппаТестГолоса.Видимость = Объект.ЗаписьВидеоДелатьНаложениеTTS;
	
	Если Объект.ЗаписьВидеоТипОзвучкиTTS = 0 Тогда
		Элементы.СтраницыНастроектОзвучания.ТекущаяСтраница = Элементы.ГруппаMicrosoftTTS;
	ИначеЕсли Объект.ЗаписьВидеоТипОзвучкиTTS = 1 Тогда
		Элементы.СтраницыНастроектОзвучания.ТекущаяСтраница = Элементы.ГруппаYandexTTS;
		ЗаполнитьЗначенияПоУмолчаниюYandexTTS();
	Иначе	
		Элементы.СтраницыНастроектОзвучания.ТекущаяСтраница = Элементы.ГруппаAmazonTTS;
		ЗаполнитьЗначенияПоУмолчаниюAmazonTTS();
	КонецЕсли;
	
	//Если Объект.ЗаписьВидеоДелатьНаложениеTTS Тогда	
	//	Если Объект.ЗаписьВидеоТипОзвучкиTTS = 0 Тогда	
	//		Элементы.ГруппаMicrosoftTTS.Видимость = Истина;	
	//		Элементы.ГруппаYandexTTS.Видимость = Ложь;	
	//	Иначе		
	//		Элементы.ГруппаMicrosoftTTS.Видимость = Ложь;	
	//		Элементы.ГруппаYandexTTS.Видимость = Истина;	
	//		ЗаполнитьЗначенияПоУмолчаниюYandexTTS();	
	//	КонецЕсли;	 	
	//	Элементы.ЗаписьВидеоСловарьЗамен.Видимость   = Истина;	
	//	Элементы.ЗаписьВидеоКэшироватьФайлыTTS.Видимость = Истина;	
	//	Элементы.ЗаписьВидеоКэшФайловTTS.Видимость = Истина;	
	//	Элементы.ЗаписьВидеоТипОзвучкиTTS.Видимость = Истина;	
	//	Элементы.ЗаписьВидеоСкоростьПроизношения.Видимость = Истина;	
	//	Элементы.ЗаписьВидеоПутьКДвижкуTTS.Видимость = Истина;	
	//	Элементы.ЗаписьВидеоИмяTTS.Видимость         = Истина;	
	//Иначе	
	//	Элементы.ЗаписьВидеоПутьКДвижкуTTS.Видимость = Ложь;	
	//	Элементы.ЗаписьВидеоИмяTTS.Видимость         = Ложь;	
	//	Элементы.ЗаписьВидеоСловарьЗамен.Видимость   = Ложь;	
	//	Элементы.ЗаписьВидеоКэшироватьФайлыTTS.Видимость = Ложь;	
	//	Элементы.ЗаписьВидеоКэшФайловTTS.Видимость = Ложь;	
	//	Элементы.ЗаписьВидеоСкоростьПроизношения.Видимость = Ложь;	
	//	Элементы.ЗаписьВидеоТипОзвучкиTTS.Видимость = Ложь;	
	//КонецЕсли;
	
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Объект.ВыполнятьШагиАссинхронно;	
	
	Элементы.ЗаписьВидеоКэшФайловTTS.Видимость = Объект.ЗаписьВидеоКэшироватьФайлыTTS;
	
	Элементы.ЗаписьВидеоКэшВидеоВставок.Видимость = Объект.ЗаписьВидеоКэшироватьВидеоВставки;	 
	
	Элементы.КлючиОтладки.Видимость   = Объект.ЗапускатьТестКлиентВРежимеОтладки;
	Элементы.АдресОтладчика.Видимость = Объект.ЗапускатьТестКлиентВРежимеОтладки;
	
	Элементы.ПаузаПриОткрытииОкна.Видимость = Объект.БезопасноеВыполнениеШагов;
	
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Объект.ВыполнятьШагиАссинхронно;
	
	Элементы.КаталогиСкриптовSikuliX.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.СброситьПодключениеSikuliXСервера.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.КаталогиСкриптовSikuliXПоУмолчанию.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.ГруппаПрофилиЦветов.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.ЗаписьВидеоЭмулироватьДвиженияМышки.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.КаталогДляГенерацииКартинок.Видимость = Объект.ЗаписьВидеоЭмулироватьДвиженияМышки;
	Элементы.ГруппаПрофилиЦветов.Видимость = Объект.ЗаписьВидеоЭмулироватьДвиженияМышки;
	
	
	Элементы.ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок.Видимость = Объект.ЗаписьВидеоЗаменитьСлайдЗаголовок;
	Элементы.ЗаписьВидеоПутьКСлайдуЗаголовок.Видимость = Объект.ЗаписьВидеоЗаменитьСлайдЗаголовок;
	
	Элементы.ЗаписьВидеоДобавитьМузыкуКСлайдуФинал.Видимость = Объект.ЗаписьВидеоЗаменитьСлайдФинал;
	Элементы.ЗаписьВидеоПутьКСлайдуФинал.Видимость = Объект.ЗаписьВидеоЗаменитьСлайдФинал;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница)
	Элементы.СгенерированныйСценарий.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Объект.СгенерированныйСценарий, Символы.ПС);
	
	ВерхняяГраница = НачалоСтроки;
	НижняяГраница  = НачалоСтроки;
	
	НомерСтроки = НижняяГраница;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки - 1;
		Если НомерСтроки < 1 Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивСтрок[НомерСтроки - 1]);
		
		Если Лев(Стр, 1) <> ""|"" Тогда
			Прервать;
		КонецЕсли;	 
		
		НижняяГраница = НомерСтроки;
	КонецЦикла;	
	
	
	НомерСтроки = ВерхняяГраница;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки > МассивСтрок.Количество() Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивСтрок[НомерСтроки - 1]);
		
		Если Лев(Стр, 1) <> ""|"" Тогда
			Прервать;
		КонецЕсли;	 
		
		ВерхняяГраница = НомерСтроки;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедактированиеТаблицыGherkin()
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Объект.СгенерированныйСценарий, Символы.ПС);
	
	Если МассивСтрок.Количество() = 0 Тогда
	    Возврат;	
	КонецЕсли;
	
	МассивСтрокДляРедактирования = Новый Массив;
	Для Ккк = (НижняяГраница - 1) По ВерхняяГраница - 1 Цикл
		МассивСтрокДляРедактирования.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;
	
	Если МассивСтрокДляРедактирования.Количество() = 0 Тогда
		СообщитьПользователю(Локализовать(""Не найдена таблица для редактирования.""));
		Возврат;
	КонецЕсли;	 
	
	Если МассивСтрокДляРедактирования.Количество() = 1 Тогда
		Если Не ЗначениеЗаполнено(МассивСтрокДляРедактирования[0]) Тогда
			СообщитьПользователю(Локализовать(""Не найдена таблица для редактирования.""));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ФорматироватьТаблицуGherkin(МассивСтрокДляРедактирования);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""МассивСтрокДляРедактирования"", МассивСтрокДляРедактирования);
	ФормаДобавитьШаг = ПолучитьФорму(ПолучитьИмяОбработкиVA() + "".Форма.РедактированиеТаблицы"", ПараметрыФормы);
	ФормаДобавитьШаг.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьТаблицуGherkinПослеРедактирования(МассивСтрокТаблицы)
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
	
	ФорматироватьТаблицуGherkin(МассивСтрокТаблицы);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Объект.СгенерированныйСценарий, Символы.ПС);
	
	
	НовыйМассивСтрок = Новый Массив;
	НомерСтроки = 0;
	ДобавилиРедактированныеСтроки = Ложь;
	Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки >= НижняяГраница И НомерСтроки <= ВерхняяГраница Тогда
			Если НЕ ДобавилиРедактированныеСтроки Тогда
				ДобавилиРедактированныеСтроки = Истина;
				
				Для Каждого НоваяСтрока Из МассивСтрокТаблицы Цикл
					НовыйМассивСтрок.Добавить(Символы.Таб + Символы.Таб + НоваяСтрока);
				КонецЦикла;	
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;	 
			
		НовыйМассивСтрок.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;	

	
	ФинальнаяСтрока = """";
	Для Каждого Стр Из НовыйМассивСтрок Цикл
		ФинальнаяСтрока = ФинальнаяСтрока + Стр + Символы.ПС;
	КонецЦикла;	
	
	Объект.СгенерированныйСценарий = ФинальнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСтатистикуКлиентКоротко()
	Поз = Найти(Элементы.Статистика.Заголовок,"","");
	Если Поз > 0 Тогда
		Стр = Лев(Элементы.Статистика.Заголовок,Поз-1);
		ДанныеСтроки = РазложитьСтрокуВМассивПодстрокКлиент(Стр,""/"");
		Если ДанныеСтроки.Количество() = 3 Тогда
			ОбщаяСтатистикаПоФиче = """" + Формат(ДанныеСтроки[0], ""ЧГ=; ЧН=0"") + ""/"" + Формат(ДанныеСтроки[1], ""ЧГ=; ЧН=0"") + ""/"" + Формат(ДанныеСтроки[2], ""ЧГ=; ЧН=0"");
			ОбщаяСтатистикаПоФиче = Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, Новый Шрифт(, , Истина));
			Элементы.Статистика.Заголовок = ОбщаяСтатистикаПоФиче;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиСтатистикуКлиент()
	Если Элементы.ГруппаПросмотрПеременных.Видимость Тогда
		ОбновитьЗначенияВТаблоПеременных();
	КонецЕсли;	 
	
	Если НЕ Объект.ОбновлятьСтатистикуВДереве Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Версия836ИлиВыше Тогда
		Возврат;
	КонецЕсли;	 
	
	ВывестиСтатистикуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВывестиСтатистикуНаСервере(Дерево = Неопределено)

	Если Дерево = Неопределено Тогда
		тДерево = РеквизитФормыВЗначение(""Объект"").ДеревоТестов;
	Иначе	
		тДерево = Дерево;
	КонецЕсли;	 
	
	ВсегоФич       = тДерево.Строки.НайтиСтроки(Новый Структура(""ТипКартинки"", 1), Истина).Количество();
	ВсегоСценариев = тДерево.Строки.НайтиСтроки(Новый Структура(""ТипКартинки"", 2), Истина).Количество();
	ВсегоШагов     = тДерево.Строки.НайтиСтроки(Новый Структура(""ТипКартинки"", 3), Истина).Количество();
	
	ВсегоШаговSuccess = тДерево.Строки.НайтиСтроки(Новый Структура(""ТипКартинки, Статус"", 4, ""Success""), Истина).Количество();
	ВсегоШаговFailed  = тДерево.Строки.НайтиСтроки(Новый Структура(""ТипКартинки, Статус"", 5, ""Failed""),  Истина).Количество();
	ВсегоШаговPending = тДерево.Строки.НайтиСтроки(Новый Структура(""ТипКартинки, Статус"", 6, ""Pending""), Истина).Количество();
	
	ВсегоШаговОбщее = ВсегоШагов + ВсегоШаговSuccess + ВсегоШаговFailed + ВсегоШаговPending;
	
	СтрокаВсегоШаговSuccess = Новый ФорматированнаяСтрока("""" + ВсегоШаговSuccess, Новый Шрифт(, , Истина), Новый Цвет(21, 177, 14)); // Жирный, зеленый
	СтрокаВсегоШаговFailed  = Новый ФорматированнаяСтрока("""" + ВсегоШаговFailed,  Новый Шрифт(, , Истина), Новый Цвет(255, 0, 0));   // Жирный, красный
	СтрокаВсегоШаговPending = Новый ФорматированнаяСтрока("""" + ВсегоШаговPending, Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0)); // Жирный, оранжевый
	
	ОбщаяСтрока = """";
	Если ВсегоШаговSuccess + ВсегоШаговPending + ВсегоШаговFailed > 0 Тогда
		ОбщаяСтрока = Новый ФорматированнаяСтрока("", "", СтрокаВсегоШаговSuccess, ""/"", СтрокаВсегоШаговFailed, ""/"", СтрокаВсегоШаговPending);
	КонецЕсли;

	НеРеализованныхСпипетовВсего = тДерево.Строки.НайтиСтроки(Новый Структура(""АдресСнипета, ТипКартинки"", """", 3), Истина).Количество() + 
							      тДерево.Строки.НайтиСтроки(Новый Структура(""АдресСнипета, ТипКартинки"", """", 4), Истина).Количество() + 
							      тДерево.Строки.НайтиСтроки(Новый Структура(""АдресСнипета, ТипКартинки"", """", 5), Истина).Количество() +
							      тДерево.Строки.НайтиСтроки(Новый Структура(""АдресСнипета, ТипКартинки"", """", 6), Истина).Количество();
								  
	Если НеРеализованныхСпипетовВсего > 0 Тогда
		СтрокаНеРеализованныхСпипетовВсего = Новый ФорматированнаяСтрока(""("" + Формат(НеРеализованныхСпипетовВсего, ""ЧГ=; ЧН=0"") + "")"", Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0)); // Жирный, оранжевый
	Иначе
		СтрокаНеРеализованныхСпипетовВсего = """";
	КонецЕсли;								  
	
	ОбщаяСтатистикаПоФиче = """" + Формат(ВсегоФич, ""ЧГ=; ЧН=0"") + ""/"" + Формат(ВсегоСценариев, ""ЧГ=; ЧН=0"") + ""/"" + Формат(ВсегоШаговОбщее, ""ЧГ=; ЧН=0"");
	ОбщаяСтатистикаПоФиче = Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, Новый Шрифт(, , Истина));
	Элементы.Статистика.Заголовок = Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, СтрокаНеРеализованныхСпипетовВсего, ОбщаяСтрока);
	
	Элементы.Статистика.Подсказка = НСтр(""ru='Всего фич: ';en='Features: '"") + ВсегоФич + Символы.ПС +
									НСтр(""ru='Всего сценариев: ';en='Scenarios: '"") + ВсегоСценариев + Символы.ПС +
									НСтр(""ru='Всего шагов: ';en='Steps: '"") + ВсегоШаговОбщее + Символы.ПС +
									?(НеРеализованныхСпипетовВсего > 0, НСтр(""ru='Не реализовано шагов: ';en='Not implemented: '"") + НеРеализованныхСпипетовВсего, """") + 
									?(ВсегоШаговSuccess + ВсегоШаговPending + ВсегоШаговFailed > 0, 
										Символы.ПС +
										НСтр(""ru='Результат выполнения шагов ';en='Result: '"") + ""(Success, Failed, Pending): "" + 
										ВсегоШаговSuccess + ""/"" + ВсегоШаговFailed + ""/"" + ВсегоШаговPending + Символы.ПС + 
										НСтр(""ru='Пропущено шагов: ';en='Skiped: '"") + ВсегоШагов, """"
									 );
									 
КонецПроцедуры

// { Плагины
// портировано из xUnitFor1C 4.1.1.0

&НаКлиенте
Процедура ЗагрузитьПлагины()
	Если Объект.ПлагиныЗагружены Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.Плагины = Новый Структура;
	КэшФормПлагинов = Новый Структура;
		
	КаталогПлагинов = ПолучитьПутьКПлагинам();
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогПлагинов,СписокКаталогов,СписокФайлов,Ложь);
	ОставитьТолькоФайлыСРасширением(СписокФайлов,"".epf"");
	МассивФайлов = Новый Массив;
	Для Каждого Элем Из СписокФайлов Цикл
		МассивФайлов.Добавить(Элем.Значение);
	КонецЦикла;	 
	
	ОбработчикПоискаКлиентскихПлагинов(МассивФайлов, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьНайденныеКлиентскиеПлагиныНаСервере(Знач ЗагруженныеФайлы, Знач ИдентификаторыПлагинов)
	
	Перем ЗагруженныйФайл, ИмяПлагина, ОписаниеПлагина, ОписанияПлагинов;
	
	Если ЗагруженныеФайлы.Количество() = 0 Тогда
		ОписанияПлагинов = Новый Соответствие
	Иначе	
		ОписанияПлагинов = ПодключитьПлагиныНаСервере(ЗагруженныеФайлы);
	КонецЕсли;	 
	
	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		Объект.ПлагиныЗагружены = Истина;
		
		ИмяПлагина = ИдентификаторыПлагинов[ЗагруженныйФайл.Имя];
		Если ИмяПлагина = Неопределено Тогда
			ИмяПлагина = ИдентификаторыПлагинов[ЗагруженныйФайл.ПолноеИмя];
		КонецЕсли;	 
		
		ОписаниеПлагина = ОписанияПлагинов[ЗагруженныйФайл.Имя];
		Если ОписаниеПлагина = Неопределено Тогда
			ОписаниеПлагина = ОписанияПлагинов[ЗагруженныйФайл.ПолноеИмя];
		КонецЕсли;	 
		Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);
		КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, Истина);
		
	КонецЦикла;
	
	Если Объект.ВерсияПоставки = ""single"" Тогда
		Объект.Плагины.Вставить(""ЗапросыИзБД"", ""ЗапросыИзБД"");
		КэшФормПлагинов.Вставить(""ЗапросыИзБД"", Истина);
		
		Объект.Плагины.Вставить(""СериализаторMXL"", ""СериализаторMXL"");
		КэшФормПлагинов.Вставить(""СериализаторMXL"", Истина);
		
		Объект.Плагины.Вставить(""УтвержденияBDD"", ""УтвержденияBDD"");
		КэшФормПлагинов.Вставить(""УтвержденияBDD"", Истина);
		
		Объект.Плагины.Вставить(""ЗагрузчикПользовательскихНастроек"", ""ЗагрузчикПользовательскихНастроек"");
		КэшФормПлагинов.Вставить(""ЗагрузчикПользовательскихНастроек"", Истина);
	КонецЕсли;	 
	
	ЗагрузкаПлагиновЗавершение();

КонецПроцедуры

&НаСервере
Функция ПодключитьПлагиныНаСервере(Знач ЗагружаемыеФайлы)
	ОписанияПлагинов = Новый Соответствие;
	
	Для Каждого ОписаниеФайла Из ЗагружаемыеФайлы Цикл
		ФайлОбъект = Новый Файл(ОписаниеФайла.Имя);
		ИмяПлагина = ФайлОбъект.ИмяБезРасширения;
		ДопПараметры = Новый Структура;
		Попытка
			ДопПараметры.Вставить(""ИмяФайла"", ОписаниеФайла.ПолноеИмя);
		Исключение
			ДопПараметры.Вставить(""ИмяФайла"", ОписаниеФайла.Имя);
		КонецПопытки;
		ПодключитьФайлОбработкиНаСервере(ОписаниеФайла.Хранение, ИмяПлагина,, ЕстьЗащитаОтОпасныхДействий, ДопПараметры);
		
		Попытка
			ОбъектОбработки = ВнешниеОбработки.Создать(ИмяПлагина, Ложь);
			ОбъектОбработки.Инициализация(ЭтотОбъектНаСервере());
			ОписанияПлагинов.Вставить(ОписаниеФайла.Имя, ОбъектОбработки.ОписаниеПлагина(Объект.ТипыПлагинов));
		Исключение
			Ошибка = ""Возникла ошибка при загрузке плагина: "" + ОписаниеФайла.Имя + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			СообщитьПользователюСеврер(Ошибка);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ОписанияПлагинов);
КонецФункции

&НаСервере
Функция ПолучитьОписанияПлагиновПоТипуНаСервере(Знач ТипПлагина)
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	Результат = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ТипПлагина);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ПодключитьФайлОбработкиНаСервере(Знач АдресХранилища, Знач ИдентификаторОбработки, ЭтоОтчет = Ложь, ПараметрЕстьЗащитаОтОпасныхДействий = Ложь, ДопПараметры = Неопределено)
	ПодключитьВнешнююОбработкуСервер(АдресХранилища,ПараметрЕстьЗащитаОтОпасныхДействий,ДопПараметры);
КонецПроцедуры

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

&НаКлиенте
Функция СинхронныйРежимРазрешен()
	Если мСинхронныйРежимРазрешен = Неопределено Тогда
		мСинхронныйРежимРазрешен = ОпределитьВозможностьСинхронныхВызовов();
	КонецЕсли;
	
	Возврат мСинхронныйРежимРазрешен;
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВозможностьСинхронныхВызовов()
	
	Запрет = Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент = Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.НеИспользовать;
	Возврат Не Запрет;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКПлагинам()
	Путь = Объект.КаталогИнструментов + ""/plugins/"";
	Возврат Путь;
КонецФункции

&НаСервере
Функция СоздатьОбъектПлагина(Идентификатор, ВстроенаВКонфигурацию = Ложь, ЭтоОтчет = Ложь)
	ОбъектНаСервере = ЭтотОбъектНаСервере();
	Возврат ОбъектНаСервере.СоздатьОбъектПлагина(Идентификатор, ВстроенаВКонфигурацию, ЭтоОтчет);
КонецФункции

// } Плагины

&НаКлиенте
Функция НайтиТЧВДаннойФорме(ИмяТЧ,НужнаяФорма,ИскатьПоИмени)
	Если НужнаяФорма = Неопределено Тогда
		ТекстСообщения = Локализовать(""Не смогли найти таблицу <%1> в активном окне."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	Если ИмяТЧ = """" Тогда
		ТЧ = НужнаяФорма.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""));
	Иначе	
		Если ИскатьПоИмени Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""), , ИмяТЧ);
		Иначе	
			ТЧ = НужнаяФорма.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""), ИмяТЧ);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТЧ = Неопределено Тогда
		// попытаемся найти таблицу с другим именем
		Если ИмяТЧ = ""TypeTree""  Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""),, ""ValueList"");
		ИначеЕсли ИмяТЧ = ""ValueList"" Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""),, ""TypeTree"");
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТЧ;
КонецФункции	

&НаКлиенте
Процедура УдалитьИзПолучитьКлиентаТестированияПрофиль(ПодключенныеTestClient,ИмяTestClient)
	Массив = Новый Массив;
	
	Ид = -1;
	Для Каждого Профиль Из ПодключенныеTestClient Цикл
		Ид = Ид + 1;
		Если Профиль.Имя = ИмяTestClient Тогда
			Массив.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		ИдПрофиля = Массив[Массив.Количество() - 1 - Ккк];
		ПодключенныеTestClient.Удалить(ИдПрофиля);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КешСнипетовВХранилищаЗначений(СтруктураПараметров)
	UID = Новый УникальныйИдентификатор;
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешСнипетов,UID);
	СтруктураПараметров.Вставить(""КешСнипетов"",АдресВременногоХранилища);
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура КешСнипетовИзХранилищаЗначений(СтруктураПараметров)
	Если СтруктураПараметров.КешСнипетов = Неопределено Тогда
		СтруктураПараметров.КешСнипетов = Новый Соответствие;
	Иначе
		АдресВременногоХранилища = СтруктураПараметров.КешСнипетов;
		СтруктураПараметров.Вставить(""КешСнипетов"",ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	КонецЕсли;	 
КонецПроцедуры 

&НаСервере
Процедура СделатьПереводСгенерированногоТекстаGherkinСервер(ДанныеПеревода)
	КешСнипетовИзХранилищаЗначений(ДанныеПеревода.СтруктураПараметров);
	
	ДвДанныеvbFeatureReader = ДанныеПеревода.ДвДанныеvbFeatureReader;
	ВременноеИмяФайла = Неопределено;
	Если Объект.ВерсияПоставки = ""standart"" Тогда
		FeatureReader = СоздатьFeatureReader(Объект.КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе	
		ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.СделатьПереводТекстаGherkin(ДанныеПеревода);
	UID = Новый УникальныйИдентификатор;
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеПеревода.ТаблицаПеревода,UID);
	ДанныеПеревода.Вставить(""ТаблицаПеревода"",АдресВременногоХранилища);
	
	КешСнипетовВХранилищаЗначений(ДанныеПеревода.СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлыПеревода(ЯзыкФичи = Неопределено)
	Если ЯзыкФичи = ""ru"" Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если КешДанныхПереводовШагов <> Неопределено Тогда
		Возврат КешДанныхПереводовШагов; 
	КонецЕсли;
	
	Если МодульПереводШагов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	МассивЯзыков = Новый Массив;
	Если ЯзыкФичи <> Неопределено Тогда
		МассивЯзыков.Добавить(ЯзыкФичи);
	Иначе	
		МассивЯзыков.Добавить(""en"");
		МассивЯзыков.Добавить(""ro"");
		МассивЯзыков.Добавить(""de"");
		МассивЯзыков.Добавить(""lv"");
		МассивЯзыков.Добавить(""it"");
		МассивЯзыков.Добавить(""pl"");
		МассивЯзыков.Добавить(""vi"");
	КонецЕсли;	 
	
	ДанныеМакетовШагов = Новый Структура;
	ДанныеМакетовШагов = МодульПереводШагов.ДанныеМакетовШагов(МассивЯзыков,Объект.ВерсияПоставки);
	
	Соответствие = Новый Соответствие;
	
	Если МассивЯзыков.Найти(""en"") <> Неопределено Тогда
		Соответствие.Вставить(""en"",ДанныеМакетовШагов.en);
	КонецЕсли;	 
	Если МассивЯзыков.Найти(""ro"") <> Неопределено Тогда
		Соответствие.Вставить(""ro"",ДанныеМакетовШагов.ro);
	КонецЕсли;	 
	Если МассивЯзыков.Найти(""de"") <> Неопределено Тогда
		Соответствие.Вставить(""de"",ДанныеМакетовШагов.de);
	КонецЕсли;	 
	Если МассивЯзыков.Найти(""lv"") <> Неопределено Тогда
		Соответствие.Вставить(""lv"",ДанныеМакетовШагов.lv);
	КонецЕсли;	 
	Если МассивЯзыков.Найти(""it"") <> Неопределено Тогда
		Соответствие.Вставить(""it"",ДанныеМакетовШагов.it);
	КонецЕсли;	 
	Если МассивЯзыков.Найти(""pl"") <> Неопределено Тогда
		Соответствие.Вставить(""pl"",ДанныеМакетовШагов.pl);
	КонецЕсли;	 
	Если МассивЯзыков.Найти(""vi"") <> Неопределено Тогда
		Соответствие.Вставить(""vi"",ДанныеМакетовШагов.vi);
	КонецЕсли;	 
	
	КешДанныхПереводовШагов = Соответствие;
	
	Возврат Соответствие;
КонецФункции	

&НаКлиенте
Процедура СделатьПереводСгенерированногоТекстаGherkin()
	Если Объект.ЯзыкГенератораGherkin = ""ru"" Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) Тогда
		Возврат;
	КонецЕсли;	 
	
	Перевод = ПеревестиТекст(Объект.СгенерированныйСценарий);
	
	Объект.СгенерированныйСценарий = Перевод;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон)

	// Экранируем все, кроме звездочки. Ее будем трактовать по-своему.
	СпецСимволы = Новый Массив;
	СпецСимволы.Добавить(""\"");
	СпецСимволы.Добавить(""^"");
	СпецСимволы.Добавить(""$"");
	СпецСимволы.Добавить(""("");
	СпецСимволы.Добавить("")"");
	СпецСимволы.Добавить(""<"");
	СпецСимволы.Добавить(""["");
	СпецСимволы.Добавить(""]"");
	СпецСимволы.Добавить(""{"");
	СпецСимволы.Добавить(""}"");
	СпецСимволы.Добавить(""|"");
	СпецСимволы.Добавить("">"");
	СпецСимволы.Добавить(""."");
	СпецСимволы.Добавить(""+"");
	СпецСимволы.Добавить(""?"");
	
	Для Каждого СпецСимвол Из СпецСимволы Цикл
		Шаблон = СтрЗаменить(Шаблон, СпецСимвол, ""\"" + СпецСимвол); 
	КонецЦикла;
	
	// Трактуем * по-нашему.
	Шаблон = СтрЗаменить(Шаблон, ""*"", "".*"");
	
	Возврат Шаблон;
КонецФункции

// взято из https://infostart.ru/public/464971/
&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьСтрокуRexExpLinux(Строка, Фасет)
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                ""<Model xmlns=""""http://v8.1c.ru/8.1/xdto"""" xmlns:xs=""""http://www.w3.org/2001/XMLSchema"""" xmlns:xsi=""""http://www.w3.org/2001/XMLSchema-instance"""" xsi:type=""""Model"""">
                |<package targetNamespace=""""sample-my-package"""">
                |<valueType name=""""testtypes"""" base=""""xs:string"""">
                |<pattern>"" + Фасет + ""</pattern>
                |</valueType>
                |<objectType name=""""TestObj"""">
                |<property xmlns:d4p1=""""sample-my-package"""" name=""""TestItem"""" type=""""d4p1:testtypes""""/>
                |</objectType>
                |</package>
                |</Model>"");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить(""sample-my-package"");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить(""TestObj""));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПроверитьФлагОстановкаПриВозникновенииОшибки()
	Если Объект.ОстановкаПриВозникновенииОшибки Тогда
		Если МассивСценариевДляВыполнения.Количество()-1 > ТекИД_СценарияВМассиве Тогда
			СообщитьПользователю(""Установлен флаг <Остановка при возникновении ошибки>. Выполнение следующих сценариев отменено."");
			ПрекратитьВыполнениеВсехСценариев = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстОшибки(ТекстОшибки,ПроизвольныеЗначения)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""КаталогИнструментов"",Объект.КаталогИнструментов);
	ПараметрыФормы.Вставить(""ТекстОшибки"",ТекстОшибки);
	ПараметрыФормы.Вставить(""ДанныеОшибки"",ПроизвольныеЗначения);
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + "".Форма.ДеталиОшибки"", ПараметрыФормы,ЭтаФорма);
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьЭлементФормыИзКешЕслиЭтоВозможно(ИмяРеквизита)
	Если Не ОбъектКонтекст.Свойство(""АктивнаяТаблицаTestClient"") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ИмяРеквизита = ОбъектКонтекст.АктивнаяТаблицаTestClient.ИмяТаблицы Тогда
		Возврат ОбъектКонтекст.АктивнаяТаблицаTestClient.Значение; 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ТекстСообщенийПользователю()
	Если МодульСообщенийПользователю = Неопределено Тогда
		Возврат Новый Соответствие; 
	КонецЕсли;	 
	
	Если МодульСообщенийПользователю = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат МодульСообщенийПользователю.ДанныеПереводаСообщений(Объект.ВерсияПоставки,ЭтаФорма);
КонецФункции	 

&НаСервере
Процедура СерверныеВызовыПриОткрытииФормы(ДопПараметры)
	ЗаполнитьКонтекстноеМеню();
	ЗаполнитьКаталогИнструментовЕслиОнПустой();
	
	КешВерсияОбработки = ПолучитьВерсиюОбработкиСервер();
	ДопПараметры.Вставить(""КешВерсияОбработки"",КешВерсияОбработки);
	
	ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер(""ПутьКVanessaAutomation"");
	ДопПараметры.Вставить(""ЕстьКонстантаВКонфигурацииПутьКVA"",ЕстьКонстантаВКонфигурацииПутьКVA);
	
	ВосстановитьВсеНастройкиСервер(ДопПараметры.ЭтоLinux,ДопПараметры.НедавноЗагруженныеФичи);
	
	ПрефиксИнструментаДляСохраненияНастроек = ПолучитьПрефиксИнструмента();
	ДопПараметры.Вставить(""ПрефиксИнструментаДляСохраненияНастроек"",ПрефиксИнструментаДляСохраненияНастроек);
	
	ВосстановитьНастройкиИзХранилищаКеш();
	
	ИДДляОбщегоСохраненияНастроек = ПолучитьИДСохраненияОбщихНастроек();
	ДопПараметры.Вставить(""ИДДляОбщегоСохраненияНастроек"",ИДДляОбщегоСохраненияНастроек);
	
	Файл = Новый Файл(ДопПараметры.ПроверкаОптимизацииРаботыСФайлами);
	Если Файл.Существует() Тогда

		ДопПараметры.ВозможнаОптимизацияРаботыСФайлами = Истина;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;

		Попытка
			ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя);
			ТекстовыйДокумент.Записать(Файл.ПолноеИмя);
		Исключение
			ОписаниеОшибкиДляОтладки = ОписаниеОшибки();
			ДопПараметры.ВозможнаОптимизацияРаботыСФайлами = Ложь;
		КонецПопытки;

	КонецЕсли;
	
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	ОбъектСервер.ТекстСообщенийПользователю = ДопПараметры.ТекстСообщенийПользователю;
	
	ЗначениеВРеквизитФормы(ОбъектСервер,""Объект""); 
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовПослеЗагрузкиНастроек()
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Функция ТабДокВМассив(ТабДок)
	Массив = Новый Массив;
	
	Для Ккк = 1 По ТабДок.ВысотаТаблицы Цикл
		СтрокаТабДока = Новый Массив;
		
		Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
			СтрокаТабДока.Добавить(ТабДок.Область(Ккк,Ррр,Ккк,Ррр).Текст);
		КонецЦикла;	
		
		Массив.Добавить(СтрокаТабДока);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	 

&НаКлиенте
Функция МассивВТабДок(Массив)
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Для Каждого СтрокаТабДока Из Массив Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		СчетчикКолонок = 0;
		Для Каждого ЗначениеВСтроке Из СтрокаТабДока Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			ТабДок.Область(СчетчикСтрок,СчетчикКолонок,СчетчикСтрок,СчетчикКолонок).Текст = ЗначениеВСтроке;
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ТабДок; 
КонецФункции	 

&НаСервереБезКонтекста
Процедура УдалитьОбластиСнизуИСправаИзТабличногоДокумента(ТабДок,НовоеКоличествоСтрок,НовоеКоличествоКолонок)
	Если ТабДок.ВысотаТаблицы > НовоеКоличествоСтрок Тогда
		ОбластьСтроки = ТабДок.Область(НовоеКоличествоСтрок+1,,ТабДок.ВысотаТаблицы,);
		ТабДок.УдалитьОбласть(ОбластьСтроки,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;	 
	
	Если ТабДок.ШиринаТаблицы > НовоеКоличествоКолонок Тогда
		ОбластьКолонки = ТабДок.Область(,НовоеКоличествоКолонок+1,,ТабДок.ШиринаТаблицы);
		ТабДок.УдалитьОбласть(ОбластьКолонки,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, ВНРегистр = Ложь)
	ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл;
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл ) = Тип(""Файл"") Тогда
		ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл.ПолноеИмя;
	КонецЕсли;

	УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайла, ""\"", ""/"");
	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
КонецФункции

&НаКлиенте
Функция ЭтоТонкийКлиент()
	Значение = Истина;
	#Если ТолстыйКлиентУправляемоеПриложение Тогда	
		Значение = Ложь;
	#КонецЕсли	
	
	Возврат Значение; 
КонецФункции

&НаКлиенте
Функция ВстроенныеБиблиотеки()
	Массив = Новый Массив;
	
	// Служебная строка. Не удалять. Тут надо добавить имена форм, которые являются встроенными библиотеками
	
	
	Если НЕ VAОткрытаКакВнешняяОбработка Тогда
		Для Ккк = 0 По Массив.Количество()-1 Цикл
			Массив[Ккк] = СтрЗаменить(Массив[Ккк],""ВнешняяОбработка."",""Обработка."");
		КонецЦикла;	
	КонецЕсли;	 
	
	Возврат Массив;
КонецФункции	 

&НаСервереБезКонтекста
Функция РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции()
	ТекущийРежимСовместимости = Неопределено;
	
	Попытка
		ТекущийРежимСовместимости = Вычислить(""Метаданные.РежимСовместимости"");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если ТекущийРежимСовместимости = РежимСовместимости.Версия8_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_2_13 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_2_16 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_2 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_3 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_4 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_5 Тогда
			Возврат Ложь;
		КонецЕсли;	 
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗакрытьФормуVA = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМодульSikuliXСевер()
	ПараметрыФормы = Новый Структура;
	Если МодульSikuliXСевер = Неопределено Тогда
		МодульSikuliXСевер = ПолучитьФорму(ПолучитьИмяОбработкиVA() + "".Форма.SikuliXСервер"", ПараметрыФормы);
	КонецЕсли;	 
	
	Возврат МодульSikuliXСевер;
КонецФункции	 

&НаКлиенте
Процедура ОстановитьSikuliXСервер()
	Если SikuliXСеверЗапущен = Истина Тогда
		ПолучитьМодульSikuliXСевер().ОстановитьSikuliXСервер();
		SikuliXСеверЗапущен = Ложь;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ВыполнитьSikuliСкриптЧерезSikuliXСервер(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт,ОписаниеОшибки,ДопПараметры)
	ЗапуститьSikuliXСевер();
	Возврат ПолучитьМодульSikuliXСевер().ВыполнитьСкрипт(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт,ОписаниеОшибки,ДопПараметры);	
КонецФункции	 

&НаКлиенте
Функция ЭтоОпределениеСценария(Знач Стр)
	// строка должна быть с нижнем регистре
	Если Найти(Стр,""сценарий:"") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""scenario:"") = 1 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоОпределениеСтруктурыСценария(Знач Стр)
	// строка должна быть с нижнем регистре
	Если Найти(Стр,""структура сценария:"") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,""scenario outline:"") = 1 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура ЗапомнитьДанныеФайлаПриСохраненииМакета(ИмяФайла)
	Если НЕ ОбъектКонтекст.Свойство(""_ДанныеФайловПриСохраненииМакета"") Тогда
		_ДанныеФайловПриСохраненииМакета = Новый Соответствие;
		ОбъектКонтекст.Вставить(""_ДанныеФайловПриСохраненииМакета"",_ДанныеФайловПриСохраненииМакета);
	Иначе	
		_ДанныеФайловПриСохраненииМакета = ОбъектКонтекст._ДанныеФайловПриСохраненииМакета;
	КонецЕсли;
	
	ТекВерсия = ВремяИзмененияФайлаКомандаСистемы(ИмяФайла);
	_ДанныеФайловПриСохраненииМакета.Вставить(ИмяФайла,ТекВерсия);
КонецПроцедуры 

&НаКлиенте
Функция ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии()
	Если НЕ ОбъектКонтекст.Свойство(""_ДанныеФайловПриСохраненииМакета"") Тогда
		Возврат Неопределено;
	КонецЕсли;	 	
	
	_ДанныеФайловПриСохраненииМакета = ОбъектКонтекст._ДанныеФайловПриСохраненииМакета;
	Для Каждого Элем Из _ДанныеФайловПриСохраненииМакета Цикл
		ИмяФайла = Элем.Ключ;
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Возврат ИмяФайла; 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция СоздатьФайлПроверкаОптимизацииРаботыСФайлами()
	ИмяФайла = ПолучитьИмяВременногоФайла(""check"");
	ЗТ = Новый ЗаписьТекста(ИмяФайла,""UTF-8"",,Истина); 
	ЗТ.ЗаписатьСтроку(""check""); 
	ЗТ.Закрыть();
	
	Возврат ИмяФайла; 
КонецФункции	 

&НаСервереБезКонтекста
Процедура УдалитьФайлыСервер(ИмяФайла)
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ФайлСуществуетСервер(ИмяФайла)
	Файл = Новый Файл(ИмяФайла); 
	Возврат Файл.Существует(); 
КонецФункции

&НаСервереБезКонтекста
Функция ФайлВремяИзмененияСервер(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ПолучитьВремяИзменения();
КонецФункции	 

&НаСервереБезКонтекста
Процедура НайтиФайлыСервер(Путь, МассивКаталогов, МассивФайлов, ИскатьВПодкаталогах,ИскомоеИмяФайла)
	Файлы = НайтиФайлы(Путь, ""*"", ИскатьВПодкаталогах);
	
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			МассивКаталогов.Добавить(Файл.ПолноеИмя);
		Иначе	
			МассивФайлов.Добавить(Файл.ПолноеИмя);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализацияПеременныхМодуляФормы()
	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
		ЭтоLinux = Истина;
	КонецЕсли;
	
	ЭтоТонкийКлиент = ЭтоТонкийКлиент();
	
	ФормаVanessaAutomationОткрылась = Ложь;
	ТаблицаОбработокДляОтладки = Новый Соответствие;
	
	ВыполнятьСценарииАсинхронно = Истина;
	
	ШагСтрокДляМодуля         = 10000;
	ВсёЕщёИдётВыполнениеШагов = 0;
	
	МассивСостоянияКонтекстовДоВыполненияШага = Новый Массив;
	
	ТаблицаУжеСуществующихСценариев = Новый Массив;
	Брейкпоинты                     = Новый Массив;
	
	
	МассивВерсийFeatureИмяФайла = Новый Массив;
	МассивВерсийFeatureВерсия   = Новый Массив;
	
	МассивВерсийEPFИмяФайла = Новый Массив;
	МассивВерсийEPFВерсия   = Новый Массив;
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	МассивИменКонтекстовОбработок = Новый Массив;
	НедавноЗагруженныеФичи = Новый Массив;
	
	ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Ложь;
	ИнтервалВыполненияШагаПриЗаписиВидео             = 4;
	БылаОшибкаСкриптовСборкиВидео                    = Ложь;
	СкриншотСделанВСценарии                          = Ложь;
	ЭтоЗапускВРежимеКоманднойСтроки                  = Ложь;
	ЭтоЗапускВРежимеБезЗагрузкиНастроек               = Ложь;
	Версия8310ИлиВыше                                = Ложь;
	Версия8311ИлиВыше                                = Ложь;
	Версия8312ИлиВыше                                = Ложь;
	Версия8313ИлиВыше                                = Ложь;
	Версия8315ИлиВыше                                = Ложь;
	
	СтрокаПробелов = СтрокаПробелов();
	
	ОшибкиСценарияПереданныеИзвне = Новый Массив;
	
	ОшибкаAssert = Ложь;
	
	МассивTTS = Неопределено;
	
	Объект.АдресДанныеОбОшибке = Неопределено;
	
	ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки             = """";
	СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример = Ложь;
	
	ПредставлениеВертЧертыВТабДок = ""__&ВертЧерта__"";
	
	НадоПерейтиКСтрокеДерева = -1;
	ВозниклаОшибкаПодключенияTestClient        = Ложь;
	ВозниклаОшибкаВШагеКонтекста               = Ложь;
	ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Ложь;
	КоличествоЗапущенныхКлиентовТестирования   = 0;
	
	КешДанныеПеревода = Новый Структура;
	КешДанныеПеревода.Вставить(""ТаблицаПеревода"",Неопределено);
	КешДанныеПеревода.Вставить(""Язык"",Неопределено);
	КешДанныеПеревода.Вставить(""СоответствиеПоЯзыкам"",Новый Соответствие);
	
	ГлобальныеЗначенияТаблиц = Новый Структура;
	
	ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения,""8.3.6.1977"") Тогда
		Если РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции Тогда
			ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	МаксСчетчикШаговБезТаймера = 100;
	Если Найти(СистемнаяИнформация.ТипПлатформы,""64"") > 0 Тогда
		МаксСчетчикШаговБезТаймера = 50;
	КонецЕсли;	 
	
	ЭтоWindowsXP = Ложь;
	Если Найти(НРег(СистемнаяИнформация.ВерсияОС),НРег(""Windows XP"")) > 0 Тогда
		ЭтоWindowsXP = Истина;
	КонецЕсли;	 
	ВозможнаОптимизацияРаботыСФайлами = Ложь;
	
	ОграничениеНаКоличествоПопытокДействий = Ложь;
	
	ЗаполнитьИменаСлужебныхПеременныхКонтекста();
	
	ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикПодключенияБиблиотекПриОткрытии(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		ДополнительныеПараметрыПодключения = Новый Структура;
		ДополнительныеПараметрыПодключения.Вставить(""АдресХранилища"",ПомещенныйФайл.Хранение);
		Если Найти(НРег(ПомещенныйФайл.Имя),""steps.epf"") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить(""ИмяФайла"",ДополнительныеПараметры.ИменаФайлов[""steps.epf""]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметрыПодключения);
			ПодключитьБиблиотекуПереводШагов();
		ИначеЕсли Найти(НРег(ПомещенныйФайл.Имя),""messages.epf"") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить(""ИмяФайла"",ДополнительныеПараметры.ИменаФайлов[""messages.epf""]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметрыПодключения);
			ПодключитьБиблиотекуСообщенийПользователю();
		ИначеЕсли Найти(НРег(ПомещенныйФайл.Имя),""работасвидео.epf"") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить(""ИмяФайла"",ДополнительныеПараметры.ИменаФайлов[""работасвидео.epf""]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметрыПодключения);
			//ПодключитьБиблиотекуРаботыСВидео();
		КонецЕсли;	 
	КонецЦикла;	 
	
	ПриОткрытииПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура АсинхронноеПодключениеМодулей()
	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку();
	КонецЕсли;
	
	Если Объект.ВерсияПоставки = ""single"" Тогда
		ПодключитьБиблиотекуПереводШагов();
		ПодключитьБиблиотекуСообщенийПользователю();
		ПриОткрытииПродолжение();
		//ПодключитьБиблиотекуРаботыСВидео();
		Возврат;
	КонецЕсли;	 
	
	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер(""ПутьКVanessaAutomation"");
		Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
			ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер(""ПутьКVanessaAutomation"");
			ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
			ИмяФайла = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + ""locales/Messages.epf"";
			
			Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
				// ПутьКVanessaAutomation - это полный путь к epf с именем файла 
				Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку(ПутьКVanessaAutomation);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИменаФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""locales/Messages.epf"";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить(""messages.epf"",ПутьКФайлу);
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""locales/Steps.epf"";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить(""steps.epf"",ПутьКФайлу);
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""lib/Video/РаботаСВидео.epf"";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить(""работасвидео.epf"",ПутьКФайлу);
	
	ПараметрыЗавершения = Новый Структура();
	ПараметрыЗавершения.Вставить(""ИменаФайлов"",ИменаФайлов);
	ОписаниеОповещения = Новый ОписаниеОповещения(""ОбработчикПодключенияБиблиотекПриОткрытии"", ЭтаФорма, ПараметрыЗавершения);
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытииПродолжение()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия836ИлиВыше    = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.6.0"");
	Версия8310ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.10.0"");
	Версия8311ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.11.0"");
	Версия8312ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.12.0"");
	Версия8313ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.13.0"");
	Версия8315ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, ""8.3.15.0"");
	
	СчитываниеМакетаНачСтр = 1;
	СчитываниеМакетаНачКол = 1;
	СчитываниеМакетаКолСтр = 30;
	СчитываниеМакетаКолКол = 20;
	
	Объект.ВыполнятьШагиАссинхронно = Ложь;
	Объект.ЯзыкГенератораGherkin = ""ru"";
	
	ОбъектКонтекст = Новый Структура;
	ОбъектКонтекстСохраняемый = Новый Структура;
	Если Объект.ДополнительныеПараметры  = Неопределено Тогда
		Объект.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	 
	
	ВосстановитьНастройкиКлиент();
	
	ЗагрузитьПлагины();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоLinuxСервер()
	Значение = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
		Значение = Истина;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции	 

&НаКлиенте
Функция ГенерироватьШагПоискаПоЗаголовку(ЗаголовокЭлемента,МассивСтруктурФорм, ТекущаяФорма, ТипОбъекта) 
	Если Объект.ИскатьЭлементыФормыПоИмени Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СокрЛП(ЗаголовокЭлемента) <> """" И (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ЗаголовокЭлемента, ТипОбъекта)) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоВнутреннийАдресФормы(Знач АдресСнипета)
	Если Лев(НРег(АдресСнипета),34) = ""внешняяобработка.vanessaautomation"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если Лев(НРег(АдресСнипета),27) = ""обработка.vanessaautomation"" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура ДанныеКлиентовТестированияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.ДанныеКлиентовТестирования.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияВТаблоПеременных()
	ТекИсточникДанных = Неопределено;
	ТекИмя = Неопределено;
	Если Элементы.ТаблоПеременных.ТекущиеДанные <> Неопределено Тогда
		ТекИсточникДанных = Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных;
		ТекИмя = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
	КонецЕсли;	 
	
	СтрокиТаблоПеременных = ТаблоПеременных.ПолучитьЭлементы();
	СтрокиТаблоПеременных.Очистить();
	
	//Контекст
	СписокЗначенийКонтекст = Новый СписокЗначений;
	Для Каждого Элем Из ОбъектКонтекст Цикл
		СписокЗначенийКонтекст.Добавить(Элем.Ключ);
	КонецЦикла;	 
	СписокЗначенийКонтекст.СортироватьПоЗначению();
	
	СтрокаТаблоПеременных = СтрокиТаблоПеременных.Добавить();	
	СтрокаТаблоПеременных.Имя = Локализовать(""Контекст"");
	СтрокаТаблоПеременных.СлужебнаяСтрока = Истина;
	
	СтрокиКонтекст = СтрокаТаблоПеременных.ПолучитьЭлементы();
	Для Каждого Элем Из СписокЗначенийКонтекст Цикл
		Если СлужебныеПеременныеКонтекста[Элем.Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Найти(Элем.Значение,""_Цикл_"") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрокаПеременной = СтрокиКонтекст.Добавить();
		СтрокаПеременной.Имя = Элем.Значение;
		СтрокаПеременной.Значение = ОбъектКонтекст[СтрокаПеременной.Имя];
		СтрокаПеременной.Тип = ТипЗнч(ОбъектКонтекст[СтрокаПеременной.Имя]);
		СтрокаПеременной.ИсточникДанных = ""Контекст"";
	КонецЦикла;	 
	
	//КонтекстСохраняемый
	СписокЗначенийКонтекст = Новый СписокЗначений;
	Для Каждого Элем Из ОбъектКонтекстСохраняемый Цикл
		СписокЗначенийКонтекст.Добавить(Элем.Ключ);
	КонецЦикла;	 
	СписокЗначенийКонтекст.СортироватьПоЗначению();
	
	СтрокаТаблоПеременных = СтрокиТаблоПеременных.Добавить();	
	СтрокаТаблоПеременных.Имя = Локализовать(""Контекст глобальный"");
	СтрокаТаблоПеременных.СлужебнаяСтрока = Истина;
	
	СтрокиКонтекстСохраняемый = СтрокаТаблоПеременных.ПолучитьЭлементы();
	Для Каждого Элем Из СписокЗначенийКонтекст Цикл
		Если СлужебныеПеременныеКонтекста[Элем.Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрокаПеременной = СтрокиКонтекстСохраняемый.Добавить();
		СтрокаПеременной.Имя = Элем.Значение;
		СтрокаПеременной.Значение = ОбъектКонтекстСохраняемый[СтрокаПеременной.Имя];
		СтрокаПеременной.Тип = ТипЗнч(ОбъектКонтекстСохраняемый[СтрокаПеременной.Имя]);
		СтрокаПеременной.ИсточникДанных = ""КонтекстСохраняемый"";
	КонецЦикла;	 
	
	ЭлементыТабло = ТаблоПеременных.ПолучитьЭлементы();
	СтрокаТабло = НайтиСтрокуТаблоИмяИсточник(ЭлементыТабло,ТекИмя,ТекИсточникДанных);
	Если СтрокаТабло <> Неопределено Тогда
		Элементы.ТаблоПеременных.ТекущаяСтрока = СтрокаТабло.ПолучитьИдентификатор();
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания(""РазвернутьСтрокиТаблоПеременных"",0.1,Истина);
КонецПроцедуры 

&НаКлиенте
Функция НайтиСтрокуТаблоИмяИсточник(ЭлементыТабло,Имя,ИсточникДанных)
	НужнаяСтрока = Неопределено;
	НайтиСтрокуТаблоРекурсивно(ЭлементыТабло,Имя,ИсточникДанных,НужнаяСтрока); 
	Возврат НужнаяСтрока;
КонецФункции	 

&НаКлиенте
Процедура НайтиСтрокуТаблоРекурсивно(ЭлементыТабло,Имя,ИсточникДанных,НужнаяСтрока)
	Для Каждого СтрокаЭлементыТабло Из ЭлементыТабло Цикл
		Если НужнаяСтрока <> Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СтрокаЭлементыТабло.Имя = Имя И СтрокаЭлементыТабло.ИсточникДанных = ИсточникДанных Тогда
			НужнаяСтрока = СтрокаЭлементыТабло; 
			Прервать;
		КонецЕсли;	 
		
		НайтиСтрокуТаблоРекурсивно(СтрокаЭлементыТабло.ПолучитьЭлементы(),Имя,ИсточникДанных,НужнаяСтрока)
	КонецЦикла;	 
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиТаблоПеременных()
	СтрокиТаблоПеременных = ТаблоПеременных.ПолучитьЭлементы();
	Если СтрокиТаблоПеременных.Количество() > 0 Тогда
		СтрокаТабло = СтрокиТаблоПеременных[0];
		ИдентификаторСтроки = СтрокаТабло.ПолучитьИдентификатор();
		Элементы.ТаблоПеременных.Развернуть(ИдентификаторСтроки,Истина);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьИменаСлужебныхПеременныхКонтекста()
	СлужебныеПеременныеКонтекста = Новый Соответствие;
	СлужебныеПеременныеКонтекста.Вставить(""АктивнаяТаблицаTestClient"",Истина);
	СлужебныеПеременныеКонтекста.Вставить(""АктивноеОкно"",Истина);
	СлужебныеПеременныеКонтекста.Вставить(""ЗавершитьВыполнениеЦикла"",Истина);
	СлужебныеПеременныеКонтекста.Вставить(""ТекущаяТЧ"",Истина);
	СлужебныеПеременныеКонтекста.Вставить(""ТекущийВыпадающийСписок"",Истина);
	СлужебныеПеременныеКонтекста.Вставить(""ПредыдущееАктивноеОкно"",Истина);
КонецПроцедуры

&НаКлиенте
Функция СоздатьСоответствиеДанныеАллюрМетокСАнглийскимЯзыком()
	Рез = Новый Структура();
	Рез.Вставить(""name"", Новый Структура(""Р, А"", ""РегулярноеВыражение"", ""regexp""));
	Рез.Вставить(""pathtoinfobase"", Новый Структура(""Р, А"", ""ИмяМетки"", ""label""));
	Рез.Вставить(""additionalparameters"", Новый Структура(""Р, А"", ""Значение"", ""value""));
		Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанныеАллюрМеток(ПараметрыКлиентаТестирования, LangJSON = ""Ru"")
	Если LangJSON = ""En"" Тогда
		ВременнаяСтруктура = Новый Структура();
		СоответствиеСАнглийскимЯзыком = СоздатьСоответствиеДанныеАллюрМетокСАнглийскимЯзыком();
		Для каждого ключЗначение Из ПараметрыКлиентаТестирования Цикл 
			АнглийскийАналог = Неопределено;
			СоответствиеСАнглийскимЯзыком.Свойство(ключЗначение.Ключ,АнглийскийАналог);
			Если Не АнглийскийАналог = Неопределено Тогда
			  ВременнаяСтруктура.Вставить(АнглийскийАналог.Р,ключЗначение.Значение);		
		    Иначе
			  ВременнаяСтруктура.Вставить(ключЗначение.Ключ,ключЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		ПараметрыКлиентаТестирования = ВременнаяСтруктура;
	КонецЕсли;


	РегулярноеВыражение = ПараметрыКлиентаТестирования.РегулярноеВыражение;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""РегулярноеВыражение"", РегулярноеВыражение);
	
	НайденныеСтроки = ДанныеАллюрМеток.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
	Иначе	
		СтрокаДанныеКлиентовТестирования     = ДанныеАллюрМеток.Добавить() ;

	КонецЕсли;	
	 ЗаполнитьЗначенияСвойств(СтрокаДанныеКлиентовТестирования,ПараметрыКлиентаТестирования) ;	 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПеретаскиваниеОбработчик()
	Если ТипЗнч(глПараметрыПеретаскивания.Значение) = Тип(""Файл"") Тогда
		Файл = глПараметрыПеретаскивания.Значение;
		Если НРег(Файл.Расширение) = "".feature"" Тогда
			Объект.КаталогФич = Файл.ПолноеИмя;
			ЗагрузитьФичи();
		КонецЕсли;	 
	ИначеЕсли Версия8313ИлиВыше И ТипЗнч(глПараметрыПеретаскивания.Значение) = Тип(""СсылкаНаФайл"") Тогда
		Файл = глПараметрыПеретаскивания.Значение.Файл;
		Если НРег(Файл.Расширение) = "".feature"" Тогда
			Объект.КаталогФич = Файл.ПолноеИмя;
			ЗагрузитьФичи();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ПреобразоватьКДатеСтрокуКакСтроку(Знач Стр) 
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр, ""."");
	День = Число(Лев(Стр, Поз - 1));
	Стр = Сред(Стр, Поз + 1);
	
	Поз   = Найти(Стр, ""."");
	Месяц = Число(Лев(Стр, Поз - 1));
	Стр   = Сред(Стр, Поз + 1);
	
	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 Тогда
		Если Год < 100 Тогда
			Год = Год + 2000;
		КонецЕсли;
	КонецЕсли;	 
	
	Зн = Дата(Год, Месяц, День);
	
	
	Зн = Формат(Зн, ""ДФ=yyyyMMdd; ДП=00010101"");
	Зн = ""'"" + Зн + ""'"";
	
	Возврат Зн;
КонецФункции

&НаКлиенте
Функция ПреобразоватьКДатеСтрокуКакДату(Знач Стр) 
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр, ""."");
	День = Число(Лев(Стр, Поз - 1));
	Стр = Сред(Стр, Поз + 1);
	
	Поз   = Найти(Стр, ""."");
	Месяц = Число(Лев(Стр, Поз - 1));
	Стр   = Сред(Стр, Поз + 1);
	
	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 Тогда
		Если Год < 100 Тогда
			Год = Год + 2000;
		КонецЕсли;
	КонецЕсли;	 
	
	Возврат Дата(Год, Месяц, День);
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьКДатеСтрокуКакСтрокуСервер(Знач Стр) 
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр, ""."");
	День = Число(Лев(Стр, Поз - 1));
	Стр = Сред(Стр, Поз + 1);
	
	Поз   = Найти(Стр, ""."");
	Месяц = Число(Лев(Стр, Поз - 1));
	Стр   = Сред(Стр, Поз + 1);
	
	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 Тогда
		Если Год < 100 Тогда
			Год = Год + 2000;
		КонецЕсли;
	КонецЕсли;	 
	
	Зн = Дата(Год, Месяц, День);
	
	Зн = Формат(Зн, ""ДФ=yyyyMMdd; ДП=00010101"");
	Зн = ""'"" + Зн + ""'"";
	
	Возврат Зн;
КонецФункции

&НаСервере
Функция VAОткрытаКакВнешняяОбработка(ОбъектНаСервере)
    ПолноеИмяМетаданных = ОбъектНаСервере.Метаданные().ПолноеИмя();
    Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных) = Неопределено;
КонецФункции

&НаКлиенте
Функция СтруктураОшибки()
	Возврат Новый Структура(""ОшибкаAssert,ЗначениеActual,ЗначениеExpected"",Ложь,Неопределено,Неопределено); 
КонецФункции	  

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчаниюYandexTTS()
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоYandexTTSЯзык) Тогда
		Объект.ЗаписьВидеоYandexTTSЯзык = ""ru-RU"";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоYandexTTSГолос) Тогда
		Объект.ЗаписьВидеоYandexTTSГолос = ""oksana"";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоYandexTTSЭмоция) Тогда
		Объект.ЗаписьВидеоYandexTTSЭмоция = ""good"";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоYandexTTSСкорость) Тогда
		Объект.ЗаписьВидеоYandexTTSСкорость = 1.1;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчаниюAmazonTTS()
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоAmazonГолос) Тогда
		Объект.ЗаписьВидеоAmazonГолос = ""en-US"";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоAmazonДвижок) Тогда
		Объект.ЗаписьВидеоAmazonДвижок = ""standard"";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоAmazonЯзык) Тогда
		Объект.ЗаписьВидеоAmazonЯзык = ""Aditi"";
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьЯзыковойПараметрЗапускаТестовогоКлиента(ТекущийЯзык)
	Отбор = Новый Структура;
	Отбор.Вставить(""Имя"", ""Этот клиент"");
	СтрокиДанныеКлиентовТестирования = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если СтрокиДанныеКлиентовТестирования.Количество() > 0 Тогда
		СтрокаЭтотКлиент = СтрокиДанныеКлиентовТестирования[0];
		ДопПараметры = СтрокаЭтотКлиент.ДопПараметры;
		СтрокаЭтотКлиент.ДопПараметры = ОпределитьЯзыкЗапуска(ТекущийЯзык,ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьЯзыкЗапуска(ТекущийЯзык, ДопПараметры)
	Поз1 = Найти(ДопПараметры,""/L "");
	ПромСтрока = Сред(ДопПараметры,Поз1+3);
	Поз2 = Найти(ПромСтрока,""/L "");
	
	ЧислоВхожденийЯзыковогоПараметра = СтрЧислоВхождений(ДопПараметры,""/L "");
	Если (Поз1 > 0) И (Поз2 > 0) Тогда
		СообщитьПользователю(""Обнаружен больше чем 1 параметр L"");
		Возврат ДопПараметры;  
	ИначеЕсли (Поз1 > 0) И (Поз2 = 0) Тогда
		ПозицияЯзыковогоПараметра = Найти(ДопПараметры,""/L "");
		ЯзыкСтрока = Сред(ДопПараметры,ПозицияЯзыковогоПараметра+3, 2);
		ДопПараметрыСНовымЯзыком = СтрЗаменить(ДопПараметры,ЯзыкСтрока,ТекущийЯзык);
		Возврат ДопПараметрыСНовымЯзыком;
	Иначе
		ДопПараметры =  ДопПараметры + "" /L "" + ТекущийЯзык;
		Возврат ДопПараметры;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КомандыЗапускаТекстовогоРедактораПоУмолчанию()
	
	МассивРедакторов = МассивТекстовыхРедакторов();
	
	Для каждого Редактор Из МассивРедакторов Цикл
		
		Если ФайлСуществуетКомандаСистемы(Редактор.ИмяФайла) Тогда
			Элементы.КомандаОткрытияФичиВТекстовомРедакторе.СписокВыбора.Добавить(Редактор.СтрокаЗапуска, Редактор.ПредставлениеРедактора);
		КонецЕсли;	 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МассивТекстовыхРедакторов()
	
	МассивРедакторов = Новый Массив;
		
	// Notepad++ (x64)
	ПараметрыРедактора = Новый Структура(""ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска"");
	ПараметрыРедактора.Вставить(""ПредставлениеРедактора"", ""Notepad++ (x64)"");
	ПараметрыРедактора.Вставить(""ИмяФайла"", ""C:\Program Files\Notepad++\notepad++.exe"");
	ПараметрыРедактора.Вставить(""СтрокаЗапуска"", """"""C:\Program Files\Notepad++\notepad++.exe"""" %Feature% -n%LineNumber%"");	
	МассивРедакторов.Добавить(ПараметрыРедактора);
	
	// Notepad++
	ПараметрыРедактора = Новый Структура(""ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска"");
	ПараметрыРедактора.Вставить(""ПредставлениеРедактора"", ""Notepad++"");
	ПараметрыРедактора.Вставить(""ИмяФайла"", ""C:\Program Files (x86)\Notepad++\notepad++.exe"");
	ПараметрыРедактора.Вставить(""СтрокаЗапуска"", """"""C:\Program Files (x86)\Notepad++\notepad++.exe"""" %Feature% -n%LineNumber%"");	
	МассивРедакторов.Добавить(ПараметрыРедактора);

	// VSCode (x64)
	ПараметрыРедактора = Новый Структура(""ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска"");
	ПараметрыРедактора.Вставить(""ПредставлениеРедактора"", ""VSCode (x64)"");
	ПараметрыРедактора.Вставить(""ИмяФайла"", ""C:\Program Files\Microsoft VS Code\code.exe"");
	ПараметрыРедактора.Вставить(""СтрокаЗапуска"", """"""C:\Program Files\Microsoft VS Code\code.exe"""" -g %Feature%:%LineNumber%"");	
	МассивРедакторов.Добавить(ПараметрыРедактора);
	
	// VSCode
	ПараметрыРедактора = Новый Структура(""ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска"");
	ПараметрыРедактора.Вставить(""ПредставлениеРедактора"", ""VSCode"");
	ПараметрыРедактора.Вставить(""ИмяФайла"", ""C:\Program Files (x86)\Microsoft VS Code\code.exe"");
	ПараметрыРедактора.Вставить(""СтрокаЗапуска"", """"""C:\Program Files (x86)\Microsoft VS Code\code.exe"""" -g %Feature%:%LineNumber%"");	
	МассивРедакторов.Добавить(ПараметрыРедактора);
	
	Возврат МассивРедакторов;
	
КонецФункции

// Номер строки из дерава шагов со статусом ""Failed""
//
// Параметры:
//  ДеревоТестов - ДанныеФормыДерево - 
//  ИДСтроки	 - Число	 - Порядковый номер шага
// 
// Возвращаемое значение:
//   - Число
//
&НаКлиенте
Функция ПолучитьСтрокуСОшибкойРекурсивно(ДеревоТестов, ИДСтроки = 0)
	
	КоллекцияЭлементов = ДеревоТестов.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл		
		Если СтрокаДерева.Статус = ""Failed"" И СтрокаДерева.ИДСтроки > ИДСтроки Тогда
			Возврат СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		СтрокаСОшибкой = ПолучитьСтрокуСОшибкойРекурсивно(СтрокаДерева, ИДСтроки);		
		Если СтрокаСОшибкой <> Неопределено Тогда			
			Возврат СтрокаСОшибкой;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Устарела.
&НаСервере 
Функция СтруктураИзДанныхОбщихНастроек(VBParams, ПараметрыУФ)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Рез = ОбъектСервер.ПрочитатьСтруктуруИзJSONФайла(VBParams, ПараметрыУФ);
	Возврат Рез;
КонецФункции	

&НаКлиенте
Функция НайтиВСтруктуреРекурсивно(СтруктураПоиска, СтрокаПоиска)
	
	Для Каждого СтрокаСтруктуры Из СтруктураПоиска Цикл

		Если СтрокаСтруктуры.Ключ = СтрокаПоиска Тогда
			Возврат СтрокаСтруктуры.Значение;
		КонецЕсли;

		Если ТипЗнч(СтрокаСтруктуры.Значение) = Тип(""Структура"") Тогда
			Результат = НайтиВСтруктуреРекурсивно(СтрокаСтруктуры.Значение, СтрокаПоиска);
			Если Результат <> Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли ;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Возвращает полный путь к файлу или каталогу
//
// Параметры:
//  ИмяКаталога	 - Строка	 - Начальный путь
//  Часть1 - 4	 - Строка	 - Части путей
//  ИмяФайла	 - Строка	 - Имя конечного файла
// 
// Возвращаемое значение:
//  Строка - Итоговый полный путь
//
&НаКлиентеНаСервереБезКонтекста
Функция ОбъединитьПути(ИмяКаталога, Знач Часть1 = """", Знач Часть2 = """",	Знач Часть3 = """", Знач Часть4 = """", Знач ИмяФайла = """")

	ПолныйПуть = ИмяКаталога;

	РазделительПути = ПолучитьРазделительПути();

	Если РазделительПути = ""\"" Тогда
		СлешДо = ""/"";
	Иначе
		СлешДо = ""\"";
	КонецЕсли;

	ПолныйПуть = СтрЗаменить(ИмяКаталога, СлешДо, РазделительПути);

	Если Прав(ПолныйПуть, 1) <> РазделительПути Тогда
		ПолныйПуть = ИмяКаталога + РазделительПути;
	КонецЕсли;

	МассивЧастейПути = Новый Массив;
	МассивЧастейПути.Добавить(Часть1);
	МассивЧастейПути.Добавить(Часть2);
	МассивЧастейПути.Добавить(Часть3);
	МассивЧастейПути.Добавить(Часть4);

	Для Каждого ЧастьПути Из МассивЧастейПути Цикл
		Если Не ПустаяСтрока(ЧастьПути) Тогда
			ЧастьПути = СтрЗаменить(СокрЛП(ЧастьПути), СлешДо, РазделительПути);
			ПолныйПуть = ПолныйПуть + ЧастьПути + РазделительПути;
		КонецЕсли;
	КонецЦикла;

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		ПолныйПуть = ПолныйПуть + ИмяФайла;
	КонецЕсли;

	Возврат ПолныйПуть;

КонецФункции

// Удалить. Настройки
//
&НаКлиенте
Функция СоответствиеИменКлючейСАнглийскимЯзыком()
	СтруктураКомандЗапуска = КоллекцияКомандЗапуска();
	СоответствиеКомандЗапуска = Новый Соответствие();
	
	Для Каждого Команда Из СтруктураКомандЗапуска Цикл
		Если Команда.Value = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеКомандЗапуска.Вставить(Команда.Значение.Р, Команда.Значение.А);
	КонецЦикла;
	
	Возврат СоответствиеКомандЗапуска;
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавлятьСтандартнуюБиблиотеку(ВерсияПоставки)
	
	Если НЕ ЗначениеЗаполнено(ВерсияПоставки) 
		Или ВерсияПоставки = ""standart"" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;

КонецФункции	 

&НаКлиенте
Функция ЭтоЗакомментированнаяСтрокаСценария(Знач Стр)
    Стр = СокрЛ(Стр);
    Если Лев(Стр,1) = ""#"" Тогда
        Возврат Истина;
    ИначеЕсли Лев(Стр,2) = ""//"" Тогда
        Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции	 
		
&НаКлиенте
Функция ДанныеВложенногоСценарияДляОптимизации(ИмяФайла, ДанныеПоИзменениюФайловФич)
	ДатаИзменения = ДанныеПоИзменениюФайловФич[ПреобразоватьПутьКФайлуКСтандарту(ИмяФайла)];
	Если ДатаИзменения = Неопределено Тогда
		Если ВозможнаОптимизацияРаботыСФайлами() Тогда
			Возврат ВремяИзмененияФайлаКомандаСистемы(ИмяФайла); 
		КонецЕсли;	 
	Иначе
		Возврат ДатаИзменения;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Процедура ДанныеПодсценариевПоДеревуРекурсивно(ДанныеПодсценариев, ДеревоЭлементы, ДанныеПоИзменениюФайловФич)
	Для Каждого СтрокаДеревоЭлементы Из ДеревоЭлементы Цикл
		Если СтрокаДеревоЭлементы.Тип = ""ШагСценарий"" Тогда
			Если ДанныеПодсценариев[СтрокаДеревоЭлементы.АдресСнипета] = Неопределено Тогда
				ДанныеПодсценариев.Вставить(СтрокаДеревоЭлементы.АдресСнипета,
				ДанныеВложенногоСценарияДляОптимизации(СтрокаДеревоЭлементы.АдресСнипета, ДанныеПоИзменениюФайловФич));
			КонецЕсли;	 
		КонецЕсли;	 
		ДанныеПодсценариевПоДеревуРекурсивно(ДанныеПодсценариев, СтрокаДеревоЭлементы.ПолучитьЭлементы(), ДанныеПоИзменениюФайловФич);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция ДанныеПодсценариевПоДереву(МассивДействий)
	ДанныеПоИзменениюФайловФич = Новый Соответствие;
	Если МассивДействий <> Неопределено Тогда
		Для Каждого Элем Из МассивДействий Цикл
			Если ТипЗнч(Элем) = Тип(""Структура"") Тогда
				Если Элем.ТипПараметра = ""СканированиеКаталогаПоискFeature"" Тогда
					Если Элем.Свойство(""НайденныеФайлы"") Тогда
						Для Каждого ДанныеФайла Из Элем.НайденныеФайлы Цикл
							ДанныеПоИзменениюФайловФич.Вставить(ПреобразоватьПутьКФайлуКСтандарту(ДанныеФайла.Файл.ПолноеИмя),ДанныеФайла.ВерсияФайла);
						КонецЦикла;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	ДанныеПодсценариев = Новый Соответствие;
	ДанныеПодсценариевПоДеревуРекурсивно(ДанныеПодсценариев, Объект.ДеревоТестов.ПолучитьЭлементы(), ДанныеПоИзменениюФайловФич);
	Возврат ДанныеПодсценариев;
КонецФункции	  

&НаКлиенте
Процедура УстановитьДоступностьКнопкиЗадатьРазмерОкнаКлиентаТестирования(ДескрипторОкнаКлиентаТестирования)
	
	Элементы.ЗадатьРазмерОкнаКлиентаТестирования.Доступность = ДескрипторОкнаКлиентаТестирования;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

#Область СохранениеНастроек

&НаСервере
Процедура СохранитьНастройки()
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = ТекущиеОбщиеНастройки(Истина);
	
	ХранилищеОбщихНастроек.Сохранить(ПолучитьИДСохраненияОбщихНастроек(), , Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеНастроек

&НаКлиенте
Процедура ЗапускВРежимеКоманднойСтроки()
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;	 
	
	СтрокаПараметров = СокрЛП(ПараметрЗапуска);
	// Для эмуляции запуска в пакетном режиме укажите ниже путь к файлу параметров в формате json
	//СтрокаПараметров = ""StartFeaturePlayer;VBParams=C:\Commons\rep\vanessa-automation\features\Core\CommandLine\files\TestCommand1.json"";
	Если ПустаяСтрока(СтрокаПараметров) Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаПараметровНрег = НРег(СтрокаПараметров);
	Если Найти(СтрокаПараметровНрег,""startfeatureplayer"") = 0 И Найти(СтрокаПараметровНрег,""getstepscache"") = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрокаПараметров);
	НастройкиОперСистемы = ПрочитатьПеременныеСреды();
	
	КаталогПроекта = ПолучитьЗначениеПараметра(СтруктураПараметров, ""workspaceRoot"");
	Если НастройкиОперСистемы.Количество() > 0 И КаталогПроекта = Неопределено Тогда
		КаталогПроекта = ПолучитьЗначениеПараметра(НастройкиОперСистемы, ""workspaceRoot"");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КаталогПроекта) Тогда
		Объект.КаталогПроекта = КаталогПроекта;
	КонецЕсли; 
	
	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров);
	ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	
	StartFeaturePlayer = ПолучитьЗначениеПараметра(СтруктураПараметров, ""StartFeaturePlayer"") = Истина 
						Или ПолучитьЗначениеПараметра(НастройкиОперСистемы, ""StartFeaturePlayer"") = Истина;
		
	Если StartFeaturePlayer = Истина Тогда
		Объект.ЗапускИзКоманднойСтроки = Истина;
		Объект.СохранятьКонтекстыПередВыполнениемШагов = Ложь;
		
		ИмяФайла = ПолучитьЗначениеПараметра(СтруктураПараметров, ""VBParams"");
		Если ИмяФайла <> Неопределено Тогда
			
			НастройкиИзФайла = ПрочитатьОбщиеНастройкиИзФайла(ИмяФайла);	
			ДополнительныеПараметры = Новый Структура;
			
			ЗагрузитьНастройкиНаСервере(НастройкиИзФайла, НастройкиОперСистемы, ДополнительныеПараметры);
			
		Иначе		
			СообщитьПользователю(Локализовать(""Не найден путь к файлу JSON. Параметр: VAParams.""));
			Возврат;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Объект.ИмяФайлаВнешнихКомандФреймворка) Тогда			
			ПодключитьОбработчикОжидания(""ПроверкаВнешнихКоманд"",1);
		КонецЕсли;  
													
		ПриоритетНастроекПользователя = ПолучитьЗначениеПараметра(СтруктураПараметров, ""ПриоритетНастроекПользователя"");
		
		// добавим базовые библиотеки, если они не указаны
		Если Объект.КаталогиБиблиотек.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
				Если ДобавлятьСтандартнуюБиблиотеку(Объект.ВерсияПоставки) Тогда
					Объект.КаталогиБиблиотек.Добавить(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ""features/Libraries"");
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;
		
		ЗнКаталогВыгрузкиAllureБазовый = Объект.КаталогВыгрузкиAllureБазовый;
		Если ЗначениеЗаполнено(ЗнКаталогВыгрузкиAllureБазовый) Тогда
			Объект.КаталогВыгрузкиAllureБазовый = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогВыгрузкиAllureБазовый));
			Файл = Новый Файл(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогВыгрузкиAllureБазовый));
			Если Не ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда		
				СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
			КонецЕсли;	 
			
			ЗнКаталогВыгрузкиAllureБазовый = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогВыгрузкиAllureБазовый))
			+ Лев(Объект.ИмяТекущейСборки, 40);
			Файл = Новый Файл(ЗнКаталогВыгрузкиAllureБазовый);
			
			ОчиститьСодержимоеКаталога(Файл.ПолноеИмя,""*.xml"");
			ОчиститьСодержимоеКаталога(Файл.ПолноеИмя,""*.json"");
			ФайлПроверкаСуществования = Новый Файл(Файл.ПолноеИмя);
			Если НЕ ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
				СоздатьКаталогКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя);
				ФайлПроверкаСуществования = Новый Файл(ФайлПроверкаСуществования.ПолноеИмя);
				Если НЕ ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
					ТекстСообщения = Локализовать(""Не смог создать каталог для отчета Allure: %1"");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ЗнКаталогВыгрузкиAllureБазовый);
					СообщитьПользователю(ТекстСообщения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Объект.КаталогВыгрузкиAllure = ЗнКаталогВыгрузкиAllureБазовый;
			ОпределилиКаталогAllure = Истина;
		КонецЕсли;
		
		Если Объект.ЗаписьВидеоПроцентУскорения = 0 Тогда
			Объект.ЗаписьВидеоПроцентУскорения = 25;		
		КонецЕсли;
		
		ЗнВыгрузитьPIDTestManager = ПолучитьЗначениеПараметра(НастройкиИзФайла, ""ВыгрузитьPIDTestManager"");
		Если ЗнВыгрузитьPIDTestManager = Истина Тогда
			ВычислитьPIDЭтогоСеанса("""");
			ИмяФайлаPIDTestManager = ПолучитьЗначениеПараметра(НастройкиИзФайла, ""ИмяФайлаPIDTestManager"");
			
			Если ЗначениеЗаполнено(ИмяФайлаPIDTestManager) Тогда
				ВременныйФайл = ПолучитьИмяВременногоФайла(""txt"");
				ЗТ = Новый ЗаписьТекста(ВременныйФайл,""UTF-8"",,Истина); 
				ЗТ.ЗаписатьСтроку(PIDЭтогоСеанса); 
				ЗТ.Закрыть();
				ПереместитьФайлКомандаСистемы(ВременныйФайл,ИмяФайлаPIDTestManager);
			КонецЕсли;	 
		КонецЕсли;
		
		
		ЗнКлиентыТестирования = ПолучитьЗначениеПараметра(НастройкиИзФайла, ""КлиентыТестирования"");
		Если ЗначениеЗаполнено(ЗнКлиентыТестирования) Тогда
			LangJSON = ПолучитьЗначениеПараметра(НастройкиИзФайла, ""Lang"");
			Для Каждого ПараметрыКлиентаТестирования Из ЗнКлиентыТестирования Цикл
				ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования, LangJSON);
			КонецЦикла;	
		КонецЕсли;	 
		
		ЗнКаталогИсполняемогоФайла = ПолучитьЗначениеПараметра(НастройкиИзФайла, ""КаталогИсполняемогоФайла"");
		Если ЗначениеЗаполнено(ЗнКаталогИсполняемогоФайла) Тогда
			ЗнКаталогИсполняемогоФайла = ДополнитьСлешВПуть(ЗнКаталогИсполняемогоФайла);
			ТекКаталогПрограммы = ДополнитьСлешВПуть(КаталогПрограммы());
			Если Нрег(ТекКаталогПрограммы) <> Нрег(ЗнКаталогИсполняемогоФайла) Тогда
				ПоказатьПредупреждение(Неопределено,""Ожидали запуск сеанса на платформе:"" + Символы.ПС + ЗнКаталогИсполняемогоФайла
				+ Символы.ПС + Символы.ПС + ""Текущая версия платформы:"" + Символы.ПС + ТекКаталогПрограммы);
				Возврат;	  
			КонецЕсли;	 
		КонецЕсли;
		
		ВыполнитьСценарии = Объект.ВыполнитьСценарииПослеЗагрузкиФич;
		ВыполнитьСценарииСТекущегоШага = ПолучитьЗначениеПараметра(НастройкиИзФайла, ""ВыполнитьСценарииСТекущегоШага"");
		
		Если ВыполнитьСценарии = Истина Тогда
			ЗагрузитьФичи();
		ИначеЕсли ВыполнитьСценарииСТекущегоШага = Истина Тогда	
			НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
			НомерСтрокиСценарияПереданныйИзвне           = Число(ПолучитьЗначениеПараметра(НастройкиИзФайла, ""НомерСтрокиДляЗапускаСТекущегоШагаСценария""));
			ЗагрузитьФичи();
			//ПодключитьОбработчикОжидания(""ЗапуститьСценарийСоСтрокиПрисланнойИзвне"",0.1,Истина);
			//ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен = Истина;
		Иначе	
			ЗагрузитьСценарии = ПолучитьЗначениеПараметра(НастройкиИзФайла, ""ЗагрузитьСценарии"");
			Если ЗагрузитьСценарии = Истина Тогда
				ЗагрузитьФичи();
			КонецЕсли;	 
		КонецЕсли;	 
		
	ИначеЕсли ПолучитьЗначениеПараметра(СтруктураПараметров, ""GetStepsCache"") = Истина Тогда
		ИмяФайлаПараметров = ПолучитьЗначениеПараметра(СтруктураПараметров, ""VBParams"");
		Если ИмяФайлаПараметров = Неопределено Тогда
			ВызватьИсключение Локализовать(""Не найден путь к файлу JSON. Параметр: VAParams.""); 
		Иначе 			
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.ОткрытьФайл(ИмяФайлаПараметров);			
			Попытка
				НастройкиИзФайла = ПрочитатьJSON(ЧтениеJSON);
			Исключение
				НастройкиИзФайла = Неопределено;
			КонецПопытки;
			ЧтениеJSON.Закрыть();
			
			Если НастройкиИзФайла = Неопределено Тогда
				ВызватьИсключение Локализовать(""Ошибка чтения структуры JSON. Пропускаем чтение."");
			КонецЕсли; 
		КонецЕсли;	 
		
		ВерсияСнипетов = ТекущаяДата();
		ВстроенныеБиблиотеки = ВстроенныеБиблиотеки();
		БылиОшибки = Ложь;
		МассивИменФайловКоторыеСовпалиСКеш = Новый Массив;
		КаталогФич = """";
				
		Объект.КаталогФич = """";
		ПодключитьСнипетыИзВнутреннихФорм(ВстроенныеБиблиотеки, ВерсияСнипетов, БылиОшибки,СтруктураПараметров,
		  МассивИменФайловКоторыеСовпалиСКеш,МассивИменКонтекстовОбработок,ТаблицаКонтекстовОбработок,КаталогФич);
		  	
		КаталогTemplateEpfUF = НастройкиИзФайла.КаталогTemplateEpfUF;
		МассивФайловTemplateEpfUF = Новый Массив;
		Файлы = НайтиФайлы(КаталогTemplateEpfUF,""*"",Истина);
		Для Каждого Файл Из Файлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;	 
			
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить(""Имя"",Файл.Имя);
			ДанныеФайла.Вставить(""ДвоичныеДанные"",Новый ДвоичныеДанные(Файл.ПолноеИмя));
			МассивФайловTemplateEpfUF.Добавить(ДанныеФайла);
		КонецЦикла;	
		 
		ЗТ = Новый ЗаписьТекста(НастройкиИзФайла.ИмяФайлаКеш,""UTF-8"",,Ложь); 
		ЗТ.Записать(ДанныеСлужебногоКешаСтрокой(МассивФайловTemplateEpfUF)); 
		ЗТ.Закрыть();
		
		ПрекратитьРаботуСистемы();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиКлиент()
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТаймаутЗапуска1С = 25;
	СтрокаЗапуска = СокрЛП(ПараметрЗапуска);
	Если Не ПустаяСтрока(СтрокаЗапуска) Тогда
		Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
			ВосстановитьНастройкиИзХранилища(""ДанныеКлиентовТестирования"", ""ДанныеКлиентовТестирования""); 
		КонецЕсли;	 
		
		СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрокаЗапуска);
		StartFeaturePlayer = ПолучитьЗначениеПараметра(СтруктураПараметров, ""StartFeaturePlayer"");
		Если StartFeaturePlayer = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки = Истина;
			// Значит мы в режиме ЗапускВРежимеКоманднойСтроки
			// настройки будут загружены, если это не запрещено через другие параметры запуска
		КонецЕсли;	
		
		NoLoadConfig = ПолучитьЗначениеПараметра(СтруктураПараметров, ""NoLoadConfig"");
		Если NoLoadConfig = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки    = Истина;
			ЭтоЗапускВРежимеБезЗагрузкиНастроек = Истина;
			// значит нам сообщили, что не надо загружать настройки
			Возврат;
		КонецЕсли;	
		
		LibsOnly = ПолучитьЗначениеПараметра(СтруктураПараметров, ""LibsOnly"");
		Если LibsOnly = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки    = Истина;
			ЭтоЗапускВРежимеБезЗагрузкиНастроек = Истина;
			Объект.DebugLog                    = Истина;
			// Значит нам сообщили, что не надо загружать настройки, но надо добавить стандартные библиотеки
			
			Если Не ПустаяСтрока(Объект.КаталогИнструментов) Тогда
				Если ДобавлятьСтандартнуюБиблиотеку(Объект.ВерсияПоставки) Тогда
					Объект.КаталогиБиблиотек.Добавить(ОбъединитьПути(Объект.КаталогИнструментов, ""features"", ""Libraries""));
				КонецЕсли;	 
				Объект.СписокТеговИсключение.Добавить(""IgnoreOnCIMainBuild"");
			КонецЕсли;	 
			
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ЗапрашиватьПодтверждениеПриЗакрытии) Тогда
		ЗапрашиватьПодтверждениеПриЗакрытии = ""Да"";
	КонецЕсли;
		 
КонецПроцедуры

&НаСервере
Процедура ВосстановитьВсеНастройкиСервер(ЭтоLinux, НедавноЗагруженныеФичи)
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;	
	
	ВосстановитьНастройки(ЭтоLinux);
	ВосстановитьВсеНастройкиИзХранилища();
	ВосстановитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи);
	СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки(ЭтоLinux)
	
	НадоСохранитьНастройки = Ложь;
	Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДСохраненияОбщихНастроек());
	Если Настройки = Неопределено Тогда
		Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек_Old());
		НадоСохранитьНастройки = Истина;
	КонецЕсли;	 
	
	Если ТипЗнч(Настройки) = Тип(""Структура"") Тогда
		Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
			Настройки.Свойство(""КаталогФич"", Объект.КаталогФич);
		Иначе
			Если Настройки.Свойство(""КаталогФич"") Тогда
				// чтобы не затёрлось переданное значение из внешней системы
				Настройки.Удалить(""КаталогФич"");
			КонецЕсли;	 
		КонецЕсли;
		
		ЗагрузитьНастройкиНаСервере(Настройки);

		Если ПустаяСтрока(Объект.КомандаСделатьСкриншот) Тогда
			Если ЭтоLinux Тогда
				Объект.КомандаСделатьСкриншот = ""import -window root"";
			Иначе
				Объект.КомандаСделатьСкриншот = """"""C:\Program Files (x86)\IrfanView\i_view32.exe"""" /capture=1 /convert="";
			КонецЕсли;
		КонецЕсли;

		// настройки записи видео
		Если Настройки.Свойство(""ЗаписьВидео"") И Настройки.ЗаписьВидео.Свойство(""ЗаписьВидеоКомандаНачатьЗаписьВидео"") Тогда
			Настройки.ЗаписьВидео.Свойство(""ЗаписьВидеоКомандаНачатьЗаписьВидео"", Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео);
		Иначе
			Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео = """"""C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"""" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image=""""<screenmouseimage>"""" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}"";
		КонецЕсли;
		// ""C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx
		// :screen-mouse-image=""<screenmouseimage>"" :screen-fps=<fps> :screen-width=<screenwidth>
		// :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}
		Если Объект.КоличествоСекундПоискаОкна = 0 Тогда
			Объект.КоличествоСекундПоискаОкна = 10;
		КонецЕсли;

		Если Объект.КоличествоПопытокВыполненияДействия = 0 Тогда
			Объект.КоличествоПопытокВыполненияДействия = 2;
		КонецЕсли;

		Если Объект.ЗагрузкаФичПриОткрытии <> ""Не загружать"" Тогда
		// Если значение равно ""Не загружать"", значит вызывающая система сообщила, что не надо загружать фичи при открытии.
			Настройки.Свойство(""ЗагрузкаФичПриОткрытии"", Объект.ЗагрузкаФичПриОткрытии);
			Если Не ЗначениеЗаполнено(Объект.ЗагрузкаФичПриОткрытии) Тогда
				Объект.ЗагрузкаФичПриОткрытии = ""Загружать"";
			КонецЕсли;
		КонецЕсли;

		Если Объект.ДополнительныеПараметры = Неопределено Тогда
			Объект.ДополнительныеПараметры = Новый Структура;
		КонецЕсли;

		Если Объект.ТаймаутЗапуска1С = 0 Тогда
			Объект.ТаймаутЗапуска1С = 25;
		КонецЕсли;

		ВерсияVA = Неопределено;
		Настройки.Свойство(""ВерсияVA"", ВерсияVA);
		Если НЕ ЗначениеЗаполнено(ВерсияVA) Тогда
			СброситьКешИзвестныхStepDefinitionСервер();
			НадоСохранитьНастройки = Истина;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) Тогда
			Объект.ЯзыкГенератораGherkin = ""ru"";
		КонецЕсли;

		Если Настройки.Свойство(""ТегTreeВключенПоУмолчанию"") Тогда
			Настройки.Свойство(""ТегTreeВключенПоУмолчанию"", Объект.ТегTreeВключенПоУмолчанию);
		КонецЕсли;

		Если НадоСохранитьНастройки Тогда
			СохранитьНастройки();
		КонецЕсли;	 
		
	Иначе	// значит это первый запуск VA
		Объект.ГенерироватьУФ = Истина;
		Если СокрЛП(Объект.КаталогИнструментов) <> """" Тогда
			Если ДобавлятьСтандартнуюБиблиотеку(Объект.ВерсияПоставки) Тогда
				Объект.КаталогиБиблиотек.Добавить(Объект.КаталогИнструментов + ПолучитьРазделительПути() + ""features"" 
					+ ПолучитьРазделительПути() + ""Libraries"");
			КонецЕсли;	 
			Объект.СписокТеговИсключение.Добавить(""IgnoreOnCIMainBuild"");
		КонецЕсли;	 
		
		Если ЭтоLinux Тогда
			Объект.КомандаСделатьСкриншот = ""import -window root"";
		Иначе
			Объект.КомандаСделатьСкриншот = """"""C:\Program Files (x86)\IrfanView\i_view32.exe"""" /capture=1 /convert="";
		КонецЕсли;
		
		Если Объект.ЗагрузкаФичПриОткрытии <> ""Не загружать"" Тогда
			// Если значение равно ""Не загружать"", значит вызывающая система сообщила, что не надо загружать фичи при открытии.
			Если Не ЗначениеЗаполнено(Объект.ЗагрузкаФичПриОткрытии) Тогда
				Объект.ЗагрузкаФичПриОткрытии = ""Загружать"";
			КонецЕсли;	 
		КонецЕсли;	 
		Объект.ТаймаутЗапуска1С = 25;
		Объект.ЯзыкГенератораGherkin     = ""ru"";
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьВсеНастройкиИзХранилища()
	Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
		ВосстановитьНастройкиИзХранилища(""КаталогФич"", ""КаталогФич""); 
		ВосстановитьНастройкиИзХранилища(""ДанныеКлиентовТестирования"", ""ДанныеКлиентовТестирования""); 
		ВосстановитьНастройкиИзХранилища(""КаталогиБиблиотек"", ""КаталогиБиблиотек""); 
	КонецЕсли;
	
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		СтрокаДанныеКлиентовТестирования.Подключен = Ложь;
		СтрокаДанныеКлиентовТестирования.ДескрипторОкна = 0;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзХранилища(Ключ, ИмяРеквизита)

	ПрефиксИнструмента = ПолучитьПрефиксИнструмента();

	Ключ = ПрефиксИнструмента + Ключ;

	СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДСохраненияОбщихНастроек(), Ключ);
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Если Ложь Или ИмяРеквизита = ""КаталогФич""
				Или ИмяРеквизита = ""КаталогиБиблиотек"" Тогда

			Если ТипЗнч(СохраненноеЗначение) = Тип(""ТаблицаЗначений"") Тогда
				Объект[ИмяРеквизита].Загрузить(СохраненноеЗначение);
			Иначе
				Объект[ИмяРеквизита] = СохраненноеЗначение;
			КонецЕсли;

		ИначеЕсли Ложь Или ИмяРеквизита = ""ДанныеКлиентовТестирования""
				Или ИмяРеквизита = ""ТаблицаИзвестныхStepDefinition""
				Или ИмяРеквизита = ""КешStepDefinition""
				Или ИмяРеквизита = ""ДанныеАллюрМеток"" Тогда

			Если ТипЗнч(СохраненноеЗначение) = Тип(""ТаблицаЗначений"") Тогда
				ЭтаФорма[ИмяРеквизита].Загрузить(СохраненноеЗначение);
			Иначе
				ЭтаФорма[ИмяРеквизита] = СохраненноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНастроек

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПолноеИмяФайла = Результат[0];

	Настройки = ТекущиеОбщиеНастройки(Истина);

	ТекущийЯзык = Объект.ЯзыкГенератораGherkin;

	СтрокаНастроек = ПодготовитьОбщиеНастройкиКВыгрузке(Настройки, ТекущийЯзык);

	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяФайла,,,, Символы.ПС);
	ЗаписьТекста.Записать(СтрокаНастроек);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьОбщиеНастройкиКВыгрузке(Настройки, ТекущийЯзык)

	НаДругомЯзыке = Ложь;
	Если ТекущийЯзык <> ""ru"" Тогда
		НаДругомЯзыке = Истина;
		ТаблицаИменКлючей = ИменаКлючейОбщихНастроек();
		ТаблицаИменЗначений = ИменаЗначенийОбщихНастроек();
	КонецЕсли;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);			
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для каждого СтрокаНастроек Из Настройки Цикл
		
		ИмяКлючаОриг = СтрокаНастроек.Ключ;
		ИмяКлюча = СтрокаНастроек.Ключ;
		
		//ИмяЗначениеОриг = СтрокаНастроек.Значение;
		ИмяЗначения = СтрокаНастроек.Значение;
		
		Если НаДругомЯзыке Тогда
			СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлюча, ""ИмяRu"");
			Если СтрокаСИменемКлюча <> Неопределено Тогда
				ИмяКлюча = СтрокаСИменемКлюча.ИмяEn;
			КонецЕсли;
			
			СтрокаСИменемЗначения = ТаблицаИменЗначений.Найти(ИмяЗначения, ""ИмяRu"");
			Если СтрокаСИменемЗначения <> Неопределено Тогда
				ИмяЗначения = СтрокаСИменемЗначения.ИмяEn;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаНастроек.Значение) = Тип(""Строка"") И ПустаяСтрока(СтрокаНастроек.Значение) Тогда 
			Продолжить;
		ИначеЕсли ТипЗнч(СтрокаНастроек.Значение) = Тип(""СписокЗначений"") Тогда 
			Если СтрокаНастроек.Значение.Количество() > 0 Тогда 
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоМассива();
				Для каждого СтрокаСписка Из СтрокаНастроек.Значение Цикл
					ЗаписьJSON.ЗаписатьЗначение(СтрокаСписка.Значение);
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецМассива();
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаНастроек.Значение) = Тип(""Структура"") Тогда
			// Выполнение сценариев
			// Настройки клиентов тестирования
			Если ИмяКлючаОриг = ""ВыполнениеСценариев"" 
				Или ИмяКлючаОриг = ""КлиентТестирования"" Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					
					ИмяКлючаСтруктуры = СтрокаСтруктуры.Ключ;
					Если НаДругомЯзыке Тогда
						СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлючаСтруктуры, ""ИмяRu"");
						Если СтрокаСИменемКлюча <> Неопределено Тогда
							ИмяКлючаСтруктуры = СтрокаСИменемКлюча.ИмяEn;
						КонецЕсли;
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					Если ТипЗнч(СтрокаСтруктуры.Значение) = Тип(""Массив"") Тогда
						ЗаписьJSON.ЗаписатьНачалоМассива();
						Для Каждого ЭлементМассива Из СтрокаСтруктуры.Значение Цикл
						  ЗаписьJSON.ЗаписатьНачалоОбъекта();
							Если ТипЗнч(ЭлементМассива) = Тип(""Структура"") Тогда
								Для каждого ЭлементСтруктуры Из ЭлементМассива Цикл
									ИмяКлюча = ЭлементСтруктуры.Ключ;
									Если НаДругомЯзыке Тогда
										СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлюча, ""ИмяRu"");
										Если СтрокаСИменемКлюча <> Неопределено Тогда
											ИмяКлюча = СтрокаСИменемКлюча.ИмяEn;
										КонецЕсли;
									КонецЕсли;
									ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
									
									ИмяЗначения = ЭлементСтруктуры.Значение;
									Если НаДругомЯзыке Тогда
										СтрокаСИменемЗначения = ТаблицаИменЗначений.Найти(ИмяЗначения, ""ИмяRu"");
										Если СтрокаСИменемЗначения <> Неопределено Тогда
											ИмяЗначения = СтрокаСИменемЗначения.ИмяEn;
										КонецЕсли;
									КонецЕсли;
									ЗаписьJSON.ЗаписатьЗначение(ИмяЗначения);						
								КонецЦикла;					
							КонецЕсли;
						  ЗаписьJSON.ЗаписатьКонецОбъекта();
						КонецЦикла;
						ЗаписьJSON.ЗаписатьКонецМассива();
					Иначе
						ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);
					КонецЕсли;			 
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
			// Отчет Allure
			Если ИмяКлючаОриг = ""ОтчетAllure"" И Настройки.ДелатьОтчетВФорматеАллюр Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					ИмяКлючаСтруктуры = СтрокаСтруктуры.Ключ;
					Если НаДругомЯзыке Тогда
						СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлючаСтруктуры, ""ИмяRu"");
						Если СтрокаСИменемКлюча <> Неопределено Тогда
							ИмяКлючаСтруктуры = СтрокаСИменемКлюча.ИмяEn;
						КонецЕсли;
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					Если ТипЗнч(СтрокаСтруктуры.Значение) = Тип(""Массив"") Тогда
						ЗаписатьJSON(ЗаписьJSON, СтрокаСтруктуры.Значение);
					Иначе
						ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);
					КонецЕсли;
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
			// Отчет JUnit
			Если ИмяКлючаОриг = ""ОтчетJUnit"" И Настройки.ДелатьОтчетВФорматеjUnit Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					ИмяКлючаСтруктуры = СтрокаСтруктуры.Ключ;
					Если НаДругомЯзыке Тогда
						СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлючаСтруктуры, ""ИмяRu"");
						Если СтрокаСИменемКлюча <> Неопределено Тогда
							ИмяКлючаСтруктуры = СтрокаСИменемКлюча.ИмяEn;
						КонецЕсли;
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);			 
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
			// Отчет Cucumber
			Если ИмяКлючаОриг = ""ОтчетCucumber"" И Настройки.ДелатьОтчетВФорматеCucumberJson Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					ИмяКлючаСтруктуры = СтрокаСтруктуры.Ключ;
					Если НаДругомЯзыке Тогда
						СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлючаСтруктуры, ""ИмяRu"");
						Если СтрокаСИменемКлюча <> Неопределено Тогда
							ИмяКлючаСтруктуры = СтрокаСИменемКлюча.ИмяEn;
						КонецЕсли;
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);			 
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
			// Инструкция HTML
			Если ИмяКлючаОриг = ""ИнструкцияHTML"" И Настройки.СоздаватьИнструкциюHTML Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					ИмяКлючаСтруктуры = СтрокаСтруктуры.Ключ;
					Если НаДругомЯзыке Тогда
						СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлючаСтруктуры, ""ИмяRu"");
						Если СтрокаСИменемКлюча <> Неопределено Тогда
							ИмяКлючаСтруктуры = СтрокаСИменемКлюча.ИмяEn;
						КонецЕсли;
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);			 
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
			// Инструкция Markdown
			Если ИмяКлючаОриг = ""ИнструкцияMarkdown"" И Настройки.СоздаватьИнструкциюMarkdown Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					ИмяКлючаСтруктуры = СтрокаСтруктуры.Ключ;
					Если НаДругомЯзыке Тогда
						СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлючаСтруктуры, ""ИмяRu"");
						Если СтрокаСИменемКлюча <> Неопределено Тогда
							ИмяКлючаСтруктуры = СтрокаСИменемКлюча.ИмяEn;
						КонецЕсли;
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);			 
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
			// Запись видео
			Если ИмяКлючаОриг = ""ЗаписьВидео"" И Настройки.СоздаватьИнструкциюВидео Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					ИмяКлючаСтруктуры = СтрокаСтруктуры.Ключ;
					Если НаДругомЯзыке Тогда
						СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлючаСтруктуры, ""ИмяRu"");
						Если СтрокаСИменемКлюча <> Неопределено Тогда
							ИмяКлючаСтруктуры = СтрокаСИменемКлюча.ИмяEn;
						КонецЕсли;
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					Если ТипЗнч(СтрокаСтруктуры.Значение) = Тип(""СписокЗначений"") Тогда 
						ЗаписьJSON.ЗаписатьНачалоМассива();
						Для каждого СтрокаСписка Из СтрокаСтруктуры.Значение Цикл
							ЗаписьJSON.ЗаписатьЗначение(СтрокаСписка.Значение);
						КонецЦикла;
						ЗаписьJSON.ЗаписатьКонецМассива();
					Иначе
						ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);
					КонецЕсли;
					
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
			// SikuliXServer
			Если ИмяКлючаОриг = ""SikuliXServer"" И Настройки.ИспользоватьSikuliXСервер Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					ИмяКлючаСтруктуры = СтрокаСтруктуры.Ключ;
					Если НаДругомЯзыке Тогда
						СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлючаСтруктуры, ""ИмяRu"");
						Если СтрокаСИменемКлюча <> Неопределено Тогда
							ИмяКлючаСтруктуры = СтрокаСИменемКлюча.ИмяEn;
						КонецЕсли;
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);			 
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
		Иначе 
			ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
			ЗаписьJSON.ЗаписатьЗначение(СтрокаНастроек.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();		
	СтрокаНастроек = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаНастроек;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаНастроек

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ПустаяСтрока(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ДополнительныеПараметры;	
	
	НастройкиИзФайла = ПрочитатьОбщиеНастройкиИзФайла(ИмяФайла);	
				
	ЗагрузитьНастройкиНаСервере(НастройкиИзФайла);
		
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьОбщиеНастройкиИзФайла(ПолноеИмяФайла)

	НастройкиJSON = Неопределено;

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПолноеИмяФайла);
	Попытка
		НастройкиJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();

		Возврат НастройкиJSON;
	Исключение
		ЧтениеJSON.Закрыть();
		ТекстСообщения = Локализовать(""Не удалось прочитать файл настроек JSON."");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

	Возврат НастройкиJSON;

КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиНаСервере(Настройки, НастройкиОперСистемы = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ТекущийЯзык = ""ru"";	
	Если Настройки.Свойство(""Lang"") Тогда
		ТекущийЯзык = Настройки.lang;
	КонецЕсли;
		
	НаДругомЯзыке = Ложь;
	Если ТекущийЯзык <> ""ru"" Тогда
		НаДругомЯзыке = Истина;
		ТаблицаИменКлючей = ИменаКлючейОбщихНастроек(Истина);
		ТаблицаИменЗначений = ИменаЗначенийОбщихНастроек();
	КонецЕсли;
	
	Для каждого СтрокаНастроек Из Настройки Цикл

		ИмяКлюча = НРег(СтрокаНастроек.Ключ);
		Значение = СтрокаНастроек.Значение;

		Если НаДругомЯзыке Тогда
			СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлюча, ""ИмяEn"");
			Если СтрокаСИменемКлюча <> Неопределено Тогда
				ИмяКлюча = СтрокаСИменемКлюча.ИмяRu;
			КонецЕсли;
		КонецЕсли;
		
		// Блок выполнения команд из ком строки
		// ОбработатьПараметрНастройкиКоманднойСтроки(ИмяКлюча, Значение);
		Если Объект.ЗапускИзКоманднойСтроки Тогда

			Если ТипЗнч(Значение) = Тип(""Строка"") Тогда

				Если Лев(Значение, 1) = "".""  Тогда

					Файл = Новый Файл(Объект.КаталогПроекта + ""/"" + Значение);	
					Значение = Файл.ПолноеИмя;

				КонецЕсли;		
			КонецЕсли;

			// ВыполнитьСценарии
			Если ИмяКлюча = ""выполнитьсценарии"" Тогда
				Объект.ВыполнитьСценарииПослеЗагрузкиФич = ЗначениеСтрокиВБулево(Значение);
				Продолжить;
			КонецЕсли;

			// ЗавершитьРаботуСистемы	
			Если ИмяКлюча = ""завершитьработусистемы"" Тогда		
				Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев = ЗначениеСтрокиВБулево(Значение);
				Продолжить;
			КонецЕсли;

		КонецЕсли;
		// Конец блок
		
		Если ИмяКлюча = ""version"" Или ИмяКлюча = ""versionva""
				Или ИмяКлюча = ""версияva"" Тогда
			Продолжить;
		КонецЕсли;
				
		Если ИмяКлюча = ""загрузкафичприоткрытии"" Тогда
			Если Объект.ЗагрузкаФичПриОткрытии = ""Не загружать"" Тогда
			// Если значение равно ""Не загружать"", значит вызывающая система сообщила, что не надо загружать фичи при открытии.
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 

		
		Если ИмяКлюча = ""каталогинструментов"" Тогда
			// Параметр должен заполниться сам при открытии.
			Продолжить;
		КонецЕсли;	 

		Если ИмяКлюча = ""дополнительныепараметры"" Тогда 
			Если ТипЗнч(Значение) = Тип(""Структура"") Тогда			
				Объект.ДополнительныеПараметры = Значение;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяКлюча = ""клиентытестирования"" Тогда
			// TODO: Вывести загрузку клиентов тестирования в отдельную процедуру для сохранения совместимости #476
			// имя ключа пометить устаревшим.
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Значение) = Тип(""Строка"")
			Или ТипЗнч(Значение) = Тип(""Булево"") Тогда
		
			Если Лев(Значение, 1) = "".""  Тогда
				
				Файл = Новый Файл(Объект.КаталогПроекта + ""/"" + Значение);	
				Значение = Файл.ПолноеИмя;
				
			КонецЕсли;		
			
			Если ИмяКлюча = ""имясборки"" Тогда
				Объект.ИмяТекущейСборки = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = ""версияплатформы"" Тогда
				Продолжить;
			ИначеЕсли ИмяКлюча = ""выводитьсообщениявфайл"" Тогда
				Продолжить;
			ИначеЕсли ИмяКлюча = ""каталогutputallure"" Тогда
				Объект.КаталогВыгрузкиAllure = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = ""каталогoutputallureбазовый"" Тогда
				Объект.КаталогВыгрузкиAllureБазовый = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = ""каталогoutputjunit"" Тогда
				Объект.КаталогВыгрузкиJUnit = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = ""каталогoutputcucumberjson"" Тогда
				Объект.КаталогВыгрузкиCucumberJson = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = ""каталогoutputскриншоты"" Тогда
				Объект.КаталогВыгрузкиСкриншотов = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = ""lang"" Тогда		
				Объект.ЯзыкГенератораGherkin = Значение;
				Продолжить;	
			КонецЕсли;
			
			Попытка
				Объект[ИмяКлюча] = Значение;
			Исключение
				ДополнительныеПараметры.Вставить(ИмяКлюча, Значение);
				
				СтрокаОшибки = ЛокализоватьСервер(""Информация: Параметр %1 не загружен."");
				СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ""%1"", ИмяКлюча);
				СообщитьПользователюСеврер(СтрокаОшибки);
			КонецПопытки;
		ИначеЕсли ТипЗнч(Значение) = Тип(""Массив"") Тогда 
			Попытка
				Объект[ИмяКлюча].Очистить();
			Исключение
				ДополнительныеПараметры.Вставить(ИмяКлюча, Значение);
				
				СтрокаОшибки = ЛокализоватьСервер(""Информация: Параметр %1 не загружен."");
				СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ""%1"", ИмяКлюча);
				СообщитьПользователюСеврер(СтрокаОшибки);
				Продолжить;
			КонецПопытки;
			Для каждого СтрокаМассива Из Значение Цикл
				Если ТипЗнч(СтрокаМассива) = Тип(""Строка"") Тогда 
					Если Лев(СтрокаМассива, 1) = ""."" Тогда
						
						Файл = Новый Файл(Объект.КаталогПроекта + ""/"" + СтрокаМассива);	
						СтрокаМассива = Файл.ПолноеИмя;
					КонецЕсли;
				КонецЕсли;	
				Объект[ИмяКлюча].Добавить(СтрокаМассива);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Значение) = Тип(""Структура"") Тогда
						
			Для Каждого СтрокаСтруктуры Из Значение Цикл
				
				КлючСтруктуры = НРег(СтрокаСтруктуры.Ключ);
				ЗначениеСтруктуры = СтрокаСтруктуры.Значение;
				
				Если НаДругомЯзыке Тогда
					СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(КлючСтруктуры, ""ИмяEn"");
					Если СтрокаСИменемКлюча <> Неопределено Тогда
						КлючСтруктуры = СтрокаСИменемКлюча.ИмяRu;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеСтруктуры) = Тип(""Строка"") Тогда
					
					Если Лев(ЗначениеСтруктуры, 1) = "".""  Тогда
						
						Файл = Новый Файл(Объект.КаталогПроекта + ""/"" + ЗначениеСтруктуры);	
						ЗначениеСтруктуры = Файл.ПолноеИмя;
						
					КонецЕсли;		
					
				ИначеЕсли ТипЗнч(ЗначениеСтруктуры) = Тип(""Массив"") Тогда
					Если КлючСтруктуры = ""данныеаллюрметок"" Тогда
						ДанныеАллюрМеток.Очистить();
						Для Каждого ЭлементМассив Из ЗначениеСтруктуры Цикл
							СтрокаДанныхМеток = ДанныеАллюрМеток.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДанныхМеток, ЭлементМассив);
						КонецЦикла;
						Продолжить;
					ИначеЕсли КлючСтруктуры = ""записьвидеословарьзамен"" Тогда 
						Объект.ЗаписьВидеоСловарьЗамен.Очистить();
						Для Каждого ЭлементМассив Из ЗначениеСтруктуры Цикл
							Объект.ЗаписьВидеоСловарьЗамен.Добавить(ЭлементМассив);
						КонецЦикла;
						Продолжить;
					ИначеЕсли КлючСтруктуры = ""данныеклиентовтестирования"" Тогда 						
						Для Каждого ЭлементМассива Из ЗначениеСтруктуры Цикл
							
							Если ТипЗнч(ЭлементМассива) = Тип(""Структура"") Тогда
								
								СтрокаКлиента = ДанныеКлиентовТестирования.Добавить();
								
								Для каждого СтрокаСтруктуры Из ЭлементМассива Цикл
									
									ИмяКлюча = НРег(СтрокаСтруктуры.Ключ);
									ИмяЗначения = СтрокаСтруктуры.Значение;
									Если НаДругомЯзыке Тогда
										СтрокаСИменемКлюча = ТаблицаИменКлючей.Найти(ИмяКлюча, ""ИмяEn"");
										Если СтрокаСИменемКлюча <> Неопределено Тогда
											ИмяКлюча = СтрокаСИменемКлюча.ИмяRu;
										КонецЕсли;
										
										СтрокаСИменемЗначения = ТаблицаИменЗначений.Найти(ИмяЗначения, ""ИмяEn"");
										Если СтрокаСИменемЗначения <> Неопределено Тогда
											ИмяЗначения = СтрокаСИменемЗначения.ИмяRu;
										КонецЕсли;
									КонецЕсли;
									Попытка
										СтрокаКлиента[ИмяКлюча] = ИмяЗначения;
									Исключение
										СтрокаОшибки = ЛокализоватьСервер(""Информация: Параметр %1 не загружен."");
										СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ""%1"", ИмяКлюча);
										СообщитьПользователюСеврер(СтрокаОшибки);
									КонецПопытки;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
						Продолжить;
					КонецЕсли;
				
			КонецЕсли;
					
				Попытка
					Объект[КлючСтруктуры] = ЗначениеСтруктуры;
				Исключение
					ДополнительныеПараметры.Вставить(ИмяКлюча, Значение);
					
					СтрокаОшибки = ЛокализоватьСервер(""Информация: Параметр %1 не загружен."");
					СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ""%1"", КлючСтруктуры);
					СообщитьПользователюСеврер(СтрокаОшибки);
				КонецПопытки;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Значение) = Тип(""СписокЗначений"") Тогда
		Попытка
			Объект[ИмяКлюча].ЗагрузитьЗначения(Значение.ВыгрузитьЗначения());
		Исключение
			СтрокаОшибки = ЛокализоватьСервер(""Информация: Параметр %1 не загружен."");
			СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ""%1"", ИмяКлюча);
			СообщитьПользователюСеврер(СтрокаОшибки);
		КонецПопытки;
		Иначе 
			Продолжить;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Сделано для обратной совместимости, когда в значения выгружалось вместо true - Истина, 1, false - ...
&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеСтрокиВБулево(Значение)
	
	Если ТипЗнч(Значение) = Тип(""Булево"") Тогда
	    Возврат Значение;	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип(""Строка"") Тогда 
		Если НРег(Значение) = ""истина""
			Или Значение = ""1""
			Или НРег(Значение) = ""true"" Тогда 
			Результат = Истина;
		ИначеЕсли НРег(Значение) = ""ложь""
			Или Значение = ""0""
			Или НРег(Значение) = ""false"" Тогда 
			Результат = Ложь;
		Иначе 
			Результат = СокрЛП(Значение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип(""Булево"") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип(""Структура"") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип(""Массив"") Тогда
		МассивПараметров = Новый Массив;
		Если ТипЗнч(Значение) = Тип(""Строка"") Тогда 
			МассивПараметров = РазложитьСтрокуВМассивПодстрок(Значение, "","");
		ИначеЕсли ТипЗнч(Значение) = Тип(""Массив"") Тогда
			МассивПараметров = Значение;
		КонецЕсли;
		Результат = МассивПараметров;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ИменаКлючейОбщихНастроек(НижнийРегистр = Ложь)
	
	ТаблицаИмен = Новый ТаблицаЗначений;
	ТаблицаИмен.Колонки.Добавить(""ИмяRU"");
	ТаблицаИмен.Колонки.Добавить(""ИмяEn"");

	ТаблицаИменНоваяСтрока(""StartFeaturePlayer"", ""startfeatureplayer"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""АдресОтладчика"", ""testclientdebugaddress"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""АктивизироватьСтроку"", ""ActivateString"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""БезопасноеВыполнениеШагов"", ""safeexecutionofsteps"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВерсияVA"", ""VersionVA"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВерсияПлатформыДляГенерацииEPF"", ""platformversiongenerateepf"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВыводитьВЛогВыполнениеШагов"", ""logstepstotext"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВыгружатьСтатусВыполненияСценариевВФайл"", ""createlogs"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВыгрузитьPIDTestManager"", ""returnpidoftestmanager"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВыполнениеСценариев"", ""RunningScripts"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВыполнитьСценарии"", ""vanessarun"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВыполнитьСценарииСТекущегоШага"", ""vanessarunfromthisstep"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ВыполнятьШагиАссинхронно"", ""makestepsasync"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДанныеАллюрМеток"", ""DataAllureMarks"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДанныеКлиентовТестирования"", ""datatestclients"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьЛогВыполненияСценариевВЖР"", ""logtogr"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьЛогВыполненияСценариевВТекстовыйФайл"", ""logtotext"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьЛогОшибокВТекстовыйФайл"", ""logerrorstotext"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьОтчетВоВнутреннемФормате"", ""simplereport"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьОтчетВФорматеCucumberJson"", ""cucumbercreatereport"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьОтчетВФорматеjUnit"", ""junitcreatereport"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьОтчетВФорматеАллюр"", ""allurecreatereport"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьОтчетВФорматеСППР"", ""ModelingCreateReport"" , ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьСкриншотПриВозникновенииОшибки"", ""onerrorscreenshot"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДелатьСообщенияТранслитом"", ""translatemassage"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДиапазонПортовTestclient"", ""testclientports"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДобавлятьКИмениСценарияУсловияВыгрузки"", ""addtofeaturefilter"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДобавлятьПриНакликиванииМетаИнформацию"", ""addmetainformationclicking"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДопПараметры"", ""AddItionalParameters"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ДополнительныеПараметры"", ""dopparams"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗавершитьРаботуСистемы"", ""vanessashutdown"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗагрузитьСценарии"", ""loadscenarios"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗагрузкаФичПриОткрытии"", ""DownloadFeaturesOpen"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗакрытьTestClientПослеЗапускаСценариев"", ""closetestclient"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидео"", ""VideoRecording"", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоYandexTTSOauthToken"", ""yandexttsoauthtoken"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоYandexTTSГолос"", ""yandexttsvoice"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоYandexTTSИдентификаторКаталога"", ""yandexttsfolderId"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоYandexTTSСкорость"", ""yandexttsspeed"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоYandexTTSЭмоция"", ""yandexttsemotion"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоYandexTTSЯзык"", ""yandexttslanguage"", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоAmazonГолос"", ""ttsttsvoice"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоAmazonДвижок"", ""ttsttsengine"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоAmazonЯзык"", ""ttsttslanguage"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоAmazonКлючДоступа"", ""ttsttskey"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоAmazonСекретныйКлюч"", ""ttsttssecretkey"", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоГромкостьМузыки"", ""musicvolume"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоГруппаШаговКакШаг"", ""groupofstepsasastep"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоДелатьНаложениеTTS"", ""dotts"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок"", ""addmusictofeaturetitleslide"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоДобавитьМузыкуКСлайдуФинал"", ""addmusictofinalslide"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоДобавлятьСубтитры"", ""addsubtitles"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоЗаменитьСлайдЗаголовок"", ""changefeaturetitleslide"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоЗаменитьСлайдФинал"", ""changefinalslide"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоИмяTTS"", ""ttsvoice"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКаталогДляВременныхФайлов"", ""tempfolderforvideo"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКаталогМузыки"", ""musicpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКоличествоКадров"", ""fps"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКомандаConvert"", ""convertcomand"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКомандаFfmpeg"", ""ffmpegcomand"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКомандаНачатьЗаписьВидео"", ""comandrecvideo"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКэшВидеоВставок"", ""videocachepath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКэшироватьВидеоВставки"", ""cachevideo"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКэшироватьФайлыTTS"", ""cachettsfiles"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоКэшФайловTTS"", ""ttsfilescache"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени"", ""disablescalingofsteps"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи"", ""turnofffeaturetitleslide"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоОтключитьСлайдСценария"", ""turnoffscenarioslide"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоОтключитьСлайдФинал"", ""turnofffinalslide"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы"", ""movemouse"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм"", ""showframe"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоПодсвечиватьНажатияМышки"", ""highlightmouseclicks"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоПроцентУскорения"", ""accelerationpercentage"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоПутьКДвижкуTTS"", ""audioenginetts"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоПутьКСлайдуЗаголовок"", ""featuretitleslidepath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоПутьКСлайдуФинал"", ""finalslidepath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоСкоростьПроизношения"", ""speedofspeech"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоСкрытьСлужебныеОкна"", ""hideservicewindows"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоСловарьЗамен"", ""changewordslib"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоСловарьЗаменСписок"", ""changewordsliblist"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоТипОзвучкиTTS"", ""ttstype"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоФайлВодянойЗнак"", ""watermarkfile"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоФайлКурсораМышки"", ""mousecurfile"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоФормироватьИнструкциюТипHTML"", ""instructiontypehtml"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоФормироватьИнструкциюТипMarkdown"", ""instructiontypemarkdown"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоЭмулироватьДвиженияМышки"", ""emulatemousemovement"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоФормироватьИнструкциюТипВидео"", ""instructiontypevideo"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоЭкранВысота"", ""screenheight"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоЭкранШирина"", ""screenwidth"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗаписьВидеоЭмулироватьВводСКлавиатуры"", ""emulatekeyboardinput"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗапускатьКлиентТестированияСМаксимизированнымОкном"", ""runtestclientwithmaximizedwindow"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЗапускатьТестКлиентВРежимеОтладки"", ""testclientdebug"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИмяКаталогаЛогОшибок"", ""texterrorslogname"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""Имя"", ""Name"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИмяКомпьютера"", ""ComputerName"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИмяСборки"", ""buildname"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИмяТекущейСборки"", ""NameCurrentBuild"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИмяФайлаPIDTestManager"", ""filenamepidtestmanager"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИмяФайлаВнешнихКомандФреймворка"", ""fileofcommand"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИмяФайлаЛогВыполненияСценариев"", ""textlogname"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИнструкцияHTML"", ""HTMLInstruction"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИнструкцияMarkdown"", ""MarkdownInstruction"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИнтервалВыполненияШагаЗаданныйПользователем"", ""SpacingStepSpecifiedUser"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИскатьЭлементыФормыПоИмени"", ""searchformelementsbyname"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИспользоватьSikuliXСервер"", ""usesikulixserver"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогВыгрузкиAllure"", ""allurepath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогВыгрузкиAllureБазовый"", ""allurepathbase"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогВыгрузкиCucumberJson"", ""cucumberreportpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогВыгрузкиJUnit"", ""junitpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогВыгрузкиИнструкцийHTML"", ""htmlpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогВыгрузкиИнструкцийMarkdown"", ""markdownpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогВыгрузкиИнструкцийВидео"", ""videopath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогВыгрузкиСкриншотов"", ""outputscreenshot"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогиБиблиотек"", ""librarycatalogs"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогИнструментов"", ""instrpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогиСкриптовSikuliX"", ""sikulixscriptpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогДляГенерацииКартинок"", ""pathforpicturegeneration"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогИсполняемогоФайла"", ""pathtoplatform"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогОтносительноКоторогоНадоСтроитьИерархию"", ""directorytobuildhierarchy"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогПроекта"", ""projectpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогФич"", ""featurepath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КлиентТестирования"", ""TestClient"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КлиентыТестирования"", ""testclienttable"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КлючиОтладки"", ""testclientdebugkeys"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КоличествоПопытокВыполненияДействия"", ""numberofattemptstoperformanaction"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КоличествоСекундПоискаОкна"", ""timetofindwindow"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КомандаОткрытияФичиВТекстовомРедакторе"", ""commandtoopenfeatureintexteditor"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КомандаСделатьСкриншот"", ""commandscreenshot"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ИспользоватьВнешнююКомпонентуДляСкриншотов"", ""useaddinforscreencapture"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СпособСнятияСкриншотовВнешнейКомпонентой"", ""screencaptureaddinmethod"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""НомерСтрокиДляЗапускаСТекущегоШагаСценария"", ""stepnumber"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ОбновлятьДеревоПриНачалеВыполненияСценария"", ""updatetreewhenscenariostarts"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ОбновлятьСтатистикуВДереве"", ""updatestatistics"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ОстановкаПриВозникновенииОшибки"", ""stoponerror"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ОтчетAllure"", ""AllureReport"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ОтчетJUnit"", ""JUnitReport"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ОтчетCucumber"", ""CucumberReport"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ПаузаПриОткрытииОкна"", ""pauseonwindowopening"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки"", ""showrownumberonerror"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ПортЗапускаТестКлиента"", ""PortTestClient"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ПриоритетНастроекПользователя"", ""priorityofusersettings"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ПриравниватьPendingКFailed"", ""pendingequalfailed"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ПутьКИнфобазе"", ""PathToInfobase"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев"", ""logpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СниматьСкриншотКаждогоОкна1С"", ""onerrorscreenshoteverywindow"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""Синоним"", ""Synonym"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СобиратьДанныеОСостоянииАктивнойФормыПриОшибке"", ""CollectDataStateActiveFormError"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СобиратьДанныеОСостоянииВсехФормПриОшибке"", ""CollectDataStatusAllFormsOfError"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СоздаватьИнструкциюHTML"", ""htmlcreate"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СоздаватьИнструкциюMarkdown"", ""markdowncreate"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СоздаватьИнструкциюВидео"", ""videcreate"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки"", ""createsubfolderforbuild"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СписокТеговИсключение"", ""ignoretags"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""СписокТеговОтбор"", ""filtertags"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ТаймаутДляАсинхронныхШагов"", ""timeoutforasynchronoussteps"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ТаймаутЗапуска1С"", ""testclienttimeout"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ТегTreeВключенПоУмолчанию"", ""thetreetagisenabledbydefault"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ТипКлиента"", ""ClientType"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""УровеньОтчета1"", ""reportlevel1"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""УровеньОтчета2"", ""reportlevel2"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""УровеньОтчета3"", ""reportlevel3"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ГруппировкаTestSuites"", ""testsuites"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ЯзыкГенератораGherkin"", ""gherkinlanguage"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""АдресПользовательскихНастроек"", ""usersettingspath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""ПоставщикПользовательскихНастроек"", ""usersettingsprovider"", ТаблицаИмен, НижнийРегистр);

	// Удалить. Обратная совместимость
	ТаблицаИменНоваяСтрока(""КаталогOutputAllure"", ""allurepath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогOutputAllureБазовый"", ""allurepathbase"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогOutputCucumberJson"", ""cucumberreportpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогOutputjUnit"", ""junitpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогOutputИнструкцияHTML"", ""htmlpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогOutputИнструкцияMarkdown"", ""markdownpath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогOutputИнструкцияВидео"", ""videopath"", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока(""КаталогOutputСкриншоты"", ""outputscreenshot"", ТаблицаИмен, НижнийРегистр);

	Возврат ТаблицаИмен;

КонецФункции

&НаСервереБезКонтекста
Функция ИменаЗначенийОбщихНастроек()
	
	ТаблицаИмен = Новый ТаблицаЗначений;
	ТаблицаИмен.Колонки.Добавить(""ИмяRU"");
	ТаблицаИмен.Колонки.Добавить(""ИмяEn"");
	
	ТаблицаИменНоваяСтрока(""Этот клиент"", ""This client"", ТаблицаИмен, Ложь);
	ТаблицаИменНоваяСтрока(""Тонкий"", ""Thin"", ТаблицаИмен, Ложь);
	ТаблицаИменНоваяСтрока(""Толстый"", ""Thick"", ТаблицаИмен, Ложь);
	
	Возврат ТаблицаИмен;
	
КонецФункции
	
&НаСервереБезКонтекста
Процедура ТаблицаИменНоваяСтрока(ИмяRu, ИмяEn, ТаблицаИмен, НижнийРегистр)

	НоваяСтрока = ТаблицаИмен.Добавить();
	НоваяСтрока.ИмяRu = ?(НижнийРегистр, НРег(ИмяRu), ИмяRu);
	НоваяСтрока.ИмяEn = ?(НижнийРегистр, НРег(ИмяEn), ИмяEn);

КонецПроцедуры

// Удалить. Настройки
//
&НаСервере
Функция ПолучитьОбщиеНастройкиИзДвоичныхДанных(Данные)
	
	Если Данные = Неопределено Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	Поток = Данные.ОткрытьПотокДляЧтения();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(Поток);
	Попытка
		Настройки = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Возврат Настройки;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ТекущиеОбщиеНастройки(НастройкиВыгрузки = Ложь, НастройкиЗагрузки = Ложь)
	
	ОбщиеНастройки = Объект().СтруктураОбщихНастроек(НастройкиВыгрузки, НастройкиЗагрузки);
	
	Для каждого СтрокаНастроек Из ОбщиеНастройки Цикл
		Если ТипЗнч(СтрокаНастроек.Значение) = Тип(""Структура"") Тогда
			ЗаполнитьЗначенияСвойств(ОбщиеНастройки[СтрокаНастроек.Ключ], Объект);
		Иначе
			Попытка
				ОбщиеНастройки[СтрокаНастроек.Ключ] = Объект[СтрокаНастроек.Ключ];
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
	ОбщиеНастройки.ВерсияVA = ПолучитьВерсиюОбработкиСервер();
	ОбщиеНастройки.Version = ПолучитьВерсиюОбработкиСервер(Истина);
	ОбщиеНастройки.Lang = Объект.ЯзыкГенератораGherkin;
	
	Если НастройкиВыгрузки Тогда
		// Метки Allure
		Если ДанныеАллюрМеток.Количество() > 0 Тогда
			МассивМеток = Новый Массив;
			Для Каждого СтрокаКоллекции Из ДанныеАллюрМеток Цикл
				Данные = Новый Структура(""РегулярноеВыражение, ИмяМетки, Значение"");
				ЗаполнитьЗначенияСвойств(Данные, СтрокаКоллекции);
				МассивМеток.Добавить(Данные);
			КонецЦикла;
			ОбщиеНастройки.ОтчетAllure.ДанныеАллюрМеток = МассивМеток;
		КонецЕсли;
		
		// Данные клиентов тестирования
		МассивДанныхКлиентов = Новый Массив;
		Для каждого СтрокаНастроекКлиента Из ДанныеКлиентовТестирования Цикл
			Если Не СтрокаНастроекКлиента.ЭтотКлиент Тогда 
			Данные = Новый Структура(""Имя, ПутьКИнфобазе, ПортЗапускаТестКлиента, ДопПараметры, ТипКлиента, ИмяКомпьютера"");
			ЗаполнитьЗначенияСвойств(Данные, СтрокаНастроекКлиента);
			МассивДанныхКлиентов.Добавить(Данные);
			КонецЕсли;
		КонецЦикла;
		Если МассивДанныхКлиентов.Количество() > 0 Тогда
			ОбщиеНастройки.КлиентТестирования.ДанныеКлиентовТестирования = МассивДанныхКлиентов;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщиеНастройки;
	
КонецФункции

// Удалить. Настройки
//
&НаКлиенте
Функция ОбъединитьНастройкиСУчетомПриоритета(Настройки, НастройкиОперСистемы, LangJSON = ""Ru"")
			
	// Если ПриоритетНастроекПользователя = Истина, тогда если в файле josn настройка не указана, 
	// то будет взята настройка пользователя, а не значение по умолчанию.
	ПриоритетНастроекПользователя = Ложь;
	Если Настройки.Свойство(""ПриоритетНастроекПользователя"") Тогда
		ПриоритетНастроекПользователя = Настройки.ПриоритетНастроекПользователя;
	КонецЕсли;	 
	
	// Если существуют настройки из операционной системы, то у них самый высокий приоритет
	// и они перекрывают настройки из файла.
	СуществуютНастройкиОперСистемы = Ложь;
	Если ТипЗнч(НастройкиОперСистемы) = Тип(""Структура"") Тогда
	    СуществуютНастройкиОперСистемы = Истина;	
	КонецЕсли;
	
	// В плоскую структуру записываем данные из структуры файла с приоритетом настроек из системы.
	СтруктураПараметров = Новый Структура;
	
	Для каждого СтрокаНастроек Из Настройки Цикл 
		
		Значение = Неопределено;
		
		Если ТипЗнч(СтрокаНастроек.Значение) = Тип(""Структура"") Тогда
			
			Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
				
				Значение = Неопределено;
				
				Если СуществуютНастройкиОперСистемы Тогда 
					НастройкиОперСистемы.Свойство(СтрокаСтруктуры.Ключ, Значение);
				КонецЕсли;
							
				Если Значение = Неопределено Тогда 			
					Значение = НайтиВСтруктуреРекурсивно(Настройки, СтрокаСтруктуры.Ключ);
					Если Значение = Неопределено И LangJSON = ""En"" Тогда
						СоответствиеСАнглийскимЯзыком = СоответствиеИменКлючейСАнглийскимЯзыком();
						АнглийскийАналог = СоответствиеСАнглийскимЯзыком.Получить(СтрокаСтруктуры.Ключ);
						Если Не АнглийскийАналог = Неопределено Тогда
							Значение = НайтиВСтруктуреРекурсивно(Настройки, АнглийскийАналог);
						КонецЕсли;
					КонецЕсли;			
				КонецЕсли;
				
				Значение = ОбработатьЗначениеНастройки(СтрокаСтруктуры.Ключ, Значение, ПриоритетНастроекПользователя);
				СтруктураПараметров.Вставить(СтрокаСтруктуры.Ключ, Значение);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		Если СуществуютНастройкиОперСистемы Тогда
			НастройкиОперСистемы.Свойство(СтрокаНастроек.Ключ, Значение);
		КонецЕсли;
		
		Если Значение = Неопределено Тогда 						
			Значение = НайтиВСтруктуреРекурсивно(Настройки, СтрокаНастроек.Ключ);
			Если Значение = Неопределено И LangJSON = ""En"" Тогда
				СоответствиеСАнглийскимЯзыком = СоответствиеИменКлючейСАнглийскимЯзыком();
				АнглийскийАналог = СоответствиеСАнглийскимЯзыком.Получить(СтрокаНастроек.Ключ);
				Если Не АнглийскийАналог = Неопределено Тогда
					Настройки.Свойство(АнглийскийАналог, Значение);
					Значение = НайтиВСтруктуреРекурсивно(Настройки, АнглийскийАналог);
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;  
		Значение = ОбработатьЗначениеНастройки(СтрокаНастроек.Ключ, Значение, ПриоритетНастроекПользователя);
		
		СтруктураПараметров.Вставить(СтрокаНастроек.Ключ, Значение);
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Удалить. Настройки
//
&НаКлиенте
Функция ОбработатьЗначениеНастройки(Ключ, Значение, ПриоритетНастроекПользователя)
	
	ЗначениеИтог = Неопределено;
	Если Значение <> Неопределено Тогда 
		Если ТипЗнч(Значение) = Тип(""Строка"") Тогда 
			Если НРег(Значение) = ""истина""
				Или Значение = ""1""
				Или НРег(Значение) = ""true"" Тогда 
				ЗначениеИтог = Истина;
			ИначеЕсли НРег(Значение) = ""ложь""
				Или Значение = ""0""
				Или НРег(Значение) = ""false"" Тогда 
				ЗначениеИтог = Ложь;
			Иначе 
				ЗначениеИтог = СокрЛП(Значение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение) = Тип(""Структура"") Тогда
			ЗначениеИтог = Значение;
		ИначеЕсли ТипЗнч(Значение) = Тип(""Массив"") Тогда
			МассивПараметров = Новый Массив;
			Если ТипЗнч(Значение) = Тип(""Строка"") Тогда 
				МассивПараметров = РазложитьСтрокуВМассивПодстрок(Значение, "","");
			ИначеЕсли ТипЗнч(Значение) = Тип(""Массив"") Тогда
				МассивПараметров = Значение;
			КонецЕсли;
			ЗначениеИтог = МассивПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеИтог = Неопределено И ПриоритетНастроекПользователя = Истина Тогда
		Если Объект.Свойство(Ключ) Тогда
			ТипЗначения = ТипЗнч(Объект[Ключ]);
			Если ТипЗначения = Тип(""Булево"")
				Или  ТипЗначения = Тип(""Строка"")
				Или  ТипЗначения = Тип(""Число"")
				Тогда
				ЗначениеИтог = Объект[Ключ];
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;		
	
	Значение = ?(ЗначениеИтог = Неопределено, Значение, ЗначениеИтог);
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ПолучитьИДДляОбщегоСохраненияНастроек_Old()
	Стр = ""VanessaBehaviorUF"";
	Если Объект.РежимСамотестирования Тогда
		Стр = ""VanessaBehaviorUF_autotest"";
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = ""single"" Тогда
		Стр = Стр + ""_"" + Объект.ВерсияПоставки;
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

// Удалить. Настройки
//
&НаКлиенте
Процедура СообщитьУстаревшийПараметр(СтарыйПараметр, НовыйПараметр = """")
	
	ТекстСообщения = Локализовать(""Устаревший параметр - <%1>. Новый параметр - <%2>."");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", СтарыйПараметр);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ?(Не ПустаяСтрока(НовыйПараметр), НовыйПараметр, ""?""));
	
	СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти
",
{4,37,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",f5aa2cb3-6aba-4cdc-a88e-0f319bd0fb5c}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"ЭтоЗапускИзКоманднойСтроки",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{9},0,"ТаблицаИзвестныхStepDefinition",
{1,2,
{"ru","Таблица известных step definition"},
{"en","The known definition table step"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,12,
{5,1,0,"ИмяФайла",
{1,21,
{"ru","Имя файла"},
{"en","File"},
{"am","የፋይል ስም"},
{"az","Fayl adı"},
{"bg","Име на файл"},
{"et","Faili nimi"},
{"fr","Nom de fichier"},
{"ka","ფაილის სახელი"},
{"de","Dateiname"},
{"hu","Fájl neve"},
{"it","Il nome del file"},
{"lv","Faila nosaukums"},
{"lt","Failo pavadinimas"},
{"mn","Файлын нэр"},
{"pl","Nazwa pliku"},
{"ro","Nume de fișier"},
{"sl","Ime datoteke"},
{"es","Nombre de archivo"},
{"sv","Fil"},
{"tr","Dosya adı"},
{"vi","Tên tệp"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Id",
{1,2,
{"ru","Id"},
{"en","Id"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"СтрокаРеальнойПроцедуры",
{1,3,
{"ru","Строка реальной процедуры"},
{"en","Line is a real procedure"},
{"vi","Dòng thủ tục thực tế"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Параметры",
{1,2,
{"ru","Параметры"},
{"en","Settings"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"СтрокаДляПоиска",
{1,2,
{"ru","Строка для поиска"},
{"en","The string to search for"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ПредставлениеТеста",
{1,2,
{"ru","Представление теста"},
{"en","Test view"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Транзакция",
{1,2,
{"ru","Транзакция"},
{"en","The transaction"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ОписаниеШага",
{1,2,
{"ru","Описание шага"},
{"en","Step description"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"ТипШага",
{1,2,
{"ru","Тип шага"},
{"en","The step type"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,10,0,"ВерсияФайла",
{1,2,
{"ru","Версия файла"},
{"en","File version"}
},
{"Pattern",
{"D"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,11,0,"СтрокаОбрабатывалась",
{1,2,
{"ru","Строка обрабатывалась"},
{"en","The string was processed"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,12,0,"ТипШагаВДереве",
{1,0},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{2},0,"ЕстьПоддержкаНемодальныхФорм",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"СтатусыРезультатаТестирования",
{1,0},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ЕстьПоддержкаАсинхронныхВызовов",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{18},0,"ДанныеКлиентовТестирования",
{1,2,
{"ru","Данные клиентов тестирования"},
{"en","TestClients data"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,11,
{5,2,0,"Имя",
{1,21,
{"ru","Имя"},
{"en","Name"},
{"am","ስም"},
{"az","Adı"},
{"bg","Име"},
{"et","Nimi"},
{"fr","Le nom de"},
{"ka","დასახელება"},
{"de","Name"},
{"hu","Név"},
{"it","Il nome"},
{"lv","Nosaukums"},
{"lt","Pavadinimas"},
{"mn","Нэр"},
{"pl","Nazwa"},
{"ro","Numele"},
{"sl","Ime"},
{"es","El nombre de"},
{"sv","Namn"},
{"tr","Adı"},
{"vi","Tên"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ПутьКИнфобазе",
{1,21,
{"ru","Путь к инфобазе"},
{"en","Base path"},
{"am","መንገዱ ጋር infobase"},
{"az","Yol инфобазе"},
{"bg","Пътят към инфобазе"},
{"et","Tee инфобазе"},
{"fr","Le chemin d'accès à инфобазе"},
{"ka","გზა infobase"},
{"de","Der Weg zum инфобазе"},
{"hu","Az út infobase"},
{"it","Percorso инфобазе"},
{"lv","Ceļš uz инфобазе"},
{"lt","Kelias į инфобазе"},
{"mn","Зам infobase"},
{"pl","Droga do инфобазе"},
{"ro","Calea инфобазе"},
{"sl","Pot do infobase"},
{"es","La ruta de acceso a инфобазе"},
{"sv","Vägen till infobase"},
{"tr","Yol инфобазе"},
{"vi","Đường dẫn đến cơ sở thông tin"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ПортЗапускаТестКлиента",
{1,21,
{"ru","Порт запуска"},
{"en","Port"},
{"am","ቅድሚያ የታዘዘ"},
{"az","Port başlamaq"},
{"bg","Пристанището на стартиране"},
{"et","Sadama kaater"},
{"fr","Le port de lancement"},
{"ka","პორტი აწარმოებს"},
{"de","Port starten"},
{"hu","Port futás"},
{"it","Il porto di avvio"},
{"lv","Portu palaist"},
{"lt","Port paleisti"},
{"mn","Порт ажиллуулах"},
{"pl","Port uruchomienia"},
{"ro","Portul de pornire"},
{"sl","Vrata za zagon"},
{"es","El puerto de inicio"},
{"sv","Port kör"},
{"tr","Port başlangıç"},
{"vi","Công khởi động"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"Подключен",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"ДопПараметры",
{1,21,
{"ru","Доп.параметры"},
{"en","Parameters"},
{"am","DOP.ቅንብሮችን"},
{"az","Əlavələr.parametrləri"},
{"bg","Неучастие.опции"},
{"et","Lub.parameetrid"},
{"fr","Dop.paramètres"},
{"ka","DOP.პარამეტრები"},
{"de","Zul.Optionen"},
{"hu","DOP.beállítások"},
{"it","Info integrativa.le impostazioni"},
{"lv","Papildus gulta.opcijas"},
{"lt","S atramos ilgis mm leist.parametrai"},
{"mn","DOP.тохиргоо"},
{"pl","Ust.parametry"},
{"ro","Adm.setări"},
{"sl","DOP.nastavitve"},
{"es","Adm.la configuración de"},
{"sv","DOP.inställningar"},
{"tr","Dop.ayarları"},
{"vi","Tham số bổ sung"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,1,0,"ТипКлиента",
{1,21,
{"ru","Тип клиента"},
{"en","Client type"},
{"am","ደንበኛ አይነት"},
{"az","Növü müştəri"},
{"bg","Вид клиент"},
{"et","Kliendi liik"},
{"fr","Le type de client"},
{"ka","მომხმარებელს ტიპი"},
{"de","Client-Typ"},
{"hu","Vevő típusa"},
{"it","Tipo di cliente"},
{"lv","Klienta tips"},
{"lt","Kliento tipą"},
{"mn","Харилцагчийн төрөл"},
{"pl","Typ klienta"},
{"ro","Tipul de client"},
{"sl","Vrsto stranke"},
{"es","Tipo de cliente"},
{"sv","Kunden typ"},
{"tr","İstemci türü"},
{"vi","Kiểu máy trạm"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"PID",
{1,21,
{"ru","PID"},
{"en","PID"},
{"am","ነፃ"},
{"az","PID"},
{"bg","Тазова възпалителна болест"},
{"et","PID"},
{"fr","PID"},
{"ka","PID"},
{"de","PID"},
{"hu","PID"},
{"it","PID"},
{"lv","PID"},
{"lt","PID"},
{"mn","PID"},
{"pl","PID"},
{"ro","PID"},
{"sl","PID"},
{"es","PID"},
{"sv","PID"},
{"tr","PID"},
{"vi","PID"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ИмяКомпьютера",
{1,21,
{"ru","Имя компьютера"},
{"en","Computer name"},
{"am","ስም ኮምፒውተር"},
{"az","Adı kompüter"},
{"bg","Името на компютъра"},
{"et","Arvuti nimi"},
{"fr","Le nom de l'ordinateur"},
{"ka","სახელი კომპიუტერი"},
{"de","Der name des Computers"},
{"hu","A számítógép neve,"},
{"it","Il nome del computer"},
{"lv","Datora nosaukums"},
{"lt","Kompiuterio pavadinimas"},
{"mn","Нэр компьютер"},
{"pl","Nazwa komputera"},
{"ro","Numele computerului"},
{"sl","Ime računalnika"},
{"es","El nombre del equipo"},
{"sv","Namnet på datorn"},
{"tr","Bilgisayar adı"},
{"vi","Tên máy tính"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"Синоним",
{1,21,
{"ru","Синоним"},
{"en","Synonym"},
{"am","ተመሳሳዩ"},
{"az","Sinonimi"},
{"bg","Синоним"},
{"et","Sünonüüm"},
{"fr","Synonyme"},
{"ka","სინონიმი"},
{"de","Synonym"},
{"hu","Szinonimája"},
{"it","Sinonimo"},
{"lv","Sinonīms"},
{"lt","Sinonimas"},
{"mn","Synonym"},
{"pl","Synonim"},
{"ro","Sinonim"},
{"sl","Sinonim"},
{"es","Sinónimo de"},
{"sv","Synonym"},
{"tr","Eşanlamlı"},
{"vi","Đồng nghĩa"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,10,0,"ЭтотКлиент",
{1,2,
{"ru","Этот клиент"},
{"en","This client"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,11,0,"ДескрипторОкна",
{1,1,
{"ru","Дескриптор окна"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{19},0,"ЕстьЗащитаОтОпасныхДействий",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{20},0,"ИспользуемоеИмяФайла",
{1,0},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{21},0,"ФлагСценарииЗагружены",
{1,21,
{"ru","Сценарии загружены"},
{"en","Scenarios loaded"},
{"am","ሆኖ ናቸው የሚሰጡዋቸውን"},
{"az","Ssenarilər qəbul"},
{"bg","Сценарий заредени"},
{"et","Stsenaariumid laadida"},
{"fr","Les scripts chargés"},
{"ka","სკრიპტები ატვირთული"},
{"de","Szenario geladen"},
{"hu","A forgatókönyv feltöltött"},
{"it","Gli script caricati"},
{"lv","Lejupielādēt scenāriji"},
{"lt","Scenarijus parsisiųsti"},
{"mn","Энэ скрипт оруулж байна"},
{"pl","Skrypty pobierane"},
{"ro","Script-uri încărcate"},
{"sl","Skripte so naložili"},
{"es","El escenario de subidas"},
{"sv","De skript som är laddat"},
{"tr","Komut dosyaları yüklenir"},
{"vi","Đã kết nhập kịch bản"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{22},0,"ФлагСценарииВыполнены",
{1,21,
{"ru","Сценарии выполнены"},
{"en","Scenarios done"},
{"am","ሆኖ ግምገማዎች በይፋ ተፈጸመ"},
{"az","Ssenari yerinə"},
{"bg","Сценарий изпълнени"},
{"et","Stsenaariumid on täidetud"},
{"fr","Les scripts ont été exécutés"},
{"ka","სკრიპტები დაასრულეს"},
{"de","Szenarien sind"},
{"hu","A forgatókönyv elkészült"},
{"it","Gli script sono eseguiti"},
{"lv","Scenāriji ir izpildīti"},
{"lt","Scenarijus atitiko"},
{"mn","Скриптүүд дууссан"},
{"pl","Skrypty wykonywane"},
{"ro","Script-uri executate"},
{"sl","Skripte, ki so zaključili"},
{"es","Los escenarios cumplen"},
{"sv","De skript som har avslutat"},
{"tr","Komut yerine"},
{"vi","Đã thực hiện kịch bản"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{23},0,"РеквизитПроизвольныйКод",
{1,2,
{"ru","Реквизит произвольный код"},
{"en","Props arbitrary code"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{24},0,"PIDЭтогоСеанса",
{1,21,
{"ru","PID этого сеанса"},
{"en","PID"},
{"am","ሰዎች ይህ ስብሰባ"},
{"az","PID, bu sessiya"},
{"bg","Тазова възпалителна болест, за тази сесия"},
{"et","PID selle seansi"},
{"fr","PID de cette session"},
{"ka","PID ამ სხდომაზე"},
{"de","PID dieser Sitzung"},
{"hu","PID ezen az ülésen"},
{"it","PID questa sessione"},
{"lv","PID šī seansa"},
{"lt","PID šio seanso"},
{"mn","PID энэ хуралдаан"},
{"pl","PID tej sesji"},
{"ro","PID această sesiune"},
{"sl","PID to sejo"},
{"es","PID esta sesión"},
{"sv","PID denna session"},
{"tr","PID bu oturum"},
{"vi","PID của phiên này"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{25},0,"КешStepDefinition",
{1,0},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,4,
{5,1,0,"StepDefinition",
{1,0},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"СтрокаПараметров",
{1,0},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ЗначенияПараметров",
{1,0},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ИмяШагаБезКлючевогоСлова",
{1,0},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{27},0,"ТекущийTestclientЭтоWebКлиент",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{28},0,"ФайлФлагВыполненияСценариев",
{1,2,
{"ru","Файл флаг выполнения сценариев"},
{"en","File flag scripting"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{29},0,"ПроисходилЗапускTescClient",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{30},0,"МакетШаблонПеревода",
{1,0},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{31},0,"СчитываниеМакетаНачСтр",
{1,2,
{"ru","Считывание макета нач стр"},
{"en","Reading layout the initial page"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{32},0,"СчитываниеМакетаНачКол",
{1,2,
{"ru","Считывание макета нач кол"},
{"en","Reading layout nach number"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{33},0,"СчитываниеМакетаКолСтр",
{1,2,
{"ru","Считывание макета кол стр"},
{"en","Reading layout page number"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{34},0,"СчитываниеМакетаКолКол",
{1,2,
{"ru","Считывание макета кол кол"},
{"en","The read layout number number"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{36},0,"НадоВыполнитьСценарийСоСтрокиПереданнойИзвне",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{37},0,"НомерСтрокиСценарияПереданныйИзвне",
{1,0},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{38},0,"СтрокаСтатуса",
{1,2,
{"ru","Строка статуса"},
{"en","Status"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{39},0,"ТекущийЗагружаемыйФичаФайл",
{1,0},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{40},0,"ЗапрашиватьПодтверждениеПриЗакрытии",
{1,2,
{"ru","Запрашивать подтверждение при закрытии"},
{"en","Ask for confirmation before form closing"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{41},0,"ЗакрытьФормуVA",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{42},0,"ТаблоПеременных",
{1,2,
{"ru","Табло переменных"},
{"en","Scoreboard variables"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,5,
{5,1,0,"Имя",
{1,21,
{"ru","Имя"},
{"en","Name"},
{"am","ስም"},
{"az","Adı"},
{"bg","Име"},
{"et","Nimi"},
{"fr","Le nom de"},
{"ka","დასახელება"},
{"de","Name"},
{"hu","Név"},
{"it","Il nome"},
{"lv","Nosaukums"},
{"lt","Pavadinimas"},
{"mn","Нэр"},
{"pl","Nazwa"},
{"ro","Numele"},
{"sl","Ime"},
{"es","El nombre de"},
{"sv","Namn"},
{"tr","Adı"},
{"vi","Tên"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Значение",
{1,2,
{"ru","Значение"},
{"en","Value"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Тип",
{1,21,
{"ru","Тип"},
{"en","Type"},
{"am","ዓይነት"},
{"az","Növü"},
{"bg","Тип"},
{"et","Tüüp"},
{"fr","Type"},
{"ka","ტიპი"},
{"de","Art"},
{"hu","Típus"},
{"it","Tipo"},
{"lv","Tips"},
{"lt","Tipas"},
{"mn","Төрөл"},
{"pl","Typ"},
{"ro","Tip"},
{"sl","Vrsta"},
{"es","El tipo de"},
{"sv","Typ"},
{"tr","Türü"},
{"vi","Kiểu"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ИсточникДанных",
{1,2,
{"ru","Источник данных"},
{"en","Data source"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"СлужебнаяСтрока",
{1,2,
{"ru","Служебная строка"},
{"en","Service line"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{43},0,"VAОткрытаКакВнешняяОбработка",
{1,0},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{44},0,"ДанныеАллюрМеток",
{1,2,
{"ru","Данные аллюр меток"},
{"en","Allure labels data"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,3,
{5,1,0,"РегулярноеВыражение",
{1,2,
{"ru","Регулярное выражение"},
{"en","Regular expression"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ИмяМетки",
{1,2,
{"ru","Имя метки"},
{"en","Tag name"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Значение",
{1,2,
{"ru","Значение"},
{"en","Value"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{4},0,"ТекстДляТестаГолоса",
{1,2,
{"ru","Текст для теста голоса"},
{"en","Text for test voice"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ПрофилиПоискаКартинокСТекстом",
{1,2,
{"ru","Профили поиска"},
{"en","Search profiles"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,5,
{5,1,0,"Шрифт",
{1,2,
{"ru","Шрифт"},
{"en","Font"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ЦветФона",
{1,2,
{"ru","Цвет фона"},
{"en","Background color"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ЦветШрифта",
{1,2,
{"ru","Цвет шрифта"},
{"en","Font color"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Размер",
{1,2,
{"ru","Размер"},
{"en","Size"}
},
{"Pattern",
{"N",3,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"Имя",
{1,21,
{"ru","Имя"},
{"en","Name"},
{"am","ስም"},
{"az","Adı"},
{"bg","Име"},
{"et","Nimi"},
{"fr","Le nom de"},
{"ka","დასახელება"},
{"de","Name"},
{"hu","Név"},
{"it","Il nome"},
{"lv","Nosaukums"},
{"lt","Pavadinimas"},
{"mn","Нэр"},
{"pl","Nazwa"},
{"ro","Numele"},
{"sl","Ime"},
{"es","El nombre de"},
{"sv","Namn"},
{"tr","Adı"},
{"vi","Tên"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{6},0,"ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок",
{1,2,
{"ru","Есть поддержка функция разложить строку в массив подстрок"},
{"en","There is a support function to decompose string to array of substrings"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"МестоположениеВнешнейКомпонентыДляСкриншотов",
{1,1,
{"ru","Местоположение внешней компоненты для скриншотов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции",
{1,1,
{"ru","Режим совместимости позволяет использовать новые строковые функции"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"ДанныеТекстВстроенныхСценариевСервер",
{1,1,
{"ru","Данные текст встроенных сценариев сервер"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},1,
{0,
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},25,
{5,1,0,"Имя",
{1,21,
{"ru","Имя"},
{"en","Name"},
{"am","ስም"},
{"az","Adı"},
{"bg","Име"},
{"et","Nimi"},
{"fr","Le nom de"},
{"ka","დასახელება"},
{"de","Name"},
{"hu","Név"},
{"it","Il nome"},
{"lv","Nosaukums"},
{"lt","Pavadinimas"},
{"mn","Нэр"},
{"pl","Nazwa"},
{"ro","Numele"},
{"sl","Ime"},
{"es","El nombre de"},
{"sv","Namn"},
{"tr","Adı"},
{"vi","Tên"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ПолныйПуть",
{1,2,
{"ru","Полный путь"},
{"en","Full path"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Снипет",
{1,21,
{"ru","Снипет"},
{"en","Snippet"},
{"am","ስም snippet"},
{"az","Adı снипета"},
{"bg","Името на снипета"},
{"et","Nimi снипета"},
{"fr","Le nom de снипета"},
{"ka","სახელი snippet"},
{"de","Name Schnipsel"},
{"hu","A neve a kódrészletet"},
{"it","Nome снипета"},
{"lv","Nosaukums снипета"},
{"lt","Vardas снипета"},
{"mn","Нэр snippet"},
{"pl","Nazwa снипета"},
{"ro","Numele снипета"},
{"sl","Ime delček"},
{"es","El nombre de снипета"},
{"sv","Namn utdrag"},
{"tr","Adı снипета"},
{"vi","Đoạn trích"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"АдресСнипета",
{1,2,
{"ru","Адрес снипета"},
{"en","Snippet address"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"СтрокаРеальнойПроцедуры",
{1,3,
{"ru","Строка реальной процедуры"},
{"en","Line is a real procedure"},
{"vi","Dòng thủ tục thực tế"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,12,0,"ИменованныеПараметры",
{1,2,
{"ru","Именованные параметры"},
{"en","Named parameters"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,15,0,"ЗначенияПараметров",
{1,2,
{"ru","Значения параметров"},
{"en","Attribute values"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,16,0,"ЭтоЧужойСнипет",
{1,2,
{"ru","Это чужой снипет"},
{"en","It is a strange snippet"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,17,0,"ТипКартинки",
{1,2,
{"ru","Тип картинки"},
{"en","Type pictures"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,19,0,"ИДСтроки",
{1,2,
{"ru","ИДСтроки"},
{"en","IDRow"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,18,0,"Статус",
{1,21,
{"ru","Статус"},
{"en","Status"},
{"am","ሁኔታ"},
{"az","Statusu"},
{"bg","Статус"},
{"et","Staatus"},
{"fr","Le statut de"},
{"ka","სტატუსი"},
{"de","Status"},
{"hu","Állapot"},
{"it","Lo stato"},
{"lv","Statuss"},
{"lt","Statusas"},
{"mn","Байдал"},
{"pl","Status"},
{"ro","Statutul de"},
{"sl","Stanje"},
{"es","El estado de"},
{"sv","Status"},
{"tr","Durumu"},
{"vi","Trạng thái"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,20,0,"ФичаИмеетСвоюEPF",
{1,2,
{"ru","Фича имеет свою EPF"},
{"en","Feature has its EPF"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,21,0,"ШагСПараметрамиВТаблице",
{1,2,
{"ru","Шаг с параметрами в таблице"},
{"en","Step with the parameters in table"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,22,0,"СтрокаПараметровШагаВВидеТаблицы",
{1,2,
{"ru","Строка параметров шага в виде таблицы"},
{"en","Line parameters of step table"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,23,0,"ПараметрыТаблицы",
{1,2,
{"ru","Параметры таблицы"},
{"en","Table parameters"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,24,0,"ИмяШагаБезКлючевогоСлова",
{1,0},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,25,0,"ВыполнятьСценарийСЭтогоШага",
{1,21,
{"ru","Выполнять сценарий с этого шага с сохранением контекстов"},
{"en","Run scenario from that step whith context save"},
{"am","ቅድሚያ ቅድሚያ የሚሰጡዋቸውን ቅድሚያ, የሚያድን contexts"},
{"az","Yerinə ssenari ilə bu addım saxlanılması ilə kontekstlərdə"},
{"bg","Изпълнява сценарий с тази стъпка, с опазването на контекст"},
{"et","Teha skripti seda sammu säilitades kontekstides"},
{"fr","Exécuter un script à partir de cette étape, avec le maintien des contextes"},
{"ka","To run script ეს ნაბიჯი, გადარჩენის კონტექსტში"},
{"de","Ein Skript mit diesem Schritt mit der Erhaltung der Kontexte"},
{"hu","Hogy fut egy forgatókönyvet, ez a lépés, a megtakarítás kontextusokban"},
{"it","Eseguire lo script con questo passo con la conservazione dei contesti"},
{"lv","Izpildīt skriptu ar šo soli, saglabājot kontekstus"},
{"lt","Atlikti scenarijų su šio žingsnio išlaikant situaciją"},
{"mn","Ажиллуулах скрипт нь энэ алхам, хадгалах нөхцөл"},
{"pl","Wykonać skrypt z tego kroku, z zachowaniem kontekstu"},
{"ro","Executa script-ul cu acest pas, cu menținerea contexte"},
{"sl","Če želite zagnati skript s tem korakom, varčevanje kontekstih"},
{"es","Ejecutar la secuencia de comandos con este paso con la conservación de los contextos de"},
{"sv","För att köra ett skript med detta steg, spara sammanhang"},
{"tr","Gerçekleştirmek için bir komut dosyası ile bu adımı koruyarak bağlamları"},
{"vi","Thực hiện kịch bản từ bước này có lưu ngữ cảnh"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,27,0,"МассивСценариевЗащитаОтЗацикливания",
{1,2,
{"ru","Массив сценариев защита от зацикливания"},
{"en","Scripts array for protection from looping"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,30,0,"НомерСтрокиВФиче",
{1,2,
{"ru","Номер строки в фиче"},
{"en","Line number in feature"}
},
{"Pattern",
{"N",7,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,31,0,"Брейкпоинт",
{1,2,
{"ru","Номер строки в фиче"},
{"en","Line number in feature"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,32,0,"ЗначениеОтступа",
{1,0},
{"Pattern",
{"N",7,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"Тип",
{1,21,
{"ru","Тип"},
{"en","Type"},
{"am","ዓይነት"},
{"az","Növü"},
{"bg","Тип"},
{"et","Tüüp"},
{"fr","Type"},
{"ka","ტიპი"},
{"de","Art"},
{"hu","Típus"},
{"it","Tipo"},
{"lv","Tips"},
{"lt","Tipas"},
{"mn","Төрөл"},
{"pl","Typ"},
{"ro","Tip"},
{"sl","Vrsta"},
{"es","El tipo de"},
{"sv","Typ"},
{"tr","Türü"},
{"vi","Kiểu"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"ДопТип",
{1,2,
{"ru","Доп тип"},
{"en","Addit type"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ТекстОшибки",
{1,2,
{"ru","Текст ошибки"},
{"en","The error text"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"ПроизвольныеЗначения",
{1,2,
{"ru","Произвольные значения"},
{"en","Arbitrary values"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0}
},8,"Объект.ДеревоТестов.Статус","Объект.ДеревоТестов.Статус",
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{18,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},"Объект.ДеревоТестов.СтрокаПараметровШагаВВидеТаблицы","Объект.ДеревоТестов.СтрокаПараметровШагаВВидеТаблицы",
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{22,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},"Объект.ДеревоТестов.ЭтоЧужойСнипет","Объект.ДеревоТестов.ЭтоЧужойСнипет",
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{16,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},"Объект.ДеревоТестов.ВыполнятьСценарийСЭтогоШага","Объект.ДеревоТестов.ВыполнятьСценарийСЭтогоШага",
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{25,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},"ДанныеКлиентовТестирования.Подключен","ДанныеКлиентовТестирования.Подключен",
{2,
{18},
{6}
},
{1,
{18}
},"Объект.ДеревоТестов.АдресСнипета","Объект.ДеревоТестов.АдресСнипета",
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{4,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},"Объект.ДеревоТестов.Снипет","Объект.ДеревоТестов.Снипет",
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{3,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},"Объект.ДеревоТестов.Имя","Объект.ДеревоТестов.Имя",
{3,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615},
{1,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{2,
{1},
{0,8b899eb3-1e10-4554-932c-57d42703b615}
},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQvtCi0LXRgdGC0L7QstCY0LzR
jzwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJCQk8Zmls
dGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVtR3JvdXAiPg0KCQkJ
CQk8Z3JvdXBUeXBlPkFuZEdyb3VwPC9ncm91cFR5cGU+DQoJCQkJCTxpdGVtIHhz
aTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJCQk8bGVmdCB4c2k6
dHlwZT0iZGNzY29yOkZpZWxkIj7QntCx0YrQtdC60YIu0JTQtdGA0LXQstC+0KLQ
tdGB0YLQvtCyLtCh0YLQsNGC0YPRgTwvbGVmdD4NCgkJCQkJCTxjb21wYXJpc29u
VHlwZT5FcXVhbDwvY29tcGFyaXNvblR5cGU+DQoJCQkJCQk8cmlnaHQgeHNpOnR5
cGU9InhzOnN0cmluZyI+UGVuZGluZzwvcmlnaHQ+DQoJCQkJCTwvaXRlbT4NCgkJ
CQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0KCQkJCTxk
Y3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJ
CQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCm0LLQtdGC0KTQvtC90LA8L2Rjc2Nvcjpw
YXJhbWV0ZXI+DQoJCQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Q29s
b3IiPiNGRkZCNEE8L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0K
CQkJPC9hcHBlYXJhbmNlPg0KCQk8L2l0ZW0+DQoJCTxpdGVtPg0KCQkJPHNlbGVj
dGlvbj4NCgkJCQk8aXRlbT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQvtCi0LXR
gdGC0L7QstCY0LzRjzwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rp
b24+DQoJCQk8ZmlsdGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVt
R3JvdXAiPg0KCQkJCQk8Z3JvdXBUeXBlPkFuZEdyb3VwPC9ncm91cFR5cGU+DQoJ
CQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJ
CQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QntCx0YrQtdC60YIu0JTQ
tdGA0LXQstC+0KLQtdGB0YLQvtCyLtCh0YLQsNGC0YPRgTwvbGVmdD4NCgkJCQkJ
CTxjb21wYXJpc29uVHlwZT5FcXVhbDwvY29tcGFyaXNvblR5cGU+DQoJCQkJCQk8
cmlnaHQgeHNpOnR5cGU9InhzOnN0cmluZyI+RmFpbGVkPC9yaWdodD4NCgkJCQkJ
PC9pdGVtPg0KCQkJCTwvaXRlbT4NCgkJCTwvZmlsdGVyPg0KCQkJPGFwcGVhcmFu
Y2U+DQoJCQkJPGRjc2NvcjppdGVtIHhzaTp0eXBlPSJTZXR0aW5nc1BhcmFtZXRl
clZhbHVlIj4NCgkJCQkJPGRjc2NvcjpwYXJhbWV0ZXI+0KbQstC10YLQpNC+0L3Q
sDwvZGNzY29yOnBhcmFtZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlw
ZT0idjh1aTpDb2xvciI+I0ZGOTE5MTwvZGNzY29yOnZhbHVlPg0KCQkJCTwvZGNz
Y29yOml0ZW0+DQoJCQk8L2FwcGVhcmFuY2U+DQoJCTwvaXRlbT4NCgkJPGl0ZW0+
DQoJCQk8c2VsZWN0aW9uPg0KCQkJCTxpdGVtPg0KCQkJCQk8ZmllbGQ+0JTQtdGA
0LXQstC+0KLQtdGB0YLQvtCy0JjQvNGPPC9maWVsZD4NCgkJCQk8L2l0ZW0+DQoJ
CQk8L3NlbGVjdGlvbj4NCgkJCTxmaWx0ZXI+DQoJCQkJPGl0ZW0geHNpOnR5cGU9
IkZpbHRlckl0ZW1Hcm91cCI+DQoJCQkJCTxncm91cFR5cGU+QW5kR3JvdXA8L2dy
b3VwVHlwZT4NCgkJCQkJPGl0ZW0geHNpOnR5cGU9IkZpbHRlckl0ZW1Db21wYXJp
c29uIj4NCgkJCQkJCTxsZWZ0IHhzaTp0eXBlPSJkY3Njb3I6RmllbGQiPtCe0LHR
itC10LrRgi7QlNC10YDQtdCy0L7QotC10YHRgtC+0LIu0KHRgtCw0YLRg9GBPC9s
ZWZ0Pg0KCQkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJpc29uVHlw
ZT4NCgkJCQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6c3RyaW5nIj5TdWNjZXNzPC9y
aWdodD4NCgkJCQkJPC9pdGVtPg0KCQkJCTwvaXRlbT4NCgkJCTwvZmlsdGVyPg0K
CQkJPGFwcGVhcmFuY2U+DQoJCQkJPGRjc2NvcjppdGVtIHhzaTp0eXBlPSJTZXR0
aW5nc1BhcmFtZXRlclZhbHVlIj4NCgkJCQkJPGRjc2NvcjpwYXJhbWV0ZXI+0KbQ
stC10YLQpNC+0L3QsDwvZGNzY29yOnBhcmFtZXRlcj4NCgkJCQkJPGRjc2Nvcjp2
YWx1ZSB4c2k6dHlwZT0idjh1aTpDb2xvciI+I0Q5RkZEOTwvZGNzY29yOnZhbHVl
Pg0KCQkJCTwvZGNzY29yOml0ZW0+DQoJCQk8L2FwcGVhcmFuY2U+DQoJCTwvaXRl
bT4NCgkJPGl0ZW0+DQoJCQk8c2VsZWN0aW9uPg0KCQkJCTxpdGVtPg0KCQkJCQk8
ZmllbGQ+0JTQtdGA0LXQstC+0KLQtdGB0YLQvtCy0JjQvNGPPC9maWVsZD4NCgkJ
CQk8L2l0ZW0+DQoJCQk8L3NlbGVjdGlvbj4NCgkJCTxmaWx0ZXI+DQoJCQkJPGl0
ZW0geHNpOnR5cGU9IkZpbHRlckl0ZW1Hcm91cCI+DQoJCQkJCTxncm91cFR5cGU+
T3JHcm91cDwvZ3JvdXBUeXBlPg0KCQkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVy
SXRlbUNvbXBhcmlzb24iPg0KCQkJCQkJPGxlZnQgeHNpOnR5cGU9ImRjc2NvcjpG
aWVsZCI+0J7QsdGK0LXQutGCLtCU0LXRgNC10LLQvtCi0LXRgdGC0L7Qsi7QodGC
0YDQvtC60LDQn9Cw0YDQsNC80LXRgtGA0L7QstCo0LDQs9Cw0JLQktC40LTQtdCi
0LDQsdC70LjRhtGLPC9sZWZ0Pg0KCQkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFs
PC9jb21wYXJpc29uVHlwZT4NCgkJCQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6Ym9v
bGVhbiI+dHJ1ZTwvcmlnaHQ+DQoJCQkJCTwvaXRlbT4NCgkJCQk8L2l0ZW0+DQoJ
CQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4
c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6
cGFyYW1ldGVyPtCo0YDQuNGE0YI8L2Rjc2NvcjpwYXJhbWV0ZXI+DQoJCQkJCTxk
Y3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Rm9udCIgcmVmPSJzeXM6RGVmYXVs
dEdVSUZvbnQiIGZhY2VOYW1lPSJMdWNpZGEgQ29uc29sZSIgaGVpZ2h0PSIxMCIg
a2luZD0iV2luZG93c0ZvbnQiLz4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9h
cHBlYXJhbmNlPg0KCQk8L2l0ZW0+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4N
CgkJCQk8aXRlbT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQvtCi0LXRgdGC0L7Q
stCf0L7Qu9C90YvQudCf0YPRgtGMPC9maWVsZD4NCgkJCQk8L2l0ZW0+DQoJCQkJ
PGl0ZW0+DQoJCQkJCTxmaWVsZD7QlNC10YDQtdCy0L7QotC10YHRgtC+0LLQkNC0
0YDQtdGB0KHQvdC40L/QtdGC0LA8L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQvtCi0LXRgdGC0L7QstCh0L3Q
uNC/0LXRgjwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJ
CQk8ZmlsdGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFy
aXNvbiI+DQoJCQkJCTxsZWZ0IHhzaTp0eXBlPSJkY3Njb3I6RmllbGQiPtCe0LHR
itC10LrRgi7QlNC10YDQtdCy0L7QotC10YHRgtC+0LIu0K3RgtC+0KfRg9C20L7Q
udCh0L3QuNC/0LXRgjwvbGVmdD4NCgkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFs
PC9jb21wYXJpc29uVHlwZT4NCgkJCQkJPHJpZ2h0IHhzaTp0eXBlPSJ4czpib29s
ZWFuIj50cnVlPC9yaWdodD4NCgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJ
CTxhcHBlYXJhbmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGlu
Z3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCm0LLQ
tdGC0KTQvtC90LA8L2Rjc2NvcjpwYXJhbWV0ZXI+DQoJCQkJCTxkY3Njb3I6dmFs
dWUgeHNpOnR5cGU9InY4dWk6Q29sb3IiPiNEOUQ3Q0M8L2Rjc2Nvcjp2YWx1ZT4N
CgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJhbmNlPg0KCQk8L2l0ZW0+
DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8aXRlbT4NCgkJCQkJPGZp
ZWxkPtCU0LXRgNC10LLQvtCi0LXRgdGC0L7QstCY0LzRjzwvZmllbGQ+DQoJCQkJ
PC9pdGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJCQk8ZmlsdGVyPg0KCQkJCTxpdGVt
IHhzaTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJCTxsZWZ0IHhz
aTp0eXBlPSJkY3Njb3I6RmllbGQiPtCe0LHRitC10LrRgi7QlNC10YDQtdCy0L7Q
otC10YHRgtC+0LIu0JLRi9C/0L7Qu9C90Y/RgtGM0KHRhtC10L3QsNGA0LjQudCh
0K3RgtC+0LPQvtCo0LDQs9CwPC9sZWZ0Pg0KCQkJCQk8Y29tcGFyaXNvblR5cGU+
RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0KCQkJCQk8cmlnaHQgeHNpOnR5cGU9Inhz
OmJvb2xlYW4iPnRydWU8L3JpZ2h0Pg0KCQkJCTwvaXRlbT4NCgkJCTwvZmlsdGVy
Pg0KCQkJPGFwcGVhcmFuY2U+DQoJCQkJPGRjc2NvcjppdGVtIHhzaTp0eXBlPSJT
ZXR0aW5nc1BhcmFtZXRlclZhbHVlIj4NCgkJCQkJPGRjc2NvcjpwYXJhbWV0ZXI+
0KbQstC10YLQpNC+0L3QsDwvZGNzY29yOnBhcmFtZXRlcj4NCgkJCQkJPGRjc2Nv
cjp2YWx1ZSB4c2k6dHlwZT0idjh1aTpDb2xvciI+Izk5Q0NGRjwvZGNzY29yOnZh
bHVlPg0KCQkJCTwvZGNzY29yOml0ZW0+DQoJCQk8L2FwcGVhcmFuY2U+DQoJCTwv
aXRlbT4NCgkJPGl0ZW0+DQoJCQk8c2VsZWN0aW9uPg0KCQkJCTxpdGVtPg0KCQkJ
CQk8ZmllbGQ+0JTQsNC90L3Ri9C10JrQu9C40LXQvdGC0L7QstCi0LXRgdGC0LjR
gNC+0LLQsNC90LjRjzwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rp
b24+DQoJCQk8ZmlsdGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVt
Q29tcGFyaXNvbiI+DQoJCQkJCTxsZWZ0IHhzaTp0eXBlPSJkY3Njb3I6RmllbGQi
PtCU0LDQvdC90YvQtdCa0LvQuNC10L3RgtC+0LLQotC10YHRgtC40YDQvtCy0LDQ
vdC40Y8u0J/QvtC00LrQu9GO0YfQtdC9PC9sZWZ0Pg0KCQkJCQk8Y29tcGFyaXNv
blR5cGU+RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0KCQkJCQk8cmlnaHQgeHNpOnR5
cGU9InhzOmJvb2xlYW4iPnRydWU8L3JpZ2h0Pg0KCQkJCTwvaXRlbT4NCgkJCTwv
ZmlsdGVyPg0KCQkJPGFwcGVhcmFuY2U+DQoJCQkJPGRjc2NvcjppdGVtIHhzaTp0
eXBlPSJTZXR0aW5nc1BhcmFtZXRlclZhbHVlIj4NCgkJCQkJPGRjc2NvcjpwYXJh
bWV0ZXI+0KbQstC10YLQotC10LrRgdGC0LA8L2Rjc2NvcjpwYXJhbWV0ZXI+DQoJ
CQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Q29sb3IiPiMzMzk5NjY8
L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJCTxkY3Njb3I6
aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxk
Y3Njb3I6cGFyYW1ldGVyPtCo0YDQuNGE0YI8L2Rjc2NvcjpwYXJhbWV0ZXI+DQoJ
CQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Rm9udCIgcmVmPSJzeXM6
RGVmYXVsdEdVSUZvbnQiIGJvbGQ9InRydWUiIGl0YWxpYz0iZmFsc2UiIHVuZGVy
bGluZT0iZmFsc2UiIHN0cmlrZW91dD0iZmFsc2UiIGtpbmQ9IldpbmRvd3NGb250
Ii8+DQoJCQkJPC9kY3Njb3I6aXRlbT4NCgkJCTwvYXBwZWFyYW5jZT4NCgkJPC9p
dGVtPg0KCQk8aXRlbT4NCgkJCTxzZWxlY3Rpb24+DQoJCQkJPGl0ZW0+DQoJCQkJ
CTxmaWVsZD7QlNC10YDQtdCy0L7QotC10YHRgtC+0LLQmNC80Y88L2ZpZWxkPg0K
CQkJCTwvaXRlbT4NCgkJCQk8aXRlbT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQ
vtCi0LXRgdGC0L7QstCf0L7Qu9C90YvQudCf0YPRgtGMPC9maWVsZD4NCgkJCQk8
L2l0ZW0+DQoJCQkJPGl0ZW0+DQoJCQkJCTxmaWVsZD7QlNC10YDQtdCy0L7QotC1
0YHRgtC+0LLQodC90LjQv9C10YI8L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQvtCi0LXRgdGC0L7QstCQ0LTR
gNC10YHQodC90LjQv9C10YLQsDwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJCTxp
dGVtPg0KCQkJCQk8ZmllbGQ+0JTQtdGA0LXQstC+0KLQtdGB0YLQvtCy0KHRgtGA
0L7QutCw0KDQtdCw0LvRjNC90L7QudCf0YDQvtGG0LXQtNGD0YDRizwvZmllbGQ+
DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJCQk8ZmlsdGVyPg0KCQkJ
CTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJCTxs
ZWZ0IHhzaTp0eXBlPSJkY3Njb3I6RmllbGQiPtCe0LHRitC10LrRgi7QlNC10YDQ
tdCy0L7QotC10YHRgtC+0LIu0JDQtNGA0LXRgdCh0L3QuNC/0LXRgtCwPC9sZWZ0
Pg0KCQkJCQk8Y29tcGFyaXNvblR5cGU+RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0K
CQkJCQk8cmlnaHQgeHNpOnR5cGU9InhzOnN0cmluZyIvPg0KCQkJCTwvaXRlbT4N
CgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNvbXBhcmlzb24iPg0KCQkJ
CQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QntCx0YrQtdC60YIu0JTQ
tdGA0LXQstC+0KLQtdGB0YLQvtCyLtCh0L3QuNC/0LXRgjwvbGVmdD4NCgkJCQkJ
PGNvbXBhcmlzb25UeXBlPk5vdEVxdWFsPC9jb21wYXJpc29uVHlwZT4NCgkJCQkJ
PHJpZ2h0IHhzaTp0eXBlPSJ4czpzdHJpbmciLz4NCgkJCQk8L2l0ZW0+DQoJCQk8
L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6
dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFy
YW1ldGVyPtCm0LLQtdGC0KTQvtC90LA8L2Rjc2NvcjpwYXJhbWV0ZXI+DQoJCQkJ
CTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Q29sb3IiPiNGRkNDMDA8L2Rj
c2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJhbmNl
Pg0KCQk8L2l0ZW0+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8aXRl
bT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQvtCi0LXRgdGC0L7QsjwvZmllbGQ+
DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJCQk8ZmlsdGVyPg0KCQkJ
CTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJCTxs
ZWZ0IHhzaTp0eXBlPSJkY3Njb3I6RmllbGQiPtCe0LHRitC10LrRgi7QlNC10YDQ
tdCy0L7QotC10YHRgtC+0LIu0JjQvNGPPC9sZWZ0Pg0KCQkJCQk8Y29tcGFyaXNv
blR5cGU+QmVnaW5zV2l0aDwvY29tcGFyaXNvblR5cGU+DQoJCQkJCTxyaWdodCB4
c2k6dHlwZT0ieHM6c3RyaW5nIj4qPC9yaWdodD4NCgkJCQk8L2l0ZW0+DQoJCQk8
L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6
dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFy
YW1ldGVyPtCm0LLQtdGC0KLQtdC60YHRgtCwPC9kY3Njb3I6cGFyYW1ldGVyPg0K
CQkJCQk8ZGNzY29yOnZhbHVlIHhzaTp0eXBlPSJ2OHVpOkNvbG9yIj5zdHlsZTpG
aWVsZFNlbGVjdGlvbkJhY2tDb2xvcjwvZGNzY29yOnZhbHVlPg0KCQkJCTwvZGNz
Y29yOml0ZW0+DQoJCQkJPGRjc2NvcjppdGVtIHhzaTp0eXBlPSJTZXR0aW5nc1Bh
cmFtZXRlclZhbHVlIj4NCgkJCQkJPGRjc2Nvcjp1c2U+ZmFsc2U8L2Rjc2Nvcjp1
c2U+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCo0YDQuNGE0YI8L2Rjc2Nvcjpw
YXJhbWV0ZXI+DQoJCQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Rm9u
dCIgcmVmPSJzeXM6RGVmYXVsdEdVSUZvbnQiIGJvbGQ9ImZhbHNlIiBpdGFsaWM9
ImZhbHNlIiB1bmRlcmxpbmU9InRydWUiIHN0cmlrZW91dD0iZmFsc2UiIGtpbmQ9
IldpbmRvd3NGb250Ii8+DQoJCQkJPC9kY3Njb3I6aXRlbT4NCgkJCTwvYXBwZWFy
YW5jZT4NCgkJPC9pdGVtPg0KCTwvY29uZGl0aW9uYWxBcHBlYXJhbmNlPg0KPC9T
ZXR0aW5ncz4=}
},
{0,0},
{0,87,
{9,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьСценарии",
{1,21,
{"ru","Выполнить"},
{"en","Run scenarios"},
{"am","ቅድሚያ የሚሰጡዋቸውን"},
{"az","İcra ssenarilər"},
{"bg","Изпълнение на скриптове"},
{"et","Käivita stsenaarium"},
{"fr","Exécuter les scripts"},
{"ka","აწარმოებს სკრიპტები"},
{"de","Ausführen von Skripts"},
{"hu","A scriptek futtatását"},
{"it","Eseguire gli script"},
{"lv","Izpildīt skriptus"},
{"lt","Vykdyti scenarijus"},
{"mn","Ажиллуулах скриптүүд"},
{"pl","Uruchom skrypty"},
{"ro","Executa script-uri"},
{"sl","Dovolite zaganjanje skriptov"},
{"es","Ejecutar secuencias de comandos"},
{"sv","Att köra skript"},
{"tr","Çalıştır komut"},
{"vi","Thực hiện kịch bản"}
},
{1,21,
{"ru","Выполнить"},
{"en","Run scenarios"},
{"am","ቅድሚያ የሚሰጡዋቸውን"},
{"az","İcra ssenarilər"},
{"bg","Изпълнение на скриптове"},
{"et","Käivita stsenaarium"},
{"fr","Exécuter les scripts"},
{"ka","აწარმოებს სკრიპტები"},
{"de","Ausführen von Skripts"},
{"hu","A scriptek futtatását"},
{"it","Eseguire gli script"},
{"lv","Izpildīt skriptus"},
{"lt","Vykdyti scenarijus"},
{"mn","Ажиллуулах скриптүүд"},
{"pl","Uruchom skrypty"},
{"ro","Executa script-uri"},
{"sl","Dovolite zaganjanje skriptov"},
{"es","Ejecutar secuencias de comandos"},
{"sv","Att köra skript"},
{"tr","Çalıştır komut"},
{"vi","Thực hiện kịch bản"}
},
{0,
{0,
{"B",1},0}
},
{0,116,0},
{4,1,
{0,0ce78048-0196-4f80-a781-9829cdb7f43e},"",-1,-1,1,0,""},"ВыполнитьСценарииФорма",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Перезагрузить",
{1,21,
{"ru","Перезагрузить"},
{"en","Reload scenario"},
{"am","መገለጫዎ ይታያል"},
{"az","Yeniden ssenarilər"},
{"bg","Презареждане на сценарии"},
{"et","Uuesti skriptide"},
{"fr","Redémarrer le scénario"},
{"ka","გადატვირთვა სცენარი"},
{"de","Neustart des Skripts"},
{"hu","Indítsa újra forgatókönyvek"},
{"it","Riavviare scenari"},
{"lv","Restartēt scenāriji"},
{"lt","Iš naujo paleisti scenarijų"},
{"mn","Рестарт хувилбарууд"},
{"pl","Ponownie uruchomić skrypty"},
{"ro","Reporniți scenarii"},
{"sl","Znova zaženite scenarijev"},
{"es","Reiniciar el escenario"},
{"sv","Starta scenarier"},
{"tr","Yeniden senaryolar"},
{"vi","Khởi động lại kịch bản"}
},
{1,21,
{"ru","Перезагрузить"},
{"en","Reload scenario"},
{"am","መገለጫዎ ይታያል"},
{"az","Yeniden ssenarilər"},
{"bg","Презареждане на сценарии"},
{"et","Uuesti skriptide"},
{"fr","Redémarrer le scénario"},
{"ka","გადატვირთვა სცენარი"},
{"de","Neustart des Skripts"},
{"hu","Indítsa újra forgatókönyvek"},
{"it","Riavviare scenari"},
{"lv","Restartēt scenāriji"},
{"lt","Iš naujo paleisti scenarijų"},
{"mn","Рестарт хувилбарууд"},
{"pl","Ponownie uruchomić skrypty"},
{"ro","Reporniți scenarii"},
{"sl","Znova zaženite scenarijev"},
{"es","Reiniciar el escenario"},
{"sv","Starta scenarier"},
{"tr","Yeniden senaryolar"},
{"vi","Khởi động lại kịch bản"}
},
{0,
{0,
{"B",1},0}
},
{0,115,0},
{4,1,
{0,fc4f29e0-d168-4fe0-8e64-e982fabf2595},"",-1,-1,1,0,""},"Перезагрузить",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьФичиИзКаталога",
{1,2,
{"ru","Загрузить фичи из каталога"},
{"en","Download features from directory"}
},
{1,2,
{"ru","Загрузить фичи из каталога"},
{"en","Download features from directory"}
},
{0,
{0,
{"B",1},0}
},
{0,113,16},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьФичиИзКаталога",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьОднуФичу",
{1,2,
{"ru","Загрузить одну фичу"},
{"en","Download one feature"}
},
{1,2,
{"ru","Загрузить одну фичу"},
{"en","Download one feature"}
},
{0,
{0,
{"B",1},0}
},
{0,113,8},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьОднуФичу",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СоздатьШаблоныОбработок",
{1,2,
{"ru","Создать шаблоны обработок"},
{"en","To create templates of treatments"}
},
{1,2,
{"ru","Создать шаблоны обработок"},
{"en","To create templates of treatments"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СоздатьШаблоныОбработокКоманда",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьВыделенныйСценарий",
{1,21,
{"ru","Выполнить данный сценарий с начала"},
{"en","Run selected scenario"},
{"am","ጋር ይገናኛሉ ከመጀመሪያ"},
{"az","Yerinə yetirmək üçün həmin ssenari ilə başladı"},
{"bg","Изпълни този сценарий от началото на"},
{"et","Käivita seda skripti algusest"},
{"fr","Exécuter le script depuis le début"},
{"ka","აწარმოებს სცენარი თავიდანვე"},
{"de","Ausführen dieses Szenario seit Beginn"},
{"hu","Futtatni a szkriptet a kezdet"},
{"it","Eseguire lo script con inizio"},
{"lv","Izpildīt šo skriptu no sākuma"},
{"lt","Atlikti šį scenarijų nuo pradžios"},
{"mn","Ажиллуулах бичиг эхнээс нь"},
{"pl","Uruchom ten skrypt od początku"},
{"ro","Pentru a efectua acest scenariu de la începutul"},
{"sl","Če želite zagnati skript od začetka"},
{"es","Ejecutar esta secuencia de comandos de inicio de la"},
{"sv","För att köra skriptet från början"},
{"tr","Çalıştır bu komut ile başladı"},
{"vi","Thực hiện kịch bản này từ đầu"}
},
{1,2,
{"ru","Выполнить выделенный сценарий"},
{"en","Execute selected script"}
},
{0,
{0,
{"B",1},0}
},
{0,116,16},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьВыделенныйСценарийФорма",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПерезагрузитьИВыполнить",
{1,21,
{"ru","Перезагрузить и выполнить"},
{"en","Reload and run"},
{"am","ጋር ይገናኛሉ እና ሆኗል"},
{"az","Yenidən başladın və yerinə yetirmək"},
{"bg","Рестартирате и изпълнение на"},
{"et","Restart ja käivita"},
{"fr","Redémarrer et exécuter"},
{"ka","გადატვირთეთ და შეასრულოს"},
{"de","Neu starten und ausführen"},
{"hu","Újraindul végre"},
{"it","Riavviare ed eseguire"},
{"lv","Pārlādēt un izpildīt"},
{"lt","Paleisti ir vykdyti"},
{"mn","Дахин ачаалах болон гүйцэтгэх"},
{"pl","Ponownie uruchomić i wykonać"},
{"ro","Pentru a reîncărca și de a efectua"},
{"sl","Za ponovni zagon in izvajanje"},
{"es","Reiniciar y ejecutar"},
{"sv","Att starta och köra"},
{"tr","Yeniden yükle ve çalıştır"},
{"vi","Khởi động lại và thực hiện"}
},
{1,21,
{"ru","Перезагрузить и выполнить"},
{"en","Reload and run"},
{"am","ጋር ይገናኛሉ እና ሆኗል"},
{"az","Yenidən başladın və yerinə yetirmək"},
{"bg","Рестартирате и изпълнение на"},
{"et","Restart ja käivita"},
{"fr","Redémarrer et exécuter"},
{"ka","გადატვირთეთ და შეასრულოს"},
{"de","Neu starten und ausführen"},
{"hu","Újraindul végre"},
{"it","Riavviare ed eseguire"},
{"lv","Pārlādēt un izpildīt"},
{"lt","Paleisti ir vykdyti"},
{"mn","Дахин ачаалах болон гүйцэтгэх"},
{"pl","Ponownie uruchomić i wykonać"},
{"ro","Pentru a reîncărca și de a efectua"},
{"sl","Za ponovni zagon in izvajanje"},
{"es","Reiniciar y ejecutar"},
{"sv","Att starta och köra"},
{"tr","Yeniden yükle ve çalıştır"},
{"vi","Khởi động lại và thực hiện"}
},
{0,
{0,
{"B",1},0}
},
{0,117,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПерезагрузитьИВыполнить",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьФичаФайл",
{1,2,
{"ru","Открыть фича файл"},
{"en","Open feature file"}
},
{1,2,
{"ru","Открыть фича файл"},
{"en","Open feature file"}
},
{0,
{0,
{"B",1},0}
},
{0,118,0},
{4,0,
{0},"",-1,-1,1,0,""},"ОткрытьФичаФайл",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НачатьЗаписьДействийПользователя",
{1,2,
{"ru","Начать запись действий пользователя"},
{"en","Start user actions recording"}
},
{1,2,
{"ru","Начать запись действий пользователя"},
{"en","Start user actions recording"}
},
{0,
{0,
{"B",1},0}
},
{0,82,8},
{4,0,
{0},"",-1,-1,1,0,""},"НачатьЗаписьДействийПользователяКнопка",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗавершитьЗаписьДействийПользователя",
{1,2,
{"ru","Завершить запись действий пользователя"},
{"en","End recording user actions"}
},
{1,2,
{"ru","Завершить запись действий пользователя"},
{"en","End recording user actions"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗавершитьЗаписьДействийПользователяКнопка",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьПодключитьTestClient",
{1,21,
{"ru","Подключить TestClient"},
{"en","Enable test client session"},
{"am","ጋር TestClient"},
{"az","Əlaqə TestClient"},
{"bg","Свържете TestClient"},
{"et","Ühendada TestClient"},
{"fr","Connecter TestClient"},
{"ka","დაკავშირება TestClient"},
{"de","Verbinden Von Testclient"},
{"hu","Csatlakoztassa TestClient"},
{"it","Collegare TestClient"},
{"lv","Pievienot TestClient"},
{"lt","Prijungti TestClient"},
{"mn","To Connect TestClient"},
{"pl","Podłączyć TestClient"},
{"ro","Conectați TestClient"},
{"sl","Za Povezavo TestClient"},
{"es","Conectar TestClient"},
{"sv","För Att Ansluta TestClient"},
{"tr","Bağlamak TestClient"},
{"vi","Kết Nối TestClient"}
},
{1,21,
{"ru","Подключить TestClient"},
{"en","Enable test client session"},
{"am","ጋር TestClient"},
{"az","Əlaqə TestClient"},
{"bg","Свържете TestClient"},
{"et","Ühendada TestClient"},
{"fr","Connecter TestClient"},
{"ka","დაკავშირება TestClient"},
{"de","Verbinden Von Testclient"},
{"hu","Csatlakoztassa TestClient"},
{"it","Collegare TestClient"},
{"lv","Pievienot TestClient"},
{"lt","Prijungti TestClient"},
{"mn","To Connect TestClient"},
{"pl","Podłączyć TestClient"},
{"ro","Conectați TestClient"},
{"sl","Za Povezavo TestClient"},
{"es","Conectar TestClient"},
{"sv","För Att Ansluta TestClient"},
{"tr","Bağlamak TestClient"},
{"vi","Kết Nối TestClient"}
},
{0,
{0,
{"B",1},0}
},
{0,84,8},
{4,0,
{0},"",-1,-1,1,0,""},"ОткрытьПодключитьTestClient",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"УстановитьПометкуВыполнятьСценарийСЭтогоШага",
{1,21,
{"ru","Установить пометку выполнять сценарий с этого шага"},
{"en","Set flag run scenarion from that step"},
{"am","አንድ ይገናኛሉ ጋር ይገናኛሉ ላይ እርምጃ"},
{"az","Yüklemek пометку yerinə ssenari ilə bu addımdan"},
{"bg","Инсталиране на маркиране се изпълнява сценарий с тази стъпка"},
{"et","Määrata märkuse teha skripti seda sammu"},
{"fr","Activer l'indicateur d'exécuter un script à cette étape"},
{"ka","დააყენეთ overlay აწარმოებს სცენარი, ეს ნაბიჯი"},
{"de","Installieren Sie die Markierung Skript ausführen mit diesem Schritt"},
{"hu","Állítsa be a overlay, hogy a parancsfájl futtatása ezzel a lépéssel"},
{"it","Impostare il contrassegno di eseguire lo script con questo passo"},
{"lv","Noteikt atzīmi izpildīt skriptu ar šo soli"},
{"lt","Nustatyti, kaip atlikti scenarijų su šio žingsnio"},
{"mn","Тогтоосон давхцуулах ажиллуулах бичиг нь энэ алхам"},
{"pl","Ustawić znacznik wykonać skrypt z tego kroku"},
{"ro","Setați marcajele executa script-ul cu acest pas"},
{"sl","Nastavite prekrivanje, da zaženete skript s tem korakom"},
{"es","Marcar ejecutar la secuencia de comandos con este paso"},
{"sv","Set overlay för att köra skriptet med det här steget"},
{"tr","Ayarlamak için işaretini gerçekleştirmek için komut dosyası ile bu adımı"},
{"vi","Đánh dấu thực hiện kích bản từ bước này"}
},
{1,21,
{"ru","Установить пометку выполнять сценарий с этого шага"},
{"en","Set flag run scenarion from that step"},
{"am","አንድ ይገናኛሉ ጋር ይገናኛሉ ላይ እርምጃ"},
{"az","Yüklemek пометку yerinə ssenari ilə bu addımdan"},
{"bg","Инсталиране на маркиране се изпълнява сценарий с тази стъпка"},
{"et","Määrata märkuse teha skripti seda sammu"},
{"fr","Activer l'indicateur d'exécuter un script à cette étape"},
{"ka","დააყენეთ overlay აწარმოებს სცენარი, ეს ნაბიჯი"},
{"de","Installieren Sie die Markierung Skript ausführen mit diesem Schritt"},
{"hu","Állítsa be a overlay, hogy a parancsfájl futtatása ezzel a lépéssel"},
{"it","Impostare il contrassegno di eseguire lo script con questo passo"},
{"lv","Noteikt atzīmi izpildīt skriptu ar šo soli"},
{"lt","Nustatyti, kaip atlikti scenarijų su šio žingsnio"},
{"mn","Тогтоосон давхцуулах ажиллуулах бичиг нь энэ алхам"},
{"pl","Ustawić znacznik wykonać skrypt z tego kroku"},
{"ro","Setați marcajele executa script-ul cu acest pas"},
{"sl","Nastavite prekrivanje, da zaženete skript s tem korakom"},
{"es","Marcar ejecutar la secuencia de comandos con este paso"},
{"sv","Set overlay för att köra skriptet med det här steget"},
{"tr","Ayarlamak için işaretini gerçekleştirmek için komut dosyası ile bu adımı"},
{"vi","Đánh dấu thực hiện kích bản từ bước này"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"УстановитьПометкуВыполнятьСценарийСЭтогоШага",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СнятьПометкуВыполнятьСценарийСЭтогоШага",
{1,21,
{"ru","Снять пометку выполнять сценарий с этого шага"},
{"en","Disable flag for run scenario from that step"},
{"am","Unmark ቅድሚያ ቅድሚያ የሚሰጡዋቸውን ደረጃ"},
{"az","Çək пометку yerinə ssenari ilə bu addımdan"},
{"bg","Свали маркиране изпълнява сценарий с тази стъпка"},
{"et","Tühista märge teha skripti seda sammu"},
{"fr","Décocher exécuter le script avec cette étape"},
{"ka","Unmark, რათა run script ეს ნაბიჯი"},
{"de","Demarkieren Skript ausführen mit diesem Schritt"},
{"hu","Szüntesse meg, hogy fut egy forgatókönyvet, ezzel a lépéssel"},
{"it","Togliere la spunta eseguire lo script con questo passo"},
{"lv","Noņemt atzīmi izpildīt skriptu ar šo soli"},
{"lt","Atžymėti kaip atlikti scenarijų su šio žingsnio"},
{"mn","Unmark ажиллуулах скрипт энэ нь алхам"},
{"pl","Odznacz wykonać skrypt z tego kroku"},
{"ro","Scoateți mențiunea de a efectua un scenariu cu acest pas"},
{"sl","Odznači, da zaženete skript, s tem korakom"},
{"es","Desmarcar ejecutar la secuencia de comandos con este paso"},
{"sv","Avmarkera för att köra ett skript med detta steg"},
{"tr","İşaretini gerçekleştirmek için komut dosyası ile bu adımı"},
{"vi","Bỏ đánh dấu thực hiện kịch bản từ bước này"}
},
{1,21,
{"ru","Снять пометку выполнять сценарий с этого шага"},
{"en","Disable flag for run scenario from that step"},
{"am","Unmark ቅድሚያ ቅድሚያ የሚሰጡዋቸውን ደረጃ"},
{"az","Çək пометку yerinə ssenari ilə bu addımdan"},
{"bg","Свали маркиране изпълнява сценарий с тази стъпка"},
{"et","Tühista märge teha skripti seda sammu"},
{"fr","Décocher exécuter le script avec cette étape"},
{"ka","Unmark, რათა run script ეს ნაბიჯი"},
{"de","Demarkieren Skript ausführen mit diesem Schritt"},
{"hu","Szüntesse meg, hogy fut egy forgatókönyvet, ezzel a lépéssel"},
{"it","Togliere la spunta eseguire lo script con questo passo"},
{"lv","Noņemt atzīmi izpildīt skriptu ar šo soli"},
{"lt","Atžymėti kaip atlikti scenarijų su šio žingsnio"},
{"mn","Unmark ажиллуулах скрипт энэ нь алхам"},
{"pl","Odznacz wykonać skrypt z tego kroku"},
{"ro","Scoateți mențiunea de a efectua un scenariu cu acest pas"},
{"sl","Odznači, da zaženete skript, s tem korakom"},
{"es","Desmarcar ejecutar la secuencia de comandos con este paso"},
{"sv","Avmarkera för att köra ett skript med detta steg"},
{"tr","İşaretini gerçekleştirmek için komut dosyası ile bu adımı"},
{"vi","Bỏ đánh dấu thực hiện kịch bản từ bước này"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СнятьПометкуВыполнятьСценарийСЭтогоШага",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗапомнитьСостояниеФормыTestClient",
{1,2,
{"ru","Запомнить состояние формы test client"},
{"en","Remember status forms test client"}
},
{1,2,
{"ru","Запомнить состояние формы test client"},
{"en","Remember status forms test client"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗапомнитьСостояниеФормыTestClientКнопка",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗабытьСостояниеФормыTestClient",
{1,2,
{"ru","Забыть состояние формы test client"},
{"en","Forget status forms test client"}
},
{1,2,
{"ru","Забыть состояние формы test client"},
{"en","Forget status forms test client"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗабытьСостояниеФормыTestClientКнопка",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПолучитьИзмененияФормыGherkin",
{1,2,
{"ru","Получить изменения формы gherkin"},
{"en","To change the shape of the gherkin"}
},
{1,2,
{"ru","Получить изменения формы gherkin"},
{"en","To change the shape of the gherkin"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПолучитьИзмененияФормыGherkinКнопка",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПолучитьИзмененияФормыJSON",
{1,2,
{"ru","Получить изменения формы JSON"},
{"en","To change the shape of the JSON"}
},
{1,2,
{"ru","Получить изменения формы JSON"},
{"en","To change the shape of the JSON"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДляВызоваКонфигуратора",
{1,21,
{"ru","Для вызова конфигуратора"},
{"en","For invoke designer"},
{"am","ጋር invoke መጠቀም Configurator"},
{"az","Zəng etmək üçün конфигуратора"},
{"bg","За повикване на конфигуратора"},
{"et","Kõne конфигуратора"},
{"fr","Pour appeler le configurateur"},
{"ka","მოიყვანონ კბილის პასტა"},
{"de","Für den Aufruf Konfigurator"},
{"hu","Hivatkozhatnak a Konfigurátor"},
{"it","Per chiamare il configuratore"},
{"lv","Lai izsauktu конфигуратора"},
{"lt","Skambinti конфигуратора"},
{"mn","Ажиллуулах, Configurator"},
{"pl","Aby połączyć się konfiguratora"},
{"ro","Pentru a apela configuratorului"},
{"sl","Sklicujejo na Configurator"},
{"es","Para llamar el configurador"},
{"sv","Att åberopa Konfiguratorn"},
{"tr","Aramak için yapılandırıcı"},
{"vi","Để gọi ra bộ thiết kế"}
},
{1,21,
{"ru","Для вызова конфигуратора"},
{"en","For invoke designer"},
{"am","ጋር invoke መጠቀም Configurator"},
{"az","Zəng etmək üçün конфигуратора"},
{"bg","За повикване на конфигуратора"},
{"et","Kõne конфигуратора"},
{"fr","Pour appeler le configurateur"},
{"ka","მოიყვანონ კბილის პასტა"},
{"de","Für den Aufruf Konfigurator"},
{"hu","Hivatkozhatnak a Konfigurátor"},
{"it","Per chiamare il configuratore"},
{"lv","Lai izsauktu конфигуратора"},
{"lt","Skambinti конфигуратора"},
{"mn","Ажиллуулах, Configurator"},
{"pl","Aby połączyć się konfiguratora"},
{"ro","Pentru a apela configuratorului"},
{"sl","Sklicujejo na Configurator"},
{"es","Para llamar el configurador"},
{"sv","Att åberopa Konfiguratorn"},
{"tr","Aramak için yapılandırıcı"},
{"vi","Để gọi ra bộ thiết kế"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ДляВызоваКонфигуратора",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{19,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СвернутьДеревоДоФич",
{1,2,
{"ru","Свернуть дерево до фич"},
{"en","To collapse the tree to the feature"}
},
{1,2,
{"ru","Свернуть дерево до фич"},
{"en","To collapse the tree to the feature"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СвернутьДеревоДоФич",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{20,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СвернутьДеревоДоСценариев",
{1,2,
{"ru","Свернуть дерево до сценариев"},
{"en","To collapse the tree to scenarios"}
},
{1,2,
{"ru","Свернуть дерево до фич"},
{"en","To collapse the tree to the feature"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СвернутьДеревоДоСценариев",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{21,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПроверитьЧтоЗаписьВидеоБудетРаботать",
{1,21,
{"ru","Проверить что запись видео будет работать"},
{"en","Check video record"},
{"am","መሆኑን ለማረጋገጥ ቪዲዮ ቀረጻ በመስጠት"},
{"az","Yoxlamaq ki, video işləyəcək"},
{"bg","Провери какво запис на видео ще работи"},
{"et","Kontrollida, et video salvestamine töötab"},
{"fr","Vérifier que l'enregistrement de la vidéo fonctionnera"},
{"ka","გადაამოწმონ, რომ ვიდეო გადაღება იმუშავებს"},
{"de","Überprüfen, dass die Video-Aufnahme funktioniert"},
{"hu","Ellenőrizze, hogy a videofelvétel működik"},
{"it","Verificare che la registrazione video funziona"},
{"lv","Pārbaudīt, kas ieraksta video strādās"},
{"lt","Patikrinkite, kad vaizdo įrašas bus dirbti"},
{"mn","Гэдгийг батлахын тулд видео бичлэг ажиллах болно"},
{"pl","Sprawdzić, że nagrywanie wideo będzie działać"},
{"ro","Verificați că înregistrarea video va funcționa"},
{"sl","Preverite, da je video snemanje se bo delo"},
{"es","Comprobar que la entrada de vídeo funcione"},
{"sv","För att kontrollera att video-inspelning kommer att arbeta"},
{"tr","Kontrol kayıt video çalışacaktır"},
{"vi","Kiểm tra, bản ghi video sẽ làm việc"}
},
{1,21,
{"ru","Проверить что запись видео будет работать"},
{"en","Check video record"},
{"am","መሆኑን ለማረጋገጥ ቪዲዮ ቀረጻ በመስጠት"},
{"az","Yoxlamaq ki, video işləyəcək"},
{"bg","Провери какво запис на видео ще работи"},
{"et","Kontrollida, et video salvestamine töötab"},
{"fr","Vérifier que l'enregistrement de la vidéo fonctionnera"},
{"ka","გადაამოწმონ, რომ ვიდეო გადაღება იმუშავებს"},
{"de","Überprüfen, dass die Video-Aufnahme funktioniert"},
{"hu","Ellenőrizze, hogy a videofelvétel működik"},
{"it","Verificare che la registrazione video funziona"},
{"lv","Pārbaudīt, kas ieraksta video strādās"},
{"lt","Patikrinkite, kad vaizdo įrašas bus dirbti"},
{"mn","Гэдгийг батлахын тулд видео бичлэг ажиллах болно"},
{"pl","Sprawdzić, że nagrywanie wideo będzie działać"},
{"ro","Verificați că înregistrarea video va funcționa"},
{"sl","Preverite, da je video snemanje se bo delo"},
{"es","Comprobar que la entrada de vídeo funcione"},
{"sv","För att kontrollera att video-inspelning kommer att arbeta"},
{"tr","Kontrol kayıt video çalışacaktır"},
{"vi","Kiểm tra, bản ghi video sẽ làm việc"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПроверитьЧтоЗаписьВидеоБудетРаботать",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьНастройки",
{1,21,
{"ru","Сохранить настройки"},
{"en","Save settings"},
{"am","የሚለውን ትዕዛዝ ጋር."},
{"az","Komanda qəbulu"},
{"bg","Екипът на запазване на настройките"},
{"et","Käsk salvesta seaded"},
{"fr","La commande enregistrer les paramètres"},
{"ka","ბრძანება გადარჩენა პარამეტრები"},
{"de","Der Befehl Einstellungen speichern"},
{"hu","A parancsot a beállítások mentéséhez"},
{"it","La squadra di salvare le impostazioni"},
{"lv","Komanda saglabāt iestatījumus"},
{"lt","Komanda išsaugoti nustatymus"},
{"mn","Тушаалыг хадгалах тохиргоо"},
{"pl","Polecenie zapisz ustawienia"},
{"ro","Echipa de salvare setări"},
{"sl","Ukaz, da shranite nastavitve"},
{"es","El comando guardar configuración"},
{"sv","Kommandot för att spara inställningarna"},
{"tr","Takım ayarları kaydet"},
{"vi","Lệnh lưu cài đặt"}
},
{1,21,
{"ru","Сохранить настройки"},
{"en","Save settings"},
{"am","የሚለውን ትዕዛዝ ጋር."},
{"az","Komanda qəbulu"},
{"bg","Екипът на запазване на настройките"},
{"et","Käsk salvesta seaded"},
{"fr","La commande enregistrer les paramètres"},
{"ka","ბრძანება გადარჩენა პარამეტრები"},
{"de","Der Befehl Einstellungen speichern"},
{"hu","A parancsot a beállítások mentéséhez"},
{"it","La squadra di salvare le impostazioni"},
{"lv","Komanda saglabāt iestatījumus"},
{"lt","Komanda išsaugoti nustatymus"},
{"mn","Тушаалыг хадгалах тохиргоо"},
{"pl","Polecenie zapisz ustawienia"},
{"ro","Echipa de salvare setări"},
{"sl","Ukaz, da shranite nastavitve"},
{"es","El comando guardar configuración"},
{"sv","Kommandot för att spara inställningarna"},
{"tr","Takım ayarları kaydet"},
{"vi","Lệnh lưu cài đặt"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаСохранитьНастройки",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{23,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНастройкиПоУмолчанию",
{1,21,
{"ru","Загрузить настройки по умолчанию"},
{"en","Load default settings"},
{"am","የሚሰጡዋቸውን ስለጀመሩ ቅድሚያ የሚሰጡዋቸውን"},
{"az","Parametrləri yükləmək default"},
{"bg","Изтегляне на настройки по подразбиране"},
{"et","Alla laadida vaikimisi seadete"},
{"fr","Charger les paramètres par défaut"},
{"ka","To load default პარამეტრები"},
{"de","Die Standardeinstellungen geladen"},
{"hu","Az alapértelmezett beállítások betöltéséhez,"},
{"it","Caricare le impostazioni di default"},
{"lv","Lejupielādēt noklusējuma iestatījumus"},
{"lt","Atsisiųsti nustatymus"},
{"mn","Дуудахын тулд анхдагч тохиргоо"},
{"pl","Załadować ustawienia domyślne"},
{"ro","Încărcați setările implicite"},
{"sl","Za nalaganje privzetih nastavitev"},
{"es","Cargar la configuración predeterminada"},
{"sv","För att ladda standardinställningarna"},
{"tr","Varsayılan ayarları yüklemek"},
{"vi","Tải tùy chỉnh mặc định"}
},
{1,21,
{"ru","Загрузить настройки по умолчанию"},
{"en","Load default settings"},
{"am","የሚሰጡዋቸውን ስለጀመሩ ቅድሚያ የሚሰጡዋቸውን"},
{"az","Parametrləri yükləmək default"},
{"bg","Изтегляне на настройки по подразбиране"},
{"et","Alla laadida vaikimisi seadete"},
{"fr","Charger les paramètres par défaut"},
{"ka","To load default პარამეტრები"},
{"de","Die Standardeinstellungen geladen"},
{"hu","Az alapértelmezett beállítások betöltéséhez,"},
{"it","Caricare le impostazioni di default"},
{"lv","Lejupielādēt noklusējuma iestatījumus"},
{"lt","Atsisiųsti nustatymus"},
{"mn","Дуудахын тулд анхдагч тохиргоо"},
{"pl","Załadować ustawienia domyślne"},
{"ro","Încărcați setările implicite"},
{"sl","Za nalaganje privzetih nastavitev"},
{"es","Cargar la configuración predeterminada"},
{"sv","För att ladda standardinställningarna"},
{"tr","Varsayılan ayarları yüklemek"},
{"vi","Tải tùy chỉnh mặc định"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНастройкиПоУмолчанию",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{24,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьКлиентовТестирования",
{1,21,
{"ru","Сохранить"},
{"en","Save"},
{"am","አስቀምጥ"},
{"az","Saxlamaq"},
{"bg","Запази"},
{"et","Salvesta"},
{"fr","Enregistrer"},
{"ka","შენახვა"},
{"de","Behalten"},
{"hu","Mentés"},
{"it","Mantenere"},
{"lv","Saglabāt"},
{"lt","Įrašyti"},
{"mn","Хадгалах"},
{"pl","Zapisz"},
{"ro","Salvați"},
{"sl","Shranjevanje"},
{"es","Guardar"},
{"sv","Spara"},
{"tr","Kaydet"},
{"vi","Lưu lại"}
},
{1,2,
{"ru","Сохранить клиентов тестирования"},
{"en","Keep customers testing"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СохранитьКлиентовТестированияКоманда",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПодключитьВыбранногоКлиентаТестирования",
{1,21,
{"ru","Подключить"},
{"en","Connect"},
{"am","ጋር"},
{"az","Əlaqə"},
{"bg","Свържете"},
{"et","Ühendada"},
{"fr","Brancher"},
{"ka","დაკავშირება"},
{"de","Verbinden"},
{"hu","Csatlakozás"},
{"it","Collegare"},
{"lv","Pievienot"},
{"lt","Prisijungti"},
{"mn","Холбох"},
{"pl","Podłączyć"},
{"ro","Conectați"},
{"sl","Za povezavo"},
{"es","Conectar"},
{"sv","För att ansluta"},
{"tr","Bağlamak"},
{"vi","Kết nối"}
},
{1,21,
{"ru","Подключить выбранного клиента тестирования"},
{"en","Connect the selected test client"},
{"am","ጋር የተመረጠውን ደንበኛ ሙከራ"},
{"az","Əlaqə seçilmiş müştərinin test"},
{"bg","Свържете избрания от клиента тестване"},
{"et","Ühendada valitud kliendi test"},
{"fr","Connecter le client de test"},
{"ka","დაკავშირება შერჩეული მომხმარებლის ტესტირება"},
{"de","Verbinden Sie den ausgewählten Kunden testen"},
{"hu","Csatlakoztassa a kiválasztott ügyfél vizsgálat"},
{"it","Collegare il cliente selezionato test"},
{"lv","Pievienot izvēlētā klienta testēšana"},
{"lt","Prijungti pasirinkto kliento bandymai"},
{"mn","To connect сонгосон хэрэглэгчийн шинжилгээ"},
{"pl","Podłączyć wybranego klienta testowania"},
{"ro","Pentru a conecta clientul selectat de testare"},
{"sl","Za povezavo na izbrano stranko testiranje"},
{"es","Conectar el cliente seleccionado pruebas"},
{"sv","För att ansluta den valda kunden testning"},
{"tr","Bağlan seçili müşteri test"},
{"vi","Kết nối máy trạm thử nghiệm đã chọn"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПодключитьВыбранногоКлиентаТестирования",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НачатьЗаписьДействийПользователяВВыбранномКлиентеТестирования",
{1,2,
{"ru","Начать запись"},
{"en","Start recording"}
},
{1,21,
{"ru","Начать запись действий пользователя в выбранном клиенте тестирования"},
{"en","Start recording the user actions of the selected test client"},
{"am","አዳዲስ ግምገማዎች ቀረጻ መጠቀም እርምጃዎች ነው polzovatelya ውስጥ የተመረጡ ቅድሚያ የታዘዘ"},
{"az","Yazmağa başlamaq fəaliyyət пользлователя seçilmiş müştəri test"},
{"bg","Започнете записа действие пользлователя в избрания от клиента тестване"},
{"et","Salvestamise alustamiseks tegevus пользлователя valitud kliendi test"},
{"fr","Commencer l'enregistrement de l'action пользлователя sélectionné le client de test"},
{"ka","ჩაწერის დაწყება ქმედებები polzovatelya შერჩეული ტესტი კლიენტი"},
{"de","Starten Sie die Aufnahme Aktion пользлователя in der von Ihnen gewählten Client testen"},
{"hu","Indítsa el a felvételt az intézkedések polzovatelya a kiválasztott vizsgálati ügyfél"},
{"it","Iniziare a registrare l'azione пользлователя selezionato client di test"},
{"lv","Sākt ierakstīšanu darbības пользлователя izvēlētajā klientu testēšana"},
{"lt","Pradėti filmuoti veiksmų пользлователя pasirinkto kliento bandymai"},
{"mn","Бичиж эхлэх үйл ажиллагааг polzovatelya сонгосон туршилтын үйлчлүүлэгч"},
{"pl","Rozpocząć nagrywanie czynności пользлователя w wybranym kliencie testowania"},
{"ro","Începe înregistrarea acțiunilor пользлователя selectat un client de testare"},
{"sl","Začetek snemanja dejanja polzovatelya v izbrani testni odjemalec"},
{"es","Iniciar la grabación de la acción пользлователя en el cliente de prueba"},
{"sv","Starta inspelningen åtgärder polzovatelya i det valda testet klienten"},
{"tr","Kaydı başlatmak eylem пользлователя seçilen istemci sınama"},
{"vi","Bắt đầu ghi thao tác người sử dụng trong máy trạm thử nghiệm đã chọn"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"НачатьЗаписьДействийПользователяВВыбранномКлиентеТестирования",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{27,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОтключитьВыбранногоКлиентаТестирования",
{1,21,
{"ru","Отключить"},
{"en","Disconnect"},
{"am","አንድ"},
{"az","Aradan"},
{"bg","Изключите"},
{"et","Välja lülitada"},
{"fr","Désactiver"},
{"ka","გამორთე"},
{"de","Deaktivieren Sie die"},
{"hu","Letiltása"},
{"it","Disattivare"},
{"lv","Izslēgt"},
{"lt","Išjungti"},
{"mn","Идэвхгүй"},
{"pl","Wyłączyć"},
{"ro","Pentru a dezactiva"},
{"sl","Onemogočite"},
{"es","Desconectar"},
{"sv","Inaktivera"},
{"tr","Kapatmak"},
{"vi","Ngắt"}
},
{1,21,
{"ru","Отключить выбранного клиента тестирования"},
{"en","Disconnect the selected test client"},
{"am","አንድ የተመረጠውን ደንበኛ ሙከራ"},
{"az","Aradan seçilmiş müştərinin test"},
{"bg","Изключване на избрания от клиента тестване"},
{"et","Keela valitud kliendi test"},
{"fr","Désactiver le client de test"},
{"ka","გამორთე შერჩეული მომხმარებლის ტესტირება"},
{"de","Deaktivieren Sie den ausgewählten Kunden testen"},
{"hu","Tiltsa le a kiválasztott ügyfél vizsgálat"},
{"it","Disattivare il cliente selezionato test"},
{"lv","Izslēgt izvēlēto klienta testēšana"},
{"lt","Išjungti pasirinktą kliento bandymai"},
{"mn","Идэвхгүй сонгосон хэрэглэгчийн шинжилгээ"},
{"pl","Wyłączyć wybranego klienta testowania"},
{"ro","Pentru a dezactiva clientul selectat de testare"},
{"sl","Želite onemogočiti izbrano stranko testiranje"},
{"es","Deshabilitar el cliente seleccionado pruebas"},
{"sv","Inaktivera den valda kunden testning"},
{"tr","Devre dışı bırak seçili müşteri test"},
{"vi","Ngắt máy trạm thử nghiệm đã chọn"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ОтключитьВыбранногоКлиентаТестирования",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПреобразоватьИсходныйXML",
{1,21,
{"ru","Преобразовать исходный XML"},
{"en","Convert XML"},
{"am","ተጠቃሚ ምንጭ ይታያል"},
{"az","Çevirmək mənbə XML"},
{"bg","Преобразуване на изходния XML"},
{"et","Teisendada XML-allikas"},
{"fr","Pour convertir la source XML"},
{"ka","გარდაქმნას წყარო XML"},
{"de","Das XML konvertieren"},
{"hu","Átalakítani a forrás XML"},
{"it","Convertire XML di origine"},
{"lv","Konvertēt avota XML"},
{"lt","Konvertuoti XML šaltinio"},
{"mn","Хөрвүүлэх эх XML"},
{"pl","Konwertuj źródłowego XML"},
{"ro","Pentru a converti sursă XML"},
{"sl","Če želite pretvoriti vir XML"},
{"es","Convertir XML de origen"},
{"sv","För att omvandla XML-källa"},
{"tr","Kaynak XML dönüştürmek"},
{"vi","Chuyển đổi nguồn XML"}
},
{1,21,
{"ru","Преобразовать исходный XML"},
{"en","Convert XML"},
{"am","ተጠቃሚ ምንጭ ይታያል"},
{"az","Çevirmək mənbə XML"},
{"bg","Преобразуване на изходния XML"},
{"et","Teisendada XML-allikas"},
{"fr","Pour convertir la source XML"},
{"ka","გარდაქმნას წყარო XML"},
{"de","Das XML konvertieren"},
{"hu","Átalakítani a forrás XML"},
{"it","Convertire XML di origine"},
{"lv","Konvertēt avota XML"},
{"lt","Konvertuoti XML šaltinio"},
{"mn","Хөрвүүлэх эх XML"},
{"pl","Konwertuj źródłowego XML"},
{"ro","Pentru a converti sursă XML"},
{"sl","Če želite pretvoriti vir XML"},
{"es","Convertir XML de origen"},
{"sv","För att omvandla XML-källa"},
{"tr","Kaynak XML dönüştürmek"},
{"vi","Chuyển đổi nguồn XML"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПреобразоватьИсходныйXML",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{32,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПодготовитьСценарийКВыполнению",
{1,21,
{"ru","Подготовить сценарий к выполнению"},
{"en","Prepare scenario for run"},
{"am","ደረጃ ስክሪፕት በአፈጻጸም ደረጃ አልተሰጠውም"},
{"az","Hazırlamaq üçün script yerinə yetirilməsinə"},
{"bg","Подготви сценарий за изпълнение"},
{"et","Valmistada skripti täitmist"},
{"fr","Préparer un script à exécuter"},
{"ka","მომზადება სკრიპტის შესრულების"},
{"de","Bereiten Sie ein Skript zur Ausführung"},
{"hu","Készítsen szkript végrehajtása"},
{"it","Preparare uno script per l'esecuzione di"},
{"lv","Lai sagatavotu skriptu izpildei"},
{"lt","Parengti scenarijų įgyvendinti"},
{"mn","Бэлтгэх бичиг гүйцэтгэл"},
{"pl","Przygotować skrypt do wykonania"},
{"ro","Pentru a pregăti un scenariu la executarea"},
{"sl","Pripravimo skript za izvajanje"},
{"es","Preparar una secuencia de comandos a la aplicación de"},
{"sv","Förbereder manuset för utförande"},
{"tr","Hazırlamak için bir komut dosyası yürütme"},
{"vi","Chuẩn bị kịch bản chờ thực hiện"}
},
{1,21,
{"ru","Подготовить сценарий к выполнению"},
{"en","Prepare scenario for run"},
{"am","ደረጃ ስክሪፕት በአፈጻጸም ደረጃ አልተሰጠውም"},
{"az","Hazırlamaq üçün script yerinə yetirilməsinə"},
{"bg","Подготви сценарий за изпълнение"},
{"et","Valmistada skripti täitmist"},
{"fr","Préparer un script à exécuter"},
{"ka","მომზადება სკრიპტის შესრულების"},
{"de","Bereiten Sie ein Skript zur Ausführung"},
{"hu","Készítsen szkript végrehajtása"},
{"it","Preparare uno script per l'esecuzione di"},
{"lv","Lai sagatavotu skriptu izpildei"},
{"lt","Parengti scenarijų įgyvendinti"},
{"mn","Бэлтгэх бичиг гүйцэтгэл"},
{"pl","Przygotować skrypt do wykonania"},
{"ro","Pentru a pregăti un scenariu la executarea"},
{"sl","Pripravimo skript za izvajanje"},
{"es","Preparar una secuencia de comandos a la aplicación de"},
{"sv","Förbereder manuset för utförande"},
{"tr","Hazırlamak için bir komut dosyası yürütme"},
{"vi","Chuẩn bị kịch bản chờ thực hiện"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПодготовитьСценарийКВыполнению",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{33,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьФичу",
{1,2,
{"ru","Выполнить фичу"},
{"en","Start feature"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,116,24},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьФичуФорма",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{34,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу1",
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу1",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{35,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу2",
{1,2,
{"ru","Загрузить недавнюю фичу2"},
{"en","Download recent feature2"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу2",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{36,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу3",
{1,2,
{"ru","Загрузить недавнюю фичу3"},
{"en","Download recent feature3"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу3",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{37,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу4",
{1,2,
{"ru","Загрузить недавнюю фичу4"},
{"en","Download recent feature4"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу4",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{38,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу5",
{1,2,
{"ru","Загрузить недавнюю фичу5"},
{"en","Download recent feature5"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу5",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{39,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу6",
{1,2,
{"ru","Загрузить недавнюю фичу6"},
{"en","Download recent feature6"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу6",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{40,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу7",
{1,2,
{"ru","Загрузить недавнюю фичу7"},
{"en","Download recent feature7"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу7",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{41,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу8",
{1,2,
{"ru","Загрузить недавнюю фичу8"},
{"en","Download recent feature8"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу8",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНедавнююФичу9",
{1,2,
{"ru","Загрузить недавнюю фичу9"},
{"en","Download recent feature9"}
},
{1,2,
{"ru","Загрузить недавнюю фичу1"},
{"en","Download recent feature1"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНедавнююФичу9",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{43,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьИзвестныйШаг",
{1,21,
{"ru","Добавить известный шаг"},
{"en","Known steps"},
{"am","ያክሉ የታወቀ ደረጃ"},
{"az","Əlavə tanınan addım"},
{"bg","Добави известен стъпка"},
{"et","Lisa tuntud samm"},
{"fr","Ajouter le célèbre étape"},
{"ka","რჩეულებში ცნობილია ნაბიჯი"},
{"de","Hinzufügen der berühmte Schritt"},
{"hu","Adjunk hozzá egy ismert lépés"},
{"it","Aggiungere il famoso passo"},
{"lv","Pievienot zināms solis"},
{"lt","Pridėti žinomas žingsnis"},
{"mn","Нэмэх нь мэдэгдэж алхам"},
{"pl","Dodaj znany krok"},
{"ro","Adauga cunoscut pas"},
{"sl","Dodajanje znan korak"},
{"es","Agregar el famoso paso"},
{"sv","Lägg till en känd steg"},
{"tr","Eklemek ünlü adım"},
{"vi","Thêm một bước nhất định"}
},
{1,21,
{"ru","Добавить известный шаг"},
{"en","Known steps"},
{"am","ያክሉ የታወቀ ደረጃ"},
{"az","Əlavə tanınan addım"},
{"bg","Добави известен стъпка"},
{"et","Lisa tuntud samm"},
{"fr","Ajouter le célèbre étape"},
{"ka","რჩეულებში ცნობილია ნაბიჯი"},
{"de","Hinzufügen der berühmte Schritt"},
{"hu","Adjunk hozzá egy ismert lépés"},
{"it","Aggiungere il famoso passo"},
{"lv","Pievienot zināms solis"},
{"lt","Pridėti žinomas žingsnis"},
{"mn","Нэмэх нь мэдэгдэж алхам"},
{"pl","Dodaj znany krok"},
{"ro","Adauga cunoscut pas"},
{"sl","Dodajanje znan korak"},
{"es","Agregar el famoso paso"},
{"sv","Lägg till en känd steg"},
{"tr","Eklemek ünlü adım"},
{"vi","Thêm một bước nhất định"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ДобавитьИзвестныйШаг",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{44,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьДанныйСценарийСТекущегоШага",
{1,3,
{"ru","Выполнить данный сценарий с текущего шага"},
{"en","Run this script from current step"},
{"vi","Chạy kịch bản này với sự hiện bước"}
},
{1,3,
{"ru","Выполнить данный сценарий с текущего шага"},
{"en","Run this script from current step"},
{"vi","Chạy kịch bản này với sự hiện bước"}
},
{0,
{0,
{"B",1},0}
},
{0,116,8},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьДанныйСценарийСТекущегоШагаФорма",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{45,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением",
{1,2,
{"ru","Выполнить данный сценарий с текущего шага и продолжить дальше"},
{"en","Run this script from current step and continue"}
},
{1,3,
{"ru","Выполнить данный сценарий с текущего шага"},
{"en","Run this script from current step"},
{"vi","Chạy kịch bản này với sự hiện bước"}
},
{0,
{0,
{"B",1},0}
},
{0,116,12},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьДанныйСценарийСТекущегоШагаСПродолжениемФорма",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{46,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Брейкпоинт",
{1,21,
{"ru","Брейкпоинт"},
{"en","Breakpoint"},
{"am","ወደ breakpoint"},
{"az","Брейкпоинт"},
{"bg","Брейкпоинт"},
{"et","Брейкпоинт"},
{"fr","Брейкпоинт"},
{"ka","""Breakpoint"},
{"de","Haltepunkt"},
{"hu","A töréspont"},
{"it","Брейкпоинт"},
{"lv","Брейкпоинт"},
{"lt","Брейкпоинт"},
{"mn","Энэ breakpoint"},
{"pl","Брейкпоинт"},
{"ro","Брейкпоинт"},
{"sl","Prekinitvena točka"},
{"es","Брейкпоинт"},
{"sv","Brytpunkten"},
{"tr","Брейкпоинт"},
{"vi","Các điểm dừng"}
},
{1,21,
{"ru","Брейкпоинт"},
{"en","Breakpoint"},
{"am","ወደ breakpoint"},
{"az","Брейкпоинт"},
{"bg","Брейкпоинт"},
{"et","Брейкпоинт"},
{"fr","Брейкпоинт"},
{"ka","""Breakpoint"},
{"de","Haltepunkt"},
{"hu","A töréspont"},
{"it","Брейкпоинт"},
{"lv","Брейкпоинт"},
{"lt","Брейкпоинт"},
{"mn","Энэ breakpoint"},
{"pl","Брейкпоинт"},
{"ro","Брейкпоинт"},
{"sl","Prekinitvena točka"},
{"es","Брейкпоинт"},
{"sv","Brytpunkten"},
{"tr","Брейкпоинт"},
{"vi","Các điểm dừng"}
},
{0,
{0,
{"B",1},0}
},
{0,120,0},
{4,0,
{0},"",-1,-1,1,0,""},"Брейкпоинт",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{47,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"БрейкпоинтУбратьВсе",
{1,21,
{"ru","Убрать все брейкпоинты"},
{"en","Remove all breakpoints"},
{"am","በይፋ breakpoints"},
{"az","Clear bütün брейкпоинты"},
{"bg","Изтрий всички брейкпоинты"},
{"et","Kustuta kõik брейкпоинты"},
{"fr","Supprimer tous les брейкпоинты"},
{"ka","ამოიღონ ყველა breakpoints"},
{"de","Entfernen Sie alle брейкпоинты"},
{"hu","Távolítsa el az összes töréspontok"},
{"it","Rimuovere tutti брейкпоинты"},
{"lv","Notīrīt visu брейкпоинты"},
{"lt","Ištrinti visas брейкпоинты"},
{"mn","Бүх устгах нь breakpoints"},
{"pl","Usunąć wszystkie брейкпоинты"},
{"ro","Pentru a elimina toate брейкпоинты"},
{"sl","Odstranite vse mejne vrednosti"},
{"es","Eliminar todos los брейкпоинты"},
{"sv","Ta bort alla brytpunkter"},
{"tr","Kaldırmak için брейкпоинты"},
{"vi","Loại bỏ tất cả các điểm ngắt"}
},
{1,21,
{"ru","Брейкпоинт"},
{"en","Breakpoint"},
{"am","ወደ breakpoint"},
{"az","Брейкпоинт"},
{"bg","Брейкпоинт"},
{"et","Брейкпоинт"},
{"fr","Брейкпоинт"},
{"ka","""Breakpoint"},
{"de","Haltepunkt"},
{"hu","A töréspont"},
{"it","Брейкпоинт"},
{"lv","Брейкпоинт"},
{"lt","Брейкпоинт"},
{"mn","Энэ breakpoint"},
{"pl","Брейкпоинт"},
{"ro","Брейкпоинт"},
{"sl","Prekinitvena točka"},
{"es","Брейкпоинт"},
{"sv","Brytpunkten"},
{"tr","Брейкпоинт"},
{"vi","Các điểm dừng"}
},
{0,
{0,
{"B",1},0}
},
{0,120,8},
{4,0,
{0},"",-1,-1,1,0,""},"БрейкпоинтУбратьВсе",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{48,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьОдинШаг",
{1,21,
{"ru","Выполнить один шаг"},
{"en","Run scenarios"},
{"am","አንድ ነጠላ ደረጃ"},
{"az","Həyata bir addım"},
{"bg","Пусни една стъпка"},
{"et","Teha üks samm"},
{"fr","Effectuer une étape"},
{"ka","შეასრულოს ერთი ნაბიჯი"},
{"de","Einen Schritt ausführen"},
{"hu","Végre is egyetlen lépéssel"},
{"it","Eseguire un passo"},
{"lv","Palaist vienu soli"},
{"lt","Atlikti vienas žingsnis"},
{"mn","Хийх нэг алхам"},
{"pl","Wykonać jeden krok"},
{"ro","Executa un pas"},
{"sl","Za opravljanje enem koraku"},
{"es","Seguir el paso uno"},
{"sv","För att utföra ett enda steg"},
{"tr","Gerçekleştirmek için bir adım"},
{"vi","Thực hiện một bước"}
},
{1,21,
{"ru","Выполнить сценарии"},
{"en","Run scripts"},
{"am","ቅድሚያ የሚሰጡዋቸውን"},
{"az","İcra ssenarilər"},
{"bg","Изпълнение на скриптове"},
{"et","Käivita stsenaarium"},
{"fr","Exécuter les scripts"},
{"ka","აწარმოებს სკრიპტები"},
{"de","Ausführen von Skripts"},
{"hu","A scriptek futtatását"},
{"it","Eseguire gli script"},
{"lv","Izpildīt skriptus"},
{"lt","Vykdyti scenarijus"},
{"mn","Ажиллуулах скриптүүд"},
{"pl","Uruchom skrypty"},
{"ro","Executa script-uri"},
{"sl","Dovolite zaganjanje skriptov"},
{"es","Ejecutar secuencias de comandos"},
{"sv","Att köra skript"},
{"tr","Çalıştır komut"},
{"vi","Thực hiện kịch bản"}
},
{0,
{0,
{"B",1},0}
},
{0,122,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьОдинШагФорма",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{49,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СброситьКешИзвестныхStepDefinition",
{1,21,
{"ru","Сбросить кеш известных step definition"},
{"en","Clear cache"},
{"am","የሚሰጡዋቸውን ስለጀመሩ ቅድሚያ ቅድሚያ የሚሰጡዋቸውን ይታያል"},
{"az","Yenidən кеш tanınmış step definition"},
{"bg","Нулиране на кеша на известни step definition"},
{"et","Nulli vahemälu tuntud step definition"},
{"fr","Réinitialiser le cache connus step definition"},
{"ka","აღადგინოთ cache, ცნობილია ნაბიჯი განმარტება"},
{"de","Zurücksetzen der Cache der bekannten step-definition"},
{"hu","Állítsa vissza a cache, ismert lépés meghatározása"},
{"it","Resettare la cache famosi step definition"},
{"lv","Zaudēt kešatmiņu zināms step izšķirtspējas"},
{"lt","Anuliuoti кеш žinomų step definition"},
{"mn","Анхны байдалд нь кэш, алдартай алхам тодорхойлолт"},
{"pl","Wyczyść pamięć podręczną znanych step definition"},
{"ro","Piardă în cache cunoscute step definition"},
{"sl","Ponastavi predpomnilnik, ki je znan po korak opredelitev"},
{"es","Restablecer la caché de conocidos paso definition"},
{"sv","För att nollställa cachen, känd för steg definition"},
{"tr","Reset cash bilinen step definition"},
{"vi","Xóa bộ nhớ đệm"}
},
{1,21,
{"ru","Сбросить кеш известных step definition"},
{"en","Clear cache"},
{"am","የሚሰጡዋቸውን ስለጀመሩ ቅድሚያ ቅድሚያ የሚሰጡዋቸውን ይታያል"},
{"az","Yenidən кеш tanınmış step definition"},
{"bg","Нулиране на кеша на известни step definition"},
{"et","Nulli vahemälu tuntud step definition"},
{"fr","Réinitialiser le cache connus step definition"},
{"ka","აღადგინოთ cache, ცნობილია ნაბიჯი განმარტება"},
{"de","Zurücksetzen der Cache der bekannten step-definition"},
{"hu","Állítsa vissza a cache, ismert lépés meghatározása"},
{"it","Resettare la cache famosi step definition"},
{"lv","Zaudēt kešatmiņu zināms step izšķirtspējas"},
{"lt","Anuliuoti кеш žinomų step definition"},
{"mn","Анхны байдалд нь кэш, алдартай алхам тодорхойлолт"},
{"pl","Wyczyść pamięć podręczną znanych step definition"},
{"ro","Piardă în cache cunoscute step definition"},
{"sl","Ponastavi predpomnilnik, ki je znan po korak opredelitev"},
{"es","Restablecer la caché de conocidos paso definition"},
{"sv","För att nollställa cachen, känd för steg definition"},
{"tr","Reset cash bilinen step definition"},
{"vi","Xóa bộ nhớ đệm"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СброситьКешИзвестныхStepDefinition",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{50,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьКаталогФичи",
{1,2,
{"ru","Открыть каталог фичи"},
{"en","Open features catalog"}
},
{1,2,
{"ru","Открыть каталог фичи"},
{"en","Open features catalog"}
},
{0,
{0,
{"B",1},0}
},
{0,118,8},
{4,0,
{0},"",-1,-1,1,0,""},"ОткрытьКаталогФичи",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{51,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПерезагрузитьИВыполнитьДанныйСценарий",
{1,2,
{"ru","Перезагрузить и выполнить данный сценарий"},
{"en","To reboot and execute the script"}
},
{1,2,
{"ru","Перезагрузить и выполнить данный сценарий"},
{"en","To reboot and execute the script"}
},
{0,
{0,
{"B",1},0}
},
{0,117,16},
{4,0,
{0},"",-1,-1,1,0,""},"ПерезагрузитьИВыполнитьДанныйСценарийФорма",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{52,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПриостановитьЗаписьДействийПользователя",
{1,2,
{"ru","Приостановить запись действий пользователя"},
{"en","To pause the recording of user actions"}
},
{1,2,
{"ru","Приостановить запись действий пользователя"},
{"en","To pause the recording of user actions"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПриостановитьЗаписьДействийПользователя",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{53,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПродолжитьЗаписьДействийПользователя",
{1,2,
{"ru","Продолжить запись действий пользователя"},
{"en","To continue recording user actions"}
},
{1,2,
{"ru","Продолжить запись действий пользователя"},
{"en","To continue recording user actions"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПродолжитьЗаписьДействийПользователя",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{54,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСкрытьПутьКФайлу",
{1,2,
{"ru","Показать скрыть путь к файлу"},
{"en","Show hide the file path"}
},
{1,2,
{"ru","Показать скрыть путь к файлу"},
{"en","Show hide the file path"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСкрытьПутьКФайлу",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{55,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСкрытьСнипет",
{1,2,
{"ru","Показать скрыть снипет"},
{"en","Show hide snippet"}
},
{1,2,
{"ru","Показать скрыть снипет"},
{"en","Show hide snippet"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСкрытьСнипет",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{56,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСкрытьАдресСнипета",
{1,2,
{"ru","Показать скрыть адрес снипета"},
{"en","Show hide the address of the snippet"}
},
{1,2,
{"ru","Показать скрыть адрес снипета"},
{"en","Show hide the address of the snippet"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСкрытьАдресСнипета",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{57,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСкрытьСтрокаРеальнойПроцедуры",
{1,2,
{"ru","Показать скрыть строка реальной процедуры"},
{"en","Show hide line is a real procedure"}
},
{1,2,
{"ru","Показать скрыть строка реальной процедуры"},
{"en","Show hide line is a real procedure"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСкрытьСтрокаРеальнойПроцедуры",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{58,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСкрытьВсеКолонки",
{1,2,
{"ru","Показать/Скрыть все колонки"},
{"en","Show/Hide all columns"}
},
{1,2,
{"ru","Показать скрыть все колонки"},
{"en","Show hide all columns"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСкрытьВсеКолонки",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{59,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"РедактироватьТаблицуТекст",
{1,21,
{"ru","Редактировать таблицу текст"},
{"en","Edit gherkin table"},
{"am","መገለጫዎ ጋር. ጽሑፍ"},
{"az","Redaktə masa mətni"},
{"bg","Редактирай таблица текст"},
{"et","Tabelit redigeerida teksti"},
{"fr","Modifier le tableau du texte"},
{"ka","რედაქტირება მაგიდა ტექსტი"},
{"de","Bearbeiten von Text Tabelle"},
{"hu","Szerkeszteni a táblázat szöveg"},
{"it","Modificare una tabella di testo"},
{"lv","Labot tabulu teksts"},
{"lt","Redaguoti lentelę tekstas"},
{"mn","Засварлах хүснэгт текст"},
{"pl","Edycja tabeli tekst"},
{"ro","Edita tabelul de text"},
{"sl","Če želite urediti tabelo besedilo"},
{"es","Editar una tabla de texto"},
{"sv","För att redigera tabellen text"},
{"tr","Tablo düzenle metin"},
{"vi","Soạn bảng nội dung"}
},
{1,21,
{"ru","Редактировать таблицу текст"},
{"en","Edit gherkin table"},
{"am","መገለጫዎ ጋር. ጽሑፍ"},
{"az","Redaktə masa mətni"},
{"bg","Редактирай таблица текст"},
{"et","Tabelit redigeerida teksti"},
{"fr","Modifier le tableau du texte"},
{"ka","რედაქტირება მაგიდა ტექსტი"},
{"de","Bearbeiten von Text Tabelle"},
{"hu","Szerkeszteni a táblázat szöveg"},
{"it","Modificare una tabella di testo"},
{"lv","Labot tabulu teksts"},
{"lt","Redaguoti lentelę tekstas"},
{"mn","Засварлах хүснэгт текст"},
{"pl","Edycja tabeli tekst"},
{"ro","Edita tabelul de text"},
{"sl","Če želite urediti tabelo besedilo"},
{"es","Editar una tabla de texto"},
{"sv","För att redigera tabellen text"},
{"tr","Tablo düzenle metin"},
{"vi","Soạn bảng nội dung"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"РедактироватьТаблицуТекст",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{60,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСкрытьИДСтроки",
{1,2,
{"ru","Показать скрыть ИД строки"},
{"en","Show hide the string ID"}
},
{1,2,
{"ru","Показать скрыть ИДСтроки"},
{"en","Show hide Instroke"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСкрытьИДСтроки",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{61,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьПроизвольныйКод",
{1,2,
{"ru","Выполнить произвольный код"},
{"en","Execute arbitrary code"}
},
{1,2,
{"ru","Выполнить произвольный код"},
{"en","Execute arbitrary code"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьПроизвольныйКод",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{62,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВычислитьPIDЭтогоСеанса",
{1,21,
{"ru","Вычислить PIDЭтого сеанса"},
{"en","Get PID"},
{"am","መገለጫዎ PIDЭтого ስብሰባ"},
{"az","Hesablamaq PİDЭтого seans"},
{"bg","Изчисляване на PIDЭтого сесия"},
{"et","Arvutada PIDЭтого istungil"},
{"fr","Calculer PIDЭтого session"},
{"ka","გამოთვლა PIDЭтого სხდომა"},
{"de","Berechnen PIDЭтого Sitzung"},
{"hu","Számítsuk ki PIDЭтого ülés"},
{"it","Calcolare PIDЭтого sessione"},
{"lv","Aprēķināt PIDЭтого seansa"},
{"lt","Apskaičiuoti PIDЭтого diskusijos"},
{"mn","Тооцох PIDЭтого хуралдаан"},
{"pl","Obliczyć PIDЭтого sesji"},
{"ro","Pentru a calcula PIDЭтого sesiune"},
{"sl","Izračun PIDЭтого seje"},
{"es","Calcular PIDЭтого de la sesión"},
{"sv","Beräkna PIDЭтого session"},
{"tr","Hesaplamak PİDЭтого oturum"},
{"vi","Tính toán PID này"}
},
{1,21,
{"ru","Вычислить PIDЭтого сеанса"},
{"en","Get PID"},
{"am","መገለጫዎ PIDЭтого ስብሰባ"},
{"az","Hesablamaq PİDЭтого seans"},
{"bg","Изчисляване на PIDЭтого сесия"},
{"et","Arvutada PIDЭтого istungil"},
{"fr","Calculer PIDЭтого session"},
{"ka","გამოთვლა PIDЭтого სხდომა"},
{"de","Berechnen PIDЭтого Sitzung"},
{"hu","Számítsuk ki PIDЭтого ülés"},
{"it","Calcolare PIDЭтого sessione"},
{"lv","Aprēķināt PIDЭтого seansa"},
{"lt","Apskaičiuoti PIDЭтого diskusijos"},
{"mn","Тооцох PIDЭтого хуралдаан"},
{"pl","Obliczyć PIDЭтого sesji"},
{"ro","Pentru a calcula PIDЭтого sesiune"},
{"sl","Izračun PIDЭтого seje"},
{"es","Calcular PIDЭтого de la sesión"},
{"sv","Beräkna PIDЭтого session"},
{"tr","Hesaplamak PİDЭтого oturum"},
{"vi","Tính toán PID này"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВычислитьPIDЭтогоСеанса",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{63,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьНастройкиКлиент",
{1,2,
{"ru","Сохранить настройки клиент"},
{"en","Save settings client"}
},
{1,2,
{"ru","Сохранить настройки клиент"},
{"en","Save settings client"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СохранитьНастройкиКлиент",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{64,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьСтрокуВСписокБиблиотек",
{1,2,
{"ru","Добавить строку в список библиотек"},
{"en","Add line to libraries list"}
},
{1,2,
{"ru","Добавить строку в список библиотек"},
{"en","Add line to libraries list"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ДобавитьСтрокуВСписокБиблиотек",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{65,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ИсследовательФормы",
{1,21,
{"ru","Исследователь формы"},
{"en","Form explorer"},
{"am","ወደ researcher ነው ቅጽ"},
{"az","Tədqiqatçı formaları"},
{"bg","Изследовател форма"},
{"et","Teadlane vormi"},
{"fr","Le chercheur de la forme"},
{"ka","მკვლევარი არის ფორმა"},
{"de","Forscher Formen"},
{"hu","A kutató a forma"},
{"it","Ricercatore di forma"},
{"lv","Pētnieks formas"},
{"lt","Mokslininkė formos"},
{"mn","Тус судлаач нь хэлбэр"},
{"pl","Badacz formy"},
{"ro","Cercetător forme"},
{"sl","Raziskovalec je obrazca"},
{"es","El investigador del formulario"},
{"sv","Forskaren är den form"},
{"tr","Araştırmacı formu"},
{"vi","Các nhà nghiên cứu biểu mẫu"}
},
{1,21,
{"ru","Исследователь формы"},
{"en","Form explorer123"},
{"am","ወደ researcher ነው ቅጽ"},
{"az","Tədqiqatçı formaları"},
{"bg","Изследовател форма"},
{"et","Teadlane vormi"},
{"fr","Le chercheur de la forme"},
{"ka","მკვლევარი არის ფორმა"},
{"de","Forscher Formen"},
{"hu","A kutató a forma"},
{"it","Ricercatore di forma"},
{"lv","Pētnieks formas"},
{"lt","Mokslininkė formos"},
{"mn","Тус судлаач нь хэлбэр"},
{"pl","Badacz formy"},
{"ro","Cercetător forme"},
{"sl","Raziskovalec je obrazca"},
{"es","El investigador del formulario"},
{"sv","Forskaren är den form"},
{"tr","Araştırmacı formu"},
{"vi","Các nhà nghiên cứu biểu mẫu"}
},
{0,
{0,
{"B",1},0}
},
{0,69,16},
{4,0,
{0},"",-1,-1,1,0,""},"ИсследовательФормы",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{66,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПолучитьМакетПоТаблице",
{1,21,
{"ru","Получить макет по таблице"},
{"en","Get a table document from the table"},
{"am","ጋር የሚሰጡዋቸውን."},
{"az","Əldə susmaya görə cədvəl"},
{"bg","Получи макет на таблицата"},
{"et","Saada paigutus tabelis"},
{"fr","Obtenir une mise en page par tableau"},
{"ka","უნდა განლაგება მაგიდაზე"},
{"de","Erhalten Sie ein Layout per Tabelle"},
{"hu","Elrendezés az asztalon"},
{"it","Ottenere un layout di tabella"},
{"lv","Saņemt izkārtojums tabulā"},
{"lt","Gauti maketą lentelės"},
{"mn","Тулд зохион байгуулалт ширээн дээр"},
{"pl","Zobacz układ w tabeli"},
{"ro","Pentru a obține o machetă de tabel"},
{"sl","Za postavitev na mizo"},
{"es","Obtener el diseño de la tabla"},
{"sv","Att layouten på bordet"},
{"tr","Alın düzeni tablo"},
{"vi","Nhận khuôn in theo bảng"}
},
{1,21,
{"ru","Получить макет по таблице"},
{"en","Get a table document from the table"},
{"am","ጋር የሚሰጡዋቸውን."},
{"az","Əldə susmaya görə cədvəl"},
{"bg","Получи макет на таблицата"},
{"et","Saada paigutus tabelis"},
{"fr","Obtenir une mise en page par tableau"},
{"ka","უნდა განლაგება მაგიდაზე"},
{"de","Erhalten Sie ein Layout per Tabelle"},
{"hu","Elrendezés az asztalon"},
{"it","Ottenere un layout di tabella"},
{"lv","Saņemt izkārtojums tabulā"},
{"lt","Gauti maketą lentelės"},
{"mn","Тулд зохион байгуулалт ширээн дээр"},
{"pl","Zobacz układ w tabeli"},
{"ro","Pentru a obține o machetă de tabel"},
{"sl","Za postavitev na mizo"},
{"es","Obtener el diseño de la tabla"},
{"sv","Att layouten på bordet"},
{"tr","Alın düzeni tablo"},
{"vi","Nhận khuôn in theo bảng"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПолучитьМакетПоТаблице",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{67,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьСтрокуВСписокСловарейЗамен",
{1,21,
{"ru","Добавить"},
{"en","Add"},
{"am","ያክሉ"},
{"az","Əlavə etmək"},
{"bg","Добави"},
{"et","Lisa"},
{"fr","Ajouter"},
{"ka","დამატება"},
{"de","Hinzufügen"},
{"hu","Add"},
{"it","Aggiungere"},
{"lv","Pievienot"},
{"lt","Pridėti"},
{"mn","Нэмэх"},
{"pl","Dodać"},
{"ro","Adauga"},
{"sl","Dodaj"},
{"es","Agregar"},
{"sv","Lägg till"},
{"tr","Ekle"},
{"vi","Thêm"}
},
{1,2,
{"ru","Добавить строку в список словарей замен"},
{"en","Add string to dictionaries change list"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ДобавитьСтрокуВСписокСловарейЗамен",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{68,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОчиститьСгенерированныйСценарий",
{1,21,
{"ru","Очистить"},
{"en","Clear"},
{"am","አዳዲስ"},
{"az","Sil"},
{"bg","Изчисти"},
{"et","Selge"},
{"fr","Nettoyer"},
{"ka","სუფთა"},
{"de","Reinigen"},
{"hu","Tiszta"},
{"it","Pulire"},
{"lv","Skaidrs"},
{"lt","Išvalyti"},
{"mn","Цэвэр"},
{"pl","Wyczyścić"},
{"ro","Curata"},
{"sl","Čiščenje"},
{"es","Limpiar"},
{"sv","Ren"},
{"tr","Temizlemek"},
{"vi","Xóa"}
},
{1,2,
{"ru","Очистить сгенерированный сценарий"},
{"en","Clean generated script"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ОчиститьСгенерированныйСценарий",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{69,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПолучитьСостояниеТекущегоЭлементаФормы",
{1,21,
{"ru","Получить состояние текущего элемента формы"},
{"en","Get the state of the current form element"},
{"am","አሁን ቅድሚያ አሁን ቅጽ እንዳሏቸውም"},
{"az","Əldə vəziyyətinə cari vurun formaları"},
{"bg","Получаване на състоянието на текущия елемент на формуляра"},
{"et","Saada riigi praegust vormi elemendi"},
{"fr","Obtenir l'état actuel de l'élément de formulaire"},
{"ka","მიიღოს სტატუსი მიმდინარე ფორმის ელემენტი"},
{"de","Erhalten Sie den Status des aktuellen Elements aus der Form"},
{"hu","Megszerezni az állapot a jelenlegi formájában elem"},
{"it","Ottenere lo stato corrente di un elemento del modulo"},
{"lv","Saņemt stāvokli pašreizējā vienuma formas"},
{"lt","Gauti būklė dabartinio elemento formos"},
{"mn","Олж авах байдал нь одоогийн хэлбэр элемент"},
{"pl","Zobacz stan bieżącego elementu formularza"},
{"ro","Pentru a obține starea curentă a unui element de formular"},
{"sl","Pridobiti status trenutnega elementa obrazca"},
{"es","Obtener el estado actual de un elemento de formulario"},
{"sv","För att få status av det aktuella formuläret element"},
{"tr","Geçerli durumunu almak için bir form elemanı"},
{"vi","Nhận trạng thái phần tử hiện tại của biểu mẫu"}
},
{1,2,
{"ru","Получить изменения формы gherkin"},
{"en","To change the shape of the gherkin"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПолучитьСостояниеТекущегоЭлементаФормыКнопка",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{70,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПеревестиТекстНаДругойЯзык",
{1,21,
{"ru","Перевести"},
{"en","Translate"},
{"am","ቀጥል"},
{"az","Tərcümə"},
{"bg","Преведете"},
{"et","Tõlkida"},
{"fr","Traduire"},
{"ka","თარგმნა"},
{"de","Übersetzen"},
{"hu","Fordítás"},
{"it","Tradurre"},
{"lv","Tulkot"},
{"lt","Išversti"},
{"mn","Орчуулах"},
{"pl","Przetłumaczyć"},
{"ro","Traduce"},
{"sl","Prevajanje"},
{"es","Traducir"},
{"sv","Översätt"},
{"tr","Tercüme"},
{"vi","Dịch"}
},
{1,2,
{"ru","Перевести текст на другой язык"},
{"en","Translate text into another language"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПеревестиТекстНаДругойЯзык",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{73,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"РазвернутьВсеСтрокиДереваСлужебный",
{1,2,
{"ru","Развернуть все строки дерева служебный"},
{"en","Expand all line tree service"}
},
{1,2,
{"ru","Развернуть все строки дерева служебный"},
{"en","Expand all line tree service"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"РазвернутьВсеСтрокиДереваСлужебный",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{74,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СброситьПодключениеSikuliXСервера",
{1,2,
{"ru","Сбросить подключение"},
{"en","Reset SikuliX server connection"}
},
{1,2,
{"ru","Сбросить подключение SikuliX сервера"},
{"en","Reset connection SikuliX server"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СброситьПодключениеSikuliXСервера",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{75,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СвернутьДеревоДоШагов",
{1,2,
{"ru","Свернуть дерево до шагов"},
{"en","To collapse the tree up to the steps"}
},
{1,2,
{"ru","Свернуть дерево до шагов"},
{"en","To collapse the tree up to the steps"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СвернутьДеревоДоШагов",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{76,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСкрытьТаблоПеременных",
{1,2,
{"ru","Показать/Скрыть табло переменных"},
{"en","Show/Hide variable"}
},
{1,2,
{"ru","Показать скрыть табло переменных"},
{"en","Show hide scoreboard variables"}
},
{0,
{0,
{"B",1},0}
},
{0,87,24},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСкрытьТаблоПеременных",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{77,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОбновитьТаблоПеременных",
{1,2,
{"ru","Обновить табло переменных"},
{"en","Refresh variables"}
},
{1,2,
{"ru","Обновить табло переменных"},
{"en","Refresh variables"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ОбновитьТаблоПеременных",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{71,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОстановитьСценарии",
{1,2,
{"ru","Остановить"},
{"en","Stop"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,116,8},
{4,1,
{0,1cd7b762-ec6a-4e92-ac9a-1832be228ec3},"",-1,-1,1,0,""},"ОстановитьСценарии",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{72,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПерейтиКСтрокеСОшибкой",
{1,2,
{"ru","Перейти к строке с ошибкой"},
{"en","Go to next error"}
},
{1,2,
{"ru","Перейти к строке с ошибкой выполнения шага"},
{"en","Go to the line with the error step"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПерейтиКСтрокеСОшибкой",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{78,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыгрузитьНастройкиВФайл",
{1,2,
{"ru","Выгрузить настройки в файл..."},
{"en","Save settings to file"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыгрузитьНастройкиВФайл",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{79,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьНастройкиИзФайла",
{1,2,
{"ru","Загрузить настройки из файла..."},
{"en","Load settings from file"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗагрузитьНастройкиИзФайла",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{80,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗакрытьТаблоПеременных",
{1,2,
{"ru","Закрыть"},
{"en","Close"}
},
{1,2,
{"ru","Закрыть табло переменных"},
{"en","Close variables tab"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗакрытьТаблоПеременных",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{81,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьФормуГенератораСценариев",
{1,2,
{"ru","Генератор сценариев"},
{"en","Scripts generator"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ОткрытьФормуГенератораСценариев",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{82,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КаталогиСкриптовSikuliXПоУмолчанию",
{1,2,
{"ru","по умолчанию"},
{"en","by default"}
},
{1,2,
{"ru","Значение по умолчанию"},
{"en","Default value"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-8},"",-1,-1,1,0,""},"КаталогиСкриптовSikuliXПоУмолчанию",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ТестГолоса",
{1,2,
{"ru","Произнести"},
{"en","Speak text"}
},
{1,2,
{"ru","Тест голоса"},
{"en","Voice test"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ТестГолоса",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"УстановитьСервисныеУтилиты",
{1,2,
{"ru","Установить сервисные утилиты"},
{"en","Install service programs"}
},
{1,2,
{"ru","Утилиты позволяют подсвечитьвать указатель мыши, рисовать стрелки к элементам форм. Необходимы для большинства шагов SikuliX."},
{"en","Utilities allow you to highlight the mouse pointer, draw arrows to form elements. Required  for most SikuliX steps."}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"УстановитьСервисныеУтилиты",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьОпределениеШага",
{1,2,
{"ru","Открыть определение шага"},
{"en","Open step description"}
},
{1,2,
{"ru","Открыть определение шага"},
{"en","Open step description"}
},
{0,
{0,
{"B",1},0}
},
{0,73,8},
{4,0,
{0},"",-1,-1,1,0,""},"ОткрытьОпределениеШага",3,0,0,
{0,0},1,66,1,0,0,1},
{9,
{83,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗаполнитьТиповыеПрофилиПоиска",
{1,2,
{"ru","Заполнить типовые профили поиска"},
{"en","Create main scheme"}
},
{1,2,
{"ru","Заполнить типовые профили поиска"},
{"en","Create main scheme"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗаполнитьТиповыеПрофилиЦветов",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{84,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыделитьСтрокиСценария",
{1,2,
{"ru","Выделить как код встроенного языка"},
{"en","Highlight code like embedded language"}
},
{1,2,
{"ru","Выделить как код встроенного языка: |' код '|"},
{"en","Highlight code like embedded language: |' code '|"}
},
{0,
{0,
{"B",1},0}
},
{0,67,12},
{4,0,
{0},"",-1,-1,1,0,""},"ВыделитьСтрокиСценарияКакКодВстроенногоЯзыка",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{85,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомментироватьСтрокиСценария",
{1,2,
{"ru","Комментарий строки сценария"},
{"en","Comment lines of the script"}
},
{1,2,
{"ru","Комментарий строки сценария"},
{"en","Comment lines of the script"}
},
{0,
{0,
{"B",1},0}
},
{0,111,8},
{4,0,
{0},"",-1,-1,1,0,""},"КомментарийСтрокиСценария",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{86,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"УстановитьВнешнююКомпонентуДляСкриншотов",
{1,1,
{"ru","Установить внешнюю компоненту для скриншотов"}
},
{1,1,
{"ru","Установить внешнюю компоненту для скриншотов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"УстановитьВнешнююКомпонентуДляСкриншотов",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{87,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗадатьРазмерОкнаКлиентаТестирования",
{1,1,
{"ru","Задать размер окна клиента тестирования"}
},
{1,1,
{"ru","Задать размер окна клиента тестирования"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗадатьРазмерОкнаКлиентаТестирования",3,0,0,
{0,0},1,0,1,0,0,1}
},
{0,0},
{0,0},0,0}