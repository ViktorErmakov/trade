{4,
{49,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3,0},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0,0,0,
{49,0}
},"
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯВыполняюСкриптSikuliX(Парам01)"",""ЯВыполняюСкриптSikuliX"",""И я выполняю скрипт SikuliX """"ИмяСкрипта"""""",""Выполняет скрипт SikuliX. Скрипт сначала ищется в кталоге проекта, за тем в каталогах библиотек, затем в стандартных скриптах Vanessa-Automation."",""Прочее.SikuliX"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯОткрываюКартинкуВОсновномРедакторе(Парам01)"",""ЯОткрываюКартинкуВОсновномРедакторе"",""Дано я открываю картинку в основном редакторе """"ИмяКартинки"""""",""Вызывает команду системы. Будет открыто приложение, которое ассоциировано для данного типа файлов."",""Прочее.Открыть картинку"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаВТечениеСекунд(Парам01, Парам02)"",""ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаВТечениеСекунд"",""И я жду когда завершится процесс с ИД процесса """"PID"""" в течение 10 секунд"",""Ожидает завершение процесса по его PID."",""Прочее.Ожидание завершения процесса"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЖдуКогдаЗакроетсяTestClientВТечениеСекунд(Парам01,Парам02)"",""ЯЖдуКогдаЗакроетсяTestClientВТечениеСекунд"",""И я жду когда закроется TestClient """"ИмяПрофиля"""" в течение 10 секунд"",""Ожидает завершения сеанса тест клиента по имени его профиля."",""Прочее.Ожидание завершения процесса"");
	
	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Функция ИскатьСкриптSikuliXВКаталоге(КаталогДляПоиска,ИмяФайла)
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	Ванесса.НайтиФайлыКомандаСистемы(КаталогДляПоиска,СписокКаталогов,СписокФайлов,Истина);
	Для Каждого Элем Из СписокКаталогов Цикл
		Если НРег(Элем.Значение.Имя) = НРег(ИмяФайла) Тогда
			Возврат Элем.Значение.ПолноеИмя;
		КонецЕсли;	 
	КонецЦикла;	 
КонецФункции	 

&НаКлиенте
Функция ПолныйПутьКСкрипту(Знач ИмяСкрипта)
	Если Прав(ИмяСкрипта,7) <> "".sikuli"" Тогда
		ИмяСкрипта = ИмяСкрипта + "".sikuli"";
	КонецЕсли;	 
	
	//проверка, что передали полный путь
	Если Ванесса.ФайлСуществуетКомандаСистемы(ИмяСкрипта) Тогда
		Возврат ИмяСкрипта;
	КонецЕсли;	 
	
	//Поиск в каталоге проекта
	ПолныйПуть = ИскатьСкриптSikuliXВКаталоге(Ванесса.Объект.КаталогПроекта,ИмяСкрипта);
	Если ПолныйПуть <> Неопределено Тогда
		Возврат ПолныйПуть; 
	КонецЕсли;	 
	
	//Поиск в каталогах бибилотек
	Для Каждого Элем Из Ванесса.Объект.КаталогиБиблиотек Цикл
		ПутьДляПоиска = Элем.Значение;
		ПолныйПуть = ИскатьСкриптSikuliXВКаталоге(ПутьДляПоиска,ИмяСкрипта);
		Если ПолныйПуть <> Неопределено Тогда
			Возврат ПолныйПуть; 
		КонецЕсли;	 
	КонецЦикла;	 
	
	ПутьДляПоиска = Ванесса.ДополнитьСлешВПуть(Ванесса.Объект.КаталогИнструментов) + ""tools\Sikuli"";
	ПолныйПуть = ИскатьСкриптSikuliXВКаталоге(ПутьДляПоиска,ИмяСкрипта);
	Если ПолныйПуть <> Неопределено Тогда
		Возврат ПолныйПуть; 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
//И я выполняю скрипт SikuliX ""ИмяСкрипта""
//@ЯВыполняюСкриптSikuliX(Парам01)
Процедура ЯВыполняюСкриптSikuliX(ИмяСкрипта) Экспорт
	ПолныйПутьКСкрипту = ПолныйПутьКСкрипту(ИмяСкрипта);
	
	Если ПолныйПутьКСкрипту = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю(""Не найден SikuliX скрипт <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяСкрипта);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ОписаниеОшибки = """";
	Результат = Ванесса.ВыполнитьSikuliСкрипт(ПолныйПутьКСкрипту,-1,Истина,ОписаниеОшибки);
	Если Результат <> 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю(""Не удалось выполнить SukuliX скрипт <%1>."");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",ИмяСкрипта);
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 

	
КонецПроцедуры

&НаКлиенте
//Дано я открываю картинку в основном редакторе ""ОтчетAllure2""
//@ЯОткрываюКартинкуВОсновномРедакторе(Парам01)
Процедура ЯОткрываюКартинкуВОсновномРедакторе(ИмяКартинки) Экспорт
	Файл = Ванесса.ПолучитьФайлКартинки(ИмяКартинки);
	ПутьКФайлу = СтрЗаменить(Файл.ПолноеИмя,""\"",""/"");
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(ПутьКФайлу,0);
КонецПроцедуры

&НаКлиенте
//И я жду когда завершится процесс с ИД процесса ""PID"" в течение
//@ЯЖдуКогдаЗавершитсяПроцессСИДПроцесса(Парам01, Парам02)
Процедура ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаВТечениеСекунд(Парам01, Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	
	Если Ванесса.ЭтоLinux Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю(""Не реализовано."");
	КонецЕсли;
	
	PID = XMLСтрока(Парам01);
	Секунд = Парам02;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаВыполненияОбработчикаОжидания = ТекущаяДата();
	ПодключитьОбработчикОжидания(""ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаТик"", 1, Ложь);
	
КонецПроцедуры

&НаКлиенте
//И я жду когда закроется TestClient ""ПодготовкаОкружения"" в течение 10 секунд
//@ЯЖдуКогдаЗакроетсяTestClientВТечениеСекунд(Парам01,Парам02)
Процедура ЯЖдуКогдаЗакроетсяTestClientВТечениеСекунд(ИмяTestClient,Парам02) Экспорт
	СвойстваTestClient = Ванесса.ПолучитьДанныеКлиентаТестирования(ИмяTestClient);
	
	Если Ванесса.ЭтоLinux Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю(""Не реализовано."");
	КонецЕсли;
	
	PID = ВычислитьTestClientPID(СвойстваTestClient.ПортЗапускаТестКлиента);
	
	Если PID = Неопределено Или ПустаяСтрока(PID) Тогда 
		Ванесса.ОбновитьДанныеКлиентовТестированияПослеОтключенияКлиентаТестирования();
		Возврат;
	КонецЕсли;
	
	Секунд = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(Парам02);
	ОбновитьДанныеКлиентовТестирования = Истина;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаВыполненияОбработчикаОжидания = ТекущаяДата();
	ПодключитьОбработчикОжидания(""ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаТик"", 1, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаТик()
	
	ИмяОбработчика = ""ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаТик"";
	
	Команда = ""TaskList /FI """"PID EQ %1"""""";
	Команда = СтрЗаменить(Команда,""%1"",PID);
	ПотокВывода = Ванесса.ВыполнитьКомандуСПотокомВывода(Команда);
	
	Если Найти(ПотокВывода, ""INFO: No tasks are running which match the specified criteria."") > 0 Тогда
		Если ОбновитьДанныеКлиентовТестирования Тогда 
			Ванесса.ОбновитьДанныеКлиентовТестированияПослеОтключенияКлиентаТестирования();
		КонецЕсли;
		
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;
	
	Если ТекущаяДата() > (ДатаНачалаВыполненияОбработчикаОжидания + Секунд) Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = ""Ожидали, что процесс с ИД <%1> будет завершен в течение <%2> секунд."";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",PID);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",Секунд);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВычислитьTestClientPID(TPort)
	
	Команда = ""wmic path win32_process get ProcessID, CommandLine /format:csv"";
	ПотокВывода = Ванесса.ВыполнитьКомандуСПотокомВывода(Команда, КодировкаТекста.UTF16);
	
	Для Счетчик = 1 По СтрЧислоСтрок(ПотокВывода) Цикл
		ТекСтрока = СтрПолучитьСтроку(ПотокВывода, Счетчик);
		Стр = ""-TPort %1"";
		Стр = СтрЗаменить(Стр,""%1"",XMLСтрока(TPort));
		Если Найти(ТекСтрока, Стр) > 0 Тогда 
			Направление = Вычислить(""НаправлениеПоиска.СКонца"");
			Позиция = Вычислить(""СтрНайти(ТекСтрока, """","""", Направление)"");
			Возврат Сред(ТекСтрока, Позиция + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


",
{4,5,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"PID",
{1,1,
{"ru","PID"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"Секунд",
{1,1,
{"ru","Секунд"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ДатаНачалаВыполненияОбработчикаОжидания",
{1,1,
{"ru","Дата начала выполнения обработчика ожидания"}
},
{"Pattern",
{"D"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ОбновитьДанныеКлиентовТестирования",
{1,1,
{"ru","Обновить данные клиентов тестирования"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}