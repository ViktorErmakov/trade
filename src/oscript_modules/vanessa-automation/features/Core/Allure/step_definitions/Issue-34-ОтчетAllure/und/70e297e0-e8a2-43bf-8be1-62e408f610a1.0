{4,
{49,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3,0},0,"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0,0,0,
{49,0}
},"//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить(""Снипет"",Снипет);
	Структура.Вставить(""ИмяПроцедуры"",ИмяПроцедуры);
	Структура.Вставить(""ИмяПроцедуры"",ИмяПроцедуры);
	Структура.Вставить(""ПредставлениеТеста"",ПредставлениеТеста);
	Структура.Вставить(""Транзакция"",Транзакция);
	Структура.Вставить(""Параметр"",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,""ВКаталогеАллюрПоявилсяХотяБыОдинСкриншот()"",""ВКаталогеАллюрПоявилсяХотяБыОдинСкриншот"",""И в каталоге аллюр появился хотя бы один скриншот"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВПолеКаталогОтчетаАллюрЯУказываюПутьКОтносительномуКаталогу(Парам01)"",""ВПолеКаталогОтчетаАллюрЯУказываюПутьКОтносительномуКаталогу"",""И     в поле каталог отчета аллюр я указываю путь к относительному каталогу """"tools\Allure"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВПолеКаталогОтносительноКоторогоНадоСтроитьИерархиюЯВвожуПутьККаталогуFeatures()"",""ВПолеКаталогОтносительноКоторогоНадоСтроитьИерархиюЯВвожуПутьККаталогуFeatures"",""И в поле каталог относительно которого надо строить иерархию я ввожу путь к каталогу features"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВКаталогеАллюрПоявилсяФайлXml(Парам01)"",""ВКаталогеАллюрПоявилсяФайлXml"",""И в каталоге аллюр появился 1 файл xml"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВКаталогеАллюрПоявилсяФайлjson(Парам01)"",""ВКаталогеАллюрПоявилсяФайлjson"",""И в каталоге аллюр появился 1 файл json"","""","""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И     в поле каталог отчета аллюр я указываю путь к относительному каталогу ""tools\Allure""
//@ВПолеКаталогОтчетаАллюрЯУказываюПутьКОтносительномуКаталогу(Парам01)
Процедура ВПолеКаталогОтчетаАллюрЯУказываюПутьКОтносительномуКаталогу(ЧастьПути) Экспорт
	Каталог = Ванесса.Объект.КаталогИнструментов + ""\"" + ЧастьПути;
	Контекст.Вставить(""КаталогAllure"",Каталог);
	
	Если НЕ Ванесса.ФайлСуществуетКомандаСистемы(Каталог) Тогда
		Ванесса.СоздатьКаталогКомандаСистемы(Каталог);
	Иначе
		Ванесса.УдалитьКаталогКомандаСистемы(Каталог);
		Ванесса.Sleep(1);
		Ванесса.СоздатьКаталогКомандаСистемы(Каталог);
	КонецЕсли;	 
	
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(""КаталогВыгрузкиAllure"",Истина);
	Поле.ВвестиТекст(Каталог);
	
	//Ванесса.Шаг(""И В открытой форме в поле с именем """"КаталогOutputAllure"""" я ввожу текст """""" + Каталог + """""""");
КонецПроцедуры


&НаКлиенте
//И в каталоге аллюр появился хотя бы один скриншот
//@ВКаталогеАллюрПоявилсяХотяБыОдинСкриншот()
Процедура ВКаталогеАллюрПоявилсяХотяБыОдинСкриншот() Экспорт
КонецПроцедуры

//окончание текста модуля

&НаКлиенте
//И в каталоге аллюр появился 1 файл xml
//@ВКаталогеАллюрПоявилсяФайлXml(Парам01)
Процедура ВКаталогеАллюрПоявилсяФайлXml(ДолжноБытьФайлов) Экспорт
	КолФайлов = 0;
	БылФайлAllure = Ложь;
	
	МасссивНайденныхФайлов = Новый Массив;
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	Ванесса.НайтиФайлыКомандаСистемы(Контекст.КаталогAllure,СписокКаталогов,СписокФайлов,Истина);
	Для Каждого ЭлемФайл Из СписокФайлов Цикл
		ПолноеИмя = ЭлемФайл.Значение.ПолноеИмя;
		МасссивНайденныхФайлов.Добавить(ПолноеИмя);
		
		Если Найти(ПолноеИмя,"".xml"") > 0 Тогда
			Контекст.Вставить(""НайденноеИмяФайлаАллюр"",ПолноеИмя);
			БылФайлAllure = Истина;
			КолФайлов = КолФайлов + 1;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Не БылФайлAllure Тогда
		ТекстСообщения = ""В каталоге %1 не найдено ни одного файла xml."";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Контекст.КаталогAllure);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	Если КолФайлов <> ДолжноБытьФайлов Тогда
		ТекстСообщения = ""Найдено %1, а должно быть %2 файлов"";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",КолФайлов);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ДолжноБытьФайлов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Контекст.Вставить(""МасссивНайденныхФайлов"",МасссивНайденныхФайлов);
КонецПроцедуры

&НаКлиенте
//И в каталоге аллюр появился 1 файл json
//@ВКаталогеАллюрПоявилсяФайлjson(Парам01)
Процедура ВКаталогеАллюрПоявилсяФайлjson(ДолжноБытьФайлов) Экспорт
	КолФайлов = 0;
	БылФайлAllure = Ложь;
	
	МасссивНайденныхФайлов = Новый Массив;
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	Ванесса.НайтиФайлыКомандаСистемы(Контекст.КаталогAllure,СписокКаталогов,СписокФайлов,Истина);
	Для Каждого ЭлемФайл Из СписокФайлов Цикл
		ПолноеИмя = ЭлемФайл.Значение.ПолноеИмя;
		МасссивНайденныхФайлов.Добавить(ПолноеИмя);
		
		Если Найти(ПолноеИмя,"".json"") > 0 Тогда
			Контекст.Вставить(""НайденноеИмяФайлаjson"",ПолноеИмя);
			БылФайлAllure = Истина;
			КолФайлов = КолФайлов + 1;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Не БылФайлAllure Тогда
		ТекстСообщения = ""В каталоге %1 не найдено ни одного файла json."";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",Контекст.КаталогAllure);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	Если КолФайлов <> ДолжноБытьФайлов Тогда
		ТекстСообщения = ""Найдено %1, а должно быть %2 файлов"";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%1"",КолФайлов);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,""%2"",ДолжноБытьФайлов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Контекст.Вставить(""МасссивНайденныхФайлов"",МасссивНайденныхФайлов);
КонецПроцедуры

&НаКлиенте
//И в поле каталог относительно которого надо строить иерархию я ввожу путь к каталогу features
//@ВПолеКаталогОтносительноКоторогоНадоСтроитьИерархиюЯВвожуПутьККаталогуFeatures()
Процедура ВПолеКаталогОтносительноКоторогоНадоСтроитьИерархиюЯВвожуПутьККаталогуFeatures() Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(""КаталогОтносительноКоторогоНадоСтроитьИерархию"",Истина);
	ЭлементФормы.ВвестиТекст(Ванесса.ДополнитьСлешВПуть(Ванесса.Объект.КаталогИнструментов) + ""features\"");
КонецПроцедуры
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}